global proc shelf_Long_Winter () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Wrap: Select object(s), and then an influence object to wrap them with" 
        -enableBackground 0
        -align "center" 
        -label "Wrap" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "wrap.png" 
        -image1 "wrap.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateWrap" 
        -sourceType "mel" 
        -doubleClickCommand "CreateWrapOptions" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Lattice: Create a lattice for the selected object(s)" 
        -enableBackground 0
        -align "center" 
        -label "Lattice" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "lattice.png" 
        -image1 "lattice.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateLattice" 
        -sourceType "mel" 
        -doubleClickCommand "CreateLatticeOptions" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Blend Shape: Select two or more objects to blend between; Select the base shape last" 
        -enableBackground 0
        -align "center" 
        -label "Blend Shape" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "blendShape.png" 
        -image1 "blendShape.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateBlendShape" 
        -sourceType "mel" 
        -doubleClickCommand "CreateBlendShapeOptions" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Sculpt a geometry object" 
        -enableBackground 0
        -align "center" 
        -label "Sculpt Geometry Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "putty.png" 
        -image1 "putty.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SculptGeometryTool" 
        -sourceType "mel" 
        -doubleClickCommand "SculptGeometryToolOptions" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paint weights on smooth bound skins." 
        -enableBackground 0
        -align "center" 
        -label "Paint Skin Weights Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "paintSkinWeights.png" 
        -image1 "paintSkinWeights.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintSkinWeightsTool" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Change weights for selected blend shape" 
        -enableBackground 0
        -align "center" 
        -label "Paint Blend Shape Weights Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "paintBlendshape.png" 
        -image1 "paintBlendshape.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintBlendShapeWeightsTool" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Click to place joint. Click on existing joint to add to skeleton. Click-Drag to position joint." 
        -enableBackground 0
        -align "center" 
        -label "Joint Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "kinJoint.png" 
        -image1 "kinJoint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "JointTool" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "doCreatePointConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\npointConstraint -mo -weight 1;\n// Result: joint17_pointConstraint1 // \ndoCreateOrientConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\norientConstraint -mo -weight 1;\n// Result: joint17_orientConstraint1 // \ndoCreateScaleConstraintArgList 1 { \"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\nscaleConstraint -mo -weight 1;\n// Result: joint17_scaleConstraint1 // " 
        -enableBackground 0
        -align "center" 
        -label "doCreatePointConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "doCreatePointConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\npointConstraint -mo -weight 1;\n// Result: joint17_pointConstraint1 // \ndoCreateOrientConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\norientConstraint -mo -weight 1;\n// Result: joint17_orientConstraint1 // \ndoCreateScaleConstraintArgList 1 { \"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\nscaleConstraint -mo -weight 1;\n// Result: joint17_scaleConstraint1 // " 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select surface(s) and a joint." 
        -enableBackground 0
        -align "center" 
        -label "Smooth Bind" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "smoothSkin.png" 
        -image1 "smoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SmoothBindSkin" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select skinned surface(s) and influence transform(s)." 
        -enableBackground 0
        -align "center" 
        -label "Add Influence" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "addWrapInfluence.png" 
        -image1 "addWrapInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "AddInfluence" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select surface(s) first and then the influence transform." 
        -enableBackground 0
        -align "center" 
        -label "Remove Influence" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "removeWrapInfluence.png" 
        -image1 "removeWrapInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RemoveInfluence" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -align "center" 
        -label "Freeze Transformations" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "FT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformations" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -align "center" 
        -label "Center Pivot" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "CP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CenterPivot" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete construction history on the selected object(s)" 
        -enableBackground 0
        -align "center" 
        -label "History" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Hist" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeleteHistory" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Move selected vertices to smooth shape" 
        -enableBackground 0
        -align "center" 
        -label "Average Vertices" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polyAverageVertex.png" 
        -image1 "polyAverageVertex.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "performPolyAverageVertex 0" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paint paintable attributes" 
        -enableBackground 0
        -align "center" 
        -label "Paint Attributes Tool" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "artAttr.png" 
        -image1 "artAttr.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintAttrTool" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a locator object on the grid" 
        -enableBackground 0
        -align "center" 
        -label "Locator" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateLocator" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -align "center" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/Users/Andy/Documents/maya/scripts/AnimSchoolPickerPC/2013_64bit\\AnimSchoolLogoIcon.png" 
        -image1 "C:/Users/Andy/Documents/maya/scripts/AnimSchoolPickerPC/2013_64bit\\AnimSchoolLogoIcon.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "loadPlugin -qt \"C:/Users/Andy/Documents/maya/scripts/AnimSchoolPickerPC/2013_64bit/AnimSchoolPicker.mll\";\nAnimSchoolPicker();" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "AdvancedSkeleton4" 
        -enableBackground 0
        -align "center" 
        -label "AdvancedSkeleton4" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4Files/icons/AS4.png" 
        -image1 "C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4Files/icons/AS4.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4.mel\";AdvancedSkeleton4;" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Selector:biped" 
        -enableBackground 0
        -align "center" 
        -label "Selector:biped" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4Files/icons/asBiped.png" 
        -image1 "C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4Files/icons/asBiped.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"C:/Users/Andy/Documents/maya/scripts//AdvancedSkeleton4Files/Selector/biped.mel\";asSelectorbiped;" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Selector:face" 
        -enableBackground 0
        -align "center" 
        -label "Selector:face" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4Files/icons/asFace.png" 
        -image1 "C:/Users/Andy/Documents/maya/scripts/AdvancedSkeleton4Files/icons/asFace.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"C:/Users/Andy/Documents/maya/scripts//AdvancedSkeleton4Files/Selector/face.mel\";asSelectorface;" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "//CopyRight Dustin Nelson 2010-2014. Please do not distribute\n//http://www.creativecrash.com/maya/script/-rapid-rig-modular-procedural-auto-rig-for-maya\n//Script for Modular Character Rigging.\n//VERSION 1.4.4\n//JULY 23, 2014\n//FILE IS NOT INTENDED TO BE HARMFUL, HOWEVER USE AT YOUR OWN RISK\n/*/////////////////////////////////////////////////////////////////////////////\n// \n//\tINSTRUCTIONS:\n//\t1. INSTALLATION\n//\tTYPE IN THE FOLLOWING COMMAND IN MAYA TO GET YOUR SCRIPT DIRECTORY:\n//\n//\tinternalVar -userScriptDir;\n//\n//\t2. PUT THE RapidRig_Modular.mel file in that directoy.\n//\n//\t3. START UP MAYA, ENTER THE FOLLOWING COMMAND INTO\n//\tTHE COMMAND LINE OR THE SCRIPT EDITOR:\n//\n//\tRapidRig_Modular\n//\n//\t4. TO HAVE EASY ACCESS TO SCRIPT, CREATE A SHELF BUTTON             \n//\tWITH ONLY THAT COMMAND. EVERY TIME YOU HIT THE BUTTON,              \n//\tTHE RAPID RIGrp INTERFACE WILL POP UP. HAPPY ANIMATING!               \n//                                                                      \n////////////////////////////////////////////////////////////////////////*/\n\nglobal proc int RRM_CheckName(string $validate)\n{\n\tstring $nameMatch = `match \"^[a-zA-Z][0-9a-zA-Z_]*$\" $validate`;\n\tint $goodMatch = ! `strcmp $nameMatch $validate`;\n\t\n\treturn $goodMatch;\n}\n\nglobal proc RRM_CreateProxyModuleProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\n\t//CREATE PROXY BASE\n\tcircle -n RRM_Base -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\tduplicate -rr -n RRM_BaseB;\n\trotate 90 0 0 RRM_BaseB;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_BaseB;\n\tduplicate -rr -n RRM_BaseCtrl;\n\trotate 0 90 0 RRM_BaseCtrl;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_BaseCtrl;\n\t\n\tspaceLocator -n RRM_BaseD;\n\tsetAttr \"RRM_BaseDShape.localScaleZ\" .25;\n\tsetAttr \"RRM_BaseDShape.localScaleX\" .25;\n\tsetAttr \"RRM_BaseDShape.localScaleY\" .25;\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_BaseDShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_BaseDShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_BaseDShape.localScaleY\" .0025;\n\t}\n\t\t\n\n\tparent -r -s RRM_BaseBShape RRM_BaseCtrlShape RRM_BaseDShape RRM_Base;\n\tdelete RRM_BaseB RRM_BaseCtrl RRM_BaseD;\n\tselect RRM_Base;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_Base;\n\tdelete -ch RRM_Base;\n\t\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.core;\n\t\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.ext;\n\n\t//ADD CLONE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.modName;\n\t\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_Base.v\";\n\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\tchangeLinearUnit $crntUnit;\n}\n\nglobal proc RRM_CreateProxyBaseUpProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\n\tcircle -n RRM_BaseUp -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcircle -n RRM_BaseUpB -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcircle -n RRM_BaseUpCtrl -nr 0 0 1 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcurve -n RRM_BaseUpD -d 1 -p 0 -1 0 -p 0 3 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename RRM_BaseUpDShape;\n\tcurve -n RRM_BaseUpE -d 1 -p 0 2.5 0.5 -p 0 3 0 -p 0 2.5 -0.5 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;\n\trename RRM_BaseUpEShape;\n\tcurve -n RRM_BaseUpF -d 1 -p -0.5 2.5 0 -p 0 3 0 -p 0.5 2.5 0 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;\n\trename RRM_BaseUpFShape;\n\tcircle -n RRM_BaseUpGrp -c 0 2.5 0 -nr 0 1 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tpickWalk -d down;\n\trename RRM_BaseUpGShape;\n\t\n\tspaceLocator -n RRM_BaseUpH;\n\tsetAttr \"RRM_BaseUpHShape.localScaleZ\" .25;\n\tsetAttr \"RRM_BaseUpHShape.localScaleX\" .25;\n\tsetAttr \"RRM_BaseUpHShape.localScaleY\" .25;\t\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_BaseUpHShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_BaseUpHShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_BaseUpHShape.localScaleY\" .0025;\n\t}\n\t\n\tparent -r -s RRM_BaseUpBShape RRM_BaseUpCtrlShape RRM_BaseUpDShape RRM_BaseUpEShape RRM_BaseUpFShape RRM_BaseUpGShape RRM_BaseUpHShape RRM_BaseUp;\n\tdelete RRM_BaseUpB RRM_BaseUpCtrl RRM_BaseUpD RRM_BaseUpE RRM_BaseUpF RRM_BaseUpGrp RRM_BaseUpH;\n\tselect RRM_BaseUp;\n\tscale -r 0.25 0.25 0.25 RRM_BaseUp;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_BaseUp;\n\t\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.core;\n\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.ext;\n\t\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.modName;\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_BaseUp.v\";\n\n\n}\n\nglobal proc RRM_CreateProxyRootProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\t\n\t//CREATE PROXY BASE\n\tRRM_CreateProxyModuleProxy($crntUnit);\n\trename RRM_Base RRM_ROOT;\n\t\n\tcurve -n RRM_ROOTE -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p -0.5 0.5 0.5\n\t-p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5\n\t-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;\n\tpickWalk -d down;\n\trename RRM_ROOTEShape;\n\tparent -r -s RRM_ROOTEShape RRM_ROOT;\n\tdelete RRM_ROOTE;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_ROOT;\n\tdelete -ch RRM_ROOT;\n\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_ROOT.v\";\n\n\n}\n\nglobal proc RRM_CreateProxyCOG_C(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\n\tcircle -n RRM_OuterCOG_Ctrl -r 6 -nr 0 1 0;\n\tcircle -n RRM_InnerCOG_Ctrl -r 3 -nr 0 1 0;\n\trotate -r -os 0 -18 0 RRM_InnerCOG_Ctrl;\n\tcurve -n RRM_XConnectorCOG_Ctrl -d 1 -p 6 0 0 -p -6 0 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename RRM_XConnectorCOG_CtrlShape;\n\tcurve -n RRM_YConnectorCOG_Ctrl -d 1 -p 0 0 -6 -p 0 0 6 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename RRM_YConnectorCOG_CtrlShape;\n\t\n\t$transforms = `ls RRM_InnerCOG_Ctrl RRM_XConnectorCOG_Ctrl RRM_YConnectorCOG_Ctrl`;\n\tpickWalk -d down;\n\t$curves = `ls -sl`;\n\tparent -r -s $curves RRM_OuterCOG_Ctrl;\n\tdelete $transforms;\n\trename RRM_OuterCOG_Ctrl RRM_COG;\n\t\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_COG.v\";\n\t\n\n\tsetAttr -l 1 -k 0 \"RRM_COG.v\";\n\n\n}\n\n\nglobal proc RRM_CreateProxyParentProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\t\n\t//CREATE PROXY PARENT\n\tcurve -n RRM_Parent -d 1 -p 0.5 1 0.5 -p 0.5 1 -0.5 -p -0.5 1 -0.5 -p -0.5 1 0.5 -p -0.5 0.1 0.5 -p 0.5 0.1 0.5 -p 0.5 1 0.5 -p -0.5 1 0.5\n\t-p -0.5 1 -0.5 -p -0.5 0.1 -0.5 -p 0.5 0.1 -0.5 -p 0.5 1 -0.5 -p 0.5 1 0.5 -p 0.5 0.1 0.5 -p 0.5 0.1 -0.5 -p -0.5 0.1 -0.5 -p -0.5 0.1 0.5\n\t-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;\n\tpickWalk -d down;\n\trename RRM_ParentShape;\n\tscale -r 0.8 1.25 0.8 RRM_Parent;\n\tmakeIdentity -apply true -s 1 RRM_Parent;\n\t\n\tcurve -n RRM_ParentB -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p -0.5 0.5 0.5\n\t-p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5\n\t-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;\n\tpickWalk -d down;\n\trename RRM_ParentBShape;\n\tscale -r 0.25 0.75 0.25 RRM_Parent;\n\tscale -r 0.5 0.5 0.5 RRM_ParentB;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_Parent RRM_ParentB;\t\t\n\n\tspaceLocator -n RRM_ParentCtrl;\n\tsetAttr \"RRM_ParentCtrlShape.localScaleZ\" .25;\n\tsetAttr \"RRM_ParentCtrlShape.localScaleX\" .25;\n\tsetAttr \"RRM_ParentCtrlShape.localScaleY\" .25;\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_ParentCtrlShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_ParentCtrlShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_ParentCtrlShape.localScaleY\" .0025;\n\t}\n\t\n\tparent -r -s RRM_ParentBShape RRM_ParentCtrlShape RRM_Parent;\n\tdelete RRM_ParentB RRM_ParentCtrl;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_Parent;\n\tdelete -ch RRM_Parent;\n\n\t//ADD PARENT ATTRIBUTE\n\taddAttr -ln \"parent\"  -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.parent;\n\n\taddAttr -ln \"attachNode\"  -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.attachNode;\n\t\n\t//ADD PINNED ATTRIBUTE\n\taddAttr -ln \"pinned\"  -at bool RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.pinned;\n\tsetAttr RRM_Parent.pinned 0;\n\tsetAttr -lock true RRM_Parent.pinned;\n\t\n\t//ADD CONNECTOR VIZ ATTRIBUTE\n\taddAttr -ln \"connectors\"  -at bool RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.connectors;\n\tsetAttr RRM_Parent.connectors 1;\n\t\n\t//SET SO CAN'T ATTACH TO PARENT OBJECT\n\taddAttr -ln \"noAttach\"  -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.noAttach;\n\t\n\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.core;\n\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.ext;\n\n\t//ADD CLONE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.modName;\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_Parent.v\";\n\n\n}\n\nglobal proc RRM_CreateProxyEndProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\t\n\t//CREATE PROXY END\n\tcircle -n RRM_End -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\tduplicate -rr -n RRM_EndB;\n\trotate 90 0 0;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\tduplicate -rr -n RRM_EndCtrl;\n\trotate 0 90 0 ;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\tcurve -n RRM_EndD -d 1 -p 0.375 -0.25 -0.375 -p 0 0.5 0 -p 0.375 -0.25 0.375 -p 0.375 -0.25 -0.375 -p -0.375 -0.25 -0.375 -p 0 0.5 0 -p -0.375 -0.25 0.375\n\t-p -0.375 -0.25 -0.375 -p -0.375 -0.25 0.375 -p 0.375 -0.25 0.375 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 ;\n\tpickWalk -d down;\n\trename RRM_EndDShape;\n\n\tspaceLocator -n RRM_EndE;\n\tsetAttr \"RRM_EndEShape.localScaleZ\" .25;\n\tsetAttr \"RRM_EndEShape.localScaleX\" .25;\n\tsetAttr \"RRM_EndEShape.localScaleY\" .25;\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_EndEShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_EndEShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_EndEShape.localScaleY\" .0025;\n\t}\n\t\n\tparent -r -s RRM_EndBShape RRM_EndCtrlShape RRM_EndDShape RRM_EndEShape RRM_End;\n\tdelete RRM_EndB RRM_EndCtrl RRM_EndD RRM_EndE;\n\tselect RRM_End;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_End;\n\tdelete -ch RRM_End;\n\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.core;\n\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.ext;\n\n\t//ADD CLONE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.modName;\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_End.v\";\n\n\n}\n\n\nglobal proc RRM_ProxyLockNodes(string $modNodes[])\n{\n\tlockNode $modNodes;\n}\n\nglobal proc RRM_ProxyLimits(string $xforms[])\n{\n\tfor ($each in $xforms)\n\t{\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 $each;\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 $each;\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 $each;\n\t}\n}\n\t\n\nglobal proc RRM_ProxyConnectors(string $modName, string $prfx, string $node1, string $node2)\n{\n\n\n\t$selection = `ls -sl`;\n\t$node1Loc = `xform -q -ws -rp $node1`;\n\t$node2Loc = `xform -q -ws -rp $node2`;\n\t\n\tif ($prfx == \"r_\")\n\t{\n\t\tif (`objExists ($node1 + \".pair\")`&&`objExists ($node2 + \".parent\")`)\n\t\t{\n\t\t\t$rightAttachPoint = `getAttr ($node1 + \".opposite\")`;\n\t\t\t$node1 = (\"RRM_\" + $rightAttachPoint);\n\t\t\t$node1Loc = `xform -q -ws -rp $node1`;\n\t\t}\n\t\telse if (`objExists ($node1 + \".pair\")`&&`objExists ($node2 + \".modType\")`)\n\t\t{\n\t\t\t$rightAttachPoint = `getAttr ($node1 + \".opposite\")`;\n\t\t\t$node1 = (\"RRM_\" + $rightAttachPoint);\n\t\t\t$node1Loc = `xform -q -ws -rp $node1`;\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t//NEW\n\tcurve -n ($node1 + \"_\" + $node2 + \"Ctrl\") -d 1 -p 0 0 0 -p 1 0 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename  ($node1 + \"_\" + $node2 + \"CtrlShape\");\n\tspaceLocator -n ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\tspaceLocator -n ($node1 + \"_\" + $node2 + \"_TargetLctr\");\n\tparent ($node1 + \"_\" + $node2 + \"_TargetLctr\") ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\tpointConstraint $node1 ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $node2 ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\tpointConstraint $node2 ($node1 + \"_\" + $node2 + \"_TargetLctr\");\n\tconnectAttr -f ($node1 + \"_\" + $node2 + \"_AimLctr.translate\") ($node1 + \"_\" + $node2 + \"Ctrl.translate\");\n\tconnectAttr -f ($node1 + \"_\" + $node2 + \"_AimLctr.rotate\") ($node1 + \"_\" + $node2 + \"Ctrl.rotate\");\n\tconnectAttr -f ($node1 + \"_\" + $node2 + \"_TargetLctr.tx\") ($node1 + \"_\" + $node2 + \"Ctrl.sx\");\n\tsetAttr ($node1 + \"_\" + $node2 + \"_AimLctr.v\") 0;\n\t\n\t//ONLY TEMPLATE IF IT IS NOT A PARENT NODE\n\tif (!`objExists ($node2 + \".parent\")` && !`objExists ($node2 + \".modType\")`)\n\t{\n\t\tsetAttr ($node1 + \"_\" + $node2 + \"Ctrl.template\") 1;\n\t}\n\telse\n\t{\n\t\tsetAttr ($node1 + \"_\" + $node2 + \"Ctrl.overrideEnabled\") 1;\n\t\tsetAttr ($node1 + \"_\" + $node2 + \"Ctrl.overrideColor\") 6;\n\t}\n\t\n\tif (!`objExists (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\")`)\n\t{\n\t\tgroup -em -n (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\"); xform -os -piv 0 0 0;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp.inheritsTransform\") 0;\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\") (\"RRM_\" + $prfx + $modName);\n\t\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t{\n\t\t\tconnectAttr -f  (\"RRM_\" + $prfx + $modName + \"_Parent.connectors\") (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f  (\"RRM_\" + $prfx + $modName + \"_Aux.connectors\") (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp.v\");\n\t\t}\n\t}\n\tparent ($node1 + \"_\" + $node2 + \"Ctrl\") ($node1 + \"_\" + $node2 + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\");\n\tsetAttr (($node1 + \"_\" + $node2 + \"_AimLctr.scale\"), 1,1,1);\n\t\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.tx\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.ty\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.tz\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.rx\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.ry\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.rz\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.sx\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.sy\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.sz\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.v\");\t\n\t\n\t\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\tselect $selection;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//changeLinearUnit $crntUnit;\t\n}\n\t\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////MAIN & ROOT/////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyMainProxy(int $checkTemplate)\n{\n\n\t\n\tif (`objExists \"RRM_MAIN\"`)\n\t{\n\t\tstring $selectControl = `confirmDialog\n\t\t\t-title \"A Proxy Rig Already Exists In This Scene\"\n\t\t\t-message \"You must either delete the existing Proxy rig or RRM_Generate a final rig before creating a new Proxy rig.\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-icon \"information\"`;\n\t}\n\telse\n\t{\n\t\t//SET UNITS TO CENTIMETERS\n\t\tstring $crntUnit = `currentUnit -query -linear`;\n\t\t//if ($crntUnit != \"cm\")\n\t\t//{\n\t\t//\t//changeLinearUnit \"centimeter\"\n\t\t//}\n\t\t\n\t\tcurve -n RRM_MAIN -d 1 -p 0 0 11 -p 2 0 9 -p 2 0 7 -p 7 0 7 -p 7 0 2 -p 9 0 2 -p 10 0 0 -p 9 0 -2 -p 7 0 -2 -p 7 0 -7 -p 2 0 -7 -p 2 0 -9 -p 0 0 -10 -p -2 0 -9 -p -2 0 -7 -p -7 0 -7 -p -7 0 -2 -p -9 0 -2 -p -10 0 0 -p -9 0 2 -p -7 0 2 -p -7 0 7 -p -2 0 7 -p -2 0 9 -p 0 0 11 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 ;\n\t\tpickWalk -d down;\n\t\trename RRM_MAINShape;\n\t\t\n\t\tcurve -n RRM_MAIN2 -d 1 -p 6.5 0 6.5 -p 6.5 0 -6.5 -p -6.5 0 -6.5 -p -6.5 0 6.5 -p 6.5 0 6.5 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\tpickWalk -d down;\n\t\trename RRM_MAINShape2;\n\t\tparent -r -s RRM_MAINShape2 RRM_MAIN;\n\t\tdelete RRM_MAIN2;\n\t\tdelete -ch RRM_MAIN;\n\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.tx\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.ty\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.tz\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.rx\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.ry\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.rz\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.v\";\n    \t\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 RRM_MAIN;\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 RRM_MAIN;\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 RRM_MAIN;\n\t\t\n\t\tRRM_CreateProxyRootProxy($crntUnit);\n    \t\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 RRM_ROOT;\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 RRM_ROOT;\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 RRM_ROOT;\n\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_ROOT.v\";\n    \t\n\t\tsetAttr \"RRM_ROOT.overrideEnabled\" 1;\n\t\tsetAttr \"RRM_ROOT.overrideColor\" 17;\n\t\t\n\t\tparent RRM_ROOT RRM_MAIN;\n    \t\n\t\taddAttr -ln \"core\" -dt \"string\" RRM_MAIN;\n\t\tsetAttr -e-keyable true RRM_MAIN.core;\n\t\tsetAttr -type \"string\" RRM_MAIN.core \"MAIN\";\n\t\tsetAttr -l true \"RRM_MAIN.core\";\t\n    \t\n\t\tsetAttr -type \"string\" RRM_ROOT.core \"ROOT\";\n\t\tsetAttr -l true \"RRM_ROOT.core\";\n\t\t\n\t\tRRM_CreateProxyCOG_C($crntUnit);\n\t\t//ADD CORE ATTRIBUTE\n\t\taddAttr -ln \"core\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.core;\n\t\t\n\t\t//ADD EXT ATTRIBUTE\n\t\taddAttr -ln \"ext\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.ext;\n\t\n\t\t//ADD CLONE ATTRIBUTE\n\t\taddAttr -ln \"clone\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.clone;\n\t\n\t\t//ADD MODNAME ATTRIBUTE\n\t\taddAttr -ln \"modName\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.modName;\n\n\t\tsetAttr -type \"string\" RRM_COG.core \"COG_Ctrl\";\n\t\tsetAttr -l true \"RRM_COG.core\";\n\n\t\tparent RRM_COG RRM_ROOT;\n\t\t\n\t\taddAttr -ln \"template_COG_Ctrl\"  -at bool  RRM_ROOT;\n\t\tsetAttr -e-keyable true RRM_ROOT.template_COG_Ctrl;\n\t\tsetAttr RRM_ROOT.template_COG_Ctrl 1;\n\t\tconnectAttr -f RRM_ROOT.template_COG_Ctrl RRM_COG.template;\t\n\t\t\n\t\tsetAttr -lock true -keyable false -channelBox false RRM_ROOT.v;\n\t\t\n\t\t\n\t\t//LAYER\n\t\tif (!`objExists RRM_ProxiesLayer`)\n\t\t{\n\t\t\tselect RRM_MAIN;\n\t\t\tcreateDisplayLayer -n RRM_ProxiesLayer -number 1 -nr;\n\t\t}\n\t\t\n\t\t//PRESETS\n\t\tif ($checkTemplate == 1)\n\t\t{\n\t\t\t$RRM_TemplateType = `optionMenu -q -sl RRM_TemplateType`;\n\t\t\tif ($RRM_TemplateType == 1)\n\t\t\t{//HUMAN BIPED\n\t\t\t\tmove -r -os -wd 0 16 0 RRM_ROOT;\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxySpline(\"Spine\", 4, 0);\n\t\t\t\tmove -r -os -wd 0 4 0 RRM_Spine_Top;\n\t\t\t\t//ARMS\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxyArm(\"Arm\", 0, 0, 0, 1, 2);\n\t\t\t\t//HANDS\n\t\t\t\tselect RRM_l_Arm_Wrist;\n\t\t\t\tRRM_CreateProxyFKChain(\"Finger\", 4, 4, 1, 0, 1);\n\t\t\t\tselect RRM_l_Arm_Wrist;\n\t\t\t\tRRM_CreateProxyFKChain(\"Thumb\", 1, 4, 3, 0, 1);\n\t\t\t\tmove -r -os -wd 1 0 -1 RRM_l_Thumb_01_01;\n\t\t\t\tmove -r -os -wd -1 0 -1 RRM_r_Thumb_01_01;\n\t\t\t\t//HEAD\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxySpline(\"Neck\", 2, 0);\n\t\t\t\tmove -r -os -wd 0 -4.5 0 RRM_Neck_Top;\n\t\t\t\tselect RRM_Neck_Top;\n\t\t\t\tRRM_CreateProxyHead(\"Head\", 1, 0);\n\t\t\t\tselect RRM_Head_Top;\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 3, 0, 1);\n\t\t\t\tmove -r -os -wd 0 -1 0 RRM_l_Eye_Parent RRM_r_Eye_Parent;\n\t\t\t\t//LEGS\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"Leg\", 0, 0, 0, 1, 2);\n\t\t\t}\n\t\t\telse if ($RRM_TemplateType == 2)\n\t\t\t{//QUADRUPED\n\t\t\t\tmove -r -os -wd 0 10 -7 RRM_ROOT;\n\t\t\t\trotate -r 0 0 0 RRM_ROOT;\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxySpline(\"Spine\", 4, 0);\n\t\t\t\trotate -r -os 90 0 0 RRM_Spine_Parent;\n\t\t\t\tmove -r -os -wd 0 4 0 RRM_Spine_Top;\n\t\t\t\t//HIND LEGS\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"HindLeg\", 0, 0, 0, 2, 2);\n\t\t\t\t//FRONT LEGS\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxyFKChain(\"Clavicle\", 1, 1, 1, 0, 1);\n\t\t\t\tmove -r -os -wd -3 0 0 RRM_l_Clavicle_01_01;\n\t\t\t\tmove -r -os -wd -.5 0 0 RRM_l_Clavicle_Parent;\n\t\t\t\tselect RRM_l_Clavicle_01_01;\n\t\t\t\tRRM_CreateProxyLeg(\"FrontLeg\", 0, 0, 0, 1, 2);\n\t\t\t\trotate -r -os -90 0 0 RRM_l_FrontLeg_Parent;\n\t\t\t\tmove -r -os -wd -1 0 0 RRM_l_FrontLeg_Hip;\n\t\t\t\t//HEAD\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxySpline(\"Neck\", 2, 0);\n\t\t\t\trotate -r -90 0 0 RRM_Neck_Parent;\n\t\t\t\tmove -r 0 -4 0 RRM_Neck_Top;\n\t\t\t\tselect RRM_Neck_Top;\n\t\t\t\tRRM_CreateProxyHead(\"Head\", 1, 0);\n\t\t\t\tselect RRM_Head_Top;\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 3, 0, 1);\n\t\t\t\tmove -r -os -wd 0 -1 0 RRM_l_Eye_Parent RRM_r_Eye_Parent;\t\n\t\t\t\tRRM_LeftToRightProxies(3);\n\t\t\t}\n\t\t\telse if ($RRM_TemplateType == 3)\n\t\t\t{//ARACHNID\n\t\t\t\tsetAttr RRM_ROOT.ty 2;\n\t\t\t\t//FRONT LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"FrontLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Parent.translate\", 0.625, 0, 1.1);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_Hip.ry\" 37;\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ground.translate\", 9.45, 0, 11.8);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ankle.translate\",  -1.96, 1.86, -0.1);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ankle.rotate\", 45, 58.7, 0);\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//MIDFRONT LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"MidFrontLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Parent.translate\", 0.86, 0, 0.36);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_Hip.ry\" 60;\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ground.translate\", 13.706, 0, 7.152);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ankle.translate\", -2.9, 1.8, 0.8);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ankle.rotate\", 46, 37.6, 0);\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//MID BACK LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"MidBackLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Parent.translate\", 0.91, 0, -.431);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_Hip.ry\" 99.25;\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ground.translate\", 15.47, 0, -3.2);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ankle.translate\", -3.3, 1.85, 3);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ankle.rotate\", -5.55, 5.57, -45);\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//BACK LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"BackLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Parent.translate\", 0.493, 0, -1.112);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_BackLeg_Hip.ry\" 152.5;\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ground.translate\", 7.25, 0, -14.65);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ankle.translate\", -1.49, 1.85, 5.6);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ankle.rotate\", -57.74, 40.14, -67.9);\n\t\t\t\tsetAttr \"RRM_l_BackLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_BackLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_BackLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_BackLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//ABDOMEN\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Abdomen\", 1, 5, 0, 3, 0);\n\t\t\t\tsetAttr \"RRM_Abdomen_Parent.tz\" -0.73;\n\t\t\t\tsetAttr (\"RRM_Abdomen_Parent.scale\", 0.76, 0.76, 0.76);\n\t\t\t\tsetAttr \"RRM_Abdomen_01_01.tz\" 2.44;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_01.rx\" 26.7;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_02.rx\" -9.45;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_03.rx\" -9.45;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_04.rx\" -9.45;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_05.rx\" -9.45;\n\t\t\t\t//EYES\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.scale\", 0.6, 0.6, 0.6);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.translate\", 0.41, 0.77, 0.84);\n\t\t\t\tsetAttr \"RRM_l_Eye_01.tz\" -.315;\n\t\t\t\t//PEDIPALPS\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Pedipalp\", 1, 6, 0, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_Parent.translate\", 0.72, -.025, 1.27);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_Parent.ry\" 22;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_Parent.scale\", 0.6, 0.6, 0.6);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_01.tz\" -2.864;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_02.translate\", 0, -0.078, -0.026);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_02.rx\" 19;\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_03.ty\" -.53;\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_03.rx\" 31.68;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_04.translate\", 0, -0.205, -0.491);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_04.rx\" 32;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_05.translate\", 0, -0.225, -0.228);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_05.rx\" 20.7;\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_05.sz\" 0.825;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_06.translate\", 0, -0.06, -0.5);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_06.rx\" 2.5;\n\t\t\t\t//CHELICERAE\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Chelicera\", 1, 3, 0, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_Parent.translate\", 0.33, -0.13, 1.5);\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_Parent.scale\", 0.4, 0.4, 0.4);\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_01.tz\" -2.14;\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_01.rx\" 70;\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_01_02.translate\", 0, -0.188, -0.185);\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_02.rx\" 32.5;\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_01_03.translate\", 0, -0.165, 0.095);\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_03.rx\" 9;\n\t\t\t\tRRM_LeftToRightProxies(3);\n\t\t\t}\n\t\t\telse if ($RRM_TemplateType == 4)\n\t\t\t{//BIRD\n\t\t\t\tmove -r -os -wd 0 10 -3 RRM_ROOT;\n\t\t\t\trotate -r 90 0 0 RRM_ROOT;\n\t\t\t\tsetAttr \"RRM_ROOT.template_COG_Ctrl\" 0;\n\t\t\t\tsetAttr (\"RRM_COG.translate\", 0, 5, 0);\n\t\t\t\tsetAttr (\"RRM_COG.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr \"RRM_ROOT.template_COG_Ctrl\" 1;\n\t\t\t\t\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\t//LEGS\n\t\t\t\tRRM_CreateProxyLeg(\"Leg\", 0, 0, 0, 1, 2);\n\t\t\t\trotate -r -90 0 0 \"RRM_l_Leg_Parent\";\n\t\t\t\tmove -r -os -wd 0 0.5 1 \"RRM_l_Leg_Knee\";\n\t\t\t\tmove -r -os -wd 0 0.75 0 \"RRM_l_Leg_Ankle\";\n\t\t\t\tmove -r -os -wd 0 0.5 -1.5 \"RRM_l_Leg_Ball\";\n\t\t\t\tmove -r -os -wd 0 0 -2.5 \"RRM_l_Leg_Toe\";\n\t\t\t\t//TOES\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"InnerToe\", 1, 4, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_Parent.translate\", -.45, 0.2, 0.4);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_Parent.rotate\", 0, -25, 0);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_Parent.scale\", 0.6, 0.6, 0.6);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_01_01.translate\", 0, 0, -3);\n\t\t\t\t\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"MiddleToe\", 1, 5, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_MiddleToe_Parent.translate\", 0, 0.2, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_MiddleToe_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_MiddleToe_01_01.translate\", 0, 0, -3);\n\t\t\t\t\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"OuterToe\", 1, 6, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_Parent.translate\", .55, 0.2, 0.15);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_Parent.rotate\", 0, 25, 0);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_01_01.translate\", 0,0,-3);\n\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"HindToe\", 1, 5, 0, 3, 1);\n\t\t\t\tsetAttr (\"RRM_l_HindToe_Parent.translate\", 0, 0.2, -0.5);\n\t\t\t\tsetAttr (\"RRM_l_HindToe_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_HindToe_01_01.translate\", 0, 0, 3);\n\n\t\t\t\t//TAIL\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Tail\", 1, 4, 0, 2, 0);\n\t\t\t\tsetAttr (\"RRM_Tail_Parent.scale\", 0.75, 0.75, 0.75);\n\t\t\t\tsetAttr (\"RRM_Tail_Parent.translate\", 0, 2, 0);\n\t\t\t\t\n\t\t\t\t//SPINE\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxySpline(\"Spine\", 4, 0);\n\t\t\t\tsetAttr (\"RRM_Spine_Top.translate\", 0, -1, 0); \n\t\t\t\t\n\t\t\t\t//WINGS\n\t\t\t\tselect \"RRM_Spine_Top\";\n\t\t\t\tRRM_CreateProxyArm(\"Wing\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Parent.translate\", 0, 0, 1.75);\n\n\t\t\t\tsetAttr (\"RRM_l_Wing_Clavicle.translate\", -.85, 0, 0.6);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.translate\", -1.5, 0, -2.5);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.rotate\", 90, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.translate\", -1.5, 0, -2.5);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.rotate\", 90, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Elbow1.translate\", 0, 0, 0.1);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Elbow2.translate\", 0.6, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Wrist.translate\", -1.5, 0, -2.5);\n\t\t\t\t\n\t\t\t\t//DIGITS\n\t\t\t\tselect \"RRM_l_Wing_Elbow2\";\n\t\t\t\tRRM_CreateProxyFKChain(\"Alula\", 1, 2, 1, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Alula_Parent.translate\", 0.5, 0, -0.5);\n\t\t\t\tsetAttr (\"RRM_l_Alula_Parent.rotate\", 90, 0, 0);\n\t\t\t\tsetAttr (\"RRM_l_Alula_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Alula_01_01.translate\", -3, 0, 0);\n\t\t\t\t\n\t\t\t\tselect \"RRM_l_Wing_Wrist\";\n\t\t\t\tRRM_CreateProxyFKChain(\"Digit\", 1, 2, 1, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Digit_01_01.translate\", -2.5, 0, 0);\n\t\t\t\t\n\t\t\t\t//NECK\n\t\t\t\tselect \"RRM_Spine_Top\";\n\t\t\t\tRRM_CreateProxySpline(\"Neck\", 6, 0);\n\t\t\t\tsetAttr (\"RRM_Neck_Top.translate\", 0, -5.5, -5.5);\n\t\t\t\tsetAttr (\"RRM_Neck_Top.rotate\", -90, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_Neck_01.translate\", 0, 0.845, 0.563);\n\t\t\t\tsetAttr (\"RRM_Neck_01.rotate\", -20, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_02.translate\", 0, 1.314, 0.77);\n\t\t\t\tsetAttr (\"RRM_Neck_02.rotate\", -57, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_03.translate\", 0, 1.352, 0.582);\n\t\t\t\tsetAttr (\"RRM_Neck_03.rotate\", -90, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_04.translate\", 0, 1.014, 0.376);\n\t\t\t\tsetAttr (\"RRM_Neck_04.rotate\", -100, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_05.translate\", 0, 0.563, 0.207);\n\t\t\t\tsetAttr (\"RRM_Neck_05.rotate\", -101, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_06.translate\", 0, 0.225, 0.075);\n\t\t\t\tsetAttr (\"RRM_Neck_06.rotate\", -90, 0, 0);\n\t\t\t\t\n\t\t\t\t//HEAD\n\t\t\t\tselect \"RRM_Neck_Top\";\n\t\t\t\tRRM_CreateProxyHead(\"Head\", 1, 0);\n\t\t\t\tsetAttr (\"RRM_Head_Top.translate\", 0, 2, 0);\n\t\t\t\tsetAttr (\"RRM_Head_Jaw.translate\", 0, 0.5, 0.4);\n\t\t\t\tsetAttr (\"RRM_Head_JawEnd.translate\", 0, 0, 2.5);\n\t\t\t\tsetAttr (\"RRM_Head_JawEnd.rotate\", 90, 0, 0);\n\t\t\t\t\n\t\t\t\tselect \"RRM_Head_Top\";\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 1, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.translate\", 0.2, -0.6, 1);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.scale\", 0.75, 0.75, 0.75);\n\t\t\t\tsetAttr (\"RRM_l_Eye_01.translate\", -1, 0, 0);\n\n\t\t\t\tRRM_LeftToRightProxies(3);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//if ($crntUnit == \"m\")\n\t\t//{\n\t\t//\tsetAttr (\"RRM_MAIN.scale\", 10,10,10);\n\t\t//}\n    \t\n\t\tselect RRM_ROOT RRM_MAIN;\n\t\t$modNodes = `ls -sl`;\n\t\tRRM_ProxyLockNodes($modNodes);\n\t\tselect RRM_ROOT;\n    \t\n\t\t//REVERT UNITS\n\t\tif ($crntUnit != \"cm\")\n\t\t{\n\t\t\t//changeLinearUnit \"centimeter\"\n\t\t}\n\t\tchangeLinearUnit $crntUnit;\n\t}\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\t\n}\n\n//ATTACH TO RIG\nglobal proc RRM_AttachToRig(string $attachMod, string $modName, string $prfx, string $crntSide, string $oppSide, string $attachModCore, int $mirrorMod, int $mirrorCheck)\n{\n\n\tif ($mirrorMod == $mirrorCheck)\n\t{\n\t\tif (`objExists ($attachMod + \".pair\")`)\n\t\t{\n\t\t\tstring $side = `getAttr ($attachMod + \".pair\")`;\n\t\t\tif ($side == $crntSide)\n\t\t\t{\n\t\t\t\tparentConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tscaleConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\t\t\t\t\n\t\t\t\t//ADD ATTACH NODE NAME\n\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $attachModCore;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t\t\t}\n\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $attachModCore;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($side == $oppSide)\n\t\t\t{\n\t\t\t\t//print (\"RRM_\" + $prfx + $modName + \" is opposite\\n\");\n\t\t\t\t$sideCheck = `getAttr ($attachMod + \".opposite\")`;\n\t\t\t\tparentConstraint (\"RRM_\" + $sideCheck) \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tscaleConstraint (\"RRM_\" + $sideCheck) \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\n\t\t\t\t//ADD ATTACH NODE NAME\n\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $sideCheck;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t\t\t}\n\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $sideCheck;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\tscaleConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\t\t\t\n\n\t\t\t//ADD ATTACH NODE NAME\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $attachModCore;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t\t}\n\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $attachModCore;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\t}\n\t\t}\n\t\n\t}\n\telse\n\t{\n\t\tparentConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\tscaleConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\n\t\t//ADD ATTACH NODE NAME\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $attachModCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t}\n\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $attachModCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t}\n\t}\n\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//changeLinearUnit $crntUnit;\t\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////SPLINE////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxySpline2(string $modName, int $mirrorMod, string $prfx, string $oppPrfx, int $splineNum, string $crntUnit)\n{\n\t$i1 = 1;\n\t$i2 = $splineNum;\n\tstring $nPd = \"_0\";\n\tstring $nPdPrev = \"_0\";\n\t\n\twhile ($i1 <= $splineNum)\n\t{\n\t\tif ($i1 >= 10)\n\t\t{$nPd = \"_\";}\n\t\tif ($i1 >= 11)\n\t\t{$nPdPrev = \"_\";}\n\t\n\t\t//SET SPLINE NUM IN PARENT NODE\n\t\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.splineNum\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.splineNum\") $splineNum;\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.splineNum\");\n\t\t//SET SPLINE NUM IN TOP NODE\n\t\tlockNode -lock off (\"RRM_\" + $modName);\n\t\tsetAttr -l false (\"RRM_\" + $modName + \".jointsNum\");\n\t\tsetAttr (\"RRM_\" + $modName + \".jointsNum\") $splineNum;\n\t\tsetAttr -l true (\"RRM_\" + $modName + \".jointsNum\");\n\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + $nPd + $i1);\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\") (\"RRM_\" + $prfx + $modName + $nPd + $i1); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".core\") ($prfx + $modName + $nPd + $i1);\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".core\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".ext\") ($nPd + $i1);\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".ext\");\n\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".opposite\") ($oppPrfx + $modName + $nPd + $i1);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".opposite\");\n\t\t}\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Top\")  (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ParentW0\") $i2;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_TopW1\") $i1;\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".overrideColor\") 29;\n\t\t\n\t\t//CONNECTORS\n\t\tint $prev = ($i1 -1);\n\t\tif ($i1 == 1){\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + $nPd + $i1));\n\t\t}\n\t\telse if ($i1 != $splineNum){\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + $nPdPrev + $prev), (\"RRM_\" + $prfx + $modName + $nPd + $i1));\n\t\t}\n\t\telse{\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + $nPdPrev + $prev), (\"RRM_\" + $prfx + $modName + $nPd + $i1));\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + $nPd + $i1), (\"RRM_\" + $prfx + $modName + \"_Top\"));\n\t\t}\n\t\t\t\n\n\t\t\t\n\t\t$i1++;\n\t\t$i2--;\n\t\t\n\t}\n}\n\t\t\nglobal proc RRM_CreateProxySpline(string $modName, int $splineNum, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\tif (`objExists ($attachMod[0] + (\".opposite\"))`)\n\t\t{\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\t//CREATE JOINT BASE\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\t\tmove -r $posOffset 0 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"spline\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 29;\n\t\t\n\t\t//ADD SPINE NUMBERS TO PARENT\n\t\taddAttr -ln \"splineNum\"  -at long -dv 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\tmove -r 0 7 0 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\tmakeIdentity -apply true -t 1 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.core\") ($prfx + $modName + \"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.core\");\n\t\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.ext\") (\"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Top.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Top.overrideColor\") 29;\n\t\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.opposite\") ($oppPrfx + $modName + \"_Top\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\n\t\t\t//ADD EXTRA ATTRIBUTES\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t}\t\n\t\n\t\t//ADD SPINE NUMBERS TO TOP GROUP\n\t\tif ($i == 0)\n\t\t{\n\t\t\taddAttr -ln \"jointsNum\"  -at long -dv 1 (\"RRM_\" + $modName);\n\t\t}\n\n\t\tRRM_CreateProxySpline2($modName, $mirrorMod, $prfx, $oppPrfx, $splineNum, $crntUnit);\n\t\n\t\t//ADD EXTRA ATTRIBUTES\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Top\")\n\t\t\t(\"RRM_\" + $prfx + $modName + \"_??\");\n\t\t\t\n\t\t\t$RRM_Splines = `ls -sl`;\n\t\t\tstring $crntMod;\n\t\t\tfor ($crntMod in $RRM_Splines)\n\t\t\t{\n\t\t\t\t//PAIR AND TYPE\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t}\n\t\t}\n\t\t\t\n\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_*Grp\");\n\t\tselect -d (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\");\n\t\t$modGroups = `ls-sl`;\n\t\tstring $selectedModGroup;\n\t\tfor ($selectedModGroup in $modGroups)\n\t\t{\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".tx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".ty\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".tz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".sz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".v\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.nds\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.ox\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.oy\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.oz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.w0\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.w1\");\n\t\t}\n\n\t\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t\t{\n\t\t\t//ADD TOP ATTRIBUTE\n\t\t\taddAttr -ln \"top\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"spline\";\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\t\t\t\n\t\t\t//ADD PARENT ATTRIBUTE\n\t\t\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\t\t\t\n\t\t\t//ADD CORE NAME ATTRIBUTE\n\t\t\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\n\n\t\t\tparent (\"RRM_\" + $modName) $attachMod[0];\n\t\t}\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\t\t\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\t\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\t\t\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\t\n\n}\n\nglobal proc RRM_SplinePrompts(string $modName, int $splineNum, int $mirrorMod)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Rig's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldSplineName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"A module already exists with this name. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxySpline($modName, $splineNum, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxySpline($modName, $splineNum, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////ARMS////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyArm2(string $modName, int $upperArmNum, int $lowerArmNum, int $elbowNum, int $elbowJoints, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $multiplier, string $crntUnit)\n{\n\t//SET ARM NUM'S IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\") $upperArmNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\t\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\") $lowerArmNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\t\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.elbowNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.elbowNum\") $elbowJoints;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.elbowNum\");\n\t\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\") $elbowNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\t\n\t\n\t//ELBOW\n\tif ($elbowJoints == 1)\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_ElbowAim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_ElbowAimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_ElbowAimShape\") (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_ElbowAim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\") (\"RRM_\" + $prfx + $modName + \"_Elbow\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\t\t\n\t\tmove -r ($multiplier * 6.45) 0 0 (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.core\") ($prfx + $modName + \"_Elbow\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.ext\") (\"_Elbow\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.overrideColor\") 7;\n\t}\n\telse\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Elbow1\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Elbow1Aim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Elbow1AimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Elbow1AimShape\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow1Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\t\t\n\t\tmove -r ($multiplier * 6.45) 0 0 (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.core\") ($prfx + $modName + \"_Elbow1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow1.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.ext\") (\"_Elbow1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow1.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.overrideColor\") 7;\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tmakeIdentity -apply true -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\") -d 1 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 1 -p 0.5 0 1 -p 0 0 1.5 -p -0.5 0 1 -p -0.25 0 1 -p -0.25 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Elbow2AimShape\");\n\t\trotate -r 0 0 ($multiplier * 90) (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Elbow2AimShape\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\"); xform -os -piv 0 0 0;\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\");\n        \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.core\") ($prfx + $modName + \"_Elbow2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow2.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.ext\") (\"_Elbow2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow2.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.overrideColor\") 7;\n\t}\n\t\n\t//ARM CONSTRAINTS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t{\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_ElbowGrp_pointConstraint1.offsetZ\") -.0001;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\n\t\t\n\t\tpointConstraint -skip y -skip z (\"RRM_\" + $prfx + $modName + \"_Elbow\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector -1 0 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector -1 0 0\n\t\t-skip y -skip z (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\t\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Clavicle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Clavicle\"), (\"RRM_\" + $prfx + $modName + \"_Shoulder\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Shoulder\"), (\"RRM_\" + $prfx + $modName + \"_Elbow\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Elbow\"), (\"RRM_\" + $prfx + $modName + \"_Wrist\"));\n\t}\n\telse\n\t{\n\t\t//CONNECT ELBOW 2\n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" -skip x (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp_pointConstraint1.\" + \"RRM_\" + $prfx + $modName + \"_WristW1\") 2;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\");\n    \n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr.v\") 0;\n        \n\t\t//CONNECT ELBOW 1\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp_pointConstraint1.offsetZ\") -.0001;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\n\t\t\n\t\tpointConstraint -skip y -skip z (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 1 0 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector 1 0 0\n\t\t-skip y -skip z (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\");\n\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Clavicle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Clavicle\"), (\"RRM_\" + $prfx + $modName + \"_Shoulder\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Shoulder\"), (\"RRM_\" + $prfx + $modName + \"_Elbow1\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Elbow1\"), (\"RRM_\" + $prfx + $modName + \"_Elbow2\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Elbow2\"), (\"RRM_\" + $prfx + $modName + \"_Wrist\"));\n\t}\t\n\t\n\t//UPPER ARM JOINTS\n\tif ($upperArmNum > 0)\n\t{\n\t\t$shoulderInf = $upperArmNum;\n\t\t$elbowInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $upperArmNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\") ($prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\") (\"_Upper\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .125; \n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\t\t\t\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".template\");\n\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ShoulderW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ElbowW1\") $elbowInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ShoulderW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow1W1\") $elbowInf;\n\t\t\t}\n\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$shoulderInf--;\n\t\t\t$elbowInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\t\t\n\t//LOWER ARM JOINTS\n\tif ($lowerArmNum > 0)                                                         \n\t{\n\t\t$elbowInf = $lowerArmNum;\n\t\t$wristInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $lowerArmNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\") ($prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\") (\"_Lower\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".template\");\n\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ElbowW0\") $elbowInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_WristW1\") $wristInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow2W0\") $elbowInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_WristW1\") $wristInf;\n\t\t\t}\n\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$elbowInf--;\n\t\t\t$wristInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\t\n\t//ELBOW JOINTS\n\tif ($elbowJoints == 2)\n\t{\n\t\tif ($elbowNum > 0)\n\t\t{\n\t\t\t$elbow1Inf = $elbowNum;\n\t\t\t$elbow2Inf = 1;\n\t\t\t$crntInt = 1;\n\t\t\twhile ($crntInt <= $elbowNum)\n\t\t\t{\n\t\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\") ($prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\") (\"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\");\n\t\t\t\tif ($mirrorMod == 2)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\");\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\");\n\t\t\t\t}\n\t\t\t\t//SCALE LOCATOR\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\t\tif ($crntUnit == \"m\")\n\t\t\t\t{\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t\t}\n\t\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".template\");\n\t\t\t\t\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow1W0\") $elbow1Inf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow2W1\") $elbow2Inf;\n\t\t\t\t\n\t\t\t\t//LOCK ATTRIBUTES\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ty\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sz\");\t\n\t\t\t\t\n\t\t\t\t$elbow1Inf--;\n\t\t\t\t$elbow2Inf++;\n\t\t\t\t$crntInt++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//LOCK CHANNELS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.sz\");\n\t}\n\telse\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.sz\");\n    \n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.sz\");\n\t}\n\n\t//ADD EXTRA ATTRIBUTES\n\tif ($mirrorMod == 2)\n\t{\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\t}\n\t\t\n\t\t$armMods = `ls -sl`;\n\t\tstring $crntMod;\n\t\tfor ($crntMod in $armMods)\n\t\t{\n\t\t\t//PAIR AND TYPE\n\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t//OPPOSITE NAME\n\t\t\taddAttr -ln \"opposite\" -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.opposite\") ($oppPrfx + $modName + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.opposite\") ($oppPrfx + $modName + \"_Elbow1\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.opposite\") ($oppPrfx + $modName + \"_Elbow2\");\n\t\t}\n\t\t\n\t\tfor ($crntMod in $armMods)\n\t\t{\n\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t}\n\t}\n\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AimLctr.v\")      0;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr.v\") 0;\n}\n\nglobal proc RRM_CreateProxyArm(string $modName, int $upperArmNum, int $lowerArmNum, int $elbowNum, int $elbowJoints, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$i = 0;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t//ARM\n\twhile ($i !=2)\n\t{\t\n\t\tif ($mirrorMod != 2)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t}\n\t\tif ($mirrorMod == 3)\n\t\t{\n\t\t\t$crntSide = \"right\";\n\t\t\t$oppSide = \"left\"; \n\t\t\t$multiplier = -1;\n\t\t}\n\t\t\t\n\t\t\t\n\t\t//ATTACH NODE\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\trotate -r 0 0 ($multiplier * -90) (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"arm\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 7;\n\t\t\n\t\taddAttr -ln \"upperRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"lowerRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"elbowNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"midRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t//TEMPLATE ROLL JOINTS\n\t\taddAttr -ln \"templateRollJoints\"  -at bool -dv 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -e -keyable 1 (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\");\n\n\t\t//CLAVICLE\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Clavicle\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\") (\"RRM_\" + $prfx + $modName + \"_Clavicle\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\");\n\t\tmove -r ($multiplier * 1.25) 0 0 (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.core\") ($prfx + $modName + \"_Clavicle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Clavicle.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.ext\") (\"_Clavicle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Clavicle.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.overrideColor\") 7;\n\t\t\n\t\t//SHOULDER\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\");\t\t\n\t\tmove -r ($multiplier * 2.95) 0 0 (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.core\") ($prfx + $modName + \"_Shoulder\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Shoulder.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.ext\") (\"_Shoulder\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Shoulder.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.overrideColor\") 7;\n\n\t\t//WRIST\n\t\tRRM_CreateProxyEndProxy($crntUnit);\t\t\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\trotate -r 0 0 ($multiplier * -90) (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_WristGrp\") (\"RRM_\" + $prfx + $modName + \"_Wrist\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_WristGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_WristGrp\");\t\t\n\t\tmove -r ($multiplier * 9.95) 0 0 (\"RRM_\" + $prfx + $modName + \"_WristGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_WristGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.core\") ($prfx + $modName + \"_Wrist\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Wrist.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.ext\") (\"_Wrist\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Wrist.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.overrideColor\") 7;\n\n\t\tRRM_CreateProxyArm2($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\t//ADD EXTRA ATTRIBUTES\n\t\tif ($mirrorMod == 2)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Clavicle\")\n\t\t\t(\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\t\t\n\t\t\t$armMods = `ls -sl`;\n\t\t\tstring $crntMod;\n\t\t\tfor ($crntMod in $armMods)\n\t\t\t{\n\t\t\t\t//PAIR AND TYPE\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t\t//OPPOSITE NAME\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t\t}\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.opposite\") ($oppPrfx + $modName + \"_Clavicle\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.opposite\") ($oppPrfx + $modName + \"_Shoulder\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.opposite\") ($oppPrfx + $modName + \"_Wrist\");\n\t\t\t\n\t\t\tfor ($crntMod in $armMods)\n\t\t\t{\n\t\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//ADD LEFT OR RIGHT ATTRIBUTE\n\t\t\taddAttr -ln \"single\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".single\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".single\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".single\");\n\t\t}\n\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 2;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\n\t\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t\t{\t\n\t\t\t//ADD TOP ATTRIBUTE\n\t\t\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"arm\";\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\t\t\t\n\t\t\t//ADD PARENT ATTRIBUTE\n\t\t\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t\t\t//ADD CORE NAME ATTRIBUTE\n\t\t\taddAttr -ln \"core\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\t\t\n\t\t\t//ADD UPPER ARM NUM ATTRIBUTE\n\t\t\taddAttr -ln \"upperArmNum\"  -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".upperArmNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".upperArmNum\") $upperArmNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".upperArmNum\");\n\t\t\t\n\t\t\t//ADD LOWER ARM NUM ATTRIBUTE\n\t\t\taddAttr -ln \"lowerArmNum\"  -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".lowerArmNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".lowerArmNum\") $lowerArmNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".lowerArmNum\");\n\n\t\t\t//ADD ELBOW NUM ATTRIBUTE\n\t\t\taddAttr -ln \"elbowNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".elbowNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".elbowNum\") $elbowNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".elbowNum\");\n\n\t\t\t//ADD UPPER ARM NUM ATTRIBUTE\n\t\t\taddAttr -ln \"elbowJoints\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".elbowJoints\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".elbowJoints\") $elbowJoints;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".elbowJoints\");\n\t\t\t\n\t\t\tparent (\"RRM_\" + $modName) $attachMod[0];\n\t\t}\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t\n\t\tif ($mirrorMod != 2)\n\t\t{\n\t\t\t$i = 2;\n\t\t}\n\t}\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\t\t\n\n}\n\nglobal proc RRM_ArmPrompts(string $modName, int $upperArmNum, int $lowerArmNum, int $elbowNum, int $elbowJoints, int $mirrorMod)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldArmName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyArm($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyArm($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////LEGS////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyLeg2(string $modName, int $upperLegNum, int $lowerLegNum, int $kneeNum, int $kneeJoints, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $posOffset, string $crntUnit)\n{\n\t//SET ARM NUM'S IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\") $upperLegNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\") $lowerLegNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.kneeNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.kneeNum\") $kneeJoints;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.kneeNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\") $kneeNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\n\t//KNEE\n\tif ($kneeJoints == 1)\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_KneeAim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_KneeAimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_KneeAimShape\") (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_KneeAim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_KneeGrp\") (\"RRM_\" + $prfx + $modName + \"_Knee\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_KneeGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\t\t\n\t\trotate -r 0 -180 90 (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\tmove -r $posOffset -5 0 (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.core\") ($prfx + $modName + \"_Knee\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.ext\") (\"_Knee\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee.overrideColor\") 31;\n\t}\n\telse\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Knee1\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Knee1Aim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Knee1AimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Knee1AimShape\") (\"RRM_\" + $prfx + $modName + \"_Knee1\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee1Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\") (\"RRM_\" + $prfx + $modName + \"_Knee1\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\t\t\n\t\trotate -r 0 -180 90 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tmove -r $posOffset -5 0 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.core\") ($prfx + $modName + \"_Knee1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee1.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.ext\") (\"_Knee1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee1.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.overrideColor\") 31;\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tmakeIdentity -apply true -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Knee2Aim\") -d 1 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 1 -p 0.5 0 1 -p 0 0 1.5 -p -0.5 0 1 -p -0.25 0 1 -p -0.25 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Knee2AimShape\");\n\t\tmove -r $posOffset -5 0 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Knee2Aim\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Knee2AimShape\") (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee2Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\") (\"RRM_\" + $prfx + $modName + \"_Knee2\"); xform -os -piv 0 0 0;\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\");\n\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.rotateOrder\") 1;\n        \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.core\") ($prfx + $modName + \"_Knee2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee2.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.ext\") (\"_Knee2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee2.ext\");\n        \n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.overrideColor\") 31;\n\t}\n\t\n\t//LEGrp CONSTRAINTS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t{\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\n\t\t\n\t\tpointConstraint -skip x -skip z (\"RRM_\" + $prfx + $modName + \"_Knee\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector 0 1 0\n\t\t-skip x -skip z (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\t\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Hip\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Hip\"), (\"RRM_\" + $prfx + $modName + \"_Knee\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Knee\"), (\"RRM_\" + $prfx + $modName + \"_Ankle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ankle\"), (\"RRM_\" + $prfx + $modName + \"_Ball\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ball\"), (\"RRM_\" + $prfx + $modName + \"_Toe\"));\n\t}\n\telse\n\t{\n\t\t//CONNECT KNEE 2\n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" -skip y (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2Grp_pointConstraint1.\" + \"RRM_\" + $prfx + $modName + \"_AnkleW1\") 2;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\");\n    \n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr.v\") 0;\n        \n\t\t//CONNECT KNEE 1\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\t\n\t\tpointConstraint -skip x -skip z (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector 0 1 0\n\t\t-skip x -skip z (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee1\");\n\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Hip\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Hip\"), (\"RRM_\" + $prfx + $modName + \"_Knee1\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Knee1\"), (\"RRM_\" + $prfx + $modName + \"_Knee2\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Knee2\"), (\"RRM_\" + $prfx + $modName + \"_Ankle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ankle\"), (\"RRM_\" + $prfx + $modName + \"_Ball\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ball\"), (\"RRM_\" + $prfx + $modName + \"_Toe\"));\n\t}\t\n\t\n\t//UPPER LEGrp JOINTS\n\tif ($upperLegNum > 0)\n\t{\n\t\t$shoulderInf = $upperLegNum;\n\t\t$kneeInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $upperLegNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\") ($prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\") (\"_Upper\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".template\");\n\t\t\t\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_HipW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_KneeW1\") $kneeInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_HipW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee1W1\") $kneeInf;\n\t\t\t}\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$shoulderInf--;\n\t\t\t$kneeInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\n\t//LOWER LEGrp JOINTS\n\tif ($lowerLegNum > 0)                                                         \n\t{\n\t\t$kneeInf = $lowerLegNum;\n\t\t$wristInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $lowerLegNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\") ($prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\") (\"_Lower\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".template\");\n\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Knee\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_KneeW0\") $kneeInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_AnkleW1\") $wristInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee2W0\") $kneeInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_AnkleW1\") $wristInf;\n\t\t\t}\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$kneeInf--;\n\t\t\t$wristInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\t\n\t//KNEE JOINTS\n\tif ($kneeJoints == 2)\n\t{\n\t\tif ($kneeNum > 0)\n\t\t{\n\t\t\t$knee1Inf = $kneeNum;\n\t\t\t$knee2Inf = 1;\n\t\t\t$crntInt = 1;\n\t\t\twhile ($crntInt <= $kneeNum)\n\t\t\t{\n\t\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\") ($prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\") (\"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\");\n\t\t\t\tif ($mirrorMod == 2)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\");\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\");\n\t\t\t\t}\n\t\t\t\t//SCALE LOCATOR\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\t\tif ($crntUnit == \"m\")\n\t\t\t\t{\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t\t}\n\t\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".template\");\n\t\t\t\t\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee1W0\") $knee1Inf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee2W1\") $knee2Inf;\n\t\t\t\t\n\t\t\t\t//LOCK ATTRIBUTES\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sz\");\n\t\t\t\t\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ty\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t\t$knee1Inf--;\n\t\t\t\t$knee2Inf++;\n\t\t\t\t$crntInt++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//LOCK CHANNELS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.sz\");\n\t}\n\telse\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.sz\");\n    \n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.sz\");\n\t}\n    \n\t//ADD EXTRA ATTRIBUTES\n\tif ($mirrorMod == 2)\n\t{\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\t}\n\t\t\n\t\t$legMods = `ls -sl`;\n\t\tstring $crntMod;\n\t\tfor ($crntMod in $legMods)\n\t\t{\n\t\t\t//PAIR AND TYPE\n\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t//OPPOSITE NAME\n\t\t\taddAttr -ln \"opposite\" -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.opposite\") ($oppPrfx + $modName + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.opposite\") ($oppPrfx + $modName + \"_Knee1\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.opposite\") ($oppPrfx + $modName + \"_Knee2\");\n\t\t}\n\t\t\n\t\tfor ($crntMod in $legMods)\n\t\t{\n\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t}\n\t\t\n\t\t//COLOURS\n\t\tsetAttr ($crntMod + \".overrideEnabled\") 1;\n\t\tsetAttr ($crntMod + \".overrideColor\") 31;\n\t}\n\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AimLctr.v\")      0;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr.v\") 0;\n}\n\nglobal proc RRM_CreateProxyLeg(string $modName, int $upperLegNum, int $lowerLegNum, int $kneeNum, int $kneeJoints, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\tfloat $posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\tfloat $rotOffset = -90;\n\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t$i = 1;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$prfx = \"\";\n\t\t\t$posOffset = 0;\n\t\t\t$rotOffset = 180; \n\t\t}\n\t\t\t\n\t\t//ATTACH NODE\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\trotate -r 0 0 $rotOffset (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"leg\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\t\t\n\t\taddAttr -ln \"upperRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"lowerRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"kneeNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"midRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t//TEMPLATE ROLL JOINTS\n\t\taddAttr -ln \"templateRollJoints\"  -at bool -dv 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -e -keyable 1 (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\");\n\n\t\t//HIP\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_HipAim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\trotate -r 180 0 -90\t(\"RRM_\" + $prfx + $modName + \"_HipAim\");\n\t\tmakeIdentity -apply true (\"RRM_\" + $prfx + $modName + \"_HipAim\");\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_HipAimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_HipAimShape\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_HipAim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_HipGrp\") (\"RRM_\" + $prfx + $modName + \"_Hip\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_HipGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_HipGrp\");\t\t\n\t\tmove -r $posOffset -1 0 (\"RRM_\" + $prfx + $modName + \"_HipGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_HipGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.core\") ($prfx + $modName + \"_Hip\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Hip.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.ext\") (\"_Hip\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Hip.ext\");\n\n\t\t//ANKLE\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\t\t\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Ankle\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\") (\"RRM_\" + $prfx + $modName + \"_Ankle\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\");\t\t\n\t\tmove -r 0 1.5 0 (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.core\") ($prfx + $modName + \"_Ankle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ankle.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.ext\") (\"_Ankle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ankle.ext\");\n\n\t\t//FOOT\n\t\t//FOOT GROUND\n\t\tcircle -n (\"RRM_\" + $prfx + $modName + \"_Ground\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 3.25 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_GroundGrp\") (\"RRM_\" + $prfx + $modName + \"_Ground\"); xform -os -piv 0 0 0; \n\t\tscale -r .8 1 1 (\"RRM_\" + $prfx + $modName + \"_GroundGrp\");\n\t\tmakeIdentity -apply true -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_GroundGrp\");\n\t\tmove -r 0 0 2 (\"RRM_\" + $prfx + $modName + \"_Ground.cv[0:7]\");\n\t\t\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\") (\"RRM_\" + $prfx + $modName + \"_GroundGrp\"); xform -os -piv 0 0 0; \n\t\t\n\t\taddAttr -ln \"core\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.core\") ($prfx + $modName + \"_Ground\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ground.core\");\n\t\t\n\t\taddAttr -ln \"ext\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.ext\") (\"_Ground\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ground.ext\");\n\t\t\n\t\taddAttr -ln \"clone\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.clone\");\n\n\t\taddAttr -ln \"modName\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.modName\");\n\t\t\n\t\tmove -r 1.3 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[3]\") ;\n\t\tmove -r 0.2 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[2]\") (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[4]\");\n\t\tmove -r -1.3 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[7]\") ;\n\t\tmove -r -0.2 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[2]\") (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[4]\");\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Ball\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Ball\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Ball\");\t\t\n\t\tmove -r 0 0 2.5 (\"RRM_\" + $prfx + $modName + \"_Ball\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Ball\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.core\") ($prfx + $modName + \"_Ball\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ball.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.ext\") (\"_Ball\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ball.ext\");\n\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Toe\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Toe\");\t\t\n\t\tmove -r 0 0 4 (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\trotate -r 90 0 0 (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.core\") ($prfx + $modName + \"_Toe\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Toe.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.ext\") (\"_Toe\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Toe.ext\");\n\n\t\t//FOOT CONTROLS\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\") -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_FootRightTiltShape\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_FootRightTiltB\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleZ\") .25;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleX\") .25;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleY\") .25;\n\t\tif ($crntUnit == \"m\")\n\t\t{\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleZ\") .0025;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleX\") .0025;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleY\") .0025;\n\t\t}\n\t\t\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_FootRightTiltB\");\n\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tmove -r -1 0 2.5 (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\t\n\t\taddAttr -ln \"core\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.core\") ($prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.core\");\n\t\t\n\t\taddAttr -ln \"ext\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.ext\") (\"_FootRightTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.ext\");\n\t\t\n\t\taddAttr -ln \"clone\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.clone\");\n\n\t\taddAttr -ln \"modName\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.modName\");\n\n\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\");\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_FootLeftTiltShape\");\n\t\tmove -r 2 0 0 (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.core\") ($prfx + $modName + \"_FootLeftTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.core\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.ext\") (\"_FootLeftTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.ext\");\n\n\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_HeelPivot\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\"); \n\t\tselect (\"RRM_\" + $prfx + $modName + \"_HeelPivot\");\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_HeelPivotShape\");\n\t\tmove -r 1 0 -3 (\"RRM_\" + $prfx + $modName + \"_HeelPivot\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_HeelPivot\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_HeelPivot.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.core\") ($prfx + $modName + \"_HeelPivot\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_HeelPivot.core\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_HeelPivot.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.ext\") (\"_HeelPivot\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_HeelPivot.ext\");\n\n\t\t//LOCK CHANNELS\n\t\t$footPivots = `ls (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\") (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\") (\"RRM_\" + $prfx + $modName + \"_HeelPivot\")`;\n\t\tstring $crntControl;\n\t\tfor ($crntControl in $footPivots)\n\t\t{\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".ty\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".rx\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".ry\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".rz\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".sx\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".sy\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".sz\");\n\t\t}\n\t\t//CONNECT FOOT\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AnkleGrp.ty\") 0;\n\t\t\n\t\tRRM_CreateProxyLeg2($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $posOffset, $crntUnit);\n\n\t\t//ADD EXTRA ATTRIBUTES, CHANGE COLOURS\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Hip\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Ball\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_Toe\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\") (\"RRM_\" + $prfx + $modName + \"_HeelPivot\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_Ground\") ;\n\n\t\t\t\n\t\t$legMods = `ls -sl`;\n\t\tstring $crntMod;\n\t\tfor ($crntMod in $legMods)\n\t\t{\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t\t\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t\t}\n\n\t\t\t//COLOURS\n\t\t\tsetAttr ($crntMod + \".overrideEnabled\") 1;\n\t\t\tsetAttr ($crntMod + \".overrideColor\") 31;\n\t\t}\n\t\t\n\t\tif ($mirrorMod == 2)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.opposite\") ($oppPrfx + $modName + \"_Hip\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.opposite\") ($oppPrfx + $modName + \"_Ankle\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.opposite\") ($oppPrfx + $modName + \"_Ball\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.opposite\") ($oppPrfx + $modName + \"_Toe\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.opposite\") ($oppPrfx + $modName + \"_Ground\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.opposite\") ($oppPrfx + $modName + \"_FootRightTilt\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.opposite\") ($oppPrfx + $modName + \"_FootLeftTilt\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.opposite\") ($oppPrfx + $modName + \"_HeelPivot\");\n\t\n\t\t\tfor ($crntMod in $legMods)\n\t\t\t{\n\t\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t\t}\n\t\t}\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AimLctr.v\") 0;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr.v\") 0;\n\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 2;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\n\t\tpointConstraint -skip y (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_GroundGrp\");\n\t\tparentConstraint -mo RRM_MAIN (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tscale 1 1 1 (\"RRM_\" + $prfx + $modName + \"_GroundGrp\") (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\");\n\n\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$rotOffset = 90;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"leg\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\t\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\t\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\n\t//ADD UPPER LEGrp NUM ATTRIBUTE\n\taddAttr -ln \"upperLegNum\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".upperLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".upperLegNum\") $upperLegNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".upperLegNum\");\n\t\n\t//ADD LOWER LEGrp NUM ATTRIBUTE\n\taddAttr -ln \"lowerLegNum\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".lowerLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".lowerLegNum\") $lowerLegNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".lowerLegNum\");\n\n\t//ADD KNEE NUM ATTRIBUTE\n\taddAttr -ln \"kneeNum\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".kneeNum\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeNum\") $kneeNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".kneeNum\");\n\n\t//ADD UPPER LEGrp NUM ATTRIBUTE\n\taddAttr -ln \"kneeJoints\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".kneeJoints\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeJoints\") $kneeJoints;\n\tsetAttr -l true (\"RRM_\" + $modName + \".kneeJoints\");\t\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_LegPrompts(string $modName, int $upperLegNum, int $lowerLegNum, int $kneeNum, int $kneeJoints, int $mirrorMod)\n{\n\tstring $name = `textField -q -text RRM_TextFieldLegName`;\n\tint $nameSize = `size $name`;\n\n\tif ($nameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($name))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($name)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldLegName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this name. Please use a unique name\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyLeg($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyLeg($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////FK CHAINS/////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyFKChain2(string $modName, int $chainsNum, int $jointsNum, int $direction, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $multiplier, string $crntUnit)\n{\n\t//SET FK NUM'S IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.chainNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.chainNum\") $chainsNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.chainNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.jointNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.jointNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jointNum\");\n\t\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.direction\") $direction;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\n\t//SET FK NUM'S IN TOP NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $modName + \".chainsNum\");\n\tsetAttr (\"RRM_\" + $modName + \".chainsNum\") $chainsNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".chainsNum\");\n\n\tsetAttr -l false (\"RRM_\" + $modName + \".jointsNum\");\n\tsetAttr (\"RRM_\" + $modName + \".jointsNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".jointsNum\");\n\t\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.direction\") $direction;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\n\n\t//CREATE ATTACH LOCATION\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[0]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[1]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[2]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[3]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[5]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[10]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[9]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[4]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t-worldUpVector 0 1 0 -worldUpObject (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\")`;\n\tparent (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmakeIdentity -apply false -r 1 (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t$targetLoc = `getAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.translate\")`;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.tx\") ($targetLoc[0] * 3.1304347826087);\n\tparentConstraint -mo (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t//CREATE FIRST NODE\n\tif ($jointsNum != 1)\n\t{\n\t\tRRM_CreateProxyBaseUpProxy($crntUnit);\n\t\trename RRM_BaseUp (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideColor\") 9;\n\t}\n\telse\n\t{\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\trotate -r -os -90 0 0 (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideColor\") 9;\n\t}\n\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Grp\")  (\"RRM_\" + $prfx + $modName + \"_01_\"); xform -os -piv 0 0 0;\n\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_Grp\")`;\n\trotate -r -os 90 0 0 (\"RRM_\" + $prfx + $modName + \"_01_\");\n\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_01_\");\n\tparent (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\trotate -r -os 0 -90 -90 (\"RRM_\" + $prfx + $modName + \"_Grp\") ;\n\tmakeIdentity -apply false -s 1  (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\t\n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.core\") ($prfx + $modName + \"_01_\");\n\t\n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.ext\") (\"_01_\");\n\n\tdelete (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\n\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_01_\"));\n\n\tif ($mirrorMod ==1)\n\t{\n\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01_.pair\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.pair\") $crntSide;\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01_.pair\");\n\t\t\n\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01_.opposite\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.opposite\") ($oppPrfx + $modName + \"_01_\");\n\t}\n    \n\t//CHAINS\n\tint $crntChNum = 2;\n\twhile ($crntChNum <= $chainsNum)\n\t{\n\t\t$previousMod = ($crntChNum -1);\n\t\tstring $namePadding = \"\";\n\t\tif ($crntChNum < 10)\n\t\t{\n\t\t\t$namePadding = \"0\";\n\t\t}\n\t\tstring $namePaddingPrev = \"\";\n\t\tif ($crntChNum < 11)\n\t\t{\n\t\t\t$namePaddingPrev = \"0\";\n\t\t}\n\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\") (\"RRM_\" + $prfx + $modName + \"_\" + $namePaddingPrev + $previousMod + \"_\");\n\t\tmove -r -ls ($multiplier * -0.75) 0 0 (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\");\n\t\t\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.opposite\") ($oppPrfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\");\t\t\t\n\t\t}\n    \n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.core\");\t\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.core\") ($prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\");\n    \n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.ext\");\t\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.ext\") (\"_\" + $namePadding + $crntChNum + \"_\");\n\t\t\n\t\t//CONNECTORS\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\"));\n\n\t\t$crntChNum++;\n\t}\n\t\n\t//FIX JOINT OFFSET\n\tspaceLocator -n  (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\");\n\t$chainStart = `ls (\"RRM_\" + $prfx + $modName + \"_??_\")`;\n\tdelete `pointConstraint $chainStart (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\")`;\n\tparent $chainStart (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\");\n\tdelete `pointConstraint (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\")`;\n\tparent $chainStart (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tdelete (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\");\n    \n\t//JOINTS\n\tselect -hi (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tselect -d (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tselect -d \"RRM_*Shape\";\n\t$chains = `ls -sl`;\n\tint $crntJntNum = 2;\n    \n\tfor ($crntJnt in $chains)\n\t{\n\t\t$crntJntNum = 2;\n\t\twhile ($crntJntNum <= $jointsNum)\n\t\t{\n\t\t\tstring $namePadding = \"\";\n\t\t\tstring $prevPadding = \"\";\n\t\t\t$prevJntNum = ($crntJntNum - 1);\n\t\t\t//CHECK IF END NODE OR NOT\n\t\t\tif ($crntJntNum < 10)\n\t\t\t{\n\t\t\t\t$namePadding = \"0\";\n\t\t\t}\n\t\t\tif ($crntJntNum <= 10)\n\t\t\t{\n\t\t\t\t$prevPadding = \"0\";\n\t\t\t}\n\t\t\tif ($crntJntNum != $jointsNum)\n\t\t\t{\n\t\t\t\tif ($crntJntNum ==2)\n\t\t\t\t{\n\t\t\t\t\tduplicate -n ($crntJnt + $namePadding + $crntJntNum) $crntJnt;\n\t\t\t\t\tmove -r -ls 0 1 0 ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) $crntJnt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tduplicate -n ($crntJnt + $namePadding + $crntJntNum) ($crntJnt + $prevPadding + $prevJntNum);\n\t\t\t\t\tmove -r -ls 0 1 0 ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) ($crntJnt + $prevPadding + $prevJntNum);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\t\t\trename RRM_End ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\tif ($crntJntNum ==2)\n\t\t\t\t{\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) $crntJnt;\n\t\t\t\t\tdelete `parentConstraint $crntJnt ($crntJnt + $namePadding + $crntJntNum)`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) ($crntJnt + $prevPadding + $prevJntNum);\n\t\t\t\t\tdelete `parentConstraint ($crntJnt + $prevPadding + $prevJntNum) ($crntJnt + $namePadding + $crntJntNum)`;\n\t\t\t\t}\n\t\t\t\tif ($mirrorMod ==1)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tsetAttr -e-keyable true ($crntJnt + $namePadding + $crntJntNum + \".pair\");\n\t\t\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".pair\") $crntSide;\n\t\t\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".pair\");\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tsetAttr -e-keyable true ($crntJnt + $namePadding + $crntJntNum + \".opposite\");\n\t\t\t\t}\n\t\t\t\tmove -r -ls  0 1 0 ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t}\n\t\t\t//ATTRIBUTES\n\t\t\t$coreName = `getAttr ($crntJnt + \".core\")`;\n\t\t\tsetAttr -l false ($crntJnt + $namePadding + $crntJntNum + \".core\");\n\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".core\") ($coreName + $namePadding + $crntJntNum);\n\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".core\");\n\n\t\t\t$extName = `getAttr ($crntJnt + \".ext\")`;\n\t\t\tsetAttr -l false ($crntJnt + $namePadding + $crntJntNum + \".ext\");\n\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".ext\") ($extName + $namePadding + $crntJntNum);\n\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".ext\");\n\n\t\t\tif ($mirrorMod == 1)\n\t\t\t{\n\t\t\t\t$oppositeName = `getAttr ($crntJnt + \".opposite\")`;\n\t\t\t\tsetAttr -l false ($crntJnt + $namePadding + $crntJntNum + \".opposite\");\n\t\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".opposite\") ($oppositeName + $namePadding + $crntJntNum);\n\t\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".opposite\");\n\t\t\t}\n\t\t\t//CONNECTORS\n\t\t\tif ($crntJntNum == 2)\n\t\t\t{\n\t\t\t\tRRM_ProxyConnectors($modName, $prfx, $crntJnt, ($crntJnt + $namePadding + $crntJntNum));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRRM_ProxyConnectors($modName, $prfx, ($crntJnt + $prevPadding + $prevJntNum), ($crntJnt + $namePadding + $crntJntNum));\n\t\t\t}\n\t\t\t$crntJntNum++;\n\t\t}\n\t}\n    \n\t//RENAME 01 JOINTS\n\t$topJoints = `ls (\"RRM_\" + $prfx + $modName + \"_??_\")`;\n\t$previousJnt = (\"RRM_\" + $prfx + $modName + \"_Parent_\");\n\t$i =0;\n\tfor ($crntJnt in $topJoints)\n\t{\n\t\trename $crntJnt ($crntJnt + \"01\");\n\n\t\t$coreName = `getAttr ($crntJnt + \"01.core\")`;\n\t\tsetAttr -type \"string\" ($crntJnt + \"01.core\") ($coreName + \"01\");\n\t\tsetAttr -l true ($crntJnt + \"01.core\");\n\n\t\t$extName = `getAttr ($crntJnt + \"01.ext\")`;\n\t\tsetAttr -type \"string\" ($crntJnt + \"01.ext\") ($extName + \"01\");\n\t\tsetAttr -l true ($crntJnt + \"01.ext\");\n\t\t\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\t$oppositeName = `getAttr ($crntJnt + \"01.opposite\")`;\n\t\t\tsetAttr -type \"string\" ($crntJnt + \"01.opposite\") ($oppositeName + \"01\");\t\t\n\t\t\tsetAttr -l true ($crntJnt + \"01.opposite\");\n\t\t}\n\t}\n\n\t//FIX UP AND DOWN\n\tif ($direction == 2)\n\t{\n\t\trotate -r 0 -90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t}\n\tif ($direction == 5)\n\t{\n\t\trotate -r 0 90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t}\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Grp\");\n}\n\nglobal proc RRM_CreateProxyFKChain(string $modName, int $chainsNum, int $jointsNum, int $modDirection, int $modDirection2, int $mirrorMod)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t}\n\tif ($modDirection == 0)\n\t{\n\t\t$modDirection = ($modDirection2 + 3);\n\t}\n\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$rotOffset = 0;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\n\t//FK CHAIN\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppSide = \"\";\n\t\t}\n\t\t\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"fkChain\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\n\t\taddAttr -ln \"chainNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"jointNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"direction\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\n\t\t//CHECK IF MIRRORED\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName);\n\t\t\t}\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\t\t\t\n\t\t}\n\n\t\tif (!`objExists (\"RRM_\" + $modName + \".chainsNum\")`)\n\t\t{\n\t\t\t//ADD CHAIN NUM ATTRIBUTE\t\n\t\t\taddAttr -ln \"chainsNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".chainsNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".chainsNum\") $chainsNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".chainsNum\");\n\t\t\n\t\t\t//ADD JOINT NUM ATTRIBUTE\t\n\t\t\taddAttr -ln \"jointsNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".jointsNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".jointsNum\") $jointsNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".jointsNum\");\n\t\t}\n\n\t\t//X\n\t\tstring $selectedMod;\n\t\tfloat $xValue = 0;\n\t\trotate -r -90 -90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tif ($crntSide == \"left\")\n\t\t{\n\t\t\tif ($modDirection == 1)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\tif ($xValue < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($modDirection == 4)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\t$xValue = 0;\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\t\n\t\t\t\t\tif ($xValue >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if ($crntSide == \"right\")\n\t\t{\n\t\t\tif ($modDirection == 1)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\tif ($xValue >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif ($modDirection == 4)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\t$xValue = 0;\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\t\n\t\t\t\t\tif ($xValue < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Y\n\t\tif ($modDirection == 2)\n\t\t{\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent.rotate\"), -90, 0, 90);\n\t\t}\n\t\tif ($modDirection == 5)\n\t\t{\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent.rotate\"), -90, 0, -90);\n\t\t}\t\t\n\t\t//Z\n\t\tif ($modDirection == 3)\n\t\t{\n\t\t\trotate -r 0 -90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t}\n\t\tif ($modDirection == 6)\n\t\t{\n\t\t\trotate -r 0 90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t}\n\t\t\n\t\tif (!`objExists ($attachMod[0] + \".pair\")`)\n\t\t{\n\t\t\tif ($mirrorMod == 1)\n\t\t\t{\n\t\t\t\tmove -r ($multiplier * 1) 0 0  (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 9;\n\t\t\n\t\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\n\t\tselect -hi (\"RRM_\" + $prfx + $modName);\n\t\tselect -d (\"RRM_\" + $prfx + $modName);\n\t\tpickWalk -d up;\n\t\tselect -d (\"RRM_\" + $prfx + $modName);\n\t\t$lFingerProxies = `ls -sl`;\n\t\t\n\t\tselect (\"RRM_\" + $prfx + $modName);\n\t\t\n\t\tRRM_CreateProxyFKChain2($modName, $chainsNum, $jointsNum, $modDirection, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\t//PARENT CONNECTOR\n\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t////CONNECT AND LINK SCALE CHANNELS TO AVOID PROXY SCEWING\n\t\t//$fkProxies = `ls -sl -type \"transform\" (\"RRM_\" + $prfx + $modName + \"_??_??\")`;\n\t\t//for ($each in $fkProxies)\n\t\t//{\n\t\t//\tif ($modDirection == 1 || $modDirection == 4)\n\t\t//\t{\n\t\t//\t\tconnectAttr -f ($each + \".scaleX\") ($each + \".scaleY\");\n\t\t//\t\tconnectAttr -f ($each + \".scaleX\") ($each + \".scaleZ\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleY\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleZ\");\n\t\t//\t}\n\t\t//\telse if ($modDirection == 2 || $modDirection == 5)\n\t\t//\t{\n\t\t//\t\tconnectAttr -f ($each + \".scaleY\") ($each + \".scaleX\");\n\t\t//\t\tconnectAttr -f ($each + \".scaleY\") ($each + \".scaleZ\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleX\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleZ\");\n\t\t//\t}\n\t\t//\telse if ($modDirection == 3 || $modDirection == 6)\n\t\t//\t{\n\t\t//\t\tconnectAttr -f ($each + \".scaleZ\") ($each + \".scaleX\");\n\t\t//\t\tconnectAttr -f ($each + \".scaleZ\") ($each + \".scaleY\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleX\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleY\");\n\t\t//\t}\n\t\t//}\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$rotOffset = 180;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"fkChain\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\t\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\n\t//ADD DIRECTION ATTRIBUTE\t\n\taddAttr -ln \"direction\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".direction\");\n\tsetAttr (\"RRM_\" + $modName + \".direction\") $modDirection;\n\tsetAttr -l true (\"RRM_\" + $modName + \".direction\");\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\t\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_Parent\") (\"RRM_r_\" + $modName + \"_Parent\");\n\t\t}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_FKChainPrompts(string $modName, int $chainsNum, int $jointsNum, int $mirrorMod, int $modDirection, int $modDirection2)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldFKChainName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this name. Please use a unique name\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$chainSize = ($chainsNum * $jointsNum * $mirrorMod);\n\t\t\t\t\t\tif ($chainSize <= 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstring $returnVal_Generate2 = `confirmDialog\n\t\t\t\t\t\t\t-title \"Large Number of proxies in module\"\n\t\t\t\t\t\t\t-message \"The FK Chain you are about to create has over 100 proxies. This could take several minutes to generate. Proceed?\\n\"\n\t\t\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t\t\t-icon \"warning\"`;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ($returnVal_Generate2 == \"OK\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$chainSize = ($chainsNum * $jointsNum * $mirrorMod);\n\t\t\t\t\tif ($chainSize <= 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstring $returnVal_Generate2 = `confirmDialog\n\t\t\t\t\t\t-title \"Large Number of proxies in module\"\n\t\t\t\t\t\t-message \"The FK Chain you are about to create has over 100 proxies. This could take several minutes to generate. Proceed?\\n\"\n\t\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t\t-icon \"warning\"`;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ($returnVal_Generate2 == \"OK\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////HEAD///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyHead(string $modName, int $RRM_Jaw, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 1;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\tif (`objExists ($attachMod[0] + (\".opposite\"))`)\n\t\t{\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"head\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\t\t\n\t\taddAttr -ln \"jaw\"  -at bool -dv $RRM_Jaw (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\n\t\t\n\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx  + $modName + \"_Top\");\n\t\tmove -r 0 3 0 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.core\") ($prfx + $modName + \"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.ext\") (\"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.ext\");\n\t\t\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx  + $modName + \"_Top\"));\n\t\t\n\t\tif ($RRM_Jaw == 1)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base\t (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmove -r 0 1.5 0.25 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.core\") ($prfx + $modName + \"_Jaw\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.core\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.ext\") (\"_Jaw\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.ext\");\n\t\t\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Jaw\"));\n\t\t\t\n\t\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmove -r 0 1 1.5 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\trotate -r 90 0 0 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_JawEnd\") (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\") ($prfx + $modName + \"_JawEnd\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.ext\") (\"_JawEnd\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.ext\");\n\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Jaw\"), (\"RRM_\" + $prfx + $modName + \"_JawEnd\"));\n\t\t}\n\t\t\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t\t//MIRROR ATTRIBUTES\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".pair\");\n\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".opposite\") ($oppPrfx + $modName);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\t\t\n\t\t\tif ($RRM_Jaw == 1)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Jaw.pair\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.pair\") $crntSide;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.pair\");\n\t\t\t\t\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Jaw.opposite\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.opposite\") ($oppPrfx + $modName + \"_Jaw\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.opposite\");\n        \t\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_JawEnd.pair\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.pair\") $crntSide;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.pair\");\n\t\t\t\t\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_JawEnd.opposite\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.opposite\") ($oppPrfx + $modName + \"_JawEnd\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.opposite\");\n\t\t\t}\n\t\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Top.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.opposite\") ($oppPrfx + $modName + \"_Top\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\t\t}\n\t\t//OFFSET FROM CENTER IF NOT ATTACHED TO PAIR\t\t\n\t\tif (!`objExists ($attachMod[0] + \".pair\")`)\n\t\t{\n\t\t\tmove -r $posOffset 0 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t}\n\t\t\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\n\t\t//ASSIGN COLOURS\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tif ($RRM_Jaw == 1)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t}\n\t\t$headProxies = `ls -sl`;\n\t\tstring $crntHead;\n\t\tfor ($crntHead in $headProxies)\n\t\t{\n\t\t\tsetAttr ($crntHead + \".overrideEnabled\") 1;\n\t\t\tsetAttr ($crntHead + \".overrideColor\") 4;\n\t\t}\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -1;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"head\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\n\t//ADD JAW ATTRIBUTE\n\taddAttr -ln \"jaw\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".jaw\");\n\tsetAttr (\"RRM_\" + $modName + \".jaw\") $RRM_Jaw;\n\tsetAttr -l true (\"RRM_\" + $modName + \".jaw\");\t\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_HeadPrompts(string $modName, int $RRM_Jaw, int $mirrorMod)\n{\n\tstring $modName = `textField -q -text RRM_TextFieldHeadName`;\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldHeadName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyHead($modName, $RRM_Jaw, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyHead($modName, $RRM_Jaw, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////LOOK AT///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyLookAt2(string $modName, int $jointsNum, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $multiplier, string $crntUnit)\n{\n\t//SET EYE NUM IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.eyeNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.eyeNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.eyeNum\");\n\n\tlockNode -lock off (\"RRM_\" + $modName);\n\n\tsetAttr -l false (\"RRM_\" + $modName + \".eyeNum\");\n\tsetAttr (\"RRM_\" + $modName + \".eyeNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".eyeNum\");\n\t\n\n\t//CREATE ATTACH LOCATION\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[0]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[1]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[2]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[3]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[5]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[10]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[9]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[4]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t-worldUpVector 0 1 0 -worldUpObject (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\")`;\n\tparent (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmakeIdentity -apply false -r 1 (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t$targetLoc = `getAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.translate\")`;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.tx\") ($targetLoc[0] * 1.65);\n\tparentConstraint -mo (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t//CREATE FIRST NODE\n\tRRM_CreateProxyBaseUpProxy($crntUnit);\n\trename RRM_BaseUp (\"RRM_\" + $prfx + $modName + \"_01\");\n\tscale -r  3 3.2 3 (\"RRM_\" + $prfx + $modName + \"_01DShape.cv[1]\") (\"RRM_\" + $prfx + $modName + \"_01EShape.cv[0:2]\")\n\t(\"RRM_\" + $prfx + $modName + \"_01FShape.cv[0:2]\") (\"RRM_\" + $prfx + $modName + \"_01GShape.cv[0:7]\");\n\t\n\tmove -r -os -wd 0 8 0 (\"RRM_\" + $prfx + $modName + \"_01DShape.cv[1]\") (\"RRM_\" + $prfx + $modName + \"_01EShape.cv[0:2]\")\n\t(\"RRM_\" + $prfx + $modName + \"_01FShape.cv[0:2]\") (\"RRM_\" + $prfx + $modName + \"_01GShape.cv[0:7]\");\n\tmove -r 0 1 0 (\"RRM_\" + $prfx + $modName + \"_01\");\n\trotate -r -os 0 0 -90 (\"RRM_\" + $prfx + $modName + \"_01\");\n\tmakeIdentity -apply true -t 1-r 1 (\"RRM_\" + $prfx + $modName + \"_01\");\n    \n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.core\") ($prfx + $modName + \"_01\");\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.core\");\n    \n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.ext\") (\"_01\");\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.ext\");\n\t\n\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_01\"));\n\n\tif ($mirrorMod ==1)\n\t{\n\t\t//MIRROR ATTRIBUTES\n\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01.pair\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.pair\") $crntSide;\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.pair\");\n\t\t\n\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01.opposite\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.opposite\") ($oppPrfx + $modName + \"_01\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.opposite\");\n\t}\n\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_01\"); xform -os -piv 0 0 0;\n\t\n\tif ($jointsNum > 1)\n\t{\n\t\t//JOINTS\n\t\tint $crntjointNum = 2;\n\t\twhile ($crntjointNum <= $jointsNum)\n\t\t{\n\t\t\t$previousMod = ($crntjointNum -1);\n\t\t\tstring $namePadding = \"\";\n\t\t\tif ($crntjointNum < 10)\n\t\t\t{\n\t\t\t\t$namePadding = \"0\";\n\t\t\t}\n\t\t\tstring $namePaddingPrev = \"\";\n\t\t\tif ($crntjointNum < 11)\n\t\t\t{\n\t\t\t\t$namePaddingPrev = \"0\";\n\t\t\t}\n\t\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum) (\"RRM_\" + $prfx + $modName + \"_\" + $namePaddingPrev + $previousMod);\n\t\t\tmove -r -ls 0 0 -0.75 (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum);\n\t\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".core\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".core\") ($prfx + $modName + \"_\" + $namePadding + $crntjointNum);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".core\");\n\t\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".ext\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".ext\") (\"_\" + $namePadding + $crntjointNum);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".ext\");\n\t\t\n\t\t\tif ($mirrorMod ==1)\n\t\t\t{\n\t\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".opposite\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".opposite\") ($oppPrfx + $modName + \"_\" + $namePadding + $crntjointNum);\t\t\t\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".opposite\");\n\t\t\t}\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum));\n\n\t\t\t$crntjointNum++;\n\t\t}\n\t}\n\t//FIX JOINT OFFSET\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_CenterLctr\");\n\t$lookAts = `ls (\"RRM_\" + $prfx + $modName + \"_??\")`;\n\tdelete `pointConstraint $lookAts (\"RRM_\" + $prfx + $modName + \"_CenterLctr\")`;\n\tparent $lookAts (\"RRM_\" + $prfx + $modName + \"_CenterLctr\");\n\tdelete `pointConstraint (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_CenterLctr\")`;\n\tparent $lookAts (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_Grp\")`;\n\tparent (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\tmakeIdentity -apply true -t 1 -r 1 (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Grp.scale\"), 1, 1, 1);\n\n\tdelete (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_CenterLctr\");\n}\n\n\nglobal proc RRM_CreateProxyLookAt(string $modName, int $jointsNum, int $modDirection, int $modDirection2, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tif ($modDirection == 0)\n\t{\n\t\t$modDirection = ($modDirection2 + 3);\n\t}\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t}\n\t\t\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"lookAt\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\n\t\taddAttr -ln \"eyeNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t\t\n\t\t\t//MIRROR ATTRIBUTES\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".pair\");\n\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".opposite\") ($oppPrfx + $modName);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\t\t\n\t\t}\n\t\t\t\n\t\tif (!`objExists (\"RRM_\" + $modName + \".eyeNum\")`)\n\t\t{\n\t\t\t//ADD EYE NUM ATTRIBUTE\n\t\t\taddAttr -ln \"eyeNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".eyeNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".eyeNum\") $jointsNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".eyeNum\");\n\t\t}\n\n\t\t//X\n\t\tstring $selectedMod;\n\t\tfloat $xValue = 0;\n\t\trotate -r ($multiplier * -90) -90 0 (\"RRM_\" + $prfx + $modName);\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName);\n\t\tif ($modDirection == 1)\n\t\t{\n\t\t\t//CHECK LOCATION\n\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t{\n\t\t\t    $modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t    $xValue = ($xValue + $modTX[0]);\n\t\t\t}\n\t\t\tif ($xValue < 0)\n\t\t\t{\n\t\t\t\trotate -r 0 ($multiplier * 180) 0 (\"RRM_\" + $prfx + $modName);\n\t\t\t}\n\t\t}\n\t\tif ($modDirection == 4)\n\t\t{\n\t\t\t//CHECK LOCATION\n\t\t\t$xValue = 0;\n\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t{\n\t\t\t    $modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t    $xValue = ($xValue + $modTX[0]);\n\t\t\t}\n\t\t\tif ($xValue >= 0)\n\t\t\t{\n\t\t\t\trotate -r 0 ($multiplier * 180) 0 (\"RRM_\" + $prfx + $modName);\n\t\t\t}\n\t\t}\n\t\t//Y\n\t\tif ($modDirection == 2)\n\t\t{\n\t\t\trotate -r -90 0 ($multiplier * 90) (\"RRM_\" + $prfx + $modName);\n\t\t}\n\t\tif ($modDirection == 5)\n\t\t{\n\t\t\trotate -r 90 0 ($multiplier * -90) (\"RRM_\" + $prfx + $modName);\n\t\t}\t\t\n\t\t//Z\n\t\tif ($modDirection == 3)\n\t\t{\n\t\t\trotate -r 0 ($multiplier * -90) 0 (\"RRM_\" + $prfx + $modName);\n\t\t}\n\t\tif ($modDirection == 6)\n\t\t{\n\t\t\trotate -r 0 ($multiplier * 90) 0 (\"RRM_\" + $prfx + $modName);\n\t\t}\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName);\n\t\t\n\t\t//OFFSET FROM CENTER IF NOT ATTACHED TO PAIR\t\t\n\t\tif (!`objExists ($attachMod[0] + \".pair\")`)\n\t\t{\n\t\t\tif ($mirrorMod == 1)\n\t\t\t{\n\t\t\t\tmove -r ($multiplier * 1) 0 0  (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 30;\n\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\t\n\t\tRRM_CreateProxyLookAt2($modName, $jointsNum, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"lookAt\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\n\t//ADD DIRECTION ATTRIBUTE\t\n\taddAttr -ln \"direction\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".direction\");\n\tsetAttr (\"RRM_\" + $modName + \".direction\") $modDirection;\n\tsetAttr -l true (\"RRM_\" + $modName + \".direction\");\t\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_LookAtPrompts(string $modName, int $jointsNum, int $mirrorMod, int $modDirection, int $modDirection2)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text textFieldLookAtModName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyLookAt($modName, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyLookAt($modName, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////Auxiliary///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyAuxiliary(string $modName, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t}\n\t\t\n\t\t//GET OPPOSITE ATTACHMENT\n\t\t//if ($i == 1)\n\t\t//{\n\t\t//\tif (`objExists ($attachMod[0] + \".opposite\")`)\n\t\t//\t{\n\t\t//\t\t$oppAttach = `getAttr ($attachMod[0] + \".opposite\")`;\n\t\t//\t\t$attachMod[0] = (\"RRM_\" + $oppAttach);\n\t\t//\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t//\t}\n\t\t//}\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\tscale -r 1.5 1.5 1.5 RRM_Base;\n\t\tmakeIdentity -apply true -s 1 RRM_Base;\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Aux\"); xform -os -piv 0 0 0;\n\t\t\n\t\taddAttr -ln \"modType\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.modType\") \"auxiliary\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.modType\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.core\") ($prfx + $modName + \"_Aux\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.core\");\n\n\t\taddAttr -ln \"attachNode\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\n\t\t//CREATE COLOURED AXES CURVES\n\t\tcurve  -n (\"RRM_\" + $prfx + $modName + \"_Aux_X\") -d 1 -p 0 0 0 -p 1 0 0 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Aux_XShape\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_XShape.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_XShape.overrideColor\") 13;\n\t\t\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Aux_Y\") -d 1 -p 0 0 0 -p 0 1 0 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Aux_YShape\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_YShape.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_YShape.overrideColor\") 14;\n\t\t\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Aux_Z\") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape.overrideColor\") 6;\n\t\t\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Aux_XShape\") (\"RRM_\" + $prfx + $modName + \"_Aux_YShape\") (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape\")(\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Aux_X\") (\"RRM_\" + $prfx + $modName + \"_Aux_Y\") (\"RRM_\" + $prfx + $modName + \"_Aux_Z\");\n\n\n\t\t//ADD PINNED ATTRIBUTE\n\t\taddAttr -ln \"pinned\"  -at bool (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\") 0;\n\t\tsetAttr -lock true (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\t\n\t\t//ADD CONNECTOR VIZ ATTRIBUTE\n\t\taddAttr -ln \"connectors\"  -at bool (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.connectors\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.connectors\") 1;\n\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t\t\n\t\t\t//MIRROR ATTRIBUTES\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".pair\");\n\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".opposite\") ($oppPrfx + $modName);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.opposite\") ($oppPrfx + $modName + \"_Aux\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.opposite\");\t\t\n\t\t}\n\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\t\n\t\t\n\t\t//makeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.overrideColor\") 24;\n\t\t\n\t\t//RRM_CreateProxyLookAt2($modName, $jointsNum, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Aux\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"auxiliary\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\t//if (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t//\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\t//if (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t//\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\t//else if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t//\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\t\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Aux\")`)\n\t{\n\t\tmove -r 1 0 0 (\"RRM_l_\" + $modName + \"_Aux\");\n\t\tmove -r -1 0 0 (\"RRM_r_\" + $modName + \"_Aux\");\n\t\tselect (\"RRM_l_\" + $modName + \"_Aux\") (\"RRM_r_\" + $modName + \"_Aux\");\n\t}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Aux\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Aux\");}\n\n\n}\n\nglobal proc RRM_AuxiliaryPrompts(string $modName, int $mirrorMod)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text textFieldAuxiliaryModName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyAuxiliary($modName, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyAuxiliary($modName, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n//OVERRIDE COLOUR\nglobal proc RRM_ProxyOverrideColor(int $colorVal)\n{\n\t$selection = `ls -sl -type \"transform\"`;\n\tfor ($each in $selection)\n\t{\n\t\t//MAKE SURE EACH IN SELECTION IS A VALID PROXY\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t$modName = `getAttr ($each + \".modName\")`;\n\t\t\t$modNodes = `ls -type \"transform\" (\"RRM_*\" + $modName + \"*\")`;\n\t\t\t//MAKE SURE NODE IS PART OF THE SELECTED MODULE\n\t\t\tfor ($each2 in $modNodes)\n\t\t\t{\n\t\t\t\t//VALIDATE EACH IS PART OF THE MODULE OF THE INITIAL SELECTED BRANCH\n\t\t\t\tif (`objExists ($each2 + \".modName\")`)\n\t\t\t\t{\n\t\t\t\t\t$checkModName = `getAttr ($each2 + \".modName\")`;\n\t\t\t\t\tif ($checkModName == $modName)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CHECK IF IT IS RESET\n\t\t\t\t\t\tif ($colorVal == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstring $modType =`getAttr (\"RRM_\" + $checkModName + \".top\")`;\n\t\t\t\t\t\t\t//print ($modType + \"\\n\");\n\t\t\t\t\t\t\tif ($modType == \"spline\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 29;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"arm\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 7;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"leg\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 31;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"fkChain\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 9;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"head\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"lookAt\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 30;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") $colorVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tselect $selection;\n}\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////RENAME MODULE/////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n//RENAME MODULE\t\nglobal proc RRM_Rename(string $name, string $selection, int $call)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\t\n\tstring $modName;\n\tstring $modType;\n\tstring $attachNode;\n\tstring $side;\n\tstring $ext;\n\t\n\tstring $eachModName;\n\t\n\tif ($call == 0)\n\t{\n\t\t$modName = `getAttr ($selection + \".modName\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $modName + \".top\")`;\n\t\t$attachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\t}\n\telse\n\t{\n\t\t$modName = `getAttr (\"RRM_\" + $selection + \".core\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $selection + \".top\")`;\n\t\t//ORIGINAL MODULE'S ATTACH NODE\n\t\t$sourceAttachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\n\t\t//GET ATTACH NODE'S CLONED ATTRIBUTE\n\t\tstring $cloneName = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\tif (`gmatch $cloneName \"\"`)\n\t\t{//ATTACH NODE IS NOT A CLONE\n\t\t\t$attachNode = ($sourceAttachNode);\n\t\t}\n\t\telse\n\t\t{//ATTACH NODE IS A CLONE\n\t\t\t$attachNode = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\t}\n\t}\n\tstring $clonedParentNodes[];\t\n\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $prfxReset = \"l_\";\n\tif (!`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$mirrorMod = 0;\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t}\n\tint $firstTimeThrough;\n\n\t//CHECK IF SPLINE\n\tif (`gmatch $modType \"spline\"`)\n\t{\n\t\tRRM_Clone_Spline($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"arm\"`)\n\t{//CHECK IF ARM\n\t\tRRM_Clone_Arm($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"leg\"`)\n\t{//CHECK IF LEG\n\t\tRRM_Clone_Leg($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"fkChain\"`)\n\t{//CHECK IF FKCHAIN\n\t\tRRM_Clone_FkChain($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"head\"`)\n\t{//CHECK IF HEAD\n\t\tRRM_Clone_Head($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"lookAt\"`)\n\t{//CHECK IF LOOKAT\n\t\tRRM_Clone_LookAt($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"auxiliary\"`)\n\t{//CHECK IF AUXILIARY\n\t\tRRM_Clone_Auxiliary($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\t\t\n\tif ($call <= 1)\n\t{\n\t\t//CHECK TO SEE IF IT IS NOT AN AUXILIARY\n\t\t//print (\"name is \" + $name + \"\\n\");\n\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")` && !`objExists (\"RRM_l_\" + $name + \"_Aux\")`)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Parent\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Parent\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Aux\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Aux\");\n\t\t\t}\n\t\t}\t\t\t\n\t}\n\t\n\t//FIND CHILDREN MODULES AND ATTACH TO RENAMED DUPLICATE\n\tselect -hi (\"RRM_\" + $modName);\n\tselect -d (\"RRM_\" + $modName);\n\t//print (\"ModName is \" + $modName + \"\\n\");\n\t$hierarchy = `ls -sl -type \"transform\"`;\n\t//print \"Top Nodes are \";\n\t//print $hierarchy;\n\t//print \"\\n\";\n\tstring $parentNodes[];\n\tstring $prfx = \"\";\n\tint $childModCount = 0;\n\tfor ($each in $hierarchy)\n\t{\n\t\tif (`objExists ($each + \".parent\")` && !`objExists ($each + \".top\")`)\n\t\t{//VERIFY IT IS A PARENT\n\t\t\t$attachNode = `getAttr ($each + \".attachNode\")`;\n\t\t\tif (`gmatch ($attachNode + \"*\") ($modName + \"*\")`)\n\t\t\t\t{//MAKE SURE IT IS A PARENT NODE ATTACHED TO THE RENAMED MODULE\n\t\t\t\t$eachModName = `getAttr ($each + \".modName\")`;\n\t\t\t\t//print (\"modName is \" + $modName + \"\\n\");\n\t\t\t\t//print (\"eachModName is \" + $eachModName + \"\\n\");\n\t\t\t\tif (!`gmatch $modName $eachModName`)\n\t\t\t\t\t{//MAKE SURE IT IS NOT A PARENT NODE OF THE RENAMED MODULE\n\t\t\t\t\tselect $parentNodes $each;\n\t\t\t\t\t//print (\"each is \" + $each + \"\\n\");\n\t\t\t\t\t$parentNodes = `ls -sl`;\n\t\t\t\t\tstring $attachNode = `getAttr ($each + \".attachNode\")`;\n\t\t\t\t\tif (`objExists (\"RRM_\" + $attachNode + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = `getAttr (\"RRM_\" + $attachNode + \".pair\")`;\n\t\t\t\t\t\tif (`gmatch $prfx \"left\"`)\n\t\t\t\t\t\t\t{$prfx = \"l_\";}\n\t\t\t\t\t\telse if (`gmatch $prfx \"right\"`)\n\t\t\t\t\t\t\t{$prfx = \"r_\";}\n\t\t\t\t\t}\n\t\t\t\t\tstring $attachNode_Ext = `getAttr (\"RRM_\" + $attachNode + \".ext\")`;\n\t\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $name + $attachNode_Ext)`)\n\t\t\t\t\t{//ONLY ATTACH IF IT IS A DIRECT CHILD MODULE OF THE RENAMED MODULE\n\t\t\t\t\t\tselect (\"RRM_\" + $prfx + $name + $attachNode_Ext);\n\t\t\t\t\t\tselect $each;\n\t\t\t\t\t\tRRM_AttachToNewModule((\"RRM_\" + $prfx + $name + $attachNode_Ext));\n\t\t\t\t\t}\n\t\t\t\t\t$childModCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//print \"Parent Nodes are \";\n\t//print $parentNodes;\n\t//print \"\\n\";\n\n\t//DELETE ORIGINAL MODULE\n\tselect $selection;\n\tRRM_DeleteBranchPrompts;\n\t\n\t\n}\n\nglobal proc RRM_RenamePrompts(string $name)\n{\n\tstring $selection[] = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tstring $coreCheck;\n\tif (`objExists ($selection[0] + \".core\")`)\n\t{\n\t\t$coreCheck = `getAttr ($selection[0] + \".core\")`;\n\t}\n\t\n\t$nameCheck = `size $name`;\n\tif ($selectionSize == 0)\n\t{//CHECK THAT SOMETHING IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Nothing Selected\"\n\t\t\t-message \"You must select a node of the desired module to rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if ($selectionSize > 1)\n\t{//CHECK THAT ONLY ONE OBJECT IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Only One Module May Be Cloned At A Time\"\n\t\t\t-message \"You must select only one node of a desired module to rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (!`objExists ($selection[0] + \".core\")`)\n\t{//CHECK TO MAKE SURE OBJECT IS A VALID MODULE\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message \"You must select one node of a desired module to rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\t\n\telse if (`gmatch $coreCheck \"MAIN\"` || `gmatch $coreCheck \"ROOT\"`)\n\t{//CHECK TO MAKE SURE OBJECT IS NOT MAIN OR ROOT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message \"You cannot rename the MAIN or ROOT modules.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\n\telse if ($nameCheck == \"0\")\n\t{//CHECK TO MAKE SURE THE USER HAS INPUT A NAME\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($name))\n\t{//CHECK TO MAKE SURE A VALID NAME HAS BEEN USED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists (\"RRM_\" + $name)`)\n\t{//CHECK TO MAKE SURE NAME DOES NOT CONFLICT WITH EXISTING OBJECT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tprint \"renaming...\\n\";\n\t\tstring $parentNullName = \"\";\n\t\tRRM_Rename($name, $selection[0], 0);\n\t//\n\t//\t//RESET CLONE ATTRIBUTES FOR FUTURE NAMES\n\t//\tselect -hi RRM_MAIN;\n\t//\tselect -d RRM_MAIN;\n\t//\t$nodes = `ls -sl -type \"nurbsCurve\"`;\n\t//\tpickWalk -d up;\n\t//\t$nodes = `ls -sl`;\n\t//\tstring $each;\n\t//\tfor ($each in $nodes)\n\t//\t{\n\t//\t\tif (`objExists ($each + \".rename\")`)\n\t//\t\t{\n\t//\t\t\tsetAttr -type \"string\" ($each + \".rename\") \"\";\n\t//\t\t}\n\t//\t}\n\t//}\n\t//select $selection;\n\t//if (`objExists \"RRM_Clone_Lctr.topCloneNode\"`)\n\t//{\n\t//\t$topNode[0] = `getAttr \"RRM_Clone_Lctr.topCloneNode\"`;\n\t//\tif (`objExists ($topNode[0] + \".opposite\")`)\n\t//\t{\n\t//\t\t$opposite = `getAttr ($topNode[0] + \".opposite\")`;\n\t//\t\t$topNode[1] = (\"RRM_\" + $opposite);\n\t//\t}\n\t//\tdelete \"RRM_Clone_Lctr\";\n\t//\tselect $topNode;\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////CLONE MODULE/////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n//CLONE SPLINE\nglobal proc RRM_Clone_Spline(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $splineNum = `getAttr (\"RRM_\" + $modName + \".jointsNum\")`;\n\tint $i = 0;\n\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.rotate\")`;\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.clone\") ($prfx + $name + \"_Top\");\n\n\t\t//WHILE LOOP\n\t\tint $i2 = 1;\n\t\twhile ($i2 <= $splineNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i2 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//TRANSFORMS LOCATOR\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr\");\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".rotate\")`;\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".clone\") ($prfx + $name + $nPd + $i2);\n\t\t\t\n\t\t\t$i2++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\n\t//GENERATE NEW SPLINE\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxySpline($name, $splineNum, $mirrorMod);\n\t\n\t$clonedParentNodes = `ls -sl`;\n\t\n\t\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\t\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\t\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\t\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\")`;\t\t\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\")`;\t\t\n\t\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\t\n\t\t$i3 = 1;\n\t\twhile ($i3 <= $splineNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i3 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.rotate\")`;\t\t\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr\");\n\t\t\t$i3++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\n\nglobal proc RRM_Clone_Arm(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $upperArmNum = `getAttr (\"RRM_\" + $modName + \".upperArmNum\")`;\n\tint $lowerArmNum = `getAttr (\"RRM_\" + $modName + \".lowerArmNum\")`;\n\tint $elbowNum    = `getAttr (\"RRM_\" + $modName + \".elbowNum\")`;\n\tint $elbowJoints = `getAttr (\"RRM_\" + $modName + \".elbowJoints\")`;\n\t$mirrorMod       = 2;\n\t$prfx            = \"l_\";\n\t$prfxReset       = \"l_\";\n\t\n\tif (`objExists (\"RRM_\" + $modName + \".single\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t\t$checkSide = `getAttr (\"RRM_\" + $modName + \".single\")`;\n\t\tif ($checkSide == \"left\")\n\t\t{\n\t\t\t$mirrorMod = 1;\n\t\t}\n\t\telse if ($checkSide == \"right\")\n\t\t{\n\t\t\t$mirrorMod = 3;\n\t\t}\n\t}\n\tint $i = 1;\n\n\tstring $clonedParentNodes[];\t\n\t\n\twhile ($prfx != \"end\")\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr\");\n\t\t$clavPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.translate\")`;\n\t\t$clavRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.rotate\")`;\n\t\t$clavScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.translate\"), $clavPos[0], $clavPos[1], $clavPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.rotate\"), $clavRot[0], $clavRot[1], $clavRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.scale\"), $clavScale[0], $clavScale[1], $clavScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.clone\") ($prfx + $name + \"_Clavicle\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr\");\n\t\t$shldrPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.translate\")`;\n\t\t$shldrRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.rotate\")`;\n\t\t$shldrScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.translate\"), $shldrPos[0], $shldrPos[1], $shldrPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.rotate\"), $shldrRot[0], $shldrRot[1], $shldrRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.scale\"), $shldrScale[0], $shldrScale[1], $shldrScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.clone\") ($prfx + $name + \"_Shoulder\");\n\t\t\n\t\tif ($elbowJoints == 1)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr\");\n\t\t\t$elbowPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.translate\")`;\n\t\t\t$elbowRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.rotate\")`;\n\t\t\t$elbowScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.translate\"), $elbowPos[0], $elbowPos[1], $elbowPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.rotate\"), $elbowRot[0], $elbowRot[1], $elbowRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.scale\"), $elbowScale[0], $elbowScale[1], $elbowScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.clone\") ($prfx + $name + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr\");\n\t\t\t$elbow1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.translate\")`;\n\t\t\t$elbow1Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.rotate\")`;\n\t\t\t$elbow1Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.translate\"), $elbow1Pos[0], $elbow1Pos[1], $elbow1Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.rotate\"), $elbow1Rot[0], $elbow1Rot[1], $elbow1Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.scale\"), $elbow1Scale[0], $elbow1Scale[1], $elbow1Scale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.clone\") ($prfx + $name + \"_Elbow1\");\n\t\t\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr\");\n\t\t\t$elbow2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.translate\")`;\n\t\t\t$elbow2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.rotate\")`;\n\t\t\t$elbow2Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.translate\"), $elbow2Pos[0], $elbow2Pos[1], $elbow2Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.rotate\"), $elbow2Rot[0], $elbow2Rot[1], $elbow2Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.scale\"), $elbow2Scale[0], $elbow2Scale[1], $elbow2Scale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.clone\") ($prfx + $name + \"_Elbow2\");\n\t\t}\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr\");\n\t\t$wristPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.translate\")`;\n\t\t$wristRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.rotate\")`;\n\t\t$wristScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.translate\"), $wristPos[0], $wristPos[1], $wristPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.rotate\"), $wristRot[0], $wristRot[1], $wristRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.scale\"), $wristScale[0], $wristScale[1], $wristScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.clone\") ($prfx + $name + \"_Wrist\");\t\t\t\n\n\t\tif ($prfx == \"l_\")\n\t\t{//SWITCH TO RIGHT\n\t\t\t$prfx = \"r_\";\n\t\t}\n\t\telse if ($prfx == \"r_\"|| $prfx == \"\")\n\t\t{//SWITCH TO END\n\t\t\t$prfx = \"end\";\n\t\t}\n\t}\n\t\n\t//GENERATE NEW ARM(S)\n\tselect (\"RRM_\" + $attachNode);\n\t//RRM_CreateProxySpline($name, $splineNum, $mirrorMod);\n\tRRM_CreateProxyArm($name, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod);\n\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$prfx = $prfxReset;\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\t$clavPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.translate\")`;\n\t\t$clavRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.rotate\")`;\t\t\n\t\t$clavScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Clavicle.translate\"), $clavPos[0], $clavPos[1], $clavPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Clavicle.rotate\"), $clavRot[0], $clavRot[1], $clavRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Clavicle.scale\"), $clavScale[0], $clavScale[1], $clavScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr\");\n\n\t\t$shldrPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.translate\")`;\n\t\t$shldrRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.rotate\")`;\t\t\n\t\t$shldrScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Shoulder.translate\"), $shldrPos[0], $shldrPos[1], $shldrPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Shoulder.rotate\"), $shldrRot[0], $shldrRot[1], $shldrRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Shoulder.scale\"), $shldrScale[0], $shldrScale[1], $shldrScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr\");\n\n\t\t\t\n\t\tif ($elbowJoints == 1)\n\t\t{\n\t\t\t$elbowPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.translate\")`;\n\t\t\t$elbowRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.rotate\")`;\t\t\n\t\t\t$elbowScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.scale\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Elbow.translate\"), $elbowPos[0], $elbowPos[1], $elbowPos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elbow1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.translate\")`;\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Elbow1.translate\"), $elbow1Pos[0], $elbow1Pos[1], $elbow1Pos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr\");\n\n\t\t\t$elbow2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.translate\")`;\n\t\t\t$elbow2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.rotate\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Elbow2.translate\"), $elbow2Pos[0], $elbow2Pos[1], $elbow2Pos[2]);\n\t\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_Elbow2.rotateX\") $elbow2Rot[0];\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr\");\n\t\t}\n\n\t\t$wristPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.translate\")`;\n\t\t$wristRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.rotate\")`;\t\t\n\t\t$wristScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Wrist.translate\"), $wristPos[0], $wristPos[1], $wristPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Wrist.rotate\"), $wristRot[0], $wristRot[1], $wristRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Wrist.scale\"), $wristScale[0], $wristScale[1], $wristScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\n\nglobal proc RRM_Clone_Leg(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $upperLegNum = `getAttr (\"RRM_\" + $modName + \".upperLegNum\")`;\n\tint $lowerLegNum = `getAttr (\"RRM_\" + $modName + \".lowerLegNum\")`;\n\tint $kneeNum    = `getAttr (\"RRM_\" + $modName + \".kneeNum\")`;\n\tint $kneeJoints = `getAttr (\"RRM_\" + $modName + \".kneeJoints\")`;\n\t$mirrorMod       = 2;\n\t$prfx            = \"l_\";\n\t$prfxReset       = \"l_\";\n\t\n\tif (`objExists (\"RRM_\" + $modName + \".single\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t\t$checkSide = `getAttr (\"RRM_\" + $modName + \".single\")`;\n\t\tif ($checkSide == \"left\")\n\t\t{\n\t\t\t$mirrorMod = 1;\n\t\t}\n\t\telse if ($checkSide == \"right\")\n\t\t{\n\t\t\t$mirrorMod = 3;\n\t\t}\n\t}\n\tint $i = 1;\n\n\tstring $clonedParentNodes[];\t\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr\");\n\t\t$hipPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip.translate\")`;\n\t\t$hipRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip.rotate\")`;\n\t\t$hipScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.translate\"), $hipPos[0], $hipPos[1], $hipPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.rotate\"), $hipRot[0], $hipRot[1], $hipRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.scale\"), $hipScale[0], $hipScale[1], $hipScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.clone\") ($prfx + $name + \"_Hip\");\n\t\t\t\n\t\tif ($kneeJoints == 1)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr\");\n\t\t\t$kneePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee.translate\")`;\n\t\t\t$kneeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee.rotate\")`;\n\t\t\t$kneeScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.translate\"), $kneePos[0], $kneePos[1], $kneePos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.rotate\"), $kneeRot[0], $kneeRot[1], $kneeRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.scale\"), $kneeScale[0], $kneeScale[1], $kneeScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.clone\") ($prfx + $name + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr\");\n\t\t\t$knee1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.translate\")`;\n\t\t\t$knee1Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.rotate\")`;\n\t\t\t$knee1Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.translate\"), $knee1Pos[0], $knee1Pos[1], $knee1Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.rotate\"), $knee1Rot[0], $knee1Rot[1], $knee1Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.scale\"), $knee1Scale[0], $knee1Scale[1], $knee1Scale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.clone\") ($prfx + $name + \"_Knee1\");\n\t\t\t\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr\");\n\t\t\t$knee2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.translate\")`;\n\t\t\t$knee2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.rotate\")`;\n\t\t\t$knee2Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.translate\"), $knee2Pos[0], $knee2Pos[1], $knee2Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.rotate\"), $knee2Rot[0], $knee2Rot[1], $knee2Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.scale\"), $knee2Scale[0], $knee2Scale[1], $knee2Scale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.clone\") ($prfx + $name + \"_Knee2\");\n\t\t}\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr\");\n\t\t$anklePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle.translate\")`;\n\t\t$ankleRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle.rotate\")`;\n\t\t$ankleScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.translate\"), $anklePos[0], $anklePos[1], $anklePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.rotate\"), $ankleRot[0], $ankleRot[1], $ankleRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.scale\"), $ankleScale[0], $ankleScale[1], $ankleScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.clone\") ($prfx + $name + \"_Ankle\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr\");\n\t\t$ballPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball.translate\")`;\n\t\t$ballRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball.rotate\")`;\n\t\t$ballScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.translate\"), $ballPos[0], $ballPos[1], $ballPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.rotate\"), $ballRot[0], $ballRot[1], $ballRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.scale\"), $ballScale[0], $ballScale[1], $ballScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.clone\") ($prfx + $name + \"_Ball\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr\");\n\t\t$toePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe.translate\")`;\n\t\t$toeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe.rotate\")`;\n\t\t$toeScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.translate\"), $toePos[0], $toePos[1], $toePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.rotate\"), $toeRot[0], $toeRot[1], $toeRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.scale\"), $toeScale[0], $toeScale[1], $toeScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.clone\") ($prfx + $name + \"_Toe\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr\");\n\t\t$heelPivPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr.tx\") $heelPivPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr.tz\") $heelPivPos[2];\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.clone\") ($prfx + $name + \"_HeelPivot\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr\");\n\t\t$lTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr.tx\") $lTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr.tz\") $lTiltPos[2];\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.clone\") ($prfx + $name + \"_FootLeftTilt\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr\");\n\t\t$rTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr.tx\") $rTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr.tz\") $rTiltPos[2];\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.clone\") ($prfx + $name + \"_FootRightTilt\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr\");\n\t\t$grndPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground.translate\")`;\n\t\t$grndRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground.rotate\")`;\n\t\t$grndScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.translate\"), $grndPos[0], $grndPos[1], $grndPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.rotate\"), $grndRot[0], $grndRot[1], $grndRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.scale\"), $grndScale[0], $grndScale[1], $grndScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.clone\") ($prfx + $name + \"_Ground\");\n\t\t\n\t\t\n\t\tif ($prfx == \"l_\")\n\t\t{//SWITCH TO RIGHT\n\t\t\t$prfx = \"r_\";\n\t\t}\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW LEG(S)\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyLeg($name, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod);\n\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$prfx = $prfxReset;\n\t$i = 1;\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\t$hipPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.translate\")`;\n\t\t$hipRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.rotate\")`;\t\t\n\t\t$hipScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Hip.translate\"), $hipPos[0], $hipPos[1], $hipPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Hip.rotate\"), $hipRot[0], $hipRot[1], $hipRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Hip.scale\"), $hipScale[0], $hipScale[1], $hipScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr\");\n\n\t\t\t\n\t\tif ($kneeJoints == 1)\n\t\t{\n\t\t\t$kneePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.translate\")`;\n\t\t\t$kneeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.rotate\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Knee.translate\"), $kneePos[0], $kneePos[1], $kneePos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$knee1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.translate\")`;\n\t\t\t$knee1Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.rotate\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Knee1.translate\"), $knee1Pos[0], $knee1Pos[1], $knee1Pos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr\");\n\n\t\t\t$knee2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.translate\")`;\n\t\t\t$knee2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.rotate\")`;\t\t\n\t\t\t$knee2Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.scale\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Knee2.translate\"), $knee2Pos[0], $knee2Pos[1], $knee2Pos[2]);\n\t\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_Knee2.rotateY\") $knee2Rot[1];\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr\");\n\t\t}\n\n\t\t$anklePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.translate\")`;\n\t\t$ankleRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.rotate\")`;\t\t\n\t\t$ankleScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ankle.translate\"), $anklePos[0], $anklePos[1], $anklePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ankle.rotate\"), $ankleRot[0], $ankleRot[1], $ankleRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ankle.scale\"), $ankleScale[0], $ankleScale[1], $ankleScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr\");\n\n\n\t\t$ballPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.translate\")`;\n\t\t$ballRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.rotate\")`;\t\t\n\t\t$ballScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ball.translate\"), $ballPos[0], $ballPos[1], $ballPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ball.rotate\"), $ballRot[0], $ballRot[1], $ballRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ball.scale\"), $ballScale[0], $ballScale[1], $ballScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr\");\n\n\t\t$toePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.translate\")`;\n\t\t$toeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.rotate\")`;\t\t\n\t\t$toeScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Toe.translate\"), $toePos[0], $toePos[1], $toePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Toe.rotate\"), $toeRot[0], $toeRot[1], $toeRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Toe.scale\"), $toeScale[0], $toeScale[1], $toeScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr\");\n\n\n\t\t$heelPivPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_HeelPivot.tx\") $heelPivPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_HeelPivot.tz\") $heelPivPos[2];\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr\");\n\n\n\t\t$lTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootLeftTilt.tx\") $lTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootLeftTilt.tz\") $lTiltPos[2];\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr\");\n\n\n\t\t$rTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootRightTilt.tx\") $rTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootRightTilt.tz\") $rTiltPos[2];\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr\");\n\n\n\t\t$anklePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.translate\")`;\n\t\t$ankleRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.rotate\")`;\t\t\n\t\t$ankleScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ground.translate\"), $anklePos[0], $anklePos[1], $anklePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ground.rotate\"), $ankleRot[0], $ankleRot[1], $ankleRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ground.scale\"), $ankleScale[0], $ankleScale[1], $ankleScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_FkChain(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $chainsNum = `getAttr (\"RRM_\" + $modName + \".chainsNum\")`;\n\tint $jointsNum = `getAttr (\"RRM_\" + $modName + \".jointsNum\")`;\n\tint $direction = `getAttr (\"RRM_\" + $modName + \".direction\")`;\n\tint $i = 0;\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\n\t\t//WHILE LOOP FOR CHAINS\n\t\tint $chainLoop = 1;\n\t\twhile ($chainLoop <= $chainsNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($chainLoop >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t$jointLoop = 1;\n\t\t\t//WHILE LOOP FOR JOINTS\n\t\t\twhile ($jointLoop <= $jointsNum)\n\t\t\t{\t\t\t\t\n\t\t\t\tstring $jPad = \"_0\";\n\t\t\t\tif ($chainLoop >= 10)\n\t\t\t\t{\n\t\t\t\t\tstring $jPad = \"_\";\n\t\t\t\t}\n\t\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr\");\n\t\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".translate\")`;\n\t\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".rotate\")`;\n\t\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".scale\")`;\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t\t//CLONE ATT\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".clone\") ($prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop);\n\t\t\t\t$jointLoop++;\t\t\n\t\t\t}\n\t\t\t$chainLoop++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW FK CHAIN\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyFKChain($name, $chainsNum, $jointsNum, $direction, $direction, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t\n\t\t//WHILE LOOP FOR CHAINS\n\t\tint $chainLoop = 1;\n\t\twhile ($chainLoop <= $chainsNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($chainLoop >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t$jointLoop = 1;\n\t\t\t//WHILE LOOP FOR JOINTS\n\t\t\twhile ($jointLoop <= $jointsNum)\n\t\t\t{\t\t\t\n\t\t\t\tstring $jPad = \"_0\";\n\t\t\t\tif ($chainLoop >= 10)\n\t\t\t\t{\n\t\t\t\t\tstring $jPad = \"_\";\n\t\t\t\t}\n\t\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.translate\")`;\n\t\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.rotate\")`;\t\t\n\t\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.scale\")`;\t\t\n\t\t\t\t\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $chainLoop + $jPad + $jointLoop + \".translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $chainLoop + $jPad + $jointLoop + \".rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $chainLoop + $jPad + $jointLoop + \".scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t\tdelete (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr\");\n\t\t\t\t$jointLoop++;\n\t\t\t}\n\t\t\t$chainLoop++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_Head(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $jaw = `getAttr (\"RRM_\" + $modName + \".jaw\")`;\n\tint $i = 0;\n\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\n\t\tif ($jaw == 1)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr\");\n\t\t\t$jawPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw.translate\")`;\n\t\t\t$jawRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw.rotate\")`;\n\t\t\t$jawScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.translate\"), $jawPos[0], $jawPos[1], $jawPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.rotate\"), $jawRot[0], $jawRot[1], $jawRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.scale\"), $jawScale[0], $jawScale[1], $jawScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.clone\") ($prfx + $name + \"_Jaw\");\n\t\t\t\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr\");\n\t\t\t$jawEndPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd.translate\")`;\n\t\t\t$jawEndRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd.rotate\")`;\n\t\t\t$jawEndScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.translate\"), $jawEndPos[0], $jawEndPos[1], $jawEndPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.rotate\"), $jawEndRot[0], $jawEndRot[1], $jawEndRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.scale\"), $jawEndScale[0], $jawEndScale[1], $jawEndScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.clone\") ($prfx + $name + \"_JawEnd\");\n\t\t}\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.rotate\")`;\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.clone\") ($prfx + $name + \"_Top\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW HEAD\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyHead($name, $jaw, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\tif ($jaw == 1)\n\t\t{\n\t\t\t$jawPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.translate\")`;\n\t\t\t$jawRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.rotate\")`;\t\t\n\t\t\t$jawScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Jaw.translate\"), $jawPos[0], $jawPos[1], $jawPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Jaw.rotate\"), $jawRot[0], $jawRot[1], $jawRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Jaw.scale\"), $jawScale[0], $jawScale[1], $jawScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr\");\n\t\t\t\n\t\t\t$jawEndPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.translate\")`;\n\t\t\t$jawEndRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.rotate\")`;\t\t\n\t\t\t$jawEndScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_JawEnd.translate\"), $jawEndPos[0], $jawEndPos[1], $jawEndPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_JawEnd.rotate\"), $jawEndRot[0], $jawEndRot[1], $jawEndRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_JawEnd.scale\"), $jawEndScale[0], $jawEndScale[1], $jawEndScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr\");\n\t\t}\n\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\")`;\t\t\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_LookAt(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{//CHECK IF LOOKAT\n\t//GET NUMBER OF JOINTS\n\tint $eyeNum = `getAttr (\"RRM_\" + $modName + \".eyeNum\")`;\n\tint $direction = `getAttr (\"RRM_\" + $modName + \".direction\")`;\n\tint $i = 0;\n\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\n\t\t//WHILE LOOP\n\t\tint $i2 = 1;\n\t\twhile ($i2 <= $eyeNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i2 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//TRANSFORMS LOCATOR\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr\");\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".rotate\")`;\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".clone\") (\"RRM_\" + $prfx + $modName + $nPd + $i2);\n\t\t\t$i2++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW LOOK AT\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyLookAt($name, $eyeNum, $direction, $direction, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\t$i3 = 1;\n\t\twhile ($i3 <= $eyeNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i3 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.rotate\")`;\t\t\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr\");\n\t\t\t$i3++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_Auxiliary(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\tint $i = 0;\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.clone\") ($prfx + $name + \"_Aux\");\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\n\t//GENERATE NEW AUXILIARY\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyAuxiliary($name, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_Aux\") (\"RRM_\" + $prfx + $name + \"_Aux\")`;\n\t\tdelete `scaleConstraint (\"RRM_\" + $prfx + $modName + \"_Aux\") (\"RRM_\" + $prfx + $name + \"_Aux\")`;\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\n\n\t\nglobal proc RRM_Clone(string $name, string $selection, string $attachNode, int $call)\n{\n\tstring $modName;\n\tstring $modType;\n\tstring $side;\n\tstring $ext;\n\t\n\tif ($call == 0)\n\t{\n\t\t$modName = `getAttr ($selection + \".modName\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $modName + \".top\")`;\n\t\t$attachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\t}\n\telse\n\t{\n\t\t$modName = `getAttr (\"RRM_\" + $selection + \".core\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $selection + \".top\")`;\n\t\t//ORIGINAL MODULE'S ATTACH NODE\n\t\t$sourceAttachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\n\t\t//GET ATTACH NODE'S CLONED ATTRIBUTE\n\t\tstring $cloneName = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\tif (`gmatch $cloneName \"\"`)\n\t\t{//ATTACH NODE IS NOT A CLONE\n\t\t\t$attachNode = ($sourceAttachNode);\n\t\t}\n\t\telse\n\t\t{//ATTACH NODE IS A CLONE\n\t\t\t$attachNode = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\t}\n\t}\n\tstring $clonedParentNodes[];\t\n\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $prfxReset = \"l_\";\n\tif (!`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$mirrorMod = 0;\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t}\n\tint $firstTimeThrough;\n\n\t\t\n\t//CHECK IF SPLINE\n\tif (`gmatch $modType \"spline\"`)\n\t{\n\t\tRRM_Clone_Spline($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"arm\"`)\n\t{//CHECK IF ARM\n\t\tRRM_Clone_Arm($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"leg\"`)\n\t{//CHECK IF LEG\n\t\tRRM_Clone_Leg($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"fkChain\"`)\n\t{//CHECK IF FKCHAIN\n\t\tRRM_Clone_FkChain($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"head\"`)\n\t{//CHECK IF HEAD\n\t\tRRM_Clone_Head($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"lookAt\"`)\n\t{//CHECK IF LOOKAT\n\t\tRRM_Clone_LookAt($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"auxiliary\"`)\n\t{//CHECK IF AUXILIARY\n\t\tRRM_Clone_Auxiliary($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\t\t\n\tif ($call <= 1)\n\t{\n\t\t//CHECK TO SEE IF IT IS NOT AN AUXILIARY\n\t\t//print (\"name is \" + $name + \"\\n\");\n\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")` && !`objExists (\"RRM_l_\" + $name + \"_Aux\")`)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Parent\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Parent\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Aux\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Aux\");\n\t\t\t}\n\t\t}\t\t\t\n\t}\n}\n\nglobal proc RRM_CheckCloneFields(int $cloneCheck[], string $textFields[], string $cloneSource[], string $cloneParent[])\n{\n\tint $i;\n\tstring $each;\n\tfor ($each in $textFields)\n\t{\n\t\t$name = `textField -q -text $each`;\n\t\t$nameSize = `size $name`;\n\t\tif (`objExists (\"RRM_\" + $name)`)\n\t\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Already Exists\"\n\t\t\t-message (\"A module named \\\"\" + $name + \"\\\" already exists. You need to use a unique name.\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t\t\terror \"PLEASE PROVIDE UNIQUE NAMES FOR ALL CLONED MODULES.\";\n\t\t}\n\t\telse if ($nameSize == 0)\n\t\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Missing Name\"\n\t\t\t-message \"You need to provide a name for each module.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t\terror \"PLEASE PROVIDE UNIQUE NAMES FOR ALL CLONED MODULES.\";\n\t\t}\n\t\t$i++;\n\t}\n\t$i = 0;\n\tfor ($each in $textFields)\n\t{\n\t\t$name = `textField -q -text $each`;\n\t\tRRM_Clone($name, $cloneSource[$i], $cloneParent[$i], ($i + 1));\n\t\t$i++;\n\t}\n}\n\nglobal proc RRM_CloneHierarchyUI()\n{\n\t$name = `textField -q -text textFieldCloneName`;\n\tstring $selection[] = `ls -sl`;\n\tstring $modName = `getAttr ($selection[0] + \".modName\")`;\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl`;\n\tstring $topModules[];\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".top\")`)\n\t\t{\n\t\t\t$topModules = `ls $topModules $each`;\n\t\t}\n\t}\n\t//GET DIALOG'S FORMLAYOUT\n\tstring $form = `setParent -q`;\n\t\n\tformLayout -e -width 300 $form;\n\tstring $instructions = `text -l \"Rename Branches\"`;\n\tstring $original = `text -l \"SOURCE NAME:\"`;\n\tstring $clone = `text -l \"CLONE NAME:\"`;\n\tformLayout -edit\n\t\t-attachForm\t\t\t\t$instructions \t\"top\" 5\n\t\t-attachForm\t\t\t\t$instructions \t\"left\" 90\n\t\t\n\t\t-attachForm\t\t\t\t$original \t\"top\" 30\n\t\t-attachForm\t\t\t\t$original \t\"left\" 4\n\t\t\n\t\t-attachForm\t\t\t\t$clone \t\"top\" 30\n\t\t-attachForm\t\t\t\t$clone \t\"right\" 75\n\t$form;\n\tint $i;\n\tstring $checkBoxes[];\n\tglobal int $cloneCheck[];\n\tglobal string $cloneTextFields[];\n\tglobal string $cloneSource[];\n\tglobal string $cloneParent[];\n\tint $spacer = 10;\n\tint $top = 50;\n\tstring $eachBranch;\n\tfor ($eachBranch in $topModules)\n\t{\n\t\t//GET CORE NAME\n\t\t$coreName = `getAttr ($eachBranch + \".core\")`;\n\t\t\n\t\t//GET PLACE IN HIERARCHY\n\t\t$left = 20;\n\t\tstring $parentModule = $eachBranch;\n\t\twhile (!`gmatch $parentModule (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\t$parentNode = `getAttr ($parentModule + \".parent\")`;\n\t\t\t$parentModule = `getAttr (\"RRM_\" + $parentNode + \".modName\")`;\n\t\t\t$parentModule = (\"RRM_\" + $parentModule); \n\t\t\t$left = ($left + 16);\n\t\t}\n\t\t\t\n\t\tstring $checkBox = `checkBox -en 0 -vis 0 -v 0 -l \"\" (\"checkBox_\" + $eachBranch)`;\n\t\tstring $label = `text -l (\"-\" + $coreName)`;\n\t\tstring $textField = `textField -w 150 (\"textField\" + $eachBranch)`;\n\t\t\n\t\tformLayout -edit\n\t\t\t-attachForm\t\t\t$checkBox\t\t\"top\" $top\n\t\t\t-attachForm\t\t\t$checkBox\t\t\"left\" 4\n\n\t\t\t-attachForm\t\t\t$label\t\t\t\"top\" $top\n\t\t\t-attachForm\t\t\t$label\t\t\t\"left\" $left\n\t\t\t\n\t\t\t-attachForm\t\t\t$textField\t\t\"top\" $top\n\t\t\t-attachForm\t\t\t$textField\t\t\"right\" 5\n\t\t$form;\n\t\t\n\t\t$top = ($top + 20);\n\t\t$cloneCheck[$i] = `checkBox -q -v $checkBox`;\n\t\t$cloneTextFields[$i] =  $textField;\n\t\t$cloneSource[$i] = $coreName;\n\t\tstring $cloneParent[];\n\t\tif (`objExists (\"RRM_\" + $coreName + \".parent\")`)\n\t\t{\n\t\t\t$cloneParent[$i] = `getAttr (\"RRM_\" + $coreName + \".parent\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$cloneParent[$i] = `getAttr (\"RRM_\" + $coreName + \".attachNode\")`;\n\t\t}\n\t\t$i++;\n\t}\n\tstring $button_OK = `button -w 144 -label \"OK\" -c \"RRM_CheckCloneFields($cloneCheck, $cloneTextFields, $cloneSource, $cloneParent);layoutDialog -dismiss \\\"OK\\\";\" Clone_Button`;\n\tstring $button_Cancel = `button -w 144 -label \"Cancel\" -c \"layoutDialog -dismiss \\\"Cancel\\\"\"`;\n\tformLayout -edit\n\t\t-attachForm\t\t\t$button_OK\t\t\"top\" ($top + 10)\n\t\t-attachForm\t\t\t$button_OK\t\t\"left\" 4\n\t\t\n\t\t-attachForm\t\t\t$button_Cancel\t\"top\" ($top + 10)\n\t\t-attachForm\t\t\t$button_Cancel\t\"right\" 4\n\t$form;\n\t\n\ttextField -e -text $name $cloneTextFields[0]; \n}\n\nglobal proc RRM_ClonePrompts(string $name, int $branchClone, int $clone)\n{\n\tstring $selection[] = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tstring $coreCheck;\n\tif (`objExists ($selection[0] + \".core\")`)\n\t{\n\t\t$coreCheck = `getAttr ($selection[0] + \".core\")`;\n\t}\n\t\n\tstring $dupeType = \"clone\";\n\tif ($clone == 0)\n\t{\n\t\t$dupeType = \"rename\";\n\t}\n\t\n\t$nameCheck = `size $name`;\n\tif ($selectionSize == 0)\n\t{//CHECK THAT SOMETHING IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Nothing Selected\"\n\t\t\t-message (\"You must select a node of the desired module to \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if ($selectionSize > 1)\n\t{//CHECK THAT ONLY ONE OBJECT IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Only One Module May Be Cloned At A Time\"\n\t\t\t-message (\"You must select only one node of a desired module to \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (!`objExists ($selection[0] + \".core\")`)\n\t{//CHECK TO MAKE SURE OBJECT IS A VALID MODULE\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message (\"You must select one node of a desired module to \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\telse if (`gmatch $coreCheck \"MAIN\"` || `gmatch $coreCheck \"ROOT\"`)\n\t{//CHECK TO MAKE SURE OBJECT IS NOT MAIN OR ROOT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message (\"You cannot \" + $dupeType + \" the MAIN or ROOT modules.\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\telse if ($nameCheck == \"0\")\n\t{//CHECK TO MAKE SURE THE USER HAS INPUT A NAME\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message (\"You must enter a name for the \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (! RRM_CheckName($name))\n\t{//CHECK TO MAKE SURE A VALID NAME HAS BEEN USED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists (\"RRM_\" + $name)`)\n\t{//CHECK TO MAKE SURE NAME DOES NOT CONFLICT WITH EXISTING OBJECT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $parentNullName = \"\";\n\t\tif ($branchClone == 0)\n\t\t{//ONLY CLONE LOADED MODULE\n\t\t\tif ($clone == 1)\n\t\t\t{\n\t\t\t\tprint \"cloning...\\n\";\n\t\t\t\tRRM_Clone($name, $selection[0], $parentNullName, 0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint \"renaming...\\n\";\n\t\t\t\tRRM_Rename($name, $selection[0], 0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{//CLONE BRANCHES\n\t\t\tstring $topmodules[];\n\t\t\t$modName = `getAttr ($selection[0] + \".modName\")`;\n\t\t\tselect -hi (\"RRM_\" + $modName);\n\t\t\t$nodes = `ls -sl -type \"nurbsCurve\"`;\n\t\t\tpickWalk -d up;\n\t\t\t$nodes = `ls -sl`;\n\t\t\tstring $each;\n\t\t\tfor ($each in $nodes)\n\t\t\t{\n\t\t\t\tif (`objExists ($each + \".top\")`)\n\t\t\t\t{\n\t\t\t\t\t$topmodules = `ls $topmodules $each`;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$moduleNum = `size $topmodules`;\n\t\t\tif ($moduleNum == 1)\n\t\t\t{\n\t\t\t\tif ($clone = 1) \n\t\t\t\t{\n\t\t\t\t\tRRM_Clone($name, $selection[0], $parentNullName, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_Rename($name, $selection[0], 0);\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t\tif ($branchClone == 1 && $moduleNum > 1)\n\t\t\t{\n\t\t\t\tselect $selection[0];\n\t\t\t\tlayoutDialog -ui \"RRM_CloneHierarchyUI()\";\n\t\t\t}\n\t\t}\n\t\t//RESET CLONE ATTRIBUTES FOR FUTURE CLONES\n\t\tselect -hi RRM_MAIN;\n\t\tselect -d RRM_MAIN;\n\t\t$nodes = `ls -sl -type \"nurbsCurve\"`;\n\t\tpickWalk -d up;\n\t\t$nodes = `ls -sl`;\n\t\tstring $each;\n\t\tfor ($each in $nodes)\n\t\t{\n\t\t\tif (`objExists ($each + \".clone\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" ($each + \".clone\") \"\";\n\t\t\t}\n\t\t}\n\t}\n\tselect -cl;\n\tint $selectionInt = 0;\n\twhile ($selectionInt <= $selectionSize)\n\t{\n\t\tif (`objExists $selection[$selectionInt]`)\n\t\t{\n\t\t\tselect -add $selection[$selectionInt];\n\t\t}\n\t\t$selectionInt++;\n\t}\n\tif (`objExists \"RRM_Clone_Lctr.topCloneNode\"`)\n\t{\n\t\t$topNode[0] = `getAttr \"RRM_Clone_Lctr.topCloneNode\"`;\n\t\tif (`objExists ($topNode[0] + \".opposite\")`)\n\t\t{\n\t\t\t$opposite = `getAttr ($topNode[0] + \".opposite\")`;\n\t\t\t$topNode[1] = (\"RRM_\" + $opposite);\n\t\t}\n\t\tdelete \"RRM_Clone_Lctr\";\n\t\tselect $topNode;\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////DELETE BRANCH/////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_DeleteBranch(string $eachMod)\n{\n\n\n\t//UNLOCK NODES\t\n\tselect -hi RRM_MAIN;\n\t$rigHierarchy = `ls -sl`;\n\tlockNode -lock off $rigHierarchy;\n\n\tstring $crntNode;\n\tint $crntInt = 0;\n\tselect $eachMod;\n\t$eachNode = `ls $eachMod`;\n\t\n\twhile ((!`objExists ($eachNode[0] + \".top\")`) && ($crntInt < 101))\n\t{\n\t\tpickWalk -d up;\n\t\t$eachNode = `ls -sl`;\n\t\t//$eachNode = $whileNode[0];\n\t\t$crntInt++;\n\t}\n\tif (`objExists ($eachNode[0] + \".top\")`)\n\t{\n\t\tdelete $eachNode;\n\t\t$crntInt = 100;\n\t}\n\t\n\t//LOCK NODES\n\tselect -hi RRM_MAIN;\n\t$rigHierarchy2 = `ls -sl`;\n\tlockNode $rigHierarchy2;\n\tselect -d;\n\n\n}\n\t\t\t\nglobal proc RRM_DeleteBranchPrompts()\n{\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\tstring $eachMod;\n\tif ($attachModNum == 0)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"No Module Selected\"\n\t\t\t\t-message \"Please select a module node of a branch to delete.\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tfor ($eachMod in $attachMod)\n\t\t{\n\t\t\tprint ($eachMod + \"\\n\");\n\t\t\tif (`objExists $eachMod` && !`objExists ($eachMod + \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Branch Node\"\n\t\t\t\t\t-message \"You cannot delete the selected node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ((`gmatch $eachMod \"RRM_ROOT\"`) || (`gmatch $eachMod \"RRM_MAIN\"`))\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Proxy Rig Deletion\"\n\t\t\t\t\t-message \"This will delete your entire proxy rig!\\nAre you sure you wisth to proceed?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tselect -hi RRM_MAIN;\n\t\t\t\t\t$rigHierarchy = `ls -sl`;\n\t\t\t\t\tlockNode -lock off $rigHierarchy;\n\t\t\t\t\tdelete RRM_MAIN;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (`objExists $eachMod`)\n\t\t\t\t{\n\t\t\t\t\tRRM_DeleteBranch($eachMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nglobal proc modLocalAxesToggleAll()\n{\n\t$crnt = `ls -sl`;\n\tstring $proxies[];\n\tselect -hi RRM_MAIN;\n\t$hierarchy = `ls -sl`;\n\tstring $crntProxy;\n\tfor ($crntProxy in $hierarchy)\n\t{\n\t    if (`objExists ($crntProxy + \".core\")`)\n\t    {\n\t    \t$LocalAxisDisplay = `getAttr ($crntProxy + \".displayLocalAxis\")`;\n\t    \tif ($LocalAxisDisplay == 0)\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 1;\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 0;\n\t    \t}\n\t    }\n\t}\n\tselect $crnt;\n}\n\nglobal proc RRM_LocalAxesToggleSelected()\n{\n\t$crnt = `ls -sl`;\n\t$hierarchy = `ls -sl`;\n\tstring $crntProxy;\n\tfor ($crntProxy in $crnt)\n\t{\n\t    if (`objExists ($crntProxy + \".core\")`)\n\t    {\n\t    \t$LocalAxisDisplay = `getAttr ($crntProxy + \".displayLocalAxis\")`;\n\t    \tif ($LocalAxisDisplay == 0)\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 1;\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 0;\n\t    \t}\n\t    }\n\t}\n}\n\nglobal proc RRM_LoadNewModuleAttachNode()\n{\n\t$crnt = `ls -sl`;\n\t$crntSize = `size $crnt`;\n\tif ($crntSize == 1)\n\t{\n\t\tif (`objExists ($crnt[0] + \".core\")`)\n\t\t{\n\t\t\t$checkMain = `getAttr ($crnt[0] + \".core\")`;\n\t\t\tif (($checkMain != \"MAIN\") && (!`objExists ($crnt[0] + \".parent\")`))\n\t\t\t{\n\t\t\t\ttextFieldButtonGrp -e -text $crnt RRM_LoadNewModuleAttachNodeTextField;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twarning \"CANNOT ASSIGN THE MAIN CONTROL OR PARENT NODES AS THE NEW ATTACH NODE\";\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"PLEASE SELECT A VALID PROXY NODE TO LOAD\";\n\t\t}\n\t}\n\telse if ($crntSize == 0)\n\t{\n\t\twarning \"PLEASE SELECT A PROXY NODE TO LOAD\";\n\t}\n\telse\n\t{\n\t\twarning \"PLEASE SELECT ONLY ONE NODE. MIRRORED PARENTS WILL AUTOMATICALLY BE CONNECTED PROPERLY\";\n\t}\n}\n\nglobal proc RRM_AttachToNewModule(string $modAttachName)\n{\n\t//$modAttachName = `textFieldButtonGrp -q -text RRM_LoadNewModuleAttachNodeTextField`;\n\n\t$checkMain = `getAttr ($modAttachName + \".core\")`;\n\tif ((!`objExists $checkMain`) && ($checkMain != \"MAIN\") && (!`objExists ($checkMain + \".parent\")`))\n\t{\n\t\t$parentModules = `ls -sl`;\n\t\tpickWalk -d up;\n\t\t$moduleGroups = `ls -sl`;\n\t\tselect -hi $moduleGroups;\n\t\t$parentModulesHierarchy = `ls -sl`;\n\t\tstring $eachModule;\n\t\tfor ($eachModule in $parentModulesHierarchy)\n\t\t{\n\t\t\tif ($modAttachName == $eachModule)\n\t\t\t{\n\t\t\t\tselect $parentModules;\n\t\t\t\terror \"YOU CANNOT ATTACH PARENT NODES TO ONE OF THEIR CHILDREN\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tstring $eachModule;\n\t\tfor ($eachModule in $parentModules)\n\t\t{\n\t\t\t$modType = \t`getAttr ($eachModule + \".parent\")`;\n\t\t\t\n\t\t\tif (`objExists ($eachModule + \".parent\")` || $modType == \"auxiliary\")\n\t\t\t{\n\t\t\t\tselect $eachModule;\n\t\t\t\tpickWalk -d up;\n\t\t\t\t$modParent = `ls -sl`;\n\t\t\t\tselect $modParent[0];\n\t\t\t\tif (`objExists ($eachModule + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($modAttachName + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$moduleSideCheck = `getAttr ($eachModule + \".pair\")`; \n\t\t\t\t\t\tif ($moduleSideCheck == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$eachModule = `getAttr ($eachModule + \".opposite\")`;\n\t\t\t\t\t\t\t$eachModule = (\"RRM_\" + $eachModule);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$modAttachSideCheck = `getAttr ($modAttachName + \".pair\")`;\n\t\t\t\t\t\tif ($modAttachSideCheck == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$modAttachName = `getAttr ($modAttachName + \".opposite\")`;\n\t\t\t\t\t\t\t$modAttachName = (\"RRM_\" + $modAttachName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t}\n\t\t\t\t$modAbsoluteParent = `ls -sl`;\n\t\t\t\t\n\t\t\t\t//DELETE CONSTRAINTS\n\t\t\t\tlockNode -lock off ($modParent[0] + \"_parentConstraint1\") ($modParent[0] + \"_scaleConstraint1\") $eachModule $modAbsoluteParent;\n\t\t\t\tdelete ($modParent[0] + \"_parentConstraint1\") ($modParent[0] + \"_scaleConstraint1\");\n    \t\n\t\t\t\t//PARENT IF NOT ALREADY PARENTED\n\t\t\t\tstring $parent[] = `listRelatives -parent $modAbsoluteParent[0]`;\n\t\t\t\tif (!`gmatch $parent[0] $modAttachName`)\n\t\t\t\t{\n\t\t\t\t\tparent $modAbsoluteParent[0] $modAttachName;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//DELETE OLD CONNECTOR AND CREATE NEW ONE\n\t\t\t\t$attachCore = `getAttr ($eachModule + \".attachNode\")`;\n\t\t\t\tselect -hi (\"RRM_\" + $attachCore + \"_\" + $eachModule + \"Ctrl\") (\"RRM_\" + $attachCore + \"_\" + $eachModule + \"_AimLctr\");\n\t\t\t\t$connectorHi = `ls -sl`;\n\t\t\t\tlockNode -lock off $connectorHi ;\n\t\t\t\tdelete $connectorHi;\n\t\t\t\t\n\t\t\t\t$modName = `getAttr ($eachModule + \".modName\")`;\n\t\t\t\t$prfx = \"\";\n\t\t\t\tif (`objExists ($eachModule + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\t$sideCheck = `getAttr ($eachModule + \".pair\")`;\n\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = \"l_\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = \"r_\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRRM_ProxyConnectors($modName, $prfx, $modAttachName, $eachModule);\n\n\t\t\t\t//MAKE NEW CONSTRAINTS\n\t\t\t\tparentConstraint -mo $modAttachName \"RRM_MAIN\" $modParent[0];\n\t\t\t\tscaleConstraint  -mo $modAttachName \"RRM_MAIN\" $modParent[0];\n\t\t\t\tsetAttr ($modParent[0] + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\tsetAttr ($modParent[0] + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\t\t\t\t\n\t\t\t\t//CHANGE ATTACH NODE ATTRIBUTE IN PARENT NODE\n\t\t\t\t$modAttachCore = `getAttr ($modAttachName + \".core\")`;\n\t\t\t\tsetAttr -l false ($eachModule + \".attachNode\");\n\t\t\t\tsetAttr -type \"string\" ($eachModule + \".attachNode\") $modAttachCore;\n\t\t\t\tsetAttr -l true ($eachModule + \".attachNode\");\n\t\t\t\t\n\t\t\t\t//CHANGE PARENT ATTRIBUTE IN TOP NODE\n\t\t\t\tsetAttr -l false ($modAbsoluteParent[0] + \".parent\");\n\t\t\t\tsetAttr -type \"string\" ($modAbsoluteParent[0] + \".parent\") $modAttachCore;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//CHECK TO SEE IF MIRRORED////////////////////////////////////////////////////////////\n\t\t\t\tif (`objExists ($eachModule + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\t$mirrorModule = `getAttr ($eachModule + \".opposite\")`;\n\t\t\t\t\t$mirrorModule = (\"RRM_\" + $mirrorModule); \n\t\t\t\t\t//\n\t\t\t\t\t////CHECK FOR MIRROR NODE\n\t\t\t\t\t$mirrorModAttachName = $modAttachName;\n\t\t\t\t\t$mirrorModAttachName = $mirrorModAttachName;\n\t\t\t\t\t\n\n\t\t\t\t\t$mirrorModuleSideCheck = `getAttr ($eachModule + \".pair\")`; \n\t\t\t\t\tif ($mirrorModuleSideCheck == \"left\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$mirrorModule = `getAttr ($eachModule + \".opposite\")`;\n\t\t\t\t\t\t$mirrorModule = (\"RRM_\" + $mirrorModule);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (`objExists ($modAttachName + \".pair\")`)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\t$mirrorModAttachSideCheck = `getAttr ($modAttachName + \".pair\")`;\n\t\t\t\t\t\tif ($mirrorModAttachSideCheck == \"left\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$mirrorModAttachName = `getAttr ($modAttachName + \".opposite\")`;\n\t\t\t\t\t\t\t$mirrorModAttachName = (\"RRM_\" + $mirrorModAttachName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tselect $mirrorModule;\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$mirrorModParent = `ls -sl`;\n\t\t\t\t\t\n\t\t\t\t\t//DELETE CONSTRAINTS\n\t\t\t\t\tlockNode -lock off ($mirrorModParent[0] + \"_parentConstraint1\") ($mirrorModParent[0] + \"_scaleConstraint1\") $mirrorModule;\n\t\t\t\t\tdelete ($mirrorModParent[0] + \"_parentConstraint1\") ($mirrorModParent[0] + \"_scaleConstraint1\");\n    \t\n\t\t\t\t\t//DELETE OLD CONNECTOR AND CREATE NEW ONE\n\t\t\t\t\t$attachCore = `getAttr ($mirrorModule + \".attachNode\")`;\n\t\t\t\t\tselect -hi (\"RRM_\" + $attachCore + \"_\" + $mirrorModule + \"Ctrl\") (\"RRM_\" + $attachCore + \"_\" + $mirrorModule + \"_AimLctr\");\n\t\t\t\t\t$connectorHi = `ls -sl`;\n\t\t\t\t\tlockNode -lock off $connectorHi ;\n\t\t\t\t\tdelete $connectorHi;\n\t\t\t\t\t\n\t\t\t\t\t$modName = `getAttr ($mirrorModule + \".modName\")`;\n\t\t\t\t\t$prfx = \"\";\n\t\t\t\t\tif (`objExists ($mirrorModule + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sideCheck = `getAttr ($mirrorModule + \".pair\")`;\n\t\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$prfx = \"l_\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$prfx = \"r_\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tRRM_ProxyConnectors($modName, $prfx, $modAttachName, $mirrorModule);\n\t\t\t\t\t\n\t\t\t\t\t//MAKE NEW CONSTRAINTS\n\t\t\t\t\tif (`objExists $mirrorModAttachName`)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($mirrorModAttachName) \"RRM_MAIN\" $mirrorModParent[0];\n\t\t\t\t\t\tscaleConstraint  -mo ($mirrorModAttachName) \"RRM_MAIN\" $mirrorModParent[0];\n\t\t\t\t\t\tsetAttr ($mirrorModParent[0] + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\t\t\tsetAttr ($mirrorModParent[0] + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\n\t\t\t\t\t\t//CHANGE ATTACH NODE ATTRIBUTE IN PARENT NODE\n\t\t\t\t\t\t$mirrorModAttachCore = `getAttr ($mirrorModAttachName + \".core\")`;\n\t\t\t\t\t\tsetAttr -l false ($mirrorModule + \".attachNode\");\n\t\t\t\t\t\tsetAttr -type \"string\" ($mirrorModule + \".attachNode\") $mirrorModAttachCore;\n\t\t\t\t\t\tsetAttr -l true ($mirrorModule + \".attachNode\");\n\t\t\t\t\t}\n\t\t\t\t\tlockNode -lock on ($mirrorModParent[0] + \"_parentConstraint1\") ($mirrorModParent[0] + \"_scaleConstraint1\") $mirrorModule;\n\t\t\t\t}\n\t\t\t\tlockNode -lock on ($modParent[0] + \"_parentConstraint1\") ($modParent[0] + \"_scaleConstraint1\") $eachModule $modAbsoluteParent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint (\"\\\"\" + $eachModule + \"\\\" IS NOT A PARENT MODULE... SKIPPING\\n\");\n\t\t\t}\n\t\t}\n\t\tselect $parentModules;\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////RESET///////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_ResetProxies(int $RRM_ResetSelection)\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $crntProxy;\n\tstring $topMods[];\n\n\tif ($RRM_ResetSelection == 2)\n\t{\n\t\tif ($proxySize > 0)\n\t\t{\n\t\t\tselect $proxies;\n\t\t\tfor ($crntProxy in $proxies)\n\t\t\t{\n\t\t\t\tif (!`objExists ($crntProxy + \".parent\")`)\n\t\t\t\t{\n\t\t\t\t\tstring $crntProxy2;\n\t\t\t\t\t$crntInt = 0;\n\t\t\t\t\twhile ((!`objExists ($crntProxy2 + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t\t{\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$crntTopMod = `ls -sl`;\n\t\t\t\t\t\t\t$topMods = `ls $topMods $crntTopMod`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$crntProxy2 = $parentCheck[0];\n\t\t\t\t\t\t$crntInt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$topMods = `ls -type \"transform\" $crntProxy $topMods`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -hi $topMods;\n\t\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t\tstring $crntProxy3;\n\t\t\tfor ($crntProxy3 in $hierarchy)\n\t\t\t{\n\t\t\t    if (`objExists ($crntProxy3 + \".core\")`)\n\t\t\t    {\n\t\t\t        $proxies = `ls $proxies $crntProxy3`;\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t}\n\telse if ($RRM_ResetSelection == 3)\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\tstring $crntProxy;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t}\n\t\n\tstring $crntProxy;\n\tfor ($crntProxy in $proxies)\n\t{\n\t\tif (!`gmatch $crntProxy \"RRM_ROOT\"` && !`objExists ($crntProxy + \".parent\")`)\n\t\t{\n\t\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\n\t\t\n\t\t\tif ($lockTX == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".tx\") 0;\n\t\t\t}\n\t\t\tif ($lockTY == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".ty\") 0;\n\t\t\t}\n\t\t\tif ($lockTZ == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".tz\") 0;\n\t\t\t}\n\t\t\tif ($lockRX == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".rx\") 0;\n\t\t\t}\n\t\t\t\n\t\t\tif ($lockRY == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".ry\") 0;\n\t\t\t}\n\t\t\tif ($lockRZ == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".rz\") 0;\n\t\t\t}\n\t\t\t\n\t\t\tif ($lockSX == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".sx\") 1;\n\t\t\t}\n\t\t\tif ($lockSY == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".sy\") 1;\n\t\t\t}\n\t\t\tif ($lockSZ == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".sz\") 1;\n\t\t\t}\n\t\t\tselect $originalSelection;\n\t\t}\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////RIGHT TO LEFT///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_RightToLeftProxies(int $RRM_ResetSelection)\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $crntProxy;\n\tstring $topMods[];\n\t\n\tif ($RRM_ResetSelection == 2)\n\t{\n\t\tif ($proxySize > 0)\n\t\t{\n\t\t\tselect $proxies;\n\t\t\tfor ($crntProxy in $proxies)\n\t\t\t{\n\t\t\t\tif (!`objExists ($crntProxy + \".parent\")`)\n\t\t\t\t{\n\t\t\t\t\tstring $crntProxy2;\n\t\t\t\t\t$crntInt = 0;\n\t\t\t\t\twhile ((!`objExists ($crntProxy2 + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t\t{\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$crntTopMod = `ls -sl`;\n\t\t\t\t\t\t\t$topMods = `ls $topMods $crntTopMod`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$crntProxy2 = $parentCheck[0];\n\t\t\t\t\t\t$crntInt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$topMods = `ls $crntProxy $topMods`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -hi $topMods;\n\t\t\t$hierarchy = `ls -sl`;\n\t\t\tstring $crntProxy3;\n\t\t\tfor ($crntProxy3 in $hierarchy)\n\t\t\t{\n\t\t\t    if (`objExists ($crntProxy3 + \".core\")`)\n\t\t\t    {\n\t\t\t        $proxies = `ls $proxies $crntProxy3`;\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t}\n\telse if ($RRM_ResetSelection == 3)\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl`;\n\t\tstring $crntProxy;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t}\n\t\n\tstring $crntProxy;\n\tfor ($crntProxy in $proxies)\n\t{\n\t\tif (`objExists ($crntProxy + \".opposite\")`)\n\t\t{\n\t\t\tstring $side = `getAttr ($crntProxy + \".pair\")`;\n\t\t\tif ($side == \"left\"|| $side == \"right\")\n\t\t\t{\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\t\t\t\tif ($side == \"left\")\n\t\t\t\t{\n\t\t\t\t\t$crntProxy = (\"RRM_\" + $opp);\n\t\t\t\t}\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\t\t\t\t\n\t\t\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\n\t\t\t\t\n\n\t\t\t\tif ($lockTX == 0)\n\t\t\t\t{\n\t\t\t\t\t$tx = `getAttr ($crntProxy + \".tx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tx\") ($tx * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockTY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ty = `getAttr ($crntProxy + \".ty\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ty\") ($ty * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockTZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$tz = `getAttr ($crntProxy + \".tz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tz\") ($tz * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRX == 0)\n\t\t\t\t{\n\t\t\t\t\t$rx = `getAttr ($crntProxy + \".rx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rx\") ($rx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ry = `getAttr ($crntProxy + \".ry\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ry\") ($ry * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockRZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$rz = `getAttr ($crntProxy + \".rz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rz\") ($rz * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockSX == 0)\n\t\t\t\t{\n\t\t\t\t\t$sx = `getAttr ($crntProxy + \".sx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sx\") ($sx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSY == 0)\n\t\t\t\t{\n\t\t\t\t\t$sy = `getAttr ($crntProxy + \".sy\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sy\") ($sy * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$sz = `getAttr ($crntProxy + \".sz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sz\") ($sz * 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tselect $originalSelection;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////LEFT TO RIGHT///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_LeftToRightProxies(int $RRM_ResetSelection)\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $topMods[];\n\t\n\tif ($RRM_ResetSelection == 2)\n\t{//BRANCH RESET\n\t\tif ($proxySize > 0)\n\t\t{//CHECK THAT SOMETHING IS SELECTED\n\t\t\tselect $proxies;\n\t\t\tfor ($crntProxy in $proxies)\n\t\t\t{\n\t\t\t\tif (!`objExists ($crntProxy + \".parent\")`)\n\t\t\t\t{\n\t\t\t\t\tstring $crntProxy2;\n\t\t\t\t\t$crntInt = 0;\n\t\t\t\t\twhile ((!`objExists ($crntProxy2 + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t\t{\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$crntTopMod = `ls -sl`;\n\t\t\t\t\t\t\t$topMods = `ls $topMods $crntTopMod`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$crntProxy2 = $parentCheck[0];\n\t\t\t\t\t\t$crntInt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$topMods = `ls $crntProxy $topMods`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -hi $topMods;\n\t\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t\tstring $crntProxy3;\n\t\t\tfor ($crntProxy3 in $hierarchy)\n\t\t\t{\n\t\t\t\t$template = `getAttr ($crntProxy3 + \".template\")`;\n\t\t    \tif ((`objExists ($crntProxy3 + \".core\")`) && ($template == 0))\n\t\t    \t{\n\t\t    \t    $proxies = `ls $proxies $crntProxy3`;\n\t\t    \t}\n\t\t\t}\n\t\t}\n\t}\n\telse if ($RRM_ResetSelection == 3)\n\t{//ALL RESET\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t\t$template = `getAttr ($crntProxy + \".template\")`;\n\t\t    if ((`objExists ($crntProxy + \".core\")`) && ($template == 0))\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t}\n\t\n\tfor ($crntProxy in $proxies)\n\t{\n\t\tif (`objExists ($crntProxy + \".opposite\")`)\n\t\t{\n\t\t\tstring $side = `getAttr ($crntProxy + \".pair\")`;\n\t\t\tif ($side == \"left\"|| $side == \"right\")\n\t\t\t{\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\t\t\t\tif ($side == \"right\")\n\t\t\t\t{\n\t\t\t\t\t$crntProxy = (\"RRM_\" + $opp);\n\t\t\t\t}\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\n\t\t\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\n\t\t\t\t\t\t\t\t\n\t\t\t\tif ($lockTX == 0)\n\t\t\t\t{\n\t\t\t\t\t$tx = `getAttr ($crntProxy + \".tx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tx\") ($tx * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockTY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ty = `getAttr ($crntProxy + \".ty\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ty\") ($ty * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockTZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$tz = `getAttr ($crntProxy + \".tz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tz\") ($tz * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRX == 0)\n\t\t\t\t{\n\t\t\t\t\t$rx = `getAttr ($crntProxy + \".rx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rx\") ($rx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ry = `getAttr ($crntProxy + \".ry\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ry\") ($ry * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockRZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$rz = `getAttr ($crntProxy + \".rz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rz\") ($rz * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockSX == 0)\n\t\t\t\t{\n\t\t\t\t\t$sx = `getAttr ($crntProxy + \".sx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sx\") ($sx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSY == 0)\n\t\t\t\t{\n\t\t\t\t\t$sy = `getAttr ($crntProxy + \".sy\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sy\") ($sy * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$sz = `getAttr ($crntProxy + \".sz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sz\") ($sz * 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tselect $originalSelection;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////PINNING///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_PinProxies(int $on, int $off)\n{\n\t$selected = `ls -sl`;\n\t$selectedSize = `size $selected`;\n\tstring $parentModules[];\n\tint $parentModSize;\n\tstring $prfx = \"\";\n\tstring $rootCheck;\n\tselect $selected;\n\t//CHECK THAT SOMETHING IS SELECTED\n\tif ($selectedSize > 0)\n\t{\n\t\t//CHECK IF VALID MODULE\n\t\tstring $each;\n\t\tfor ($each in $selected)\n\t\t{\n\t\t\tif (`objExists ($each + \".modName\")`)\n\t\t\t{\n\t\t\t\t//CHECK IF PAIR, GET PREFIX IF TRUE\n\t\t\t\tif (`objExists ($each + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\t$sideCheck = `getAttr ($each + \".pair\")`;\n\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t\t{$prfx = \"l_\";}\n\t\t\t\t\telse if ($sideCheck == \"right\")\n\t\t\t\t\t\t{$prfx = \"r_\";}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$prfx = \"\";\n\t\t\t\t}\n\t\t\t\t$modName = `getAttr ($each + \".modName\")`;\n\t\t\t\t//CHECK IF ROOT\n\t\t\t\t$rootCheck = `getAttr ($each + \".core\")`;\n\t\t\t\t{\n\t\t\t\t\tif ($rootCheck == \"ROOT\")\n\t\t\t\t\t{\n\t\t\t\t\t\twarning \"YOU CANNOT PIN THE ROOT PROXY.\";\n\t\t\t\t\t}\n\t\t\t\t\telse if ($rootCheck == \"MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\t\twarning \"YOU CANNOT PIN THE MAIN PROXY.\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$parentModules = `ls (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"*_Aux\") $parentModules`;\n\t\t\t\t\t\t$parentModSize = `size $parentModules`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($parentModSize > 0)\n\t\t{\n\t\t\t//GET WORLD SPACE AND SCALE\n\t\t\tstring $each2;\n\t\t\tstring $mirroredTopNode;\n\t\t\t$topNodeScale = <<1,1,1>>;\n\t\t\tfor ($each2 in $parentModules)\n\t\t\t{\n\t\t\t\t$pinCheck = `getAttr ($each2 + \".pinned\")`;\n\t\t\t\tif ($pinCheck != $on)\n\t\t\t\t{\n\t\t\t\t\t//CHECK IF PAIR, GET PREFIX IF TRUE\n\t\t\t\t\tif (`objExists ($each2 + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sideCheck = `getAttr ($each2 + \".pair\")`;\n\t\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t\t\t{$prfx = \"l_\";}\n\t\t\t\t\t\telse if ($sideCheck == \"right\")\n\t\t\t\t\t\t\t{$prfx = \"r_\";}\n\t\t\t\t\t\t//GET TOP NODE'S SCALE\n\t\t\t\t\t\t$mirroredTopNode = `getAttr ($each2 + \".modName\")`;\n\t\t\t\t\t\t$topNodeScale = `getAttr (\"RRM_\" + $mirroredTopNode + \".scale\")`;\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = \"\";\n\t\t\t\t\t\t$topNodeScale = <<1,1,1>>;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t$modLoc = `xform -q -ws -rp $each2`;\n\t\t\t\t\t$modRot = `xform -q -ws -ro $each2`;\n\t\t\t\t\t\n\t\t\t\t\t//GET SCALE\n\t\t\t\t\tspaceLocator -n ($each + \"_ScaleLctr\");\n\t\t\t\t\tparent ($each + \"_ScaleLctr\") RRM_MAIN;\n\t\t\t\t\tscaleConstraint $each2 ($each + \"_ScaleLctr\");\n\t\t\t\t\t$modScale = `getAttr ($each + \"_ScaleLctr.scale\")`;\n\t\t\t\t\tdelete ($each + \"_ScaleLctr\");\n\t\t\t\t\t\n\t\t\t\t\t$modName  = `getAttr ($each2 + \".modName\")`;\n\t\t\t\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \".scale\")`;\n\t\t\t\t\t\n\t\t\t\t\t$scaleRatio[0] = ($modScale[0] * $topScale[0] * $topNodeScale.x);\n\t\t\t\t\t$scaleRatio[1] = ($modScale[1] * $topScale[1] * $topNodeScale.y);\n\t\t\t\t\t$scaleRatio[2] = ($modScale[2] * $topScale[2] * $topNodeScale.z);\n\t\t\t\t\t\n\t\t\t\t\t//ATTACH NODE\n\t\t\t\t\tstring $attachNode;\n\t\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$attachNode = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\")`;\n\t\t\t\t\t}\n\t\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$attachNode = `getAttr (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\")`;\n\t\t\t\t\t}\n\n\t\t\t\t\t//SET CONSTRAINT WEIGHTS\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_\" + $attachNode + \"W0\") $off;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") $on;\t\t\t\t\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_\" + $attachNode + \"W0\") $off;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") $on;\n\t\t\t\t\t\n\t\t\t\t\t//SET SCALE VALUES\n\t\t\t\t\tsetAttr (($each2 + \".scale\"), $scaleRatio[0], $scaleRatio[1], $scaleRatio[2]);\n\t\t\t\t\t//SET ROTATE\n\t\t\t\t\trotate -ws -a $modRot[0] $modRot[1] $modRot[2] $each2;\n\t\t\t\t\t//SET SCALE\n\t\t\t\t\tmove -ws $modLoc[0] $modLoc[1] $modLoc[2] $each2;\n\t\t\t\t\t\n\t\t\t\t\t////CHANGE COLOUR OF CONNECTOR\n\t\t\t\t\t//setAttr (\"RRM_\" + $attachNode + \"_RRM_\" + $prfx + $modName + \"_ParentCtrl.overrideColor\") (6 + (7 * $on));\n\n\t\t\t\t\t\n\t\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CHANGE COLOUR OF CONNECTOR\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $attachNode + \"_RRM_\" + $prfx + $modName + \"_ParentCtrl.overrideColor\") (6 + (7 * $on));\n\n\t\t\t\t\t\t//SET PIN CHANNEL\n\t\t\t\t\t\tlockNode -lock 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t\tsetAttr -lock 0 (\"RRM_\" + $prfx + $modName + \"_Parent.pinned\");\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.pinned\") $on;\n\t\t\t\t\t\tsetAttr -lock 1 (\"RRM_\" + $prfx + $modName + \"_Parent.pinned\");\n\t\t\t\t\t\tlockNode (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CHANGE COLOUR OF CONNECTOR\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $attachNode + \"_RRM_\" + $prfx + $modName + \"_AuxCtrl.overrideColor\") (6 + (7 * $on));\n\n\t\t\t\t\t\t//SET PIN CHANNEL\n\t\t\t\t\t\tlockNode -lock 0 (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\t\t\t\tsetAttr -lock 0 (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\") $on;\n\t\t\t\t\t\tsetAttr -lock 1 (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\t\t\t\t\tlockNode (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"NO VALID MODULES WERE SELECTED\";\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"NOTHING SELECTED\";\n\t}\n\tselect $selected;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////TRANSFER TRANSFORMS///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_TransferModTransforms2()\n{\n\t//CHECK WHETHER TO INCLUDE PARENT NODE\n\t$parentCheck = `checkBox -q -v RRM_TransferParent`;\n\t\n\t$sourceAndDestination = `ls -sl`;\n\t$sourceParent[0] = $sourceAndDestination[0];\n\t$destinationParent[0] = $sourceAndDestination[1];\n\t\n\tselect -hi $sourceParent[0];\n\tselect -d \"*Shape\" \"*Constraint1\";\n\tif ($parentCheck == 0)\n\t{\n\t\tselect -d $sourceParent[0];\n\t}\n\t$sourceHierarchy = `ls -sl`;\n\t$sourceSize = `size $sourceHierarchy`;\n\t\n\tselect -hi $destinationParent[0];\n\tselect -d \"*Shape\" \"*Constraint1\";\n\tselect -d \"*Shape\" \"*Constraint1\";\n\tif ($parentCheck == 0)\n\t{\n\t\tselect -d $destinationParent[0];\n\t}\n\t$destinationHierarchy = `ls -sl`;\n\t$destinationSize = `size $destinationHierarchy`;\n\t\t\n\tif (($sourceSize > 0) && ($destinationSize > 0))\n\t{\n\t\tint $crntHierarchyMod = 0;\n\t\twhile (($crntHierarchyMod < $sourceSize) && ($crntHierarchyMod < $destinationSize))\n\t\t{\n\t\t\t$sourceT = `getAttr ($sourceHierarchy[$crntHierarchyMod] + \".translate\")`;\n\t\t\t$sourceR = `getAttr ($sourceHierarchy[$crntHierarchyMod] + \".rotate\")`;\n\t\t\t$sourceS = `getAttr ($sourceHierarchy[$crntHierarchyMod] + \".scale\")`;\n\t\t\t\n\t\t\t$lockTX = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".tx\")`;\n\t\t\t$lockTY = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".ty\")`;\n\t\t\t$lockTZ = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".tz\")`;\n\t\t\t$lockRX = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".rx\")`;\n\t\t\t$lockRY = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".ry\")`;\n\t\t\t$lockRZ = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".rz\")`;\n\t\t\t$lockSX = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".sx\")`;\n\t\t\t$lockSY = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".sy\")`;\n\t\t\t$lockSZ = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".sz\")`;\n          \t\t\n\t\t\tif ($lockTX == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".tx\") $sourceT[0];}\n\t\t\tif ($lockTY == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".ty\") $sourceT[1];}\n\t\t\tif ($lockTZ == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".tz\") $sourceT[2];}\n\t\t\t\n\t\t\tif ($lockRX == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".rx\") $sourceR[0];}\n\t\t\tif ($lockRY == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".ry\") $sourceR[1];}\n\t\t\tif ($lockRZ == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".rz\") $sourceR[2];}\n          \t\t\n\t\t\tif ($lockSX == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".sx\") $sourceS[0];}\n\t\t\tif ($lockSY == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".sy\") $sourceS[1];}\n\t\t\tif ($lockSZ == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".sz\") $sourceS[2];}\n\t\t\t$crntHierarchyMod++;\n\t\t}\n\t}\n}\nglobal proc RRM_TransferModTransforms()\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$sourceParent = `ls -sl`;\n\t$destinationParent = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $crntProxy;\n\t\n\tint $RRM_TransferSelectionButton = `radioButtonGrp -q -select RRM_TransferSelectionButton`;\n\n\tif ($proxySize == 2)\n\t{\n\t\t//SELECTED\n\t\tif ($RRM_TransferSelectionButton == 1)\n\t\t{\n\t\t\t$sourceT = `getAttr ($proxies[0] + \".translate\")`;\n\t\t\t$sourceR = `getAttr ($proxies[0] + \".rotate\")`;\n\t\t\t$sourceS = `getAttr ($proxies[0] + \".scale\")`;\n\t\t\t\n\t\t\t$lockTX = `getAttr -lock ($proxies[1] + \".tx\")`;\n\t\t\t$lockTY = `getAttr -lock ($proxies[1] + \".ty\")`;\n\t\t\t$lockTZ = `getAttr -lock ($proxies[1] + \".tz\")`;\n\t\t\t$lockRX = `getAttr -lock ($proxies[1] + \".rx\")`;\n\t\t\t$lockRY = `getAttr -lock ($proxies[1] + \".ry\")`;\n\t\t\t$lockRZ = `getAttr -lock ($proxies[1] + \".rz\")`;\n\t\t\t$lockSX = `getAttr -lock ($proxies[1] + \".sx\")`;\n\t\t\t$lockSY = `getAttr -lock ($proxies[1] + \".sy\")`;\n\t\t\t$lockSZ = `getAttr -lock ($proxies[1] + \".sz\")`;\n\n\t\t\tif ($lockTX == 0)\n\t\t\t{setAttr ($proxies[1] + \".tx\") $sourceT[0];}\n\t\t\tif ($lockTY == 0)\n\t\t\t{setAttr ($proxies[1] + \".ty\") $sourceT[1];}\n\t\t\tif ($lockTZ == 0)\n\t\t\t{setAttr ($proxies[1] + \".tz\") $sourceT[2];}\n\t\t\t\n\t\t\tif ($lockRX == 0)\n\t\t\t{setAttr ($proxies[1] + \".rx\") $sourceR[0];}\n\t\t\tif ($lockRY == 0)\n\t\t\t{setAttr ($proxies[1] + \".ry\") $sourceR[1];}\n\t\t\tif ($lockRZ == 0)\n\t\t\t{setAttr ($proxies[1] + \".rz\") $sourceR[2];}\n\n\t\t\tif ($lockSX == 0)\n\t\t\t{setAttr ($proxies[1] + \".sx\") $sourceS[0];}\n\t\t\tif ($lockSY == 0)\n\t\t\t{setAttr ($proxies[1] + \".sy\") $sourceS[1];}\n\t\t\tif ($lockSZ == 0)\n\t\t\t{setAttr ($proxies[1] + \".sz\") $sourceS[2];}\n\t\t}\n\t\t\n\t\t//BRANCH\n\t\telse if ($RRM_TransferSelectionButton == 2)\n\t\t{\n\t\t\t$sourceProxy = $proxies[0];\n\t\t\t$destinationProxy = $proxies[1];\n\t\t\t\n\t\t\t//GET SOURCE PARENT\n\t\t\tselect $sourceProxy;\n\t\t\tif (!`objExists ($sourceProxy + \".parent\")`)\n\t\t\t{\n\t\t\t\tstring $crntProxy;\n\t\t\t\t$crntInt = 0;\n\t\t\t\twhile ((!`objExists ($crntProxy + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t{\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sourceParent = `ls -sl`;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$crntProxy = $parentCheck[0];\n\t\t\t\t\t$crntInt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sourceParent = `ls -sl`;\n\t\t\t}\n\t\t\t\n\t\t\t//GET DESTINATION PARENT\n\t\t\tselect $destinationProxy;\n\t\t\tif (!`objExists ($destinationProxy + \".parent\")`)\n\t\t\t{\n\t\t\t\tstring $crntProxy;\n\t\t\t\t$crntInt = 0;\n\t\t\t\twhile ((!`objExists ($crntProxy + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t{\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$destinationParent = `ls -sl`;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$crntProxy = $parentCheck[0];\n\t\t\t\t\t$crntInt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$destinationParent = `ls -sl`;\n\t\t\t}\n\t\t\t$sourceModType = `getAttr ($sourceParent[0] + \".parent\")`;\n\t\t\t$destinationModType = `getAttr ($destinationParent[0] + \".parent\")`;\n\t\t\t\n\t\t\t//CHECK TO SEE IF THEY ARE THE SAME TYPE OF MODULE\n\t\t\tif ($sourceModType == $destinationModType)\n\t\t\t{\n\t\t\t\tselect -hi $sourceParent[0];\n\t\t\t\tselect -d \"*Shape\" \"*Constraint1\";\n\t\t\t\t$sourceHierarchy = `ls -sl`;\n\t\t\t\t$sourceSize = `size $sourceHierarchy`;\n\t\t\t\t\n\t\t\t\tselect -hi $destinationParent[0];\n\t\t\t\tselect -d \"*Shape\" \"*Constraint1\";\n\t\t\t\t$destinationHierarchy = `ls -sl`;\n\t\t\t\t$destinationSize = `size $destinationHierarchy`;\n\n\t\t\t\t//CHECK TO SEE IF SOURCE AND DESTINATION HAVE SAME NUMBER OF NODES\t\t\t\t\n\t\t\t\tif ($sourceSize == $destinationSize)\n\t\t\t\t{\n\t\t\t\t\tselect $sourceParent[0] $destinationParent[0];\n\t\t\t\t\tRRM_TransferModTransforms2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"The Source And Destination Branches Have A Different Number Of Nodes.\"\n\t\t\t\t\t\t-message \"The results may not transfer properly.\\nProceed?\"\n\t\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t\t-icon \"question\"`;\n\t\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t\t{\n\t\t\t\t\t\tselect $sourceParent[0] $destinationParent[0];\n\t\t\t\t\t\tRRM_TransferModTransforms2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"The Modules Are Not Of The Same Type.\"\n\t\t\t\t\t-message \"The results may not transfer properly.\\nProceed?\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tselect $sourceParent[0] $destinationParent[0];\n\t\t\t\t\tRRM_TransferModTransforms2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Wrong Number Of Objects Seleted\"\n\t\t\t-message \"Select ONE target node followed by ONE destination node that you want to match to.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\tselect $originalSelection;\n}\n\n//SAVE/LOAD PROXY TRANSFORMS//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_WritePathProxyTransforms()\n{\n\tif (`objExists \"RRM_MAIN\"` && `objExists \"RRM_ROOT\"`)\n\t{\n\t\tstring $mayaFolder;\n\t\n\t\tfileBrowserDialog -mode 1\n\t\t-fileCommand ( \"RRM_SaveProxyTransforms \\\"\" + $mayaFolder + \"\\\"\" )\n\t\t-actionName \"Save\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No Modular Proxy Rig Exists\"\n\t\t\t-message \"You must first create a modular proxy rig that you wish to save the transforms from.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}   \t\n}\n\n\nglobal proc RRM_SaveProxyTransforms(string $mayaFolder, string $result, string $type)\n{\n\tprint (\"\\nSAVING TO: \"+ $result + \"\\n\");\n\t$fileID = `fopen $result \"w\"`;\n\t\t\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl`;\n\t\tstring $crntProxy;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t\n\tfor ($crntProxy in $proxies)\n\t{\n\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\t\n\t\t\n\t\tfprint $fileID (\"if (`objExists \" + $crntProxy + \"`) {\");\n\t\t\n\t\tif ($lockTX == 0)\n\t\t{\n\t\t\t$crntTX = `getAttr ($crntProxy + \".tx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tx \"+ $crntTX +\"; \");\n\t\t}\n\t\tif ($lockTY == 0)\n\t\t{\n\t\t\t$crntTY = `getAttr ($crntProxy + \".ty\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ty \"+ $crntTY +\"; \");\n\t\t}\n\t\tif ($lockTZ == 0)\n\t\t{\n\t\t\t$crntTZ = `getAttr ($crntProxy + \".tz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tz \"+ $crntTZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockRX == 0)\n\t\t{\n\t\t\t$crntRX = `getAttr ($crntProxy + \".rx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rx \"+ $crntRX +\"; \");\n\t\t}\n\t\tif ($lockRY == 0)\n\t\t{\n\t\t\t$crntRY = `getAttr ($crntProxy + \".ry\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ry \"+ $crntRY +\"; \");\n\t\t}\n\t\tif ($lockRZ == 0)\n\t\t{\n\t\t\t$crntRZ = `getAttr ($crntProxy + \".rz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rz \"+ $crntRZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockSX == 0)\n\t\t{\n\t\t\t$crntSX = `getAttr ($crntProxy + \".sx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sx \"+ $crntSX +\"; \");\n\t\t}\n\t\tif ($lockSY == 0)\n\t\t{\n\t\t\t$crntSY = `getAttr ($crntProxy + \".sy\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sy \"+ $crntSY +\"; \");\n\t\t}\n\t\tif ($lockSZ == 0)\n\t\t{\n\t\t\t$crntSZ = `getAttr ($crntProxy + \".sz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sz \"+ $crntSZ +\"; \");\n\t\t}\n\t\tfprint $fileID \"}\\n\";\n\n\t}\n\tfclose $fileID;\n\tselect $originalSelection;\t\t\n}\n\n\nglobal proc RRM_ReadPathProxyTransform()\n{\n \tstring $mayaFolder2;\n\tif (`objExists \"RRM_MAIN\"` && `objExists \"RRM_ROOT\"`)\n\t{\n\t\tfileBrowserDialog -mode 0\n\t\t-fileCommand ( \"RRM_LoadModProxyTransforms \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t\t-actionName \"Load\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No Modular Proxy Rig Exists\"\n\t\t\t-message \"You must first create a modular proxy rig that you wish to load the transforms to.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n}\n\nglobal proc RRM_LoadModProxyTransforms(string $mayaFolder2, string $result2, string $type2)\n{\n\t//FILE PATH\n\tprint (\"LOADING POSE FROM \"+$result2+\"...\\n\");\n\t//OPEN FILE FOR READING\n\t$fileID = `fopen $result2 \"r\"`;\n\t//GET FIRST LINE\n\tstring $nextLine = `fgetline $fileID`;\n\t//LOOP\n\twhile (size($nextLine) > 0)\n\t{\n\t\teval ($nextLine);\n\t\tprint ($nextLine);\n\t\t$nextLine = `fgetline $fileID`;\n\t}\n\t//RETURN ARRAY\n\tfclose $fileID;\n}\n\n//SAVE/LOAD PROXY SETUP///////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_WritePathProxySetup()\n{\n\tstring $mayaFolder;\n\tif (`objExists \"RRM_MAIN\"` && `objExists \"RRM_ROOT\"`)\n\t{\n\t\tfileBrowserDialog -mode 1\n\t\t-fileCommand ( \"RRM_SaveProxySetup \\\"\" + $mayaFolder + \"\\\"\" )\n\t\t-actionName \"Save\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No Modular Proxy Rig Exists\"\n\t\t\t-message \"You must first create a modular proxy rig that you wish to save to a setup file.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}    \n}\n\n\nglobal proc RRM_SaveProxySetup(string $mayaFolder, string $result, string $type)\n{\n\tprint (\"\\nSAVING TO: \"+ $result + \"\\n\");\n\t$fileID = `fopen $result \"w\"`;\n\t\t\n\t$originalSelection = `ls -sl`;\n\tstring $proxies[];\n\tstring $modules[];\n\t\n\t\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl`;\n\t\t\n\t\t//FIND MODULE NODES\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t\t\n\t\t//FIND PROXIES\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".top\")`)\n\t\t    {\n\t\t        $modules = `ls $modules $crntProxy`;\n\t\t    }\n\t\t}\n\t\t\n\t\t//CREATE MAIN AND ROOT PROXIES\n\t\tfprint $fileID \"RRM_CreateProxyMainProxy(0);\\n\";\n\t\t\n\t\t//CREATE MODULES\n\t\tfor ($each in $modules)\n\t\t{\n\t\t\t//CHECK TYPE OF MODULE, MOD NAME, ATTACH NODE\n\t\t\tstring $modType = `getAttr ($each + \".top\")`;\n\t\t\tstring $modName = `getAttr ($each + \".core\")`;\n\t\t\tstring $attachNode = `getAttr ($each + \".parent\")`;\n\t\t\t$attachNode = (\"RRM_\" + $attachNode);\n\t\t\tint $mirror = 0;\n\t\t\tint $single;\n\t\t\tif (`objExists ($each + \".pair\")`)\n\t\t\t{\n\t\t\t\t$mirror = 1;\n\t\t\t\tif ($modType == \"arm\"||$modType == \"leg\")\n\t\t\t\t{\n\t\t\t\t\t$mirror = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($modType == \"arm\")\n\t\t\t{\n\t\t\t\tstring $single = `getAttr ($each + \".single\")`;\n\t\t\t\tif ($single == \"left\")\n\t\t\t\t{\n\t\t\t\t\t$mirror = 1;\n\t\t\t\t}\n\t\t\t\tif ($single == \"right\")\n\t\t\t\t{\n\t\t\t\t\t$mirror = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($modType == \"leg\")\n\t\t\t{\n\t\t\t\t$mirror = 1;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//DEFINE CUSTOM ATTRIBUTES OF EACH MODULE\n\t\t\t//SPLINE\n\t\t\tint $splineNum;\n\t\t\t//ARM/LEG\n\t\t\tint $upperNum;\n\t\t\tint $lowerNum;\n\t\t\tint $elbowNum;\n\t\t\tint $elbowJoints;\n\t\t\tint $kneeNum;\n\t\t\tint $kneeJoints;\n\t\t\t//FK CHAIN\n\t\t\tint $chainNum;\n\t\t\tint $jointNum;\n\t\t\tint $direction;\n\t\t\t//HEAD\n\t\t\tint $jaw;\n\t\t\t//LOOKAT\n\t\t\tint $eyeNum;\n\n\t\t\t//SELECT\n\t\t\tfprint $fileID (\"select \" + $attachNode + \";\\n\");\n\t\t\t\n\t\t\tif ($modType == \"spline\")\n\t\t\t{\n\t\t\t\t$splineNum = `getAttr ($each + \".jointsNum\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxySpline(\\\"\" + $modName + \"\\\",\" + $splineNum + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"arm\")\n\t\t\t{\n\t\t\t\t$upperNum = `getAttr ($each + \".upperArmNum\")`;\n\t\t\t\t$lowerNum = `getAttr ($each + \".lowerArmNum\")`;\n\t\t\t\t$elbowNum = `getAttr ($each + \".elbowNum\")`;\n\t\t\t\t$elbowJoints = `getAttr ($each + \".elbowJoints\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyArm(\\\"\" + $modName + \"\\\",\" + $upperNum + \",\" + $lowerNum + \",\" + $elbowNum + \",\" + $elbowJoints + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"leg\")\n\t\t\t{\n\t\t\t\t$upperNum = `getAttr ($each + \".upperLegNum\")`;\n\t\t\t\t$lowerNum = `getAttr ($each + \".lowerLegNum\")`;\n\t\t\t\t$kneeNum = `getAttr ($each + \".kneeNum\")`;\n\t\t\t\t$kneeJoints = `getAttr ($each + \".kneeJoints\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyLeg(\\\"\" + $modName + \"\\\",\" + $upperNum + \",\" + $lowerNum + \",\" + $kneeNum + \",\" + $kneeJoints + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"fkChain\")\n\t\t\t{\n\t\t\t\t$chainNum = `getAttr ($each + \".chainsNum\")`;\n\t\t\t\t$jointNum = `getAttr ($each + \".jointsNum\")`;\n\t\t\t\t$direction = `getAttr ($each + \".direction\")`;\n\t\t\t\t$direction2 = `getAttr ($each + \".direction\")`;\n\t\t\t\tif ($direction > 3)\n\t\t\t\t{\n\t\t\t\t\t$direction2 = ($direction2 - 3);\n\t\t\t\t\t$direction = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$direction2 = 0;\n\t\t\t\t}\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyFKChain(\\\"\" + $modName + \"\\\",\" + $chainNum + \",\" + $jointNum + \",\" + $direction + \",\" + $direction2 + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"head\")\n\t\t\t{\n\t\t\t\t$jaw = `getAttr ($each + \".jaw\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyHead(\\\"\" + $modName + \"\\\",\" + $jaw + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"lookAt\")\n\t\t\t{\n\t\t\t\t$eyeNum = `getAttr ($each + \".eyeNum\")`;\n\t\t\t\t$direction = `getAttr ($each + \".direction\")`;\n\t\t\t\t$direction2 = `getAttr ($each + \".direction\")`;\n\t\t\t\tif ($direction > 3)\n\t\t\t\t{\n\t\t\t\t\t$direction2 = ($direction2 - 3);\n\t\t\t\t\t$direction = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$direction2 = 0;\n\t\t\t\t}\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyLookAt(\\\"\" + $modName + \"\\\",\" + $eyeNum + \",\" + $direction + \",\" + $direction2 + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"auxiliary\")\n\t\t\t{\n\t\t\t\t//$eyeNum = `getAttr ($each + \".eyeNum\")`;\n\t\t\t\t//$direction = `getAttr ($each + \".direction\")`;\n\t\t\t\t//$direction2 = `getAttr ($each + \".direction\")`;\n\t\t\t\t//if ($direction > 3)\n\t\t\t\t//{\n\t\t\t\t//\t$direction2 = ($direction2 - 3);\n\t\t\t\t//\t$direction = 0;\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t//\t$direction2 = 0;\n\t\t\t\t//}\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyAuxiliary(\\\"\" + $modName + \"\\\",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\t\n\t\n\tfor ($crntProxy in $proxies)\n\t{\n\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\t\t\n\t\t\n\t\tfprint $fileID (\"if (`objExists \" + $crntProxy + \"`) {\");\n\t\t\n\t\tif ($lockTX == 0)\n\t\t{\n\t\t\t$crntTX = `getAttr ($crntProxy + \".tx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tx \"+ $crntTX +\"; \");\n\t\t}\n\t\tif ($lockTY == 0)\n\t\t{\n\t\t\t$crntTY = `getAttr ($crntProxy + \".ty\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ty \"+ $crntTY +\"; \");\n\t\t}\n\t\tif ($lockTZ == 0)\n\t\t{\n\t\t\t$crntTZ = `getAttr ($crntProxy + \".tz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tz \"+ $crntTZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockRX == 0)\n\t\t{\n\t\t\t$crntRX = `getAttr ($crntProxy + \".rx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rx \"+ $crntRX +\"; \");\n\t\t}\n\t\tif ($lockRY == 0)\n\t\t{\n\t\t\t$crntRY = `getAttr ($crntProxy + \".ry\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ry \"+ $crntRY +\"; \");\n\t\t}\n\t\tif ($lockRZ == 0)\n\t\t{\n\t\t\t$crntRZ = `getAttr ($crntProxy + \".rz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rz \"+ $crntRZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockSX == 0)\n\t\t{\n\t\t\t$crntSX = `getAttr ($crntProxy + \".sx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sx \"+ $crntSX +\"; \");\n\t\t}\n\t\tif ($lockSY == 0)\n\t\t{\n\t\t\t$crntSY = `getAttr ($crntProxy + \".sy\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sy \"+ $crntSY +\"; \");\n\t\t}\n\t\tif ($lockSZ == 0)\n\t\t{\n\t\t\t$crntSZ = `getAttr ($crntProxy + \".sz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sz \"+ $crntSZ +\"; \");\n\t\t}\n\t\tfprint $fileID \"}\\n\";\n\n\t}\n\tfclose $fileID;\n\tselect $originalSelection;\t\t\n}\n\n\nglobal proc RRM_ReadPathProxySetup()\n{\n\tstring $mayaFolder2;\n\tif (!`objExists \"RRM_MAIN\"` || !`objExists \"RRM_ROOT\"`)\n\t{\n\t\tfileBrowserDialog -mode 0\n\t\t-fileCommand ( \"RRM_LoadModProxySetup \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t\t-actionName \"Load\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Proxy Rig Already Exists\"\n\t\t\t-message \"You must first delete the existing proxy rig to load a new one. Do you wish to delete the proxy rig and then load a proxy?.\\n\"\n\t\t\t-button \"Yes\"\n\t\t\t-button \"Cancel\"\n\t\t\t-defaultButton \"Cancel\"\n\t\t\t-cancelButton \"Cancel\"\n\t\t\t-icon \"critical\"`;\n\t\t\t\n\t\t\tif ($returnVal_Generate == \"Yes\")\n\t\t\t{\n\t\t\t\tRRM_DeleteProxyRig;\n\t\t\t\tfileBrowserDialog -mode 0\n\t\t\t\t-fileCommand ( \"RRM_LoadModProxySetup \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t\t\t\t-actionName \"Load\";\n\t\t\t}\n\t}   \n}\n\nglobal proc RRM_LoadModProxySetup(string $mayaFolder2, string $result2, string $type2)\n{\n\t//FILE PATH\n\tprint (\"LOADING POSE FROM \"+$result2+\"...\\n\");\n\t//OPEN FILE FOR READING\n\t$fileID = `fopen $result2 \"r\"`;\n\t//GET FIRST LINE\n\tstring $nextLine = `fgetline $fileID`;\n\t//LOOP\n\twhile (size($nextLine) > 0)\n\t{\n\t\teval ($nextLine);\n\t\tprint ($nextLine);\n\t\t$nextLine = `fgetline $fileID`;\n\t}\n\t//RETURN ARRAY\n\tfclose $fileID;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE FINAL RIG//////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_ColorControls()\n{\n\t//LEFT\n\t//MAIN BLUE IS 6\n\t//SECONDARY BLUE IS 18\n\t\n\t//RIGHT\n\t//MAIN RED IS 13\n\t//SECONDARY RED IS 21\n\t\n\t//CENTER\n\t//MAIN GREEN IS 14\n\t//SECONDARY GREEN IS 27\n\t\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\tselect -hi ($modName + \"_MAINCtrl\");\n\t\n\t$xforms= `ls -sl -type \"nurbsCurve\"`;\n\tselect $xforms;\n\t$controls = `ls -sl`;\n\tstring $crnt;\n\tfor ($crnt in $controls)\n\t{\n\t\tselect $crnt;\n\t\tpickWalk -d up;\n\t\t$crntParent = `ls -sl`;\n\t\tstring $parentNode = $crntParent[0];\n\t\t\n\t\tif (`objExists ($parentNode + \".modRigName\")`)\n\t\t{\n\t\t\tif (!`objExists ($parentNode + \".leftControl\")` && !`objExists ($parentNode + \".rightControl\")`)\n\t\t\t{\n\t\t\t\tif (!`gmatch $parentNode ($modName + \"_*Curve*Ctrl\")`)\n\t\t\t\t{//MAIN NON-MIRRORED CONTROLS\n\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 14;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{//MAIN NON-MIRRORED CURVE CONTROLS\n\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 27;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{//MIRRORED CONTROLS\n\t\t\t\tif (`objExists ($parentNode + \".rightControl\")`)\n\t\t\t\t{//RIGHT CONTROLS\n\t\t\t\t\tif (!`gmatch $parentNode ($modName + \"_*Curve*Ctrl\")`)\n\t\t\t\t\t{//MAIN NON-MIRRORED CONTROLS\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 6;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 18;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if (`objExists ($parentNode + \".leftControl\")`)\n\t\t\t\t{//LEFT CONTROLS\n\t\t\t\t\tif (!`gmatch $parentNode ($modName + \"_*Curve*Ctrl\")`)\n\t\t\t\t\t{//MAIN NON-MIRRORED CONTROLS\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 13;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 21;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//ADD CORE NAME\nglobal proc RRM_CoreName(string $modControls[])\n{\n\tfor ($crntModControl in $modControls)\n\t{\n\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t}\n}\n\n//ADD CONTROL NAME\nglobal proc RRM_ControlName(string $modControls[])\n{\n\tfor ($crntModControl in $modControls)\n\t{\n\t\tspaceLocator -n (\"TempNamePlaceHolder_\" + $crntModControl);\n\t\tgroup -n (\"TempNamePlaceHolder_Grp\") (\"TempNamePlaceHolder_\" + $crntModControl);\n\t\t$modRigName = `getAttr ($crntModControl + \".modRigName\")`;\n\t\t\n\t\tselect (\"TempNamePlaceHolder_\" + $crntModControl);\n\t\tsearchReplaceNames (\"TempNamePlaceHolder_\" + $modRigName + \"_\") \"_\" \"selected\";\n\t\tselect (\"TempNamePlaceHolder_Grp\");\n\t\tpickWalk -d down;\n\t\t$controlName = `ls -sl`;\n\t\t\n\t\taddAttr -ln \"modControlName\" -dt \"string\" $crntModControl;\n\t\tsetAttr -e-keyable true ($crntModControl + \".modControlName\");\n\t\tsetAttr -type \"string\" ($crntModControl + \".modControlName\") $controlName[0];\n\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".modControlName\");\n\t\t\n\t\tdelete (\"TempNamePlaceHolder_Grp\");\n\t}\n}\n\n//SET UP ORIENTATION TO PARENT NODE\nglobal proc RRM_ParentOrient(string $modCore, string $modName, string $modAttachNode, string $parentOrient)\n{\n\tif ($modAttachNode != \"ROOT\")\n\t{\n\t\taddAttr -ln \"parentOrient\" -at double -min 0 -max 1 -dv 1 $parentOrient;\n\t\tsetAttr -e-keyable true ($parentOrient + \".parentOrient\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_orientConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW1\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW1\");\n\t}\n\telse\n\t{\n\t\taddAttr -ln \"ROOT_Parent\"  -at \"enum\" -en \"ROOT:ROOTSecondary:\"  $parentOrient;\n\t\tsetAttr -e-keyable true ($parentOrient + \".ROOT_Parent\");\n\t\taddAttr -ln \"parentOrient\" -at double  -min 0 -max 1 -dv 1 $parentOrient;\n\t\tsetAttr -e-keyable true ( $parentOrient + \".parentOrient\");\t\t\n        \n\t\t//CREATE NODES FOR BLENDING BETWEEN THE TWO ROOT CHOICES AND MAIN CONTROL\n\t\t\n\t\t//MODULE GROUP\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ParentMD\");\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_ParentReverse\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ParentMD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ParentReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_ParentReverse.outputX\") ($modCore + \"_ParentMD.input2Y\");\n\t\tsetAttr ($modCore + \"_ParentMD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_ParentMD.input1Y\") 1;\n\t\t\n\t\t//SECOND MULTIPLY DIVIDE TO ZERO OUT BOTH ROOT CHOICES WHEN PARENT ORIENT SET TO ZERO\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Parent2MD\");\n\t\tconnectAttr -force ($modCore + \"_ParentMD.outputX\") ($modCore + \"_Parent2MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_ParentMD.outputY\") ($modCore + \"_Parent2MD.input1Y\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_Parent2MD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_Parent2MD.input2Y\");\n\t\t\n\t\t//CONNECT MULTIPLY/DIVIDE TO ORIENT CONSTRAINT\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputY\") ($modCore + \"_orientConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputX\") ($modCore + \"_orientConstraint1.\" + $modName + \"_ROOTJntW2\");\n\t\t\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputY\") ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputX\") ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTJntW0\");\n\t\t\t\t\n\t\t//MODULE SCALEG\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ScaleGrp_ParentMD\");\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_ScaleGrp_ParentReverse\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_ParentMD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_ParentReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_ParentReverse.outputX\") ($modCore + \"_ScaleGrp_ParentMD.input2Y\");\n\t\tsetAttr ($modCore + \"_ScaleGrp_ParentMD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_ScaleGrp_ParentMD.input1Y\") 1;\n\t\t\n\t\t//SECOND MULTIPLY DIVIDE TO ZERO OUT BOTH ROOT CHOICES WHEN PARENT ORIENT SET TO ZERO\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ScaleGrp_Parent2MD\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_ParentMD.outputX\") ($modCore + \"_ScaleGrp_Parent2MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_ParentMD.outputY\") ($modCore + \"_ScaleGrp_Parent2MD.input1Y\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ScaleGrp_Parent2MD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ScaleGrp_Parent2MD.input2Y\");\n\t\t\n\t\t//CONNECT MULTIPLY/DIVIDE TO ORIENT CONSTRAINT\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_Parent2MD.outputY\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_Parent2MD.outputX\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modName + \"_ROOTJntW2\");\n\t    \n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_parentConstraint1.\" + $modName + \"_ROOTJntW0\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_ScaleGrp_Parent2Reverse\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_Parent2Reverse.inputX\");\n\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_Parent2Reverse.outputX\") ($modCore + \"_ScaleGrp_parentConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\t\n\t\t//CHECK IF LEG, AND CHANGE TO ROOT Secondary\n\t\tif (`objExists ($modCore + \"_FootIKCtrl\")`)\n\t\t{\n\t\t\tsetAttr ($parentOrient + \".ROOT_Parent\") 1;\n\t\t}\n\t}\n\t//MODULE\n\tshadingNode -asUtility reverse -n ($modCore + \"_ParentOrientReverse\");\n\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ParentOrientReverse.inputX\");\n\tconnectAttr -force ($modCore + \"_ParentOrientReverse.outputX\") ($modCore + \"_orientConstraint1.\" + $modCore + \"_OffsetLctrW0\");\n\tconnectAttr -force ($modCore + \"_ParentOrientReverse.outputX\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modCore + \"_OffsetLctrW0\");\n\tif (`objExists ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTLocLctrW2\")`)\n\t{\n\t\tconnectAttr -force ($modCore + \"_ParentOrientReverse.outputX\") ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTLocLctrW2\");\n\t}\t\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE ROOT MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigRoot()\n{\n\n\t\n\t\t\n\t//GET NAME\n\t $modName = `textField -q -text RRM_TextFieldCharName`;\n\t \t\n\n\t//CREATE TOP GROUP\n\tselect -cl;\n\tgroup -em -n $modName;\n\t//CREATE MAIN CONTROLLER///////////////////////////////////////////////////////////////\n\tcircle -n ($modName + \"_MAINCtrl\") -nr 0 1 0 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcurve -n ($modName + \"_Arrow1\") -d 1 -p 3 0 8 -p 3 0 9 -p 5 0 9 -p 0 0 12 -p -5 0 9 -p -3 0 9 -p -3 0 8 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\tpickWalk -d down;\n\trename ($modName + \"_Arrow1Shape\");\n\tcircle -n ($modName + \"_Outer1\") -nr 0 1 0 -sw 48.9 -r 8.545 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\trotate -r 0 110.55 0 ($modName + \"_Outer1\");\n\tduplicate -rr ($modName + \"_Arrow1\") ($modName + \"_Outer1\");\n\trotate -r 0 90 0 ($modName + \"_Arrow2\") ($modName + \"_Outer2\");\n\tduplicate -rr ($modName + \"_Arrow1\") ($modName + \"_Outer1\");\n\trotate -r 0 180 0 ($modName + \"_Arrow3\") ($modName + \"_Outer3\");\n\tduplicate -rr ($modName + \"_Arrow1\") ($modName + \"_Outer1\");\n\trotate -r 0 270 0 ($modName + \"_Arrow4\") ($modName + \"_Outer4\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_MAINCtrl\") ($modName + \"_Arrow1\") ($modName + \"_Outer1\") ($modName + \"_Arrow2\") ($modName + \"_Outer2\") ($modName + \"_Arrow3\") ($modName + \"_Outer3\") ($modName + \"_Arrow4\") ($modName + \"_Outer4\") ;\n\tparent -r -s ($modName + \"_Arrow1Shape\") ($modName + \"_Outer1Shape\") ($modName + \"_Arrow2Shape\") ($modName + \"_Outer2Shape\") ($modName + \"_Arrow3Shape\") ($modName + \"_Outer3Shape\") ($modName + \"_Arrow4Shape\") ($modName + \"_Outer4Shape\") ($modName + \"_MAINCtrl\");\n\tdelete ($modName + \"_Arrow1\") ($modName + \"_Outer1\") ($modName + \"_Arrow2\") ($modName + \"_Outer2\") ($modName + \"_Arrow3\") ($modName + \"_Outer3\") ($modName + \"_Arrow4\") ($modName + \"_Outer4\") ;\n\tmove -r 0 0 2 ($modName + \"_Arrow1Shape.cv[3]\") ;\n\t\n\t//ADD RRM TO THE MAIN CONTROL\n\tcurve -n ($modName + \"R1_OuterCurve\") -d 3 -p -0.407227 0 -0.429492 -p -0.263487 0 -0.429492 -p 0.0239912 0 -0.432182 -p 0.153059 0 -0.418734 -p 0.253227 0 -0.330969 -p 0.296535 0 -0.194139 -p 0.237588 0 -0.0195534 -p 0.0868775 0 0.0315034 -p 0.040764 0 0.0378381 -p 0.0375 0 0.0386719 -p 0.0382526 0 0.0396925 -p 0.0951021 0 0.0649485 -p 0.176419 0 0.152211 -p 0.284981 0 0.330214 -p 0.348426 0 0.427287 -p 0.349805 0 0.429492 -p 0.345946 0 0.429492 -p 0.276161 0 0.429492 -p 0.209868 0 0.429492 -p 0.206836 0 0.429492 -p 0.205116 0 0.426765 -p 0.154922 0 0.348158 -p 0.10053 0 0.260202 -p 0.0030441 0 0.11572 -p -0.0459097 0 0.0714475 -p -0.0972157 0 0.0491625 -p -0.149125 0 0.0478205 -p -0.274914 0 0.0480469 -p -0.288614 0 0.0480469 -p -0.293555 0 0.0480469 -p -0.293555 0 0.0510741 -p -0.293555 0 0.125268 -p -0.293493 0 0.202405 -p -0.293493 0 0.398616 -p -0.293555 0 0.428465 -p -0.293555 0 0.429492 -p -0.294535 0 0.429492 -p -0.328353 0 0.429492 -p -0.378561 0 0.429492 -p -0.405499 0 0.429492 -p -0.407227 0 0.429492 -p -0.407227 0 0.428253 -p -0.407227 0 0.405684 -p -0.407227 0 0.328387 -p -0.407227 0 -0.0915302 -p -0.407227 0 -0.429492 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 43 -k 43 ;\n\tpickWalk -d down;\n\trename ($modName + \"R1_OuterCurveShape\");\n\tcurve -n ($modName + \"R1_InnerCurve\") -d 3 -p -0.293555 0 -0.33457 -p -0.257406 0 -0.33457 -p -0.0889505 0 -0.333847 -p 0.0486942 0 -0.336975 -p 0.14017 0 -0.292901 -p 0.171323 0 -0.194613 -p 0.146198 0 -0.11598 -p 0.0827139 0 -0.0601229 -p -0.0184461 0 -0.0494054 -p -0.159798 0 -0.0503906 -p -0.290636 0 -0.0503906 -p -0.293555 0 -0.0503906 -p -0.293555 0 -0.0540591 -p -0.293555 0 -0.119074 -p -0.293555 0 -0.33457 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 12 -k 12 ;\n\tpickWalk -d down;\n\trename ($modName + \"R1_InnerCurveShape\");\n\tcurve -n ($modName + \"M_Curve\") -d 1 -p 0.454102 0 0.429492 -p 0.454102 0 -0.429492 -p 0.625195 0 -0.429492 -p 0.869531 0 0.305859 -p 1.120898 0 -0.429492 -p 1.273828 0 -0.429492 -p 1.273828 0 0.429492 -p 1.164258 0 0.429492 -p 1.164258 0 -0.289453 -p 0.914648 0 0.429492 -p 0.812109 0 0.429492 -p 0.563672 0 -0.301758 -p 0.563672 0 0.429492 -p 0.454102 0 0.429492 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 ;\n\tpickWalk -d down;\n\trename ($modName + \"M_CurveShape\");\n\tduplicate -n ($modName + \"R2_OuterCurve\") ($modName + \"R1_OuterCurve\");\n\tduplicate -n ($modName + \"R2_InnerCurve\") ($modName + \"R1_InnerCurve\");\n\tmove -r -os -wd -1.5 0 0 ($modName + \"R2_InnerCurve\") ($modName + \"R2_OuterCurve\");\n\t\n\tscale -r 1.75 1.75 1.75 ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\tmove -r -ws 0 0 10.4 ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\n\tselect ($modName + \"R1_OuterCurveShape\") ($modName + \"R1_InnerCurveShape\") ($modName + \"R2_OuterCurveShape\") ($modName + \"R2_InnerCurveShape\") ($modName + \"M_CurveShape\");\n\t$RRM_Curves = `ls -sl -type \"nurbsCurve\"`;\n\tfor ($each in $RRM_Curves)\n\t{\n\t\t//rename $each ($modName + \"RRM_CurveShape\" + $num);\n\t\tparent -r -s $each ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($each + \".overrideEnabled\") 1;\n\t\tsetAttr ($each + \".overrideColor\") 14;\n\t}\n\tdelete ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\n\t$mainScale = `getAttr RRM_MAIN.scale`;\n\tsetAttr (($modName + \"_MAINCtrl.scale\"), $mainScale[0], $mainScale[1], $mainScale[2]);\n\tmakeIdentity -apply true -s 1 ($modName + \"_MAINCtrl\");\n\t\n\taddAttr -ln \"masterScale\"  -at double  ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.masterScale\");\n\tsetAttr ($modName + \"_MAINCtrl.masterScale\") $mainScale[1];\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_MAINCtrl.masterScale\");\n\t\n\taddAttr -ln \"COG_Ctrl_visibility\"  -at bool ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.COG_Ctrl_visibility\");\n\t\n\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\tsetAttr -l 1 -k 0 ($modName + \"_MAINCtrl.v\");\n\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modName + \"_MAINCtrl.scaleX\");\n\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modName + \"_MAINCtrl.scaleZ\"); \n\tsetAttr -l 1 -k 0 ($modName + \"_MAINCtrl.scaleX\");\n\tsetAttr -l 1 -k 0 ($modName + \"_MAINCtrl.scaleZ\");\n\t\n\n\t//GET ROOT POSITION\n\t$rootPos = `xform -q -ws -rp RRM_ROOT`;\n\tselect -cl;\n\tjoint -n ($modName + \"_ROOTJnt\");\n\tmove -a $rootPos[0] $rootPos[1] $rootPos[2] ($modName + \"_ROOTJnt\");\n\n\t//PARENT CONTROL\n\tcircle -n ($modName + \"_ROOTParentCtrl\") -c 0 0 0 -nr 0 1 0 -sw 315 -r 1.2 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\trotate -r 0 -157.5 0 ($modName + \"_ROOTParentCtrl\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_ROOTParentCtrl\");\n    curve -n ($modName + \"_ROOTParentCtrl1\") -d 1 -p 0.459248 0 1.108679 -p 0.459248 0 1.232295 -p 0 0 1.454964 -p -0.459248 0 1.232295 -p -0.459248 0 1.108679 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\tpickWalk -d down;\n\trename ($modName + \"_ROOTParentCtrl1Shape\");\t\n\tparent -r -s ($modName + \"_ROOTParentCtrl1Shape\") ($modName + \"_ROOTParentCtrl1Shape\") ($modName + \"_ROOTParentCtrl\");\n\tdelete ($modName + \"_ROOTParentCtrl1\");\n\tscale -r 1.25 1.25 1.25 ($modName + \"_ROOTParentCtrl\");\n\tmakeIdentity -apply true -s 1 ($modName + \"_ROOTParentCtrl\");\n\n\t//CREATE COG_Ctrl CONTROL//////////////////////////////////////////////////////\n\tcircle -n ($modName + \"_OuterCOG_Ctrl1\") -r 12 -nr 0 1 0 -sw 18;\n\tcircle -n ($modName + \"_InnerCOG_Ctrl1\") -r 11 -nr 0 1 0 -sw 18;\n\trotate -r -os 0 -18 0 ($modName + \"_InnerCOG_Ctrl1\");\n\tcurve -n ($modName + \"_LeftConnectorCOG_Ctrl1\") -d 1 -p 0 0 -12 -p 0 0 -11 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename ($modName + \"_LeftConnectorCOG_Ctrl1Shape\");\n\tduplicate -n ($modName + \"_RightConnectorCOG_Ctrl1\") ($modName + \"_LeftConnectorCOG_Ctrl1\");\n\trotate  -r -os 0 -18 0 ($modName + \"_LeftConnectorCOG_Ctrl1\");\n\t\n\tselect ($modName + \"_OuterCOG_Ctrl1\") ($modName + \"_InnerCOG_Ctrl1\") ($modName + \"_LeftConnectorCOG_Ctrl1\") ($modName + \"_RightConnectorCOG_Ctrl1\");\n\t\n\tduplicate -rr; rotate -r 0 36 0; for ($i=1; $i<9; ++$i) duplicate -rr -st;\n\tselect ($modName + \"_*COG_Ctrl?\") ($modName + \"_*COG_Ctrl??\");\n\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\tselect -d ($modName + \"_OuterCOG_Ctrl1\");\n\t$transforms = `ls -sl`;\n\tpickWalk -d down;\n\t$shapes = `ls -sl`;\n\tparent -r -s $shapes ($modName + \"_OuterCOG_Ctrl1\");\n\tdelete $transforms;\n\trename ($modName + \"_OuterCOG_Ctrl1\") ($modName + \"_COG_Ctrl\");\n\t\n\tscale -r .7 .7 .7 ($modName + \"_COG_Ctrl\");\n\trotate -r 0 -9 0 ($modName + \"_COG_Ctrl\");\n\tmakeIdentity -apply true -r 1 -s 1 ($modName + \"_COG_Ctrl\");\n\tdelete `scaleConstraint RRM_COG ($modName + \"_COG_Ctrl\")`;\n\tmakeIdentity -apply true -s 1 ($modName + \"_COG_Ctrl\");\n\n\tgroup -n ($modName + \"_COG_CtrlGrp\") ($modName + \"_COG_Ctrl\");\n\tdelete `parentConstraint RRM_COG ($modName + \"_COG_CtrlGrp\")`;\n\n\tparent ($modName + \"_COG_CtrlGrp\") ($modName + \"_MAINCtrl\");\n\t\n\tconnectAttr -f ($modName + \"_MAINCtrl.COG_Ctrl_visibility\") ($modName + \"_COG_CtrlGrp.v\");\n\t\n\t\n\t//ADD CORE NAME\n\taddAttr -ln \"isCOG_Ctrl\"  -dt \"string\" ($modName + \"_COG_Ctrl\");\n\tsetAttr -e-keyable true ($modName + \"_COG_Ctrl.isCOG_Ctrl\");\n\tsetAttr -e-lock true ($modName + \"_COG_Ctrl.isCOG_Ctrl\");\n\t\n\tsetAttr ($modName + \"_COG_Ctrl.overrideEnabled\") 1;\n\tsetAttr ($modName + \"_COG_Ctrl.overrideColor\") 19;\n\t\n\n\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.sx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.sy\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.sz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.v\");\n\t\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.tx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.ty\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.tz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.rx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.ry\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.rz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.sx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.sy\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.sz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.v\");\t\n\n\t\n\t//CREATE ROOT CONTROL//////////////////////////////////////////////////////\n\tcircle -n ($modName + \"_ROOTCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1.15 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\tcircle -n ($modName + \"_ROOTCtrl1\") -c 0 0 0 -nr 0 1 0 -sw 315 -r 1.2 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\trotate -r 0 -157.5 0 ($modName + \"_ROOTCtrl1\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_ROOTCtrl1\");\n    curve -n ($modName + \"_ROOTCtrl2\") -d 1 -p 0.459248 0 1.108679 -p 0.459248 0 1.232295 -p 0 0 1.454964 -p -0.459248 0 1.232295 -p -0.459248 0 1.108679 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\tpickWalk -d down;\n\trename ($modName + \"_ROOTCtrl2Shape\");\t\n\tparent -r -s ($modName + \"_ROOTCtrl1Shape\") ($modName + \"_ROOTCtrl2Shape\") ($modName + \"_ROOTCtrl\");\n\tdelete ($modName + \"_ROOTCtrl1\") ($modName + \"_ROOTCtrl2\");\n\t\n\t//SECONDARY CONTROL\n\tcircle -n ($modName + \"_ROOTSecondaryCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.8 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\tcurve -n ($modName + \"_ROOTSecondaryCtrl2\") -d 1 -p 0.448913 0 0.659205 -p 0.457839 0 0.707653 -p 0.43562 0 0.726309 -p 0.389727 0 0.761461 -p 0.317127 0 0.807243 -p 0.242199 0 0.852344 -p 0.165051 0 0.890957 -p 0.0916126 0 0.922558 -p 0.0354615 0 0.944185 -p 0 0 0.956437 -p 0 0 0.800148 -p 0 0 0.956437 -p -0.0354615 0 0.944185 -p -0.0916126 0 0.922558 -p -0.165051 0 0.890957 -p -0.242199 0 0.852344 -p -0.317127 0 0.807243 -p -0.389727 0 0.761461 -p -0.43562 0 0.726309 -p -0.457839 0 0.707653 -p -0.448913 0 0.659205 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 ;\n\tpickWalk -d down;\n\trename ($modName + \"_ROOTSecondaryCtrl2Shape\");\n\tcurve -n ($modName + \"_ROOTSecondaryCtrl3\") -d 1 -p 0.793238 0 -0.0839132 -p 0.715647 0 0 -p 0.793238 0 0.0839132 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;            \n\trename ($modName + \"_ROOTSecondaryCtrl3Shape\");\n    duplicate -rr; rotate -r 0 90 0; for ($i=1; $i<2; ++$i) duplicate -rr -st;\n    makeIdentity -apply true -r 1 ($modName + \"_ROOTSecondaryCtrl4\") ($modName + \"_ROOTSecondaryCtrl5\");\n\tparent -r -s ($modName + \"_ROOTSecondaryCtrl2Shape\")  ($modName + \"_ROOTSecondaryCtrl3Shape\") ($modName + \"_ROOTSecondaryCtrl4Shape\") ($modName + \"_ROOTSecondaryCtrl5Shape\") ($modName + \"_ROOTSecondaryCtrl\");\n\tdelete ($modName + \"_ROOTSecondaryCtrl2\") ($modName + \"_ROOTSecondaryCtrl3\") ($modName + \"_ROOTSecondaryCtrl4\") ($modName + \"_ROOTSecondaryCtrl5\");\t\n\t\n\tmove -r 0 0.03 0 ($modName + \"_ROOTSecondaryCtrl.scalePivot\") ($modName + \"_ROOTSecondaryCtrl.rotatePivot\");\n\tparent ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTCtrl\");\n\tdelete `pointConstraint ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\")`;\n\tmakeIdentity -apply true ($modName + \"_ROOTSecondaryCtrl\");\n\t\n\tgroup -n ($modName + \"_ROOTCtrlGrp\") ($modName + \"_ROOTCtrl\"); xform -os -piv 0 0 0;\n\tparentConstraint ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\tparent ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\") RRM_ROOT;\n\tsetAttr (($modName + \"_ROOTParentCtrl.scale\"), 4, 4, 4);\n\tsetAttr (($modName + \"_ROOTCtrlGrp.scale\"), 4, 4, 4);\n\tparent -w ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\tmakeIdentity -apply true -s 1 ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\tscaleConstraint ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\n\tgroup -n ($modName + \"_ROOTParentCtrlGrp\") ($modName + \"_ROOTParentCtrl\"); xform -os -piv 0 0 0;\n\tdelete `parentConstraint RRM_ROOT ($modName + \"_ROOTParentCtrlGrp\")`;\n\tmakeIdentity -apply true -t 1 ($modName + \"_ROOTParentCtrlGrp\");\n\tdelete -ch ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTParentCtrl\");\n\tparentConstraint ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTJnt\");\n\t//scaleConstraint ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTJnt\");\n\tparentConstraint -mo ($modName + \"_COG_Ctrl\") ($modName + \"_ROOTParentCtrlGrp\");\n\tconnectAttr -f ($modName + \"_ROOTSecondaryCtrl.scale\") ($modName + \"_ROOTJnt.scale\");\n\t\n\t//ADD VISIBILITY CONTROL FOR PARENT CONTROL\n\taddAttr -ln \"parentControl\"  -at bool ($modName + \"_ROOTCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTCtrl.parentControl\");\n\tconnectAttr -f ($modName + \"_ROOTCtrl.parentControl\") ($modName + \"_ROOTParentCtrl.v\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_ROOTParentCtrl.v\");\n\tsetAttr ($modName + \"_ROOTCtrl.parentControl\") 0;\n\t\n\tgroup -n ($modName + \"_ROOTGrp\") ($modName + \"_ROOTParentCtrlGrp\"); xform -os -piv 0 0 0;\n\tparent ($modName + \"_ROOTCtrlGrp\") ($modName + \"_ROOTParentCtrlGrp\");\n\tparent ($modName + \"_ROOTGrp\") ($modName + \"_MAINCtrl\");\n\tparent ($modName + \"_ROOTJnt\") ($modName + \"_ROOTCtrlGrp\");\n\n\tparent ($modName + \"_MAINCtrl\") $modName;\n\n\t//ADD CORE NAME\n\t$modControls = `ls ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTParentCtrl\")`;\n\tRRM_CoreName($modControls);\n\tfor ($crntModControl in $modControls)\n\t{\n\t\taddAttr -ln \"isROOT\"  -dt \"string\" $crntModControl;\n\t\tsetAttr -e-keyable true ($crntModControl + \".isROOT\");\n\t\tsetAttr -type \"string\" ($crntModControl + \".isROOT\") $crntModControl;\n\t\tsetAttr -e-lock true ($crntModControl + \".isROOT\");\n\t\t\n\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_ROOTCtrl\");\n\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t}\n\n\taddAttr -ln \"isMain\"  -dt \"string\" ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.isMain\");\n\tsetAttr -type \"string\" ($modName + \"_MAINCtrl.isMain\") \"isMain\";\n\tsetAttr -e-lock true ($modName + \"_MAINCtrl.isMain\");\n\n\t//ADD VERSION NUMBER\n\taddAttr -ln \"versionNumber\"  -dt \"string\" ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.versionNumber\");\n\tsetAttr -type \"string\" ($modName + \"_MAINCtrl.versionNumber\") \"1.4.4\";\n\tsetAttr -e-lock true ($modName + \"_MAINCtrl.versionNumber\");\n\n\n\taddAttr -ln \"isROOTCtrl\"  -dt \"string\" ($modName + \"_ROOTCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTCtrl.isROOTCtrl\");\n\tsetAttr -e-lock true ($modName + \"_ROOTCtrl.isROOTCtrl\");\n\n\taddAttr -ln \"isROOTGrp\"  -dt \"string\" ($modName + \"_ROOTGrp\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTGrp.isROOTGrp\");\n\tsetAttr -e-lock true ($modName + \"_ROOTGrp.isROOTGrp\");\n\t\n\t//CREATE LOCATOR FOR TURNING OFF CONSTRAINTS\n\tspaceLocator -n ($modName + \"_ROOTLocLctr\");\n\tdelete `pointConstraint ($modName + \"_ROOTJnt\") ($modName + \"_ROOTLocLctr\")`;\n\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTLocLctr\");\n\tparent ($modName + \"_ROOTLocLctr\") ($modName + \"_ROOTGrp\");\n\tsetAttr ($modName + \"_ROOTLocLctr.v\") 0;\n\t\n\t\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\t\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////GENERATE SPLINE MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_SplineFKControl()\n{\n\tcircle -n \"splineFKCtrl\" -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\t\n\tscale -r  -0.333 1 1 splineFKCtrl.cv[3] splineFKCtrl.cv[7];\n\tmove -r 0 0 -0.35 splineFKCtrl.cv[0] splineFKCtrl.cv[2];\n\tdelete -ch splineFKCtrl;\n}\n\nglobal proc RRM_GenerateRigSpline(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 2;\n\t$multiplier = 1;\n\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 1;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 2)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"spline\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t$splineProxies = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$splineSize = (`size $splineProxies` + 1);\n\t\t\n\t\taddAttr -ln \"splineJoints\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.splineJoints\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.splineJoints\") $splineSize;\n\t\tsetAttr -l true ($modCore + \"Grp.splineJoints\");\t\n\t\n\t\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tdelete `orientConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint -mo ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tdelete `orientConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\n\t\t//ORIENTATION AND LENGTH LOCATORS\n\t\tspaceLocator -n ($modCore + \"_OrientLctr\");\n\t\tparent ($modCore + \"_OrientLctr\") ($modCore + \"Grp\");\t\n\t\tspaceLocator -n  ($modCore + \"_OrientLengthLctr\");\n\t\tparent ($modCore + \"_OrientLengthLctr\") ($modCore + \"_OrientLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_OrientLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 0 1\n\t\t-worldUpType \"objectrotation\"  -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Parent\")\n\t\t(\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_OrientLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_OrientLengthLctr\");\n\t\t$getSplineLength = `getAttr ($modCore + \"_OrientLengthLctr.ty\")`;\n\t\n\t\t//FK CONTROLS\n\t\t$splineProxies = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$splineSize = `size $splineProxies`;\n\t\tint $crntNum = 1;\n\t\twhile ($crntNum <= $splineSize)\n\t\t{\n\t\t\t$nPd = \"_0\";\n\t\t\tif ($crntNum >= 10)\n\t\t\t{$nPd = \"_\";}\n\t\t\t$prvNPad = \"_0\";\n\t\t\tif ($crntNum > 10)\n\t\t\t{$prvNPad = \"_\";}\t\t\n\t\t\tint $testNum = $crntNum;\n\t\t\n\t\t\tRRM_SplineFKControl;\n\t\t\trename \"splineFKCtrl\" ($modCore + $nPd + $crntNum + \"FKCtrl\");\n\t\t\tgroup -n ($modCore + $nPd + $crntNum + \"FKCtrlGrp\") ($modCore + $nPd + $crntNum + \"FKCtrl\"); xform -os -piv 0 0 0;\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPd + $crntNum) ($modCore + $nPd + $crntNum + \"FKCtrlGrp\")`;\n\t\t\n\t\t\t$parentNodeLoc = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Parent\")`;\n\t\t\t$topNodeLoc = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Top\")`; \n\t\t\t$scale = ((($getSplineLength + $getSplineLength / $splineSize))/3);\n\t\t\tscale -r $scale $scale $scale ($modCore + $nPd + $crntNum + \"FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPd + $crntNum + \"FKCtrlGrp\");\n\t\t\t\n\t\t\tparent ($modCore + $nPd + $crntNum + \"FKCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\tif ($crntNum == 1)\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\tsetAttr ($modCore + $nPd + $crntNum + \"FKCFlipLctr.v\") 0;\n\t\t\t\tparent ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_ScaleGrp\");\n\t\n\t\t\t\tdelete `orientConstraint ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tdelete `pointConstraint  ($modCore) ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore) ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\torientConstraint -mo ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\tparentConstraint -mo ($modCore) ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\t\n\t\t\t\t//PARENT ORIENT\n\t\t\t\taddAttr -ln \"orient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + $nPd + $testNum + \"FKCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + $nPd + $testNum + \"FKCtrl.orient\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + $nPd + $crntNum + \"FKCFlipLctrW0\");\n\t\t\t\t\n\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPd + $testNum + \"FKParentOrientReverse\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKParentOrientReverse.inputX\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKParentOrientReverse.outputX\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + \"_OffsetLctrW1\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\tsetAttr ($modCore + $nPd + $crntNum + \"FKCFlipLctr.v\") 0;\n\t\t\t\tparent ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t\n\t\t\t\tdelete `orientConstraint ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tdelete `pointConstraint  ($modCore + $prvNPad + ($crntNum - 1) + \"FKCtrl\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + $prvNPad + ($crntNum - 1) + \"FKCtrl\") ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\torientConstraint -mo ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\tparentConstraint -mo ($modCore + $prvNPad + ($crntNum - 1) + \"FKCtrl\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\t\n\t\t\t\t//PARENT ORIENT\n\t\t\t\taddAttr -ln \"orient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + $nPd + $testNum + \"FKCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + $nPd + $testNum + \"FKCtrl.orient\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + $nPd + $crntNum + \"FKCFlipLctrW0\");\n\t\t\t\t\n\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPd + $testNum + \"FKParentOrientReverse\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKParentOrientReverse.inputX\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKParentOrientReverse.outputX\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + \"_OffsetLctrW1\");\t\n\t\t\t}\n\t\t\t$crntNum++;\n\t\t}\n\t\t\n\t\t//IK SPLINE CONTROLS\n\t\tcurve -n ($modCore + \"_TopIKCtrl\") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0\n\t\t-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0\n\t\t-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0\t\n\t\t-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9\n\t\t-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22\n\t\t-k 23 -k 24 ;\n\t\trotate 90 0 0 ($modCore + \"_TopIKCtrl\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_TopIKCtrlShape\");\n\t\tdelete -ch;\n\t\tsetAttr ($modCore + \"_TopIKCtrl.sx\") ((($getSplineLength + $getSplineLength / $splineSize))/14);\n\t\tsetAttr ($modCore + \"_TopIKCtrl.sy\") ((($getSplineLength + $getSplineLength / $splineSize))/14);\n\t\tsetAttr ($modCore + \"_TopIKCtrl.sz\") ((($getSplineLength + $getSplineLength / $splineSize))/14);\n\t\tselect ($modCore + \"_TopIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_TopIKCtrl\");\n\t\tgroup -n ($modCore + \"_TopIKCtrlGrp\"); xform -os -piv 0 0 0;\n\t\t\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_TopIKCtrlGrp\")`;\n\t\t//rotate -r 0 0 90 ($modCore + \"_TopIKCtrlGrp\");\n\t\t\n\t\tcurve -n ($modCore + \"_MidIKCtrl\") -d 1 -p 0 0 2.5 -p -1.5 0 1 -p -3 0 1 -p -3 0 -1 -p 3 0 -1 -p 3 0 1 -p 1.5 0 1 -p 0 0 2.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_MidIKCtrlShape\");\n\t\tgroup -n ($modCore + \"_MidIKCtrlGrp\") ($modCore + \"_MidIKCtrl\"); xform -os -piv 0 0 0;\n\t\tspaceLocator -n ($modCore + \"_MidIKCtrlLctr\");\n\t\tspaceLocator -n ($modCore + \"_MidIKCtrlWSLctr\");\n\t\tgroup -n ($modCore + \"_MidIKCtrlLctrGrp\") ($modCore + \"_MidIKCtrlLctr\"); xform -os -piv 0 0 0;\n\t\t\n\t\tparent ($modCore + \"_TopIKCtrlGrp\") ($modCore + \"_MidIKCtrlGrp\") ($modCore + \"_MidIKCtrlLctrGrp\") ($modCore + \"_MidIKCtrlWSLctr\") ($modCore);\n\t\t\n\t\t//HIDE LOCATORS\n\t\tsetAttr ($modCore + \"_MidIKCtrlLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_MidIKCtrlWSLctr.v\") 0;\n\t\t\n\t\t\n\t\t\n\t\t//LOCATOR TO PREVENT FLIPPING OF IK CONTROL\n\t\tspaceLocator -n ($modCore + \"_TopIKCtrl_FlipLctr1\");\n\t\tdelete `orientConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopIKCtrl_FlipLctr1\")`;\n\t\tparentConstraint -mo ($modCore + \"_OffsetLctr\") ($modCore + \"_TopIKCtrl_FlipLctr1\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_TopIKCtrl_FlipLctr2\");\n\t\tdelete `orientConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopIKCtrl_FlipLctr2\")`;\n\t\tsetAttr ($modCore + \"_TopIKCtrl_FlipLctr1.v\") 0;\n\t\tsetAttr ($modCore + \"_TopIKCtrl_FlipLctr2.v\") 0;\n\t\tparent ($modCore + \"_TopIKCtrl_FlipLctr1\") ($modCore + \"_TopIKCtrl_FlipLctr2\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t//CONSTRAIN TO FK CONTROLS\n\t\t//NUMBER OF SPLINE JOINTS\n\t\t$spineDums = `ls (\"RRM\" + \"_\" + $oppPrfx + $core + \"_??\") (\"RRM\" + \"_\" + $oppPrfx + $core + \"_Top\")`;\n\t\t$spineNum = `size $spineDums`;\n\t\t\n\t\t//GET SECOND FROM TOP\n\t\tint $splineNumTop = ($spineNum - 1);\n\t\t$nPd = \"_0\";\n\t\tif ($splineNumTop >=10)\n\t\t\t{$nPd = \"_\";}\n\t\t\t\n\t\t//GET HALF WAY POINT FOR MID IKCtrlGrp TO ATTACH TO. IF UNEVEN NUMBER, NEED TWO TARGETS\n\t\tint $midSpline = ($spineNum/2);\n\t\tint $midSpline2 = ($midSpline + 1);\n\t\t$nPdMid = \"_0\";\n\t\t$nPdMid2 = \"_0\";\n\t\tif ($midSpline >=10)\n\t\t{$nPdMid = \"_\";}\n\t\tif ($midSpline2 >=10)\n\t\t{$nPdMid2 = \"_\";}\n\t\t\n\t\t//CONSTRAIN MID IKC ASSETS TO THE CENTER\n\t\tif ($spineNum % 2 == 0)\n\t\t{\n\t\t\tparentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp\");\n\t\t\tdelete `parentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + \"_MidIKCtrlWSLctr\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + $nPdMid2 + $midSpline2 + \"FKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp\");\n\t\t\tsetAttr ($modCore + \"_MidIKCtrlLctrGrp_parentConstraint1.interpType\") 2;\n\t\t\tdelete `parentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + $nPdMid2 + $midSpline2 + \"FKCtrl\") ($modCore + \"_MidIKCtrlWSLctr\")`;\n\t\t}\n\t\t\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_MidIKCtrlWSLctr\");\n\t\tparentConstraint -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_MidIKCtrlLctr\") ($modCore + \"_MidIKCtrlWSLctr\")($modCore + \"_MidIKCtrlGrp\");\n\t\torientConstraint ($modCore + \"_MidIKCtrlLctr\") ($modCore + \"_MidIKCtrlWSLctr\")($modCore + \"_MidIKCtrlGrp\");\n\t\t\n\t\t//PARENT ORIENT/TRANSLATE MID IKCG\n\t\taddAttr -ln \"midTranslate\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.midTranslate\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midTranslate\") ($modCore + \"_MidIKCtrlGrp_parentConstraint1.\" + $modCore + \"_MidIKCtrlLctrW0\");\n\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_MidIKCParentTranslateReverse\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midTranslate\") ($modCore + \"_MidIKCParentTranslateReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCParentTranslateReverse.outputX\") ($modCore + \"_MidIKCtrlGrp_parentConstraint1.\" + $modCore + \"_MidIKCtrlWSLctrW1\");\n\n\n\t\taddAttr -ln \"midOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.midOrient\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midOrient\") ($modCore + \"_MidIKCtrlGrp_orientConstraint1.\" + $modCore + \"_MidIKCtrlLctrW0\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_MidIKCParentOrientReverse\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midOrient\") ($modCore + \"_MidIKCParentOrientReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCParentOrientReverse.outputX\") ($modCore + \"_MidIKCtrlGrp_orientConstraint1.\" + $modCore + \"_MidIKCtrlWSLctrW1\");\n\n\t\t\n\t\t//TOP IKC\n\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_MAINCtrl\") ($modCore + $nPd + $splineNumTop + \"FKCtrl\") ($modCore + \"_TopIKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + $nPd + $splineNumTop + \"FKCtrl\") ($modCore + \"_TopIKCtrl_FlipLctr2\");\n\t\torientConstraint -mo ($modCore + \"_TopIKCtrl_FlipLctr1\") ($modCore + \"_TopIKCtrl_FlipLctr2\") ($modCore + \"_TopIKCtrlGrp\");\n\t\t\t\n\t\t//PARENT ORIENT/TRANSLATE TOP IKCG\n\t\taddAttr -ln \"topTranslate\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.topTranslate\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topTranslate\") ($modCore + \"_TopIKCtrlGrp_parentConstraint1.\" + $modCore + $nPd + $splineNumTop + \"FKCtrlW1\");\n\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_TopIKCParentTranslateReverse\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topTranslate\") ($modCore + \"_TopIKCParentTranslateReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCParentTranslateReverse.outputX\") ($modCore + \"_TopIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\n\n\t\taddAttr -ln \"topOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.topOrient\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topOrient\") ($modCore + \"_TopIKCtrlGrp_orientConstraint1.\" + $modCore + \"_TopIKCtrl_FlipLctr2W1\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_TopIKCParentOrientReverse\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topOrient\") ($modCore + \"_TopIKCParentOrientReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCParentOrientReverse.outputX\") ($modCore + \"_TopIKCtrlGrp_orientConstraint1.\" + $modCore + \"_TopIKCtrl_FlipLctr1W0\");\n\n\t\t//////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//////////////////////////////////////////RIBBON SPLINE////////////////////////////////////////\n\t\t//////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//GET SPLINE LENGTH\n\t\tspaceLocator -n ($modCore + \"_StartLctr\");\n\t\tparent ($modCore + \"_StartLctr\") ($modCore + \"Grp\");\n\t\tspaceLocator -n  ($modCore + \"_EndLctr\");\n\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\tpointConstraint ($modCore) ($modCore + \"_StartLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 1 0 -worldUpType \"none\"\n\t\t($modCore + \"_TopIKCtrl\") ($modCore + \"_StartLctr\");\n\t\tpointConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_EndLctr\");\n\t\t\n\t\t//SPLINE START POSITION\n\t\tnurbsPlane -n ($modCore + \"_ribbon\") -p 0 0 0 -ax 0 0 1 -w 1 -lr 3 -d 3 -u 1 -v ($splineSize) -ch 1;\n\t\trebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 2 -kcp 0 -kc 0 -su 1 -du 1 -sv 2 -dv 3 -tol 0.01 -fr 0  -dir 0 ($modCore + \"_ribbon\");\n\t\tdelete -ch ($modCore + \"_ribbon\");\n\t\tparent ($modCore + \"_ribbon\") ($modCore + \"Grp\");\n\t\t\n\t\t\n\t\t//RIBBON BLENDSHAPE\n\t\tduplicate -rr -n ($modCore + \"_ribbonBlend\") ($modCore + \"_ribbon\");\n\t\tselect ($modCore + \"_ribbonBlend.cv[1][*]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_ribbonBlend_lCluster\");\n\t\tmove  0 0 0 ($modCore + \"_ribbonBlend_lCluster.scalePivot\") ($modCore + \"_ribbonBlend_lCluster.rotatePivot\") ;\n\t\tselect ($modCore + \"_ribbonBlend.cv[0][*]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_ribbonBlend_rCluster\");\n\t\tmove 0 0 0 ($modCore + \"_ribbonBlend_rCluster.scalePivot\") ($modCore + \"_ribbonBlend_rCluster.rotatePivot\") ;\n\t\t\n\t\tselect ($modCore + \"_ribbonBlend\") ($modCore + \"_ribbon\") ;\n\t\tblendShape -n ($modCore + \"_ribbonBlendShape\") -tc 0;\n\t\tsetAttr ($modCore + \"_ribbonBlendShape1.\" + $modName + \"_\" + $prfx + $core + \"_ribbonBlend\") 1;\n\t\t\n\t\tgroup -n ($modCore + \"_ribbonBlend_lClusterGrp\") ($modCore + \"_ribbonBlend_lCluster\");xform -os -piv 0 0 0;\n\t\tgroup -n ($modCore + \"_ribbonBlend_rClusterGrp\") ($modCore + \"_ribbonBlend_rCluster\");xform -os -piv 0 0 0;\n\t\tparent ($modCore + \"_ribbonBlend_lClusterGrp\") ($modCore + \"_ribbonBlend_rClusterGrp\") ($modCore + \"Grp\");\n\t\t\n\t\t//CHECK FOR NUCLEUS\n\t\tint $nucleusCheck;\n\t\tif (`objExists \"nucleus1\"`)\n\t\t{\n\t\t\t$nucleusCheck = 1;\n\t\t}\n\n\t\t//ORIENT RIBBON\n\t\t//HAIR\n\t\tselect ($modCore + \"_ribbon\");\n\t\tcreateHair 1 ($splineSize) 10 0 0 0 0 5 0 2 1 1;\n\n\t\t\n\t\t//DELETE NUCLEUS IF IT WAS JUST CREATED\n\t\t$hairSystemShape = `ls -sl`;\n\t\t$nucleus = `listConnections -type \"nucleus\"`;\n\t\t$nucleusSize = `size $nucleus`;\n\t\tif ($nucleusCheck == 0 && $nucleusSize > 0)\n\t\t{\n\t\t\tdelete $nucleus;\n\t\t}\n\t\t\n\t\tselect $hairSystemShape;\n\t\tpickWalk -d up;\n\t\tstring $hairSystem[] =`ls -sl`;\n\t\t\n\t\tdelete $hairSystem[0] ($hairSystem[0] + \"OutputCurves\");\n\t\tselect ($hairSystem[0] + \"Follicles\");\n\t\trename ($hairSystem[0] + \"Follicles\") ($modCore + \"_hairSystemFollicles\");\n\t\tparent ($modCore + \"_hairSystemFollicles\") ($modCore + \"Grp\");\n\t\n\t\tselect -hi ($modCore + \"_hairSystemFollicles\");\n\t\tselect -d  ($modCore + \"_hairSystemFollicles\");\n\t\t$follicles = `ls -sl`;\n\t\tfloat $folliclesNum = `size $follicles`;\n\t\t$folliclesNum = $folliclesNum/3;\n\t\tint $hierarchySize = 2;\n\t\tselect ($modCore + \"_hairSystemFollicles\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_01F\");\n\t\twhile ($hierarchySize <= $folliclesNum)\n\t\t{\n\t\t\tpickWalk -d right;\n\t\t\t$previous = `ls -sl`;\n\t\t\tif ($hierarchySize < 10)\n\t\t\t{\n\t\t\t\tstring $crntValue = $hierarchySize;\n\t\t\t\trename ($modCore + \"_0\" + $crntValue + \"F\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring $crntValue = $hierarchySize;\n\t\t\t\trename ($modCore + \"_\" + $crntValue + \"F\");\n\t\t\t}\n\t\t\t$hierarchySize++;\n\t\t}\n\t\t\n\t\tselect ($modCore + \"_??F\");\n\t\tpickWalk -d down;\n\t\tpickWalk -d right;\n\t\tdelete;\n\t\t\n\t\tselect -cl;\n\t\t\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//LOCATORS FOR POSITIONS\n\t\n\t\t//JOINT LOCATIONS\n\t\t$ParentPos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Parent\")`;\n\t\t$spineTopPos = `xform -q -ws -rp ($modCore + \"_TopIKCtrl\")`;\n\t\t\n\t\t$splineProxies = `ls -type \"transform\" (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$splineSize = `size $splineProxies`;\n\t\t\n\t\t$vertebrae = ($splineSize + 1);\n\t\n\t\t\n\t\t////INVERTED GROUP FOR HIP ROTATION\n\t\t//group -em -n ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\");\n\t\t//delete `pointConstraint ($modCore) ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\")`;\n\t\t//\n\t\t//parent ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\") ($modCore + \"_ScaleGrp\");\n\t\t//makeIdentity -apply true -t 0 ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\");\n\t\t\n\t\t//PATHS\n\t\tcurve -n ($modCore + \"_SplineBtm\") -d 1 -p $ParentPos[0] $ParentPos[1] $ParentPos[2] -p $spineTopPos[0] $spineTopPos[1] $spineTopPos[2];\n\t\trebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($vertebrae - 2) -d 3 -tol 0 ($modCore + \"_SplineBtm\");\n\t\n\t\tint $i = 1;\n\t\tfor ($each in $splineProxies)\n\t\t{\n\t\t\t$splinePos = `xform -q -ws -rp $each`;\n\t\t\tmove -ws $splinePos[0] $splinePos[1] $splinePos[2] ($modCore + \"_SplineBtm.cv[\" + $i + \"]\");\n\t\t\t$i++;\n\t\t}\n\n\t\tselect ($modCore + \"_SplineBtm\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_SplineBtmShape\");\n\t\t\n\t\tfloat $vertebraeFloat = $vertebrae;\n\t\t\n\t\t//CUT CURVE IN HALF\n\t\tdetachCurve -ch 0 -cos on -rpo 1 -n ($modCore + \"_SplineTop\") ($modCore + \"_SplineBtm.u[0.5]\");\n\t\trename ($modCore + \"_SplineTop1\") ($modCore + \"_SplineTop\");\n\t\t\n\t\trebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 0 -kt 0 -s 1 -d 3 -tol 0.000328084 ($modCore + \"_SplineBtm\");\n\t\trebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 0 -kt 0 -s 1 -d 3 -tol 0.000328084 ($modCore + \"_SplineTop\");\n\t\t\n\t\tparent ($modCore + \"_SplineTop\") ($modCore + \"_SplineBtm\") ($modCore + \"Grp\");\n\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_SplineTop\");\n\t\tsetAttr -e-keyable true ($modCore + \"_SplineTop.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_SplineTop.nonControl\");\n\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_SplineBtm\");\n\t\tsetAttr -e-keyable true ($modCore + \"_SplineBtm.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_SplineBtm.nonControl\");\n\n\t\t//ATTACH LOCATORS TO PATHS\n\t\t$i = 1;\n\t\tstring $nPd = \"_0\"; \n\t\tfor ($each in $splineProxies)\n\t\t{\n\t\t\tif ($i >= 10)\n\t\t\t{\n\t\t\t\t$nPd = \"_\";\n\t\t\t}\n\t\t\tspaceLocator -n ($modCore + $nPd + $i + \"CurveLctr\");\n\t\t\tgroup -n ($modCore + $nPd + $i + \"CurveLctrGrp\");\n\t\t\tif ($i <= (($splineSize + 1)/2))\n\t\t\t{\n\t\t\t\tpathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow true -followAxis x -upAxis z\n\t\t\t\t-worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + $nPd + $i + \"F\") -inverseUp false -inverseFront false -bank false\n\t\t\t\t($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineBtm\");\n\t\t\t\t//pathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow false ($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineBtm\");\n\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $nPd + $i + \"Lctr_MP\");\n\t\t\t\tfloat $uValue = ((float)$i/(((float)$splineSize + (float)1)/(float)2));\n\t\t\t\tif ($uValue == 1)\n\t\t\t\t{\n\t\t\t\t\t$uValue = 0.99999;\n\t\t\t\t}\n\t\t\t\tsetAttr ($modCore + $nPd + $i + \"Lctr_MP.uValue\") $uValue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow true -followAxis x -upAxis z\n\t\t\t\t-worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + $nPd + $i + \"F\") -inverseUp false -inverseFront false -bank false\n\t\t\t\t($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineTop\");\n\t\t\t\t//pathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow false ($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineTop\");\n\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $nPd + $i + \"Lctr_MP\");\n\t\t\t\tfloat $uValue = (((float)$i - (((float)$splineSize + (float)1)/(float)2))/(((float)$splineSize + (float)1)/(float)2));\n\t\t\t\tif ($uValue == 1)\n\t\t\t\t{\n\t\t\t\t\t$uValue = 0.99999;\n\t\t\t\t}\n\t\t\t\tsetAttr ($modCore + $nPd + $i + \"Lctr_MP.uValue\") $uValue;\n\t\t\t}\n\t\t\tdelete `parentConstraint  ($modCore + $nPd + $i + \"FKCtrl\") ($modCore + $nPd + $i + \"CurveLctr\")`;\n\t\t\t$i++;\n\t\t}\n\n\t\t$curveLctrGrp = `ls ($modCore + \"_??CurveLctrGrp\")`;\n\t\tparent $curveLctrGrp ($modCore + \"Grp\");\n\t\t//CONNECT TO MAINCtrl SCALE\n\t\tfor ($each in $curveLctrGrp)\n\t\t{\n\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($each + \".scale\");\n\t\t}\n\t\t\n\t\t//GET POSITIONS\n\t\t$modAttachNodePos = `xform -q -ws -rp ($modCore)`;\n\t\t$spineTopJPos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Top\")`;\n\t\t$SpineCenter = `xform -q -ws -t ($modCore + \"_SplineTop.cv[0]\")`;\n\t\t\n\t\t//CREATE CLUSTERS SPLINE SPLINE\n\t\tselect ($modCore + \"_SplineBtm.cv[0:1]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineBtm_BtmClstr\");\n\t\tgroup -n ($modCore + \"_SplineBtm_ClusterGrp\") ($modCore + \"_SplineBtm_BtmClstr\");\n\t\txform -os -piv $modAttachNodePos[0] $modAttachNodePos[1] $modAttachNodePos[2];\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_SplineBtm_ClusterGrp\");\n\t\t\n\t\tselect ($modCore + \"_SplineBtm.cv[2:3]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineBtm_TopClstr\");\n\t\n\t\tselect ($modCore + \"_SplineTop.cv[0:1]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineTop_BtmClstr\");\n\t\t\n\t\tgroup -n ($modCore + \"_SplineMid_ClusterGrp\") ($modCore + \"_SplineBtm_TopClstr\")($modCore + \"_SplineTop_BtmClstr\");\n\t\txform -os -piv $SpineCenter[0] $SpineCenter[1] $SpineCenter[2];\n\t\tparentConstraint -mo ($modCore + \"_MidIKCtrl\") ($modCore + \"_SplineMid_ClusterGrp\");\n\t\t\n\t\tselect ($modCore + \"_SplineTop.cv[2:3]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineTop_TopClstr\");\n\t\tgroup -n ($modCore + \"_SplineTop_ClusterGrp\") ($modCore + \"_SplineTop_TopClstr\");\n\t\txform -os -piv $spineTopJPos[0] $spineTopJPos[1] $spineTopJPos[2];\n\t\tparentConstraint -mo ($modCore + \"_TopIKCtrl\") ($modCore + \"_SplineTop_ClusterGrp\");\n\t\t\t\t\t\t\t\t\t\t\t \n\t\tparent ($modCore + \"_SplineTop_ClusterGrp\") ($modCore + \"_SplineMid_ClusterGrp\") ($modCore + \"_SplineBtm_ClusterGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//TOP AND BOTTOM JOINTS\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_TopJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopJnt\")`;\n\t\trotate -r -os 0 0 90 ($modCore + \"_TopJnt\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_TopJnt\");\n\t\tparentConstraint -mo ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopJnt\");\n\t\t//CONNECT SCALE\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.scaleX\") ($modCore + \"_TopJnt.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.scaleY\") ($modCore + \"_TopJnt.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.scaleZ\") ($modCore + \"_TopJnt.scaleZ\");\n\t\t\t\n\t\tparent ($modCore + \"_TopJnt\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_TopJntIK\") -p 0 2 0 ;\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_Btm01JntIK\") -p 0 -2 0 ;\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_MidJntIK\") -p 0 0 0 ;\n\t\t\n\t\tstring $selectedList[] = `ls ($modCore + \"_TopJntIK\") ($modCore + \"_Btm01JntIK\") ($modCore + \"_MidJntIK\")`;\n\t\t\n\t\tstring $crntObject;\n\t\t\n\t\tfor ($crntObject in $selectedList)\t\t\n\t\t{\n\t\t\tsetAttr ($crntObject + \".radius\") .5;\n\t\t}\n\t\t\n\t\t//GROUP AND SCALE\n\t\tgroup -n ($modCore + \"_ribbonSpineGrp\") ($modCore + \"_ribbon\");\n\t\tparent ($modCore + \"_Btm01JntIK\") ($modCore + \"_MidJntIK\") ($modCore + \"_TopJntIK\") ($modCore + \"_ScaleGrp\");\n\t\t\n\t\t$splineLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\tsetAttr (($modCore + \"_ribbonSpineGrp.scale\"), ($splineLength[1] / 4), ($splineLength[1] / 4), ($splineLength[1] / 4));\n\t\t\n\t\t\n\t\t//CONNECT TO RIG\n\t\tdelete `parentConstraint ($modCore + \"_OrientLctr\") ($modCore + \"_ribbonSpineGrp\")`;\n\t\tdelete `pointConstraint ($modCore + \"_OrientLctr\") ($modCore + \"_OrientLengthLctr\") ($modCore + \"_ribbonSpineGrp\")`;\n\t\n\t\tparentConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopJntIK\") ;\n\t\t\n\t\tparentConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_MidJntIK\") ;\n\t\t\n\t\tparentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_Btm01JntIK\") ;\n\t\t\n\t\tselect ($modCore + \"_ribbon\") ($modCore + \"_TopJntIK\") ($modCore + \"_Btm01JntIK\") ($modCore + \"_MidJntIK\");\n\n\t\t//DETERMINE VERSION NUMBER\n\t\t$versionNum = `getApplicationVersionAsFloat`;\n\t\tif ($versionNum >= 2013)\n\t\t{\n\t\t\tskinCluster -n ($modCore + \"_ribbonSkinClstr\")  -bindMethod 1 -toSelectedBones -nw 1 -mi 3 -dr 4 -rui 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tskinCluster -n ($modCore + \"_ribbonSkinClstr\") -toSelectedBones -ignoreHierarchy -mi 3 -dr 1 -rui 1;\n\t\t}\n\t\t//rename ribbonSkinClstr ($modCore + \"_ribbonSkinClstr\");\n\t\t\n\t\t//GENERATE JOINTS\n\t\tstring $splineJoints[];\n\t\tint $crntNum = 0;\n\t\tfloat $splineLoc[];\n\t\tfor ($crntProxy in $splineProxies)\n\t\t{\n\t\t\t$crntNum++;\n\t\t\t$numPadding = \"_0\";\n\t\t\tif ($crntNum >= 10)\n\t\t\t{$numPadding = \"_\";}\n\t\t\tcurve -d 1 -p -4 0 0 -p 4 0 0 -k 0 -k 1 -n ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $numPadding + $crntNum + \"CurveCtrlShape\");\n\t\t\tcircle -c 5 0 0 -nr 0 1 0 -n ($modCore + $numPadding + $crntNum + \"CurveCtrl2\");\n\t\t\tcircle -c -5 0 0 -nr 0 1 0 -n ($modCore + $numPadding + $crntNum + \"CurveCtrl3\");\n\t\t\tselect ($modCore + $numPadding + $crntNum + \"CurveCtrl2\") ($modCore + $numPadding + $crntNum + \"CurveCtrl3\");\n\t\t\tpickWalk -d down;\n\t\t\tselect -add ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\t\t\tparent -r -s;\n\t\t\tdelete ($modCore + $numPadding + $crntNum + \"CurveCtrl2\") ($modCore + $numPadding + $crntNum + \"CurveCtrl3\");\n\t\t\tsetAttr (($modCore + $numPadding + $crntNum + \"CurveCtrl.scale\"), ($getSplineLength*.06),($getSplineLength*.06),($getSplineLength*.06));\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\t\t\t\t\n\t\t\tgroup -n ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\") ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $numPadding + $crntNum)  ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\")`;\n\t\t\tpointConstraint -mo ($modCore + $numPadding + $crntNum + \"CurveLctr\") ($modCore + $numPadding + $crntNum + \"FKCtrl\") ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\");\n\t\t\torientConstraint -mo ($modCore + $numPadding + $crntNum + \"F\") ($modCore + $numPadding + $crntNum + \"CurveLctr\");\n\t\t\torientConstraint ($modCore + $numPadding + $crntNum + \"CurveLctr\") ($modCore + $numPadding + $crntNum + \"FKCtrl\") ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\");\n\t\t\tsetAttr ($modCore + $numPadding + $crntNum + \"CurveLctr_orientConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp_orientConstraint1.interpType\") 2;\n\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + $numPadding + $crntNum + \"Jnt\");\n\n\t\t\tparent ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\") ($modCore + $numPadding + $crntNum + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\n\t\t\tdelete `parentConstraint ($modCore + $numPadding + $crntNum + \"CurveCtrl\") ($modCore + $numPadding + $crntNum + \"Jnt\")`;\n\t\t\trotate -r -os 0 0 90 ($modCore + $numPadding + $crntNum + \"Jnt\");\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + $numPadding + $crntNum + \"Jnt\");\n\t\t\tparentConstraint -mo ($modCore + $numPadding + $crntNum + \"CurveCtrl\") ($modCore + $numPadding + $crntNum + \"Jnt\");\n\t\t\t$splineJoints = `ls ($modCore + $numPadding + $crntNum + \"Jnt\")`;\n\t\t}\t\n\n\t\t//SPLINE FOLLOW FK\n\t\taddAttr -ln \"followFKCtrl\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.followFKCtrl\");\n\t\t\n\t\t//SELECT FKC\n\t\t$spineGrp = `ls ($modCore + \"_??CurveCtrlGrp\")`;\n\t\tstring $nPd = \"0\";\n\t\t$i = 1;\n\t\tfor ($each in $spineGrp)\n\t\t{\n\t\t\tif ($i >= 10)\n\t\t\t{\n\t\t\t\t$nPd = \"\";\n\t\t\t}\n\t\t\tsetAttr ($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 0;\n\t\t\tsetAttr ($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 0;\n\t    \n\t\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_TopIKCtrl.followFKCtrl\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\");\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_TopIKCtrl.followFKCtrl\") 1;\n\t\t\tsetAttr ($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\") 0;\n\t\t\tsetAttr ($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 1;\n\t\t\tsetAttr ($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\") 0;\n\t\t\tsetAttr ($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 1;\n\t    \n\t\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_TopIKCtrl.followFKCtrl\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\");\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_TopIKCtrl.followFKCtrl\") 0;\n\t\t\t\n\t\t\t$i++;\n\t\t}\n\t\t\n\t\t//CREATE CURVE FOR SPLINE LENGTH\n\t\t$Parent_Pos = `xform -q -ws -t (\"RRM_\" + $prfx + $core + \"_Parent\")`;\n\t\t$spineMidJntIK_Pos = `xform -q -ws -t ($modCore + \"_MidJntIK\")`;\n\t\t$spineTop_Pos = `xform -q -ws -t ($modCore + \"_TopJntIK\")`;\n\t\t\n\t\tcurve -n ($modCore + \"_LengthCurve\") -d 3\n\t\t-p $Parent_Pos[0] $Parent_Pos[1] $Parent_Pos[2]\n\t\t-p (( $spineMidJntIK_Pos[0] - $Parent_Pos[0]) /3.4 + $Parent_Pos[0])\n\t\t(( $spineMidJntIK_Pos[1] - $Parent_Pos[1]) /3.4 + $Parent_Pos[1])\n\t\t(( $spineMidJntIK_Pos[2] - $Parent_Pos[2]) /3.4 + $Parent_Pos[2])\n\t\t\n\t\t-p (( $spineMidJntIK_Pos[0] - $Parent_Pos[0]) /1.35 + $Parent_Pos[0])\n\t\t(( $spineMidJntIK_Pos[1] - $Parent_Pos[1]) /1.35 + $Parent_Pos[1])\n\t\t(( $spineMidJntIK_Pos[2] - $Parent_Pos[2]) /1.35 + $Parent_Pos[2])\n\t\t\n\t\t-p (($spineTop_Pos[0] - $spineMidJntIK_Pos[0]) /3.7 + $spineMidJntIK_Pos[0])\n\t\t(($spineTop_Pos[1] - $spineMidJntIK_Pos[1]) /3.7 + $spineMidJntIK_Pos[1])\n\t\t(($spineTop_Pos[2] - $spineMidJntIK_Pos[2]) /3.7 + $spineMidJntIK_Pos[2])\n\t\t\n\t\t-p (($spineTop_Pos[0] - $spineMidJntIK_Pos[0]) /1.4 + $spineMidJntIK_Pos[0])\n\t\t(($spineTop_Pos[1] - $spineMidJntIK_Pos[1]) /1.4 + $spineMidJntIK_Pos[1])\n\t\t(($spineTop_Pos[2] - $spineMidJntIK_Pos[2]) /1.4 + $spineMidJntIK_Pos[2])\n\t\t-p $spineTop_Pos[0] $spineTop_Pos[1] $spineTop_Pos[2]\n\t\t-k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 3 -k 3;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_LengthCtrlShape\");\n\t\tselect ($modCore + \"_LengthCurve\");\n\t\tarclen -ch 1;\n\t\tstring $curveInfoNode[] = `listConnections -t curveInfo -d 1 -s 0 ($modCore + \"_LengthCtrlShape\")`;\n\t\trename $curveInfoNode[0] ($modCore + \"_LengthInfo\");\t\n\t\t\n\t\tparent ($modCore + \"_LengthCurve\") ($modCore + \"Grp\");\n\t\n\t\t\n\t\t//ATTACH CURVE TO RIG\n\t\tselect ($modCore + \"_LengthCurve.cv[0:1]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_LengthClstr01\");\n\t\t\n\t\tselect ($modCore + \"_LengthCurve.cv[2:3]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_LengthClstr02\");\n\t\t\n\t\tselect ($modCore + \"_LengthCurve.cv[4:5]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_LengthClstr03\");\n\t\t\n\t\tconnectAttr -f ($modName + \"_\" + $modAttachNode + \"Jnt.matrix\") ($modCore + \"_LengthClstr01Shape.weightedNode\");\n\t\tsetAttr ($modCore + \"_LengthClstr01Cluster.relative\") 0;\n\t\tparent ($modCore + \"_LengthClstr01\") ($modCore + \"_ScaleGrp\");\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_LengthClstr01\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_MidIKCtrl.matrix\") ($modCore + \"_LengthClstr02Shape.weightedNode\");\n\t\tsetAttr ($modCore + \"_LengthClstr02Cluster.relative\") 0;\n\t\tparent ($modCore + \"_LengthClstr02\") ($modCore + \"_MidIKCtrl\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.matrix\") ($modCore + \"_LengthClstr03Shape.weightedNode\");\n\t\tsetAttr ($modCore + \"_LengthClstr03Cluster.relative\") 0;\n\t\tparent ($modCore + \"_LengthClstr03\") ($modCore + \"_TopIKCtrl\");\n\t\t\n\t\t//SCALE\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HierarchyCompensate_MD\");\n\t\tsetAttr ($modCore + \"_HierarchyCompensate_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_LengthInfo.arcLength\") ($modCore + \"_HierarchyCompensate_MD.input1X\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modCore + \"_HierarchyCompensate_MD.input2X\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LengthRatio_MD\");\n\t\tconnectAttr -f ($modCore + \"_HierarchyCompensate_MD.outputX\") ($modCore + \"_LengthRatio_MD.input1X\");\n\t\tsetAttr ($modCore + \"_LengthRatio_MD.operation\") 2;\n\t\t\n\t\tfloat $SpineLengthValue = `getAttr ($modCore + \"_LengthInfo.arcLength\")`;\n\t\tsetAttr ($modCore + \"_LengthRatio_MD.input2X\") $SpineLengthValue;\n\t\t\n\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + \"_TopJntIK.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + \"_MidJntIK.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + \"_Btm01JntIK.scaleY\");\n\t\t\n\t\t//INVERSE SCALE\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LengthRatioInverse_MD\");\n\t\tconnectAttr -f ($modCore + \"_HierarchyCompensate_MD.outputX\") ($modCore + \"_LengthRatioInverse_MD.input2X\");\n\t\tsetAttr ($modCore + \"_LengthRatioInverse_MD.operation\") 2;\n\t\t\n\t\tsetAttr ($modCore + \"_LengthRatioInverse_MD.input1X\") $SpineLengthValue;\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_LengthRatioInverse_Blnd\");\n\t\tsetAttr ($modCore + \"_LengthRatioInverse_Blnd.color2\") -type double3 1 1 1 ;\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_MD.outputX\") ($modCore + \"_LengthRatioInverse_Blnd.color1R\");\n\t\n\t\t$spineJnt = `ls ($modCore + \"_??Jnt\")`;\n\t\tint $i= 0;\n\t\tfor ($crntJnt in $spineJnt)\n\t\t{\n\t\t\t$i++;\n\t\t\tstring $numPad = \"_0\";\n\t\t\tif ($i >= 10)\n\t\t\t{\n\t\t\t\t$numPad = \"_\";\n\t\t\t}\n\t\t\t//CONNECT MICRO CONTROL TO SCALE\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD\");\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl.scaleX\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input2Y\");\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl.scaleY\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input2X\");\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl.scaleZ\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input2Z\");\n\t\t\n\t\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input1X\");\n\t\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input1Y\");\n\t\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input1Z\");\n\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.output\") ($crntJnt + \".scale\");\n\t\t}\n\t\t\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_TopJntIK.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_TopJntIK.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_MidJntIK.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_MidJntIK.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_Btm01JntIK.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_Btm01JntIK.scaleZ\");\n\t\t\n\t\t//ADD ATTRIBUTES TO TOPIKC\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_TopIKCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\t\t\n\t\t//AUTO VOLUME\n\t\taddAttr -ln \"autoVolume\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.autoVolume\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.autoVolume\") ($modCore + \"_LengthRatioInverse_Blnd.blender\");\n\t\tsetAttr ($modCore + \"_TopIKCtrl.autoVolume\") 1;\n\t\n\t\t//SPLINE CURVE\n\t\taddAttr -ln \"splineCurve\"  -at double  -min 0.001 -max 5 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.splineCurve\");\n\t\t\n\t\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//RIBBON SPLINE\n\t\t\n\t\t//CREATE LOCATORS FOR TX\n\t\tspaceLocator -n ($modCore + \"_BtmTX_Lctr\") -p 0 0 0;\n\t\tparent ($modCore + \"_BtmTX_Lctr\") ($modCore + \"_ScaleGrp\");\n\t\tpointConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_BtmTX_Lctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_TopTX_Lctr\") -p 0 0 0;\n\t\tparent ($modCore + \"_TopTX_Lctr\") ($modCore + \"_TopIKCtrl\");\n\t\tpointConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_TopTX_Lctr\");\n\t\t\n\t\t//SET DRIVEN KEY\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\");\n\t\tsetAttr ($modCore + \"_MidIKCtrl.translateX\") -4;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\") .8;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\") 1.2;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\");\n\t\tsetAttr ($modCore + \"_MidIKCtrl.translateX\") 4;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\") 1.2;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\") .8;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\");\n\t\tsetAttr ($modCore + \"_MidIKCtrl.translateX\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\") 1;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\") 1;\n\t\t\n\t\tselectKey -k ($modCore + \"_ribbonBlend_lClusterGrp_scaleY\") ($modCore + \"_ribbonBlend_rClusterGrp_scaleY\") ;\n\t\tkeyTangent -itt spline -ott spline ;\n\t\t\n\t\t//ATTACH NODE LOCATOR WITH ZEROED VALUES\n\t\tspaceLocator -n ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr\");\n\t\tgroup -n ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\");\n\t\tdelete `pointConstraint ($modCore) ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\")`;\n\t\tdelete `aimConstraint -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_MidIKCtrl\")\n\t\t($modCore + \"_TopIKCtrl\") ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\")`;\n\t\tparent ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 0 -s 1 ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\");\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr\");\n\t\t\n\t\n\t\t//CONNECT SPLINE IK MIDDLE TO TOP AND BOTTOM SPLINE IK\n\t\tshadingNode -n ($modCore + \"_SplineMid_Blnd\") -asUtility blendColors;\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.translate\") ($modCore + \"_SplineMid_Blnd.color1\");\n\t\tconnectAttr -f ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr.translate\") ($modCore + \"_SplineMid_Blnd.color2\");\n\t\t//connectAttr -f ($modCore + \"_SplineMid_Blnd.output\") ($modCore + \"_MidIKCtrlLctr.translate\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_SplineMid_Rot_Mid\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.rotate\") ($modCore + \"_SplineMid_Rot_Mid.input1\");\n\t\tsetAttr ($modCore + \"_SplineMid_Rot_Mid.operation\") 2;\n\t\tsetAttr ($modCore + \"_SplineMid_Rot_Mid.input2Y\") 2;\n\t\tconnectAttr -force ($modCore + \"_SplineMid_Rot_Mid.outputY\") ($modCore + \"_MidIKCtrlLctr.rotateY\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_MidSplineAimLctr\");\n\t\tspaceLocator -n ($modCore + \"_MidSplineTargetLctr\");\n\t\tgroup -n ($modCore + \"_MidSplineLctrGrp\") ($modCore + \"_MidSplineAimLctr\") ($modCore + \"_MidSplineTargetLctr\");\n\t\tparent ($modCore + \"_MidSplineLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\tdelete `pointConstraint ($modCore) ($modCore + \"_MidSplineLctrGrp\")`;\n\t\tdelete `aimConstraint -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_MidIKCtrl\")\n\t\t($modCore + \"_TopIKCtrl\") ($modCore + \"_MidSplineLctrGrp\")`;\n\t\tdelete `pointConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_MidSplineTargetLctr\")`;\n\t\t//select \"pCube1\";\n\t\t\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_MidSplineAimLctr\") ($modCore + \"_MidSplineTargetLctr\");\n\n\t\tconnectAttr -f ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr.translate\") ($modCore + \"_MidSplineAimLctr.translate\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.translate\") ($modCore + \"_MidSplineTargetLctr.translate\");\n\t\t\n\t\taimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType \"none\" -skip y ($modCore + \"_MidSplineTargetLctr\") ($modCore + \"_MidSplineAimLctr\");\n\t\tconnectAttr -f ($modCore + \"_MidSplineAimLctr.rotateX\") ($modCore + \"_MidIKCtrlLctr.rotateX\");\n\t\tconnectAttr -f ($modCore + \"_MidSplineAimLctr.rotateZ\") ($modCore + \"_MidIKCtrlLctr.rotateZ\");\n\t\t//CREATE ATTRIBUTES FOR IK/FK MIDIKCtrlGrp INFLUENCE\n\t\taddAttr -ln \"topIKInfPos\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.topIKInfPos\");\n\t\taddAttr -ln \"topIKInfRot\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.topIKInfRot\");\n\t\t\n\t\t//CREATE LOCATOR FOR IK/FK MIDIKCtrlGrp INFLUENCE\n\t\tspaceLocator -n ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\tgroup -n ($modCore + \"_MidIKCtrlLctrGrp_InfLctrGrp\");\n\t\tdelete `parentConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp_InfLctrGrp\")`;\n\t\tparent ($modCore + \"_MidIKCtrlLctrGrp_InfLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\tmakeIdentity -apply true -t 1 ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_TopIKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\taimConstraint -offset 0 0 0 -weight 1 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"none\" -skip y ($modCore + \"_TopIKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\tsetAttr ($modCore + \"_MidIKCtrlLctrGrp_InfLctr.v\") 0;\n\t\t\n\t\t//ROTATE BLEND\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend\");\n\t\tconnectAttr -force ($modCore + \"_MidSplineAimLctr.rotate\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.color2\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_InfLctr.rotate\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.color1\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.topIKInfRot\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.blender\");\n\t\t\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.outputR\") ($modCore + \"_MidIKCtrlLctr.rotateX\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.outputB\") ($modCore + \"_MidIKCtrlLctr.rotateZ\");\n\t\t\n\t\t//TRANSLATE BLEND\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend\");\n\t\tconnectAttr -force ($modCore + \"_SplineMid_Blnd.output\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.color2\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_InfLctr.translate\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.color1\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.topIKInfPos\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.blender\");\n\t\t\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.output\") ($modCore + \"_MidIKCtrlLctr.translate\");\n\t\n\t\t//SPLINE LENGTH\n\t\taddAttr -ln \"splineLength\"  -at double ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-channelBox true ($modCore + \"_MidIKCtrl.splineLength\");\n\t\taddAttr -ln \"splineLength\"  -at double ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-channelBox true ($modCore + \"_TopIKCtrl.splineLength\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Length_MD\");\n\t\tsetAttr ($modCore + \"_Length_MD.operation\") 2;\n\t\t$splineLength[0] = `getAttr ($modCore + \"_LengthInfo.arcLength\")`;\n\t\tsetAttr ($modCore + \"_Length_MD.input2X\") $splineLength[0];\n\t\tconnectAttr -f ($modCore + \"_LengthInfo.arcLength\") ($modCore + \"_Length_MD.input1X\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LengthComp_MD\");\n\t\tsetAttr ($modCore + \"_LengthComp_MD.operation\") 2;\n\t\tconnectAttr -force ($modCore + \"_Length_MD.outputX\") ($modCore + \"_LengthComp_MD.input1X\");\n\t\tconnectAttr -force ($modName + \"_MAINCtrl.scaleY\") ($modCore + \"_LengthComp_MD.input2X\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_LengthComp_MD.outputX\") ($modCore + \"_MidIKCtrl.splineLength\");\n\t\tconnectAttr -f ($modCore + \"_LengthComp_MD.outputX\") ($modCore + \"_TopIKCtrl.splineLength\");\n\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Spline_Blnd\");\n\t\tconnectAttr -f ($modCore + \"_LengthComp_MD.outputX\") ($modCore + \"_Spline_Blnd.color1R\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.splineCurve\") ($modCore + \"_Spline_Blnd.color2R\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_Spline_Blnd.outputR\") ($modCore + \"_SplineBtm_ClusterGrp.sy\");\n\t\tconnectAttr -f ($modCore + \"_Spline_Blnd.outputR\") ($modCore + \"_SplineMid_ClusterGrp.sy\");\n\t\tconnectAttr -f ($modCore + \"_Spline_Blnd.outputR\") ($modCore + \"_SplineTop_ClusterGrp.sy\");\n\t\t\n\t\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\t\n\t\t//VISIBILITY\n\t\t$SpineCurveLctrs = `ls ($modCore + \"_??CurveLctr\")`;\n\t\tfor ($crntLctr in $SpineCurveLctrs)\n\t\t{\n\t\t\tsetAttr ($crntLctr + \".v\") 0;\n\t\t}\n\t\t\n\t\n\t\t//SPLINE MICROS\n\t\taddAttr -ln \"splineMicro\"  -at bool  ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_TopIKCtrl.splineMicro\");\n\t\t\n\t\t$splineCurveCtrlGrp = `ls ($modCore + \"_??CurveCtrlGrp\")`;\n\t\tfor ($crntCtrlGrp in $splineCurveCtrlGrp)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.splineMicro\") ($crntCtrlGrp + \".v\");\n\t\t}\n\t\n\t\tsetAttr ($modCore + \"_StartLctr.v\") 0;\n\t\tsetAttr ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr.v\") 0;\n\t\n\t\tsetAttr ($modCore + \"_SplineBtm_BtmClstr.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineBtm_TopClstr.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineTop_BtmClstr.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineTop_TopClstr.v\") 0;\n\t\n\t\tsetAttr ($modCore + \"_LengthClstr01.v\") 0;\n\t\tsetAttr ($modCore + \"_LengthClstr02.v\") 0;\n\t\tsetAttr ($modCore + \"_LengthClstr03.v\") 0;\n\t\n\t\n\t\tsetAttr ($modCore + \"_ribbon.v\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend.v\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rCluster.v\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lCluster.v\") 0;\n\t\tsetAttr ($modCore + \"_BtmTX_Lctr.v\") 0;\n\t\tsetAttr ($modCore + \"_TopTX_Lctr.v\") 0;\n\t\tsetAttr ($modCore + \"_Btm01JntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_MidJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_TopJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_LengthCurve.template\") 1;\n\t\tsetAttr ($modCore + \"_SplineTop.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineBtm.v\") 0;\n\t\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_LengthCurve\");\n\t\tsetAttr -e-keyable true ($modCore + \"_LengthCurve.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_LengthCurve.nonControl\");\n\t\t\n\t\t$spineF = `ls ($modCore + \"_??F\")`;\n\t\tfor ($crntF in $spineF)\n\t\t{\n\t\t\tsetAttr ($crntF + \".v\") 0;\n\t\t}\n\t\t\n\t\tsetAttr ($modCore + \"_MidSplineTargetLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_MidSplineAimLctr.v\") 0;\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_TopIKCtrl.v\");\n\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.v\");\n\t\t\n\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\tif (!`objExists ($crntModControl + \".modCoreName\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t\t\t}\n\t\t\t//ADD MODULE TYPE\n\t\t\tif (!`objExists ($crntModControl + \".moduleType\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"spline\";\n\t\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t\t}\n\t\t}\n\t\t\n\t\t//CLEAN UP\n\t\tdelete ($modCore + \"_OrientLctr\");\n\t\t\n\t\tselect -cl;\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n///////////////////////////////    TOON LIMB    ///////////////////////////////\n//////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_ToonLimbs(string $limbType, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, string $modCore, string $modOppCore, int $multiplier, int $inverseFront, string $modAttachNode, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$core = `getAttr ($topNode + \".core\")`;\n\n\tfloat $elbow1Loc[];\n\tfloat $elbow2Loc[];\t\n\tstring $elbow1 = \"_Elbow\";\n\tstring $elbow2 = \"_Elbow\";\n\tstring $elbowType = \"elbow\";\n\tstring $shoulder = \"_Shoulder\";\n\tstring $clavicle = \"_Clavicle\";\n\tstring $parentNode = \"_ClavicleJnt\";\n\tstring $wrist = \"_Wrist\";\n\tstring $wristDummy = \"_WristJDummy\";\n\tstring $FKCtrlGrp = \"FKCtrlGrp2\";\n\tint $segInteger = 1;\n\tfloat $limbLength;\n\n\tif ($limbType == \"leg\")\n\t{\n\t\t$elbow1 = \"_Knee\";\n\t\t$elbow2 = \"_Knee\";\n\t\t$elbowType = \"knee\";\n\t\t$shoulder = \"_Hip\";\n\t\t$clavicle = (\"_\" + $modAttachNode);\n\t\t$parentNode = \"_HipFKCtrlGrp\";\n\t\t$wrist = \"_Ankle\";\n\t\t$wristDummy = \"_AnkleJnt\";\n\t\t$FKCtrlGrp = \"FKCtrlGrp\";\n\t\tselect (\"RRM_\" + $prfx + $core + \"_Hip\") (\"RRM_\" + $prfx + $core + \"_Ankle\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Knee1\") (\"RRM_\" + $prfx + $core + \"_Knee1\");\n\t\t}\n\t\t//SET MULTIPLIER TO NOT MIRROR\n\t\t$multiplier = 1;\n\t}\n\telse\n\t{\n\t\tselect (\"RRM_\" + $prfx + $core + \"_Shoulder\") (\"RRM_\" + $prfx + $core + \"_Wrist\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Elbow1\") (\"RRM_\" + $prfx + $core + \"_Elbow1\");\n\t\t}\n\t}\n\t$segments = `ls -sl`;\n\t$segSize = `size $segments`;\n\t\t\n\tfloat $middleLimbLength;\n\n\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")` && !`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t{\n\t\t$elbow1Loc = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t$elbow2Loc = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t$upperLimbLength = `getAttr ($modCore + $elbow1 + \"Jnt.translateX\")`;\n\t\t$lowerLimbLength = `getAttr ($modCore + $wristDummy + \".translateX\")`;\n\t\t$limbLength = (($upperLimbLength + $lowerLimbLength)/2);\n\t}\n\telse\n\t{\n\t\t$elbow1 = \"_Elbow1\";\n\t\t$elbow2 = \"_Elbow2\";\n\t\tif ($limbType == \"leg\")\n\t\t{\n\t\t\t$elbow1 = \"_Knee1\";\n\t\t\t$elbow2 = \"_Knee2\";\n\t\t}\t\t\t\n\t\t$elbow1Loc = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t$elbow2Loc = `xform -q -ws -rp ($modCore + $elbow2 + \"Jnt\")`;\n\t\t$upperLimbLength = `getAttr ($modCore + $elbow1 + \"Jnt.translateX\")`;\n\t\t$middleLimbLength = `getAttr ($modCore + $elbow2 + \"Jnt.translateX\")`;\n\t\t$lowerLimbLength = `getAttr ($modCore + $wristDummy + \".translateX\")`;\n\t\t//$limbLength = ($upperLimbLength + $middleLimbLength + $lowerLimbLength);\n\t\t$limbLength = (($upperLimbLength + $lowerLimbLength)/2);\n\t}\n\t\n\t//ADD CURVE ATTRIBUTES TO IK FK SWITCH\n\taddAttr -ln ($elbowType + \"Curve\")  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $elbowType + \"Curve\");\n\t\n\taddAttr -ln \"curve\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.curve\");\n\t\n\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Curve_MD1\");\n\tconnectAttr -force ($modCore + \"_SwitchCtrl.curve\") ($modCore + \"_Curve_MD1.input1X\");\n\tsetAttr ($modCore + \"_Curve_MD1.input2X\") 2;\n\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Curve_MD2\");\n\tconnectAttr -force ($modCore + \"_Curve_MD1.outputX\") ($modCore + \"_Curve_MD2.input1X\");\n\tconnectAttr -force ($modCore + $shoulder + \"FKCtrl.scaleX\") ($modCore + \"_Curve_MD2.input2X\");\n\t\n\t//ADD VISIBILITY ATTRIBUTES FOR CURVE CONTROLLERS\n\taddAttr -ln ($limbType + \"Twist\")  -at bool  -min 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $limbType + \"Twist\");\n\n\taddAttr -ln ($limbType + \"CurveMacro\")  -at bool  -min 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\");\n\t\n\taddAttr -ln ($limbType + \"CurveMicro\")  -at bool  -min 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMicro\");\n\t\n\t\n\t//GROUP FOR NODES\n\tgroup -em -n ($modCore + \"_curveNodesGrp\");\n\tparent ($modCore + \"_curveNodesGrp\") ($modCore + \"_ScaleGrp\");\n\tgroup -em -n ($modCore + \"_extraCurveNodesGrp\");\n\tsetAttr ($modCore + \"_extraCurveNodesGrp.inheritsTransform\") 0; \n\tparent ($modCore + \"_extraCurveNodesGrp\") ($modName + \"_MAINCtrl\");\n\t\n\t\n\twhile ($segInteger < $segSize || $segInteger <= 3)\n\t{\n\t\t//UPPER\n\t\t$seg = \"_Upper\";\n\t\t//$segStart = \"_Shoulder\";\n\t\t$segStart = $shoulder;\n\t\t$segEnd = $elbow1;\n\t\t$startPos = `xform -q -ws -rp ($modCore + $segStart + \"Jnt\")`;\n\t\t$endPos = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\tstring $segParentStartOrient = ($modCore + $clavicle + \"Jnt\");\n\t\tif ($limbType == \"leg\")\n\t\t{\n\t\t\t$segParentStartOrient = $modAttachNode;\n\t\t}\n\t\tstring $segEndOrient = ($modCore + $elbow1 + \"Jnt\");\n\t\t\n\t\tstring $topSegPosAttach = ($modCore + $shoulder + \"Jnt\");\n\t\tstring $topSegRotAttach = ($modCore + $parentNode);\n\t\tstring $btmSegPosAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\tstring $btmSegRotAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\tstring $ikSplineUpObject2 = ($modCore + $shoulder + \"Jnt\");\n\t\tstring $segStartUpOrientControl = ($modCore + $seg + \"_TwistCtrl\");\n\t\tstring $segEndUpOrientControl = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\n\t\tif ($segInteger == 2)\n\t\t{//LOWER\n\t\t\t$seg = \"_Lower\";\n\t\t\t$segStart = $elbow2;\n\t\t\t$segEnd = $wrist;\n\t\t\t$startPos = `xform -q -ws -rp ($modCore + $elbow2 + \"Jnt\")`;\n\t\t\t$endPos = `xform -q -ws -rp ($modCore + $wrist + \"Jnt\")`;\n\t\t\t$segParentStartOrient = ($modCore + $elbow2 + \"Jnt\");\n\t\t\t$segEndOrient = ($modCore + $wrist + \"Jnt\");\n\n\t\t\t$topSegPosAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$topSegRotAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$btmSegPosAttach = ($modCore + $wrist + \"Jnt\");\n\t\t\t$btmSegRotAttach = ($modCore + $wrist + \"Jnt\");\n\t\t\t$ikSplineUpObject2 = ($modCore + $wrist + \"JntGrp1\");\n\t\t\tif ($limbType == \"leg\")\n\t\t\t{\n\t\t\t\t$ikSplineUpObject2 = ($modCore + $wrist + \"Jnt\");\n\t\t\t}\n\t\t\t$segStartUpOrientControl = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t//$segEndUpOrientControl = ($modCore + $wrist + \"Jnt\");\n\t\t\t$segEndUpOrientControl = ($modCore + $seg + \"_TwistCtrl\");\n\t\t}\n\t\telse if ($segInteger == 3)\n\t\t{//MIDDLE\n\t\t\t$seg = \"_Middle\";\n\t\t\t$segStart = $elbow1;\n\t\t\t$segEnd = $elbow2;\n\t\t\t$startPos = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t\t$endPos = `xform -q -ws -rp ($modCore + $elbow2 + \"Jnt\")`;\n\t\t\t$segParentStartOrient = ($modCore + $elbow1 + \"Jnt\");\n\t\t\t$segEndOrient = ($modCore + $elbow2 + \"Jnt\");\n\n\t\t\t$topSegPosAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\t$topSegRotAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\t$btmSegPosAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$btmSegRotAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$ikSplineUpObject2 = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$segStartUpOrientControl = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\t$segEndUpOrientControl = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t}\n\t\t\n\t\tfloat $segLength;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tif ($segInteger != 2)\n\t\t\t{\n\t\t\t\t$segLength = `getAttr ($modCore + $segEnd + \"Jnt.tx\")`;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$segLength = `getAttr ($modCore + $wristDummy + \".tx\")`;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elbow1TX = `getAttr ($modCore + $elbow1 + \"Jnt.tx\")`;\n\t\t\t$elbow2TX = `getAttr ($modCore + $elbow2 + \"Jnt.tx\")`;\n\t\t\t$segLength = (($elbow1TX + $elbow2TX)*.667);\n\t\t}\n\n\t\t// SEGMENTS CHECK\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + $seg + \"1\")`)\n\t\t{\n\t\t\t//CREATE MAIN SPLINE CURVES FOR CONTROL GROUP ATTACHMENT\n\t\t\tcurve -n ($modCore + $seg + \"CurveAttach\") -d 1 -p $startPos[0] $startPos[1] $startPos[2]\n\t\t\t-p $endPos[0] $endPos[1] $endPos[2] -k 0 -k 1;\n\t\t\tdelete -ch ($modCore + $seg + \"CurveAttach\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveShape\");\n\t\n\t\t\trebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($modCore + $seg + \"CurveAttach\");\n\t\t\t\t\n\t\t\t//CREATE GUIDE SPLINE CURVES FOR MACRO CONTROL ATTACHMENT\n\t\t\tcurve -n ($modCore + $seg + \"CurveGuide\") -d 1 -p $startPos[0] $startPos[1] $startPos[2]\n\t\t\t-p $endPos[0] $endPos[1] $endPos[2] -k 0 -k 1 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveGuideShape\");\n\t\t\t\n\t\t\trebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($modCore + $seg + \"CurveGuide\");\n\t\t\tdelete -ch ($modCore + $seg + \"CurveAttach\") ($modCore + $seg + \"CurveGuide\");\n\t\t\t\n\t\t\tparent ($modCore + $seg + \"CurveAttach\") ($modCore + $seg + \"CurveGuide\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"CurveAttach.template\") 1;\n\t\t\tsetAttr ($modCore + $seg + \"CurveGuide.v\") 0;\n\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ty\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.v\");\n\t\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.tx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.ty\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.tz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.v\");\n\n\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $seg + \"CurveGuide\");\n\t\t\tsetAttr -e-keyable true ($modCore + $seg + \"CurveGuide.nonControl\");\n\t\t\tsetAttr -lock true ($modCore + $seg + \"CurveGuide.nonControl\");\n\n\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $seg + \"CurveAttach\");\n\t\t\tsetAttr -e-keyable true ($modCore + $seg + \"CurveAttach.nonControl\");\n\t\t\tsetAttr -lock true ($modCore + $seg + \"CurveAttach.nonControl\");\n\n\t\t\t//HIDE SHOULDER AND ELBOW JOINTS SO THEY DON'T GET CONFUSED WITH THE TOON JOINTS\n\t\t\t//DETERMINE VERSION NUMBER\n\t\t\t$versionNum = `getApplicationVersionAsFloat`;\n\t\t\tif ($versionNum >= 2011)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + $segStart + \"Jnt.drawStyle\") 2;\n\t\t\t\tif ($segInteger != 2)\n\t\t\t\t{\n\t\t\t\t\tsetAttr ($modCore + $segEnd + \"Jnt.drawStyle\") 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + $segStart + \"Jnt.visibility\") 0;\n\t\t\t\tif ($segInteger != 2)\n\t\t\t\t{\n\t\t\t\t\tsetAttr ($modCore + $segEnd + \"Jnt.visibility\") 0;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tcurve -n ($modCore + $seg + \"CurveCtrl\") -d 1 -p 0 0.4 0.4 -p 0 0.4 -0.4 -p 0 -0.4 -0.4 -p 0 -0.4 0.4 -p 0 0.4 0.4 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t\tsetAttr ($modCore + $seg + \"CurveCtrl.rotateOrder\") 1;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveCtrlShape\");\n\t\t\t\n\t\t\tsetAttr (($modCore + $seg + \"CurveCtrl.scale\"), ($limbLength*.75), ($limbLength*.75), ($limbLength*.75));\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $seg + \"CurveCtrl\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\") ($modCore + $seg + \"CurveCtrl.v\");\n\t\t\t\n\t\t\tgroup -n ($modCore + $seg + \"CurveCtrlGrp\") ($modCore + $seg + \"CurveCtrl\");\n\t\t\tsetAttr ($modCore + $seg + \"CurveCtrlGrp.rotateOrder\") 1;\n\t\t\tpathAnimation -n ($modCore + $seg + \"Guide_MP\") -fractionMode true -followAxis x -upAxis y -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 1 0 -inverseFront $inverseFront -worldUpObject ($modCore + $segStart + \"Jnt\") ($modCore + $seg + \"CurveCtrlGrp\") ($modCore + $seg + \"CurveGuide\");\n\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $seg + \"Guide_MP\");\n\t\t\tsetAttr ($modCore + $seg + \"Guide_MP.uValue\") .5;\n\t\t\t\n\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $seg + \"CurveCtrlGrp.scale\");\n\t\t\tparent ($modCore + $seg + \"CurveCtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.v\");\n\n\t\n\t\t\t\n\t\t\tif (($segInteger == 1) || ($segInteger == 3 && !`objExists ($modCore + $segEnd + \"CurveCtrl\")`))\n\t\t\t{//ELBOW1 CONTROL\n\t\t\t\tcurve -n ($modCore + $segEnd + \"CurveCtrl\") -d 1 -p 0 0.4 0.4 -p 0 0.4 -0.4 -p 0 -0.4 -0.4 -p 0 -0.4 0.4 -p 0 0.4 0.4 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t\t\tsetAttr ($modCore + $segEnd + \"CurveCtrl.rotateOrder\") 1;\n\t\t\t\tpickWalk -d down;\n\t\t\t\trename ($modCore + $segEnd + \"CurveCtrlShape\");\n\t\t\t\tsetAttr (($modCore + $segEnd + \"CurveCtrl.scale\"), ($limbLength/1), ($limbLength/1), ($limbLength/1));\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $segEnd + \"CurveCtrl\");\n\t\n\t\t\t\tgroup -n ($modCore + $segEnd + \"CurveCtrlGrp\") ($modCore + $segEnd + \"CurveCtrl\");\n\t\t\t\tparent ($modCore + $segEnd + \"CurveCtrlGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\tpointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"CurveCtrlGrp\");\n\t\t\t\tdelete `orientConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"CurveCtrlGrp\")`;\n\t\t\t\torientConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"CurveCtrlGrp\");\n\t\t\t\tsetAttr ($modCore + $segEnd + \"CurveCtrlGrp_orientConstraint1.interpType\") 2;\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $segEnd + \"CurveCtrlGrp.scale\");\n\t\t\t\tparent ($modCore + $segEnd + \"CurveCtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $elbowType + \"Curve\") ($modCore + $segEnd + \"CurveCtrlGrp_orientConstraint1.\" + $modCore + $segStart + \"JntW0\");\n\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\") ($modCore + $segEnd + \"CurveCtrl.v\");\t\t\t\t\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.sx\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.sy\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.sz\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.v\");\n\t\t\t}//ELBOW1 CONTROL\n\t\t\t\n\t\t\tif (($segInteger == 2 && $elbow2 == \"_Elbow2\") || ($segInteger != 1 && !`objExists ($modCore + $segStart + \"CurveCtrl\")`))\n\t\t\t{//ELBOW2 CONTROL\n\t\t\t\tcurve -n ($modCore + $segStart + \"CurveCtrl\") -d 1 -p 0 0.4 0.4 -p 0 0.4 -0.4 -p 0 -0.4 -0.4 -p 0 -0.4 0.4 -p 0 0.4 0.4 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t\t\tsetAttr ($modCore + $segStart + \"CurveCtrl.rotateOrder\") 1;\n\t\t\t\tpickWalk -d down;\n\t\t\t\trename ($modCore + $segStart + \"CurveCtrlShape\");\n\t\t\t\tsetAttr (($modCore + $segStart + \"CurveCtrl.scale\"), ($limbLength/1), ($limbLength/1), ($limbLength/1));\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $segStart + \"CurveCtrl\");\n\t\n\t\t\t\tgroup -n ($modCore + $segStart + \"CurveCtrlGrp\") ($modCore + $segStart + \"CurveCtrl\");\n\t\t\t\tparent ($modCore + $segStart + \"CurveCtrlGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\tpointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"CurveCtrlGrp\");\n\t\t\t\tdelete `orientConstraint ($modCore + $elbow1 + \"Jnt\") ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"CurveCtrlGrp\")`;\n\t\t\t\torientConstraint -mo ($modCore + $elbow1 + \"Jnt\") ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"CurveCtrlGrp\");\n\t\t\t\tsetAttr ($modCore + $segStart + \"CurveCtrlGrp_orientConstraint1.interpType\") 2;\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $segStart + \"CurveCtrlGrp.scale\");\n\t\t\t\tparent ($modCore + $segStart + \"CurveCtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $elbowType + \"Curve\") ($modCore + $segStart + \"CurveCtrlGrp_orientConstraint1.\" + $modCore + $elbow1 + \"JntW0\");\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\") ($modCore + $segStart + \"CurveCtrl.v\");\t\t\t\t\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.sx\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.sy\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.sz\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.v\");\n\t\t\t}//ELBOW2 CONTROL\n\t\t\t\t\n\t\t\t//CURVE CLUSTERS\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[0:1]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"TopClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"TopClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + \"TopClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"TopClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"TopClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"TopClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"TopClstr\") ($modCore + $seg + \"TopClstrGrp\");\n\t\n\t\t\tpointConstraint -mo  $topSegPosAttach ($modCore + $seg + \"TopClstrGrp\");\n\t\t\torientConstraint -mo $topSegRotAttach ($modCore + $seg + \"TopClstrGrp\");\n\t\t\t\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[3:4]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"BtmClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"BtmClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"BtmClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"BtmClstr\") ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\t\t\n\t\t\tdelete `orientConstraint $segEndOrient ($modCore + $seg + \"BtmClstrGrp\")`;\n\n\t\t\tpointConstraint -mo  $btmSegPosAttach ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\torientConstraint -mo $btmSegRotAttach ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\t\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[2]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"MidClstr\");\n\t\t\t\n\t\t\tparentConstraint ($modCore + $seg + \"CurveCtrl\") ($modCore + $seg + \"MidClstr\");\n\t\t\tparent ($modCore + $seg + \"MidClstr\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"MidClstr.v\") 0;\n\t\n\t\t\t//GUIDE CURVE CLUSTERS\n\t\t\tselect ($modCore + $seg + \"CurveGuide.cv[0:1]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"TopGuideClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segStart + \"FKCtrl\") ($modCore + $seg + \"TopGuideClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"TopGuideClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"TopGuideClstr\") ($modCore + $seg + \"TopGuideClstrGrp\"); \n\t\t\t\n\t\t\tpointConstraint -mo  $topSegPosAttach ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\torientConstraint -mo $topSegRotAttach ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\n\t\t\tselect ($modCore + $seg + \"CurveGuide.cv[2:3]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"BtmGuideClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"BtmGuideClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"BtmGuideClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"BtmGuideClstr\") ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\n\t\t\tdelete `orientConstraint $segEndOrient ($modCore + $seg + \"BtmGuideClstrGrp\")`;\n\t\t\t\n\t\t\tpointConstraint -mo  $btmSegPosAttach ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\torientConstraint -mo $btmSegRotAttach ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\n\t\t\t//CONNECT SCALE TO OF THE CLUSTER GROUPS TO CURVE ATTRIBUTE TO MAKE THE ARM CURVES STRAIGHT\t\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"TopClstrGrp.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"BtmClstrGrp.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"TopGuideClstrGrp.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"BtmGuideClstrGrp.scaleX\");\n\t\t\t\n\t\t\t//PARENT CLUSTERS\n\t\t\tparent ($modCore + $seg + \"TopClstrGrp\") ($modCore + $seg + \"BtmClstrGrp\")\n\t\t\t($modCore + $seg + \"TopGuideClstrGrp\") ($modCore + $seg + \"BtmGuideClstrGrp\")\n\t\t\t($modCore + \"_curveNodesGrp\");\n\t\t\t\n\t\t\t//HIDE CLUSTERS\n\t\t\tsetAttr ($modCore + $seg + \"TopClstrGrp.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"BtmClstrGrp.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"TopGuideClstrGrp.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"BtmGuideClstrGrp.v\") 0;\n\t\t\t\n\t\t\t\n\t\t\t//CREATE NON-FLIP JOINT CHAIN\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + $seg + $segStart + \"_NoRollJoint\");\n\t\t\tsetAttr ($modCore + $seg + $segStart + \"_NoRollJoint.v\") 0;\n\t\t\tgroup -n ($modCore + $seg + $segStart + \"_NoRollJointGrp\"); \n\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_NoRollJointGrp\")`;\n\t\t\tif ($prfx == \"r_\")\n\t\t\t{\n\t\t\t\trotate -r 0 180 0 ($modCore + $seg + $segStart + \"_NoRollJointGrp\");\n\t\t\t}\n\t\t\tparentConstraint -mo $segParentStartOrient ($modCore + $seg + $segStart + \"_NoRollJointGrp\");\n\t\t\tpointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_NoRollJoint\");\n\t\t\tselect -cl;\n\t\t\t\n\t\t\tjoint -n ($modCore + $seg + $segEnd + \"_NoRollJoint\") -p $endPos[0] $endPos[1] $endPos[2];\n\t\t\tparent ($modCore + $seg + $segEnd + \"_NoRollJoint\") ($modCore + $seg + $segStart + \"_NoRollJoint\");\n\t\t\tsetAttr (($modCore + $seg + $segEnd + \"_NoRollJoint.jointOrient\"), 0, 0, 0);\n\t\t\t$segNoFlipLength = `getAttr ($modCore + $seg + $segEnd + \"_NoRollJoint.translateX\")`;\n\t\t\t\n\t\t\t//CREATE IK RP HANDLE\n\t\t\tselect ($modCore + $seg + $segStart + \"_NoRollJoint.rotatePivot\") ($modCore + $seg + $segEnd + \"_NoRollJoint.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + $seg + $segStart + \"NoRollIKHandle\") -sol ikRPsolver;\n\t\t\tsetAttr (($modCore + $seg + $segStart + \"NoRollIKHandle.poleVector\"), 0, 0, 0);\n\t\t\tparentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + $segStart + \"NoRollIKHandle\");\n\t\t\t\n\t\t\tparent ($modCore + $seg + $segStart + \"_NoRollJointGrp\") ($modCore + $seg + $segStart + \"NoRollIKHandle\") ($modCore + \"_curveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + $segStart + \"NoRollIKHandle.v\") 0;\n\n\t\t\t//CREATE TWIST JOINT CHAIN\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistStartJoint.v\") 0;\n\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistStartJoint\")`;\n\t\t\tif ($prfx == \"r_\" && $limbType == \"arm\")\n\t\t\t{\n\t\t\t\trotate -r -os 0 180 0 ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\t}\n\t\t\tpointConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\tselect -cl;\n\t\t\t\n\t\t\tjoint -n ($modCore + $seg + $segStart + \"_TwistEndJoint\") -p $endPos[0] $endPos[1] $endPos[2];\n\t\t\tparent ($modCore + $seg + $segStart + \"_TwistEndJoint\") ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\tsetAttr (($modCore + $seg + $segStart + \"_TwistEndJoint.jointOrient\"), 0, 0, 0);\n\t\t\t$segNoFlipLength = `getAttr ($modCore + $seg + $segStart + \"_TwistEndJoint.translateX\")`;\n\t\t\t\n\t\t\tgroup -em -n ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistJointsGrp\")`;\n\t\t\tmakeIdentity -apply true -t 1 ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\tparentConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\tparent ($modCore + $seg + $segStart + \"_TwistStartJoint\") ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\t\n\t\t\tparent ($modCore + $seg + $segStart + \"_TwistJointsGrp\") ($modCore + \"_curveNodesGrp\");\n\t\n\t\n\t\t\t//////////////////////////////////////////////////////////////////////////////\n\t\t\t////////////////////////////CREATE ARM ROLL JOINTS////////////////////////////////\n\t\t\t//////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t\t$rollProxies = `ls (\"RRM_\" + $prfx + $core + $seg + \"?\")`;\n\t\t\t$sizeRollProxies = `size $rollProxies`;\n\t\t\tint $rpNum = 1;\n\t\t\tfor ($eachRP in $rollProxies)\n\t\t\t{//CREATE TWIST JOINTS\n\t\t\t\t$rpNumRev = (($sizeRollProxies + 1) - $rpNum);\n\t\t\t\t\n\t\t\t\t//EXTRA TWIST JOINTS\n\t\t\t\tfloat $rpNumFloat = $rpNum;\n\t\t\t\tfloat $sizeRollProxiesFloat = $sizeRollProxies;\n\t\t\t\t\n\t\t\t\tduplicate -n ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum) ($modCore + $seg + $segStart + \"_TwistEndJoint\");\n\t\t\t\tfloat $noFlipSpacing = ($segNoFlipLength /($sizeRollProxiesFloat + 1));\n\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum + \".translateX\") $noFlipSpacing;\n\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistEndJoint\") ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum);\n\t\t\t\t\n\t\t\t\tif ($rpNum == $sizeRollProxies)\n\t\t\t\t{\n\t\t\t\t\t//ADD TWIST\n\t\t\t\t\t//CREATE TWIST CONTROLS\n\t\t\t\t\tif ($segInteger == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcircle -n ($modCore + $seg + \"_TwistCtrl\") -c 0 0 0 -nr 0 1 0 -sw 45 -r 0.8 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\t\t\t\t\trotate -r 0 -22.5 0 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segStart + \"_WedgeCtrl\") -d 1 -p -0.306147 0 -0.739104 -p 0 0 -0.432436 -p 0.306147 0 -0.739104 -k 0 -k 1 -k 2 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segStart + \"_WedgeCtrlShape\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segStart + \"_lineCtrl\") -d 1 -p 0 0 -0.432436 -p 0 0 0 -k 0 -k 1 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segStart + \"_lineCtrlShape\");\n\t\t\t\t\t\tparent -r -s ($modCore + $seg + $segStart + \"_WedgeCtrlShape\") ($modCore + $seg + $segStart + \"_lineCtrlShape\") ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tdelete ($modCore + $seg + $segStart + \"_WedgeCtrl\") ($modCore + $seg + $segStart + \"_lineCtrl\");\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.rotate\"), 0, -90, (90*$multiplier));\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.scale\"), ($limbLength/2), ($limbLength/2), ($limbLength/2));\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"Twist\") ($modCore + $seg + \"_TwistCtrl.v\");\t\t\t\t\n\t\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\t\t\t\t\t\tgroup -n ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + \"_TwistCtrl\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\tgroup -n ($modCore + $seg + $segStart + \"_TwistGrp\") ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + $segEnd + \"_TwistLctr\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\tsetAttr ($modCore + $seg + $segEnd + \"_TwistLctr.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistGrp\")`;\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $shoulder + $FKCtrlGrp) ($modCore + $seg + $segStart + \"_TwistGrp\");\n\t\t\t\t\t\t//parent ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp2);\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $seg + $segStart + \"_NoRollJoint\") ($modCore + $seg + \"_TwistCtrlGrp\");\n\t\t\t\t\t\tparentConstraint $ikSplineUpObject2 ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.ty\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tz\");\n\t\t\t\t\t\t//setAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.ry\");\n\t\t\t\t\t\t//setAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.rz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sy\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.v\");\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if ($segInteger == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tcircle -n ($modCore + $seg + \"_TwistCtrl\") -c 0 0 0 -nr 0 1 0 -sw 45 -r 0.8 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\t\t\t\t\trotate -r 0 -22.5 0 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segEnd + \"_WedgeCtrl\") -d 1 -p -0.306147 0 -0.739104 -p 0 0 -0.432436 -p 0.306147 0 -0.739104 -k 0 -k 1 -k 2 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segEnd + \"_WedgeCtrlShape\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segEnd + \"_lineCtrl\") -d 1 -p 0 0 -0.432436 -p 0 0 0 -k 0 -k 1 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segEnd + \"_lineCtrlShape\");\n\t\t\t\t\t\tparent -r -s ($modCore + $seg + $segEnd + \"_WedgeCtrlShape\") ($modCore + $seg + $segEnd + \"_lineCtrlShape\") ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tdelete ($modCore + $seg + $segEnd + \"_WedgeCtrl\") ($modCore + $seg + $segEnd + \"_lineCtrl\");\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.rotate\"), 0, -90, (90*$multiplier));\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.scale\"), ($limbLength/2.5), ($limbLength/2.5), ($limbLength/2.5));\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"Twist\") ($modCore + $seg + \"_TwistCtrl.v\");\t\t\t\t\n\t\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\t\t\t\t\t\tgroup -n ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + \"_TwistCtrl\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\tgroup -n ($modCore + $seg + $segEnd + \"_TwistGrp\") ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + $segEnd + \"_TwistLctr\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tparent ($modCore + $seg + $segEnd + \"_TwistGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\tsetAttr ($modCore + $seg + $segEnd + \"_TwistLctr.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + $segEnd + \"_TwistGrp\")`;\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + $segEnd + \"_TwistGrp\");\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"_TwistCtrlGrp\");\n\t\t\t\t\t\t//parentConstraint -mo ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\") ($modCore + $seg + \"_TwistCtrlGrp\");\n\t\t\t\t\t\tparentConstraint $ikSplineUpObject2 ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.ty\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sy\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.v\");\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\");\n\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\");\n\t\t\t\t\tparentConstraint $segStartUpOrientControl ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\");\n\t\t\t\t\tparentConstraint $segEndUpOrientControl ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\");\n\t\t\t\t\t\n\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\") ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\") ($modCore + \"Grp\");\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr.v\") 0;\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr.v\") 0;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//SPLINE SETUP/////\n\t\t\t\t\t//CREATE ONE EXTRA JOINT TO BETTER DISTRIBUTE THE ROLL\n\t\t\t\t\tduplicate -n ($modCore + $seg + $segStart + \"_TwistJointExtraJoint\") ($modCore + $seg + $segStart + \"_TwistEndJoint\");\n\t\t\t\t\tfloat $noFlipSpacing = ($segNoFlipLength /(($sizeRollProxiesFloat + 1)*2));\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistJointExtraJoint\" + \".translateX\") $noFlipSpacing;\n\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistEndJoint\") ($modCore + $seg + $segStart + \"_TwistJointExtraJoint\");\n\t\t\t\t\t\n\t\t\t\t\t//SPLINE IK\n\t\t\t\t\tselect ($modCore + $seg + $segStart + \"_TwistStartJoint.rotatePivot\") ($modCore + $seg + $segStart + \"_TwistEndJoint.rotatePivot\") ;\n\t\t\t\t\tikHandle -n ($modCore + $seg + $segStart + \"_TwistSplineIKHandle\") -sol ikSplineSolver;\n\t\t\t\t\t$splineIKCurve = `listConnections -s 1 -d 0 -type \"nurbsCurve\" ($modCore + $seg + $segStart + \"_TwistSplineIKHandle\")`;\n\t\t\t\t\trename $splineIKCurve ($modCore + $seg + $segStart + \"_TwistSplineIKCurve\");\n\t\t\t\t\tparentConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistSplineIKCurve\");\n\t\t\t\t\t\n\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistSplineIKHandle\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.v\") 0;\n\t\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dTwistControlEnable\") 1;\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dWorldUpType\")  4;\n\t\n\t\t\t\t\tconnectAttr -f ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr.xformMatrix\") ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dWorldUpMatrix\");\n\t\t\t\t\tconnectAttr -f ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr.xformMatrix\") ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dWorldUpMatrixEnd\");\n\n\t\t\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $seg + $segStart + \"_TwistSplineIKCurve\");\n\t\t\t\t\tsetAttr -e-keyable true ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.nonControl\");\n\t\t\t\t\tsetAttr -lock true ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.nonControl\");\n\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.v\") 0;\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.tx\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.ty\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.tz\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.rx\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.ry\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.rz\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.sx\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.sy\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.sz\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.v\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t//INDIVIDUAL ARM JOINTS AND CONTROLS\n\t\t\t\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\t\tcircle -n ($modCore + $seg + \"_Curve\" + $rpNum + \"Cb\") -c 0 0 2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\t\t\tcircle -n ($modCore + $seg + \"_Curve\" + $rpNum + \"Cc\") -c 0 0 -2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\t\t\tcurve -n  ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\") -d 1 -p 0 0 -2 -p 0 0 2 -k 0 -k 1 ;\n\t\t\t\tpickWalk -d down;\n\t\t\t\trename ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlShape\");\n\t\n\t\t\t\tparent -r -s ($modCore + $seg + \"_Curve\" + $rpNum + \"CbShape\") ($modCore + $seg + \"_Curve\" + $rpNum + \"CcShape\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tdelete ($modCore + $seg + \"_Curve\" + $rpNum + \"Cb\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Cc\");\n\t\t\t\t\n\t\t\t\tsetAttr ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl.rotateOrder\") 1;\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMicro\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl.v\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl.v\");\n\t\t\t\t\n\t\n\t\t\t\tscale -r ($segLength/6) ($segLength/6) ($segLength/6) ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tdelete -ch ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\t\t\n\t\t\t\tgroup -n ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tsetAttr ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp.rotateOrder\") 1;\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp.scale\");\n\t\t\t\tparent ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\");\n\t\t\t\tparentConstraint ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\");\n\t\t\t\tscaleConstraint  ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_BlndScale.outputR\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt.scaleX\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt.scaleY\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt.scaleZ\");\n\t\t\t\tparent ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\") ($modCore + \"_curveNodesGrp\");\n\t\n\t\t\t\t//ATTACH TO PATH\n\t\t\t\tfloat $segDivider = ($sizeRollProxies + 1);\n\t\t\t\tfloat $percentage = ($rpNumFloat/$segDivider);\n\t\n\t\t\t\t//NO FLIP JOINTS UP\n\t\t\t\tpathAnimation -n ($modCore + $seg + \"\" + $rpNum + \"_MP\") -fractionMode true -followAxis x -upAxis y-worldUpType \"objectrotation\"\n\t\t\t\t-worldUpVector 0 1 0 -inverseFront $inverseFront -worldUpObject ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum) ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp\") ($modCore + $seg + \"CurveAttach\");\n\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $seg + \"\" + $rpNum + \"_MP\");\n\t\t\t\tsetAttr ($modCore + $seg + \"\" + $rpNum + \"_MP.uValue\") $percentage;\n\t\t\t\t\n\t\t\t\t//MOVE CURVE AND JOINT TO THE PROXY\n\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $seg + $rpNum) ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\")`;\n\t\t\t\tmakeIdentity -apply true -t 1 ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\n\t\t\t\tselect -cl;\n\t\t\t\t$rpNum++;\n\t\t\t}//CREATE TWIST JOINTS\n\t\t\t\n\t\t\t//CREATE TOP CURVE JOINT\n\t\t\tif (!`objExists ($modCore + $segStart + \"_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"_CurveJnt\")`;\n\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\tif ($segInteger == 1)\n\t\t\t\t{\n\t\t\t\t\t//TARGET LOCATOR\n\t\t\t\t\tspaceLocator -n ($modCore + $segStart + \"_CurveJnt_AimLctr\");\n\t\t\t\t\tgroup -n ($modCore + $segStart + \"_CurveJnt_AimLctrGrp\");\n\t\t\t\t\tpathAnimation -n ($modCore + $segStart + \"_CurveJnt_AimLctr_MP\") -fractionMode true -followAxis x -upAxis y-worldUpType \"objectrotation\"\n\t\t\t\t\t-worldUpVector 0 1 0 -inverseFront $inverseFront -worldUpObject ($modCore + $seg + $segStart + \"_NoRollJoint\") ($modCore + $segStart + \"_CurveJnt_AimLctrGrp\") ($modCore + $seg + \"CurveAttach\");\n\t\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $segStart + \"_CurveJnt_AimLctr_MP\");\n\t\t\t\t\tsetAttr ($modCore + $segStart + \"_CurveJnt_AimLctr_MP.uValue\") 0.002;\n\t\t\t\t\t\n\t\t\t\t\tparent ($modCore + $segStart + \"_CurveJnt_AimLctrGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\tsetAttr ($modCore + $segStart + \"_CurveJnt_AimLctrGrp.v\") 0;\n\t\t\t\t\t\n\t\t\t\t\tpointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t\t\t\t\t-worldUpVector 0 1 0 -worldUpObject ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\") ($modCore + $segStart + \"_CurveJnt_AimLctr\") ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_BlndScale.outputR\") ($modCore + $segStart + \"_CurveJnt.scaleX\");\n\t\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segStart + \"_CurveJnt.scaleY\");\n\t\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segStart + \"_CurveJnt.scaleZ\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparentConstraint ($modCore + $segStart + \"CurveCtrl\") ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\t}\n\t\t\t\tparent ($modCore + $segStart + \"_CurveJnt\") ($modCore + \"_curveNodesGrp\");\n\t\t\t}\n\t\t\t//CREATE BOTTOM CURVE JOINT\n\t\t\tif (($segInteger != 2) && (!`objExists ($modCore + $segEnd + \"_CurveJnt\")`))\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\tdelete `parentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"_CurveJnt\")`;\n\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\tif ($segInteger == 1)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tparentConstraint ($modCore + $segEnd + \"CurveCtrl\") ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\t}\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_BlndScale.outputR\") ($modCore + $segEnd + \"_CurveJnt.scaleX\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segEnd + \"_CurveJnt.scaleY\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segEnd + \"_CurveJnt.scaleZ\");\n\t\t\t\tparent ($modCore + $segEnd + \"_CurveJnt\") ($modCore + \"_curveNodesGrp\");\n\t\t\t}\n\t    }//CREATE JOINTS AND CONTROLS FOR EACH PROXY\n\t    else\n\t    {//CREATE CONNECTOR LINES ONLY\n\t\t\t//CREATE GUIDE SPLINE CURVES FOR MACRO CONTROL ATTACHMENT\n\t\t\tcurve -n ($modCore + $seg + \"CurveAttach\") -d 1 -p $startPos[0] $startPos[1] $startPos[2]\n\t\t\t-p $endPos[0] $endPos[1] $endPos[2] -k 0 -k 1 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveAttachShape\");\n\t\t\tdelete -ch ($modCore + $seg + \"CurveAttach\");\n\t\t\t\n\t\t\t//CREATE CLUSTERS FOR EACH END\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[0]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"TopGuideClstr\");\n\t\t\t\n\t\t\tpointConstraint  ($modCore + $segStart + \"Jnt\") ($modCore + $seg + \"TopGuideClstr\");\n\t\t\t\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[1]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"BtmGuideClstr\");\n\t\t\t\t\t\t\n\t\t\tpointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"BtmGuideClstr\");\n\n\t\t\tparent ($modCore + $seg + \"CurveAttach\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"CurveAttach.template\") 1;\n\t\t\t\n\t\t\tparent ($modCore + $seg + \"TopGuideClstr\") ($modCore + $seg + \"BtmGuideClstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"TopGuideClstr.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"BtmGuideClstr.v\") 0;\n\t\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ty\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.v\");\n\t    }\n\t\t$segInteger ++;\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE ARM MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_GenerateRigArm(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$core = `getAttr ($topNode + \".core\")`;\n\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tint $inverseFront = 0;\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$i = 0;\n\n\t//ARM\n\twhile ($i !=2)\n\t{\n\t\tif (!`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t\tselect $topNode;\n\t\t\t\n\t\t\t$crntSide = `getAttr ($topNode + \".single\")`;\n\t\t\tif ($crntSide == \"right\")\n\t\t\t{\n\t\t\t\t$multiplier = -1;\n\t\t\t\t$inverseFront = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\t\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"arm\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFICtrl ATTRIBUTES\n\t\t//UPPER ROLL JOINTS\n\t\tint $sizeUpperCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$UpperCJnt = `ls ($modCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperCJnt = `size $UpperCJnt`;\n\t\t}\n\t\taddAttr -ln \"upperRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.upperRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.upperRoll\") $sizeUpperCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.upperRoll\");\n\t\t\n\t\tint $sizeLowerCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$LowerCJnt = `ls ($modCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeLowerCJnt = `size $LowerCJnt`;\n\t\t}\n\t\taddAttr -ln \"lowerRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.lowerRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.lowerRoll\") $sizeLowerCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.lowerRoll\");\n\t\n\t\n\t\taddAttr -ln \"elbowNum\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.elbowNum\") ;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.elbowNum\") \"1\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.elbowNum\") \"2\";\n\t\t}\t\t\n\t\tsetAttr -l true ($modCore + \"Grp.elbowNum\");\n\t\t\n\t\n\t\tint $sizeMiddleCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$MiddleCJnt = `ls ($modCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCJnt = `size $MiddleCJnt`;\n\t\t}\n\t\taddAttr -ln \"midRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.midRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.midRoll\") $sizeMiddleCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.midRoll\");\n\t\t\n\t\t\n\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Clavicle\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Clavicle\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\n\t\t\n\t\t//CONTROLS\n\t\t\n\t\t//SCALE\n\t\tfloat $ArmLength;\n\t\tfloat $elbowLength[];\n\t\tfloat $elbow1Length[];\n\t\tfloat $elbow2Length[];\n\t\tfloat $WristLength[];\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_EndLctr\")`;\n\t\t\t$elbowLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_EndLctr\")`;\n\t\t\t$WristLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t$ArmLength = (($elbowLength[0] + $WristLength[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_EndLctr\")`;\n\t\t\t$elbow1Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_EndLctr\")`;\n\t\t\t$elbow2Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_EndLctr\")`;\n\t\t\t$WristLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\n\t\t\t$ArmLength = (($elbow1Length[0] + $elbow2Length[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\t\n\n\t\t//CLAVICLE CONTROL\n\t\tcircle -n ($modCore + \"_ClavicleCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tdelete -ch ($modCore + \"_ClavicleCtrl\");\n\t\tsetAttr ($modCore + \"_ClavicleCtrl.rotateOrder\") 1;\n\t\tmove -r ($multiplier * 1.35) 2 0 ($modCore + \"_ClavicleCtrl.cv[3]\") ($modCore + \"_ClavicleCtrl.cv[7]\") ;\n\t\tmove -r ($multiplier * 0.5) 1.25 0 ($modCore + \"_ClavicleCtrl.cv[2]\") ($modCore + \"_ClavicleCtrl.cv[4]\") ($modCore + \"_ClavicleCtrl.cv[0]\") ($modCore + \"_ClavicleCtrl.cv[6]\") ;\n\t\tgroup -n ($modCore + \"_ClavicleCtrlGrp\") ($modCore + \"_ClavicleCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_ClavicleCtrlGrp.rotateOrder\") 1;\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Clavicle\") ($modCore + \"_ClavicleCtrlGrp\")`;\n\t\t\n\t\tsetAttr (($modCore + \"_ClavicleCtrlGrp.scale\"), (($ArmLength/2) * 0.4), (($ArmLength/2) * 1), (($ArmLength/2) * 1.25));\n\t\t\n\t\tmakeIdentity -apply true -t 0 -s 1 ($modCore + \"_ClavicleCtrlGrp\");\n\t\t\n\t\t//SHOULDER FK CONTROL\n\t\tcircle -n ($modCore + \"_ShoulderFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tdelete -ch ($modCore + \"_ShoulderFKCtrl\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.rotateOrder\") 1;\n\t\tgroup -n ($modCore + \"_ShoulderFKCtrlGrp\") ($modCore + \"_ShoulderFKCtrl\");\n\t\tgroup -n ($modCore + \"_ShoulderFKCtrlGrp2\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_ShoulderFKCtrlGrp2\")`;\n\t\tfloat $upVector = 1;\n\t\tfloat $elbowLocCheck;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\t$elbowLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Elbow.translateZ\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elbowLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Elbow1.translateZ\")`;\n\t\t}\n\t\tif ($elbowLocCheck > 0.0001)\n\t\t{\n\t\t\t$upVector = -1;\n\t\t}\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_ShoulderFKCtrlGrp2\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_ShoulderFKCtrlGrp2\")`;\n\t\t}\n\t\t\n\t\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\t\n\t\tsetAttr (($modCore + \"_ShoulderFKCtrl.scale\"), ($ArmLength/2), ($ArmLength/2), ($ArmLength/2));\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_ShoulderFKCtrlGrp2\");\n\t\t\t\n\t\t//ELBOW FK CONTROL\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_ElbowFKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\tparent -w ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_ElbowFKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_ElbowFKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_ElbowFKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_Elbow1FKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\tparent -w ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow1FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_Elbow1FKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_Elbow1FKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\t\n\t\t\tduplicate -n ($modCore + \"_Elbow2FKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\tparent -w ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow2FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_Elbow2FKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t}\n\n\t\t//WRIST FK CONTROL\n\t\tduplicate -n ($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\tparent -w ($modCore + \"_WristFKCtrlGrp\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_WristFKCtrlGrp\")`;\n\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_WristFKCtrlGrp\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_WristFKCtrlGrp\");\n\t\tselect ($modCore + \"_WristFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_WristFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_WristFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_WristFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_WristFKCtrl\");\n\t\n\t\n\t\t//////////////////////JOINTS//////////////////////\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_ClavicleJnt\");\n\t\tsetAttr ($modCore + \"_ClavicleJnt.rotateOrder\") 1;\n\t\tdelete `parentConstraint ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ClavicleJnt\")`;\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_ShoulderJnt\");\n\t\tsetAttr ($modCore + \"_ShoulderJnt.rotateOrder\") 1;\n\t\tdelete `parentConstraint ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJnt\")`;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_ElbowJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ElbowJnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJnt\")`;\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJDummy\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJDummy\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_ClavicleJnt\") ($modCore + \"_ShoulderJnt\")\n\t\t\t($modCore + \"_ElbowJnt\") ($modCore + \"_WristJnt\") ($modCore + \"_WristJDummy\");\n\t\t\t\n\t\t\tparent ($modCore + \"_ShoulderJnt\") ($modCore + \"_ClavicleJnt\");\n\t\t\tparent ($modCore + \"_ElbowJnt\")  ($modCore + \"_ShoulderJnt\");\n\t\t\tparent ($modCore + \"_WristJnt\") ($modCore + \"_ElbowJnt\");\n\t\t\tparent ($modCore + \"_WristJDummy\") ($modCore + \"_ElbowJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Elbow1Jnt\");\n\t\t\tsetAttr ($modCore + \"_Elbow1Jnt.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow1Jnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Elbow2Jnt\");\n\t\t\tsetAttr ($modCore + \"_Elbow2Jnt.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_Elbow2Jnt\")`;\n\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJnt\")`;\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJDummy\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJDummy\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_ClavicleJnt\") ($modCore + \"_ShoulderJnt\")\n\t\t\t($modCore + \"_Elbow1Jnt\") ($modCore + \"_Elbow2Jnt\") ($modCore + \"_WristJnt\") ($modCore + \"_WristJDummy\");\n\t\n\t\t\tparent ($modCore + \"_ShoulderJnt\") ($modCore + \"_ClavicleJnt\");\n\t\t\tparent ($modCore + \"_Elbow1Jnt\")  ($modCore + \"_ShoulderJnt\");\n\t\t\tparent ($modCore + \"_Elbow2Jnt\") ($modCore + \"_Elbow1Jnt\"); \n\t\t\tparent ($modCore + \"_WristJnt\") ($modCore + \"_Elbow2Jnt\");\n\t\t\tparent ($modCore + \"_WristJDummy\") ($modCore + \"_Elbow2Jnt\");\n\t\t}\n\t\t//HIDE WRIST DUMMY \n\t\tsetAttr ($modCore + \"_WristJDummy.v\") 0;\n\t\t//ELBOW ORIENTATION\n\t\tif (`objExists ($modCore + \"_ElbowJnt\")`)\n\t\t{\n\t\t\tif ($elbowLocCheck > 0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_ElbowJnt.preferredAngleY\") ($multiplier * 60);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_ElbowJnt.preferredAngleY\") ($multiplier * -60);\n\t\t\t}\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp1\");\n\t\t\tpointConstraint ($modCore + \"_WristJDummy\") ($modCore + \"_WristJntGrp1\");\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp1\")`;\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp2\") ;\n\t\t\tdelete `pointConstraint ($modCore + \"_ElbowJnt\") ($modCore + \"_WristJntGrp2\")`;\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp2\")`;\t\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowJnt\") ($modCore + \"_WristJntGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($elbowLocCheck > 0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Elbow1Jnt.preferredAngleY\") ($multiplier * 30);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Elbow1Jnt.preferredAngleY\") ($multiplier * -30);\n\t\t\t}\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp1\");\n\t\t\tpointConstraint ($modCore + \"_WristJDummy\") ($modCore + \"_WristJntGrp1\");\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp1\")`;\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp2\") ;\n\t\t\tdelete `pointConstraint ($modCore + \"_Elbow2Jnt\") ($modCore + \"_WristJntGrp2\")`;\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp2\")`;\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2Jnt\") ($modCore + \"_WristJntGrp2\");\n\t\t}\n\t\tparent ($modCore + \"_WristJntGrp1\") ($modCore + \"_WristJntGrp2\");\n\t\tparent ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp1\");\t\n\t\n\t\t\n\t\t\n\t\t////////////////////IK/FK JOINTS////////////////////////////////////\t\n\t\t//ARM FK\n\t\tduplicate -n ($modCore + \"_ShoulderJntFK\") ($modCore + \"_ShoulderJnt\");\n\t\tselect ($modCore + \"_ShoulderJntFK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_ElbowJntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntFK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Elbow1JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow2JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntFK\");\n\t\t}\n\t\t\n\t\t//ARM IK\n\t\tduplicate -n ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderJnt\");\n\t\tselect ($modCore + \"_ShoulderJntIK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_ElbowJntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntIK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Elbow1JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow2JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntIK\");\n\t\t}\t\n\t\n\t\t//DETACH FK ARM JOINTS FOR SCALE COMPENSATION\n\t\n\t\tparent -w ($modCore + \"_WristJntFK\");\n\t\tgroup -n ($modCore + \"_WristJntFKGrp1\") ($modCore + \"_WristJntFK\");\n\t\tgroup -n ($modCore + \"_WristJntFKGrp2\") ($modCore + \"_WristJntFKGrp1\");\n\t\t$WristLocation = `xform -q -ws -t ($modCore + \"_WristJnt\")`;\n\t\tmove $WristLocation[0] $WristLocation[1] $WristLocation[2] ($modCore + \"_WristJntFKGrp2.scalePivot\") ($modCore + \"_WristJntFKGrp2.rotatePivot\") ;\n\t\tpointConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJntFKGrp1\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowJntFK\") ($modCore + \"_WristJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2JntFK\") ($modCore + \"_WristJntFKGrp2\");\n\t\t}\n\t\t\t\n\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_ShoulderJnt\")`;\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparent -w ($modCore + \"_ElbowJntFK\") ($modCore + \"_WristJntFK\");\n\t\t\tgroup -n ($modCore + \"_ElbowJntFKGrp1\") ($modCore + \"_ElbowJntFK\");\n\t\t\tgroup -n ($modCore + \"_ElbowJntFKGrp2\") ($modCore + \"_ElbowJntFKGrp1\");\n\t\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_ElbowJnt\")`;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_ElbowJntFKGrp1.scalePivot\") ($modCore + \"_ElbowJntFKGrp1.rotatePivot\") ;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_ElbowJntFKGrp2.scalePivot\") ($modCore + \"_ElbowJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ElbowJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderJntFK\") ($modCore + \"_ElbowJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent -w ($modCore + \"_Elbow1JntFK\") ($modCore + \"_Elbow2JntFK\") ($modCore + \"_WristJntFK\");\n\t\t\t\n\t\t\tgroup -n ($modCore + \"_Elbow1JntFKGrp1\") ($modCore + \"_Elbow1JntFK\");\n\t\t\tgroup -n ($modCore + \"_Elbow1JntFKGrp2\") ($modCore + \"_Elbow1JntFKGrp1\");\n\t\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_Elbow1Jnt\")`;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_Elbow1JntFKGrp2.scalePivot\") ($modCore + \"_Elbow1JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow1JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderJntFK\") ($modCore + \"_Elbow1JntFKGrp2\");\n\t\n\t\t\tgroup -n ($modCore + \"_Elbow2JntFKGrp1\") ($modCore + \"_Elbow2JntFK\");\n\t\t\tgroup -n ($modCore + \"_Elbow2JntFKGrp2\") ($modCore + \"_Elbow2JntFKGrp1\");\n\t\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_Elbow2Jnt\")`;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_Elbow1JntFKGrp2.scalePivot\") ($modCore + \"_Elbow1JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_Elbow2JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1JntFK\") ($modCore + \"_Elbow2JntFKGrp2\");\n\t\t}\n\t\n\t\t//IK CONTROLS///////////////////////////////////////////////////////////////\t\t\n\t\tcircle -n ($modCore + \"_WristIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 180 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\tcircle -n ($modCore + \"_WristIKCtrl2\") -c 0 0 0 -nr 0 1 0 -sw 180 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\trotate -r 0 0 -90 ($modCore + \"_WristIKCtrl2\");\n\t\tcircle -n ($modCore + \"_WristIKCtrl3\") -c 0 0 0 -nr 0 1 0 -sw 90 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\trotate -r 90 0 0 ($modCore + \"_WristIKCtrl3\");\n\t\tcurve -n ($modCore + \"_WristIKCtrl4\") -d 1 -p 0 0 1 -p 0 0 -1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename \t($modCore + \"_WristIKCtrl4Shape\");\n\t\tcurve -n ($modCore + \"_WristIKCtrl5\") -d 1 -p 0 1 0 -p 0 0 0 -p -1 0 0 -k 0 -k 1 -k 2 ;\n\t\tpickWalk -d down;\n\t\trename \t($modCore + \"_WristIKCtrl5Shape\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_WristIKCtrl2\") ($modCore + \"_WristIKCtrl3\") ($modCore + \"_WristIKCtrl4\") ($modCore + \"_WristIKCtrl5\");\n\t\tparent -r -s  ($modCore + \"_WristIKCtrl2Shape\") ($modCore + \"_WristIKCtrl3Shape\") ($modCore + \"_WristIKCtrl4Shape\") ($modCore + \"_WristIKCtrl5Shape\") ($modCore + \"_WristIKCtrl\");\n\t\tdelete ($modCore + \"_WristIKCtrl2\") ($modCore + \"_WristIKCtrl3\") ($modCore + \"_WristIKCtrl4\") ($modCore + \"_WristIKCtrl5\");\n\t\tif ($crntSide == \"left\")\n\t\t{\n\t\t\trotate -r -ws 0 180 0 ($modCore + \"_WristIKCtrl\");\n\t\t}\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_WristIKCtrl\"); \n\t\t\n\t\t//SCALE CONTROL\n\t\tspaceLocator -n ($modCore + \"_armLengthAimLctr\");\n\t\tspaceLocator -n ($modCore + \"_armLengthTargetLctr\");\n\t\tparent ($modCore + \"_armLengthTargetLctr\") ($modCore + \"_armLengthAimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_armLengthAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_armLengthAimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_armLengthTargetLctr\");\n\t\t$armLength = `getAttr ($modCore + \"_armLengthTargetLctr.tx\")`;\n\t\tscale -r ($armLength/4) ($armLength/4) ($armLength/4) ($modCore + \"_WristIKCtrl\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_WristIKCtrl\");\n\t\tdelete -ch ($modCore + \"_WristIKCtrl\");\n\t\tdelete ($modCore + \"_armLengthAimLctr\");\n\t\t\n\t\tgroup -n ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_WristIKCtrl\"); xform -os -piv 0 0 0;\n\t\tdelete `parentConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristIKCtrlGrp\")`;\n\t\t\n\t\n\t\t//ELBOW IK CONTROL\n\t\tcurve -n ($modCore + \"_ElbowIKCtrl\") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0\n\t\t-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0\n\t\t-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0\t\n\t\t-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9\n\t\t-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22\n\t\t-k 23 -k 24 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ElbowIKCtrlShape\");\n\t\t\n\t\tmove -r 0 0 0.95 ($modCore + \"_ElbowIKCtrl.cv[12]\")  ($modCore + \"_ElbowIKCtrl.cv[0]\") ($modCore + \"_ElbowIKCtrl.cv[24]\") ($modCore + \"_ElbowIKCtrl.cv[18]\") ($modCore + \"_ElbowIKCtrl.cv[6]\") ;\n\t\tmove -r 0 0 -0.65 ($modCore + \"_ElbowIKCtrl.cv[3]\") ($modCore + \"_ElbowIKCtrl.cv[9]\") ($modCore + \"_ElbowIKCtrl.cv[15]\") ($modCore + \"_ElbowIKCtrl.cv[21]\") ;\n\t\tgroup -n ($modCore + \"_ElbowIKCtrlGrp\") ($modCore + \"_ElbowIKCtrl\");\n\t\t\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_ElbowIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_ElbowIKCtrl.scale\"), ($ArmLength / 14), ($ArmLength / 14), ($ArmLength / 14));\n\t\t\tsetAttr ($modCore + \"_ElbowIKCtrl.tz\") ($ArmLength * -2);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_ElbowIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_ElbowIKCtrl.scale\"), ($ArmLength / 14), ($ArmLength / 14), ($ArmLength / 14));\n\t\t\tsetAttr ($modCore + \"_ElbowIKCtrl.tz\") ($ArmLength * -2);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\t\n\t\t//LOWER ARM CONTROL\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tcurve -n ($modCore + \"_LowerArmIKCtrl\") -d 1 -p -1 0 4 -p -4 0 4 -p -3 0 5 -p -2 0 6 -p -1 0 7 -p 0 0 8 -p 1 0 7 -p 2 0 6 -p 3 0 5 -p 4 0 4 -p 1 0 4 -p 1 0 3 -p 1 0 2 -p 1 0 1 -p 1 0 0 -p 1 0 -1 -p 1 0 -2 -p 1 0 -3 -p 1 0 -4 -p 4 0 -4 -p 3 0 -5 -p 2 0 -6 -p 1 0 -7 -p 0 0 -8 -p -1 0 -7 -p -2 0 -6 -p -3 0 -5 -p -4 0 -4 -p -1 0 -4 -p -1 0 -3 -p -1 0 -2 -p -1 0 -1 -p -1 0 0 -p -1 0 1 -p -1 0 2 -p -1 0 3 -p -1 0 4 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_LowerArmIKCtrlShape\");\n\t\t\tnonLinear -type bend -lowBound -1 -highBound 1 -curvature 0.6;\n\t\t\t$bend = `ls -sl`;\n\t\t\trename $bend ($modCore + \"_LowerArmIKCBend\");\n\t\t\trotate -a -os -90 0 -90 ($modCore + \"_LowerArmIKCBend\");\n\t\n\t\t\tdelete -ch ($modCore + \"_LowerArmIKCtrl\");\n\t\t\trotate 0 0 90 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tsetAttr (($modCore + \"_LowerArmIKCtrl.scale\"), ($ArmLength/14), ($ArmLength/14), ($ArmLength/14));\n\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\n\t\t\tgroup -n ($modCore + \"_LowerArmIKCtrlGrp\") ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tgroup -n ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_LowerArmIKCtrlGrp\");\n\t\t\tparent ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_ScaleGrp\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCtrlGrp.rotateOrder\") 1;\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCtrlGrp2.rotateOrder\") 1;\n\t\n\t\t\tspaceLocator -n ($modCore + \"_lowerArmIKLctr\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_lowerArmIKLctr\")`;\n\t\t\tparent ($modCore + \"_lowerArmIKLctr\") ($modCore + \"_ShoulderFKCtrl\");\n\t\t\tsetAttr ($modCore + \"_lowerArmIKLctr.v\") 0;\n\t\t\t\n\t\t\tdelete `pointConstraint ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKCtrlGrp2\")`;\n\t\t\t//ALIGN GROUP\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * -1) 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow2\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_LowerArmIKCtrlGrp2\")`;\n\t\t\t//AIM CONSTRAIN GROUP WITH OFFSET\n\t\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * -1) 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_WristIKCtrl\")\n\t\t\t($modCore + \"_lowerArmIKLctr\") ($modCore + \"_LowerArmIKCtrlGrp2\");\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * -1) 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow2\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_LowerArmIKCtrlGrp\")`;\n\t\t\tpointConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKCtrlGrp2\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_LowerArmIKCtrl\")`;\n\t\t\t$WristPos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Wrist\")`;\n\t\t\tmove -a $WristPos[0] $WristPos[1] $WristPos[2] ($modCore + \"_LowerArmIKCtrl.scalePivot\") ($modCore + \"_LowerArmIKCtrl.rotatePivot\") ;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\t\n\t\t\t//ADD ORIENTATION ATTRIBUTE FOR LOWER LEGrp IKCtrl ORIENTATION\n\t\t\tspaceLocator -n ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\");\n\t\t\tdelete `parentConstraint ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\");\n\t\t\t\n\t\t\torientConstraint -mo ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\") ($modCore + \"_LowerArmIKCtrlGrp\");\n\t\t\tparent ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\") ($modCore + \"_WristIKCtrl\");\n\t\t\t\n\t\t\taddAttr -ln \"autoOrient\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerArmIKCtrl.autoOrient\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerArmIKCtrl.autoOrient\") ($modCore + \"_LowerArmIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerArmIKCtrlGrp2W0\");\n\t\t\t\n\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_LowerArmIKCtrl_Reverse\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerArmIKCtrl.autoOrient\") ($modCore + \"_LowerArmIKCtrl_Reverse.inputX\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerArmIKCtrl_Reverse.outputX\") ($modCore + \"_LowerArmIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerArmIKCtrlGrp2_LctrOffsetW1\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset.v\") 0;\n\t\t\t\n\t\t\tspaceLocator -n ($modCore + \"_LowerElbowIKOffsetLctr\");\n\t\t\tdelete `pointConstraint ($modCore + \"_Elbow2Jnt\") ($modCore + \"_LowerElbowIKOffsetLctr\")`;\n\t\t\t\n\t\t}\n\t\n\t\t//ELBOW AIM LOCATORS\n\t\tspaceLocator -n ($modCore + \"_ElbowIKCtrl_TargetLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKCtrl_ShoulderLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKCtrl_WristLctr\");\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_ElbowIKCtrl_ShoulderLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ElbowIKCtrl_ShoulderLctr\");\n\t\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_ElbowIKCtrl_WristLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_WristIKCtrl\")  ($modCore + \"_ElbowIKCtrl_WristLctr\");\n\t\t\n\t\tparent ($modCore + \"_ElbowIKCtrl_ShoulderLctr\") ($modCore + \"_ElbowIKCtrl_WristLctr\") ($modCore + \"_ScaleGrp\");\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl_ShoulderLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl_WristLctr.v\") 0;\n\t\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\t\n\t\t\tdelete `pointConstraint ($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKCtrl_TargetLctr\")`;\n\t\t\tpointConstraint -mo ($modCore + \"_ElbowIKCtrl_ShoulderLctr\") ($modCore + \"_ElbowIKCtrl_WristLctr\") ($modCore + \"_ElbowIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_ElbowIKCtrl_TargetLctr\") ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_ElbowIKCtrl_ShoulderLctr\") ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ElbowIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_ElbowIKCtrl_TargetLctr\") ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\n\t\n\t\t//IK SCALE\n\t\t\n\t\t//CREATE DUMMY WRIST JOINT\n\t\tselect ($modCore + \"_WristJntIK\");\n\t\tduplicate -n ($modCore + \"_WristJntIKDummy\");\n\t\tparent -w;\n\t\tgroup -n ($modCore + \"_WristJntIKDummyGrp1\");\n\t\tgroup -n ($modCore + \"_WristJntIKDummyGrp2\");\n\t\t\n\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_WristJntIKDummyGrp2.scalePivot\") ($modCore + \"_WristJntIKDummyGrp2.rotatePivot\") ;\n\t\tpointConstraint ($modCore + \"_WristJntIK\") ($modCore + \"_WristJntIKDummyGrp1\");\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristJntIKDummy\");\n\t\tsetAttr ($modCore + \"_WristJntIKDummy_parentConstraint1.interpType\") 2;\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowJntIK\") ($modCore + \"_WristJntIKDummyGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2JntIK\") ($modCore + \"_WristJntIKDummyGrp2\");\n\t\t}\n\t\t\n\t\t//NODES\n\t\tspaceLocator -n ($modCore + \"_ArmLengthOriginLctr\");\n\t\tpointConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_ArmLengthEndLctr\");\n\t\tparent ($modCore + \"_ArmLengthEndLctr\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_WristIKCtrl\") ($modCore + \"_ArmLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_WristIKCtrl\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_LowerArmIKCLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCLctr.v\") 0;\n\t\t\tdelete `parentConstraint ($modCore + \"_Elbow2Jnt\") ($modCore + \"_LowerArmIKCLctr\")`;\n\t\t\tparent  ($modCore + \"_LowerArmIKCLctr\") ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tpointConstraint ($modCore + \"_LowerArmIKCLctr\") ($modCore + \"_ArmLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\t}\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ArmLength_MD\");\n\t\tsetAttr ($modCore + \"_ArmLength_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_ArmLengthEndLctr.translateX\") ($modCore + \"_ArmLength_MD.input1X\");\n\t\tsetAttr ($modCore + \"_ArmLength_MD.input2X\") ($ArmLength*2);\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_ArmLength_Condition\");\n\t\tconnectAttr -f ($modCore + \"_ArmLength_MD.outputX\") ($modCore + \"_ArmLength_Condition.firstTerm\");\n\t\tsetAttr ($modCore + \"_ArmLength_Condition.secondTerm\") 1;\n\t\tsetAttr ($modCore + \"_ArmLength_Condition.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_ArmLength_MD.outputX\") ($modCore + \"_ArmLength_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ArmLength_Blnd\");\n\t\tconnectAttr -f ($modCore + \"_ArmLength_Condition.outColorR\") ($modCore + \"_ArmLength_Blnd.color1R\");\n\t\tsetAttr ($modCore + \"_ArmLength_Blnd.color2\") -type double3 1 0 1 ;\n\t\t\n\t\t//ADD STRETCH TO IK WRIST CONTROL\n\t\taddAttr -ln \"stretch\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\n\t\t//ARM IK LOCK\n\t\t\n\t\t//ARM IK LOCK LOCATORS\n\t\tspaceLocator -n ($modCore + \"_ShoulderIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_WristIKLockLctr\");\n\t\tparent ($modCore + \"_ElbowIKLockLctr\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\tparent ($modCore + \"_WristIKLockLctr\") ($modCore + \"_ElbowIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKLockLctr\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_WristIKCtrl\") ($modCore + \"_ElbowIKLockLctr\");\n\t\t\tpointConstraint ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristIKLockLctr\");\n\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowIKLockLctr.translateX\") ($modCore + \"_ShoulderLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.input2X\") $elbowLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_elbowLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_WristIKLockLctr.translateX\") ($modCore + \"_elbowLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.input2X\") $WristLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderLockLength_MD.outputX\") ($modCore + \"_ShoulderLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_ShoulderLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_elbowLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_elbowLockLength_MD.outputX\") ($modCore + \"_elbowLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_elbowLock_Blnd.color2R\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_LowerArmIKCtrl\") ($modCore + \"_LowerElbowIKOffsetLctr\");\n\t\t\t\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ElbowIKLockLctr\");\n\t\t\tpointConstraint ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_WristIKLockLctr\");\n\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowIKLockLctr.translateX\") ($modCore + \"_ShoulderLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.input2X\") $elbow1Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_elbowLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_WristIKLockLctr.translateX\") ($modCore + \"_elbowLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.input2X\") $elbow2Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderLockLength_MD.outputX\") ($modCore + \"_ShoulderLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_ShoulderLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_elbowLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_elbowLockLength_MD.outputX\") ($modCore + \"_elbowLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_elbowLock_Blnd.color2R\");\n\t\t\t\n\t\t\t//AUTO STRETCH ON LOWER ARM IK CONTROL\n\t\t\taddAttr -ln \"lowerScale\" -at double -min 0.01 -dv 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerArmIKCtrl.lowerScale\");\n\t\t\t\n\t\t\t//GET ARM LENGTH\n\t\t\t\n\t\t\t$elbow1Length2 = `getAttr ($modCore + \"_Elbow1Jnt.tx\")`;\n\t\t\t$elbow2Length2 = `getAttr ($modCore + \"_Elbow2Jnt.tx\")`;\n\t\t\t$WristLength2 = `getAttr ($modCore + \"_WristJDummy.tx\")`;\n\t\t\t$FullArmLength = ($elbow1Length2 + $elbow2Length2 + $WristLength2);\n\t\t\t\n\t\t\t//ARM LENGTH LOCATORS\n\t\t\tspaceLocator -n ($modCore + \"_FullArmLengthAimLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_FullArmLengthEndLctr\");\n\t\t\tparent ($modCore + \"_FullArmLengthEndLctr\") ($modCore + \"_FullArmLengthAimLctr\");\n\t\t\tparent ($modCore + \"_FullArmLengthAimLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\tpointConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_FullArmLengthAimLctr\");\n\t\t\tpointConstraint ($modCore + \"_WristIKCtrl\")   ($modCore + \"_FullArmLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_WristIKCtrl\") ($modCore + \"_FullArmLengthAimLctr\");\n\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullArmLength_MD\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_MD.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLengthEndLctr.translateX\") ($modCore + \"_FullArmLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_MD.input2X\") $FullArmLength;\n\t\t\t\n\t\t\tshadingNode -asUtility condition -n ($modCore + \"_FullArmLength_Condition\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_MD.outputX\") ($modCore + \"_FullArmLength_Condition.firstTerm\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_Condition.secondTerm\") 1;\n\t\t\tsetAttr ($modCore + \"_FullArmLength_Condition.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_MD.outputX\") ($modCore + \"_FullArmLength_Condition.colorIfTrueR\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_FullArmLength_Blnd\");\n\t\t\tconnectAttr -force ($modCore + \"_WristIKCtrl.stretch\") ($modCore + \"_FullArmLength_Blnd.blender\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_Condition.outColorR\") ($modCore + \"_FullArmLength_Blnd.color1R\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_Blnd.color2R\") 1;\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_FullArmLengthAimLctr.v\") 0;\n\n\t\t\t\n\t\t\t//MULTIPLY STRETCH WITH LOWER SCALE\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullArmLength2_MD\");\n\t\t\tconnectAttr -force ($modCore + \"_LowerArmIKCtrl.lowerScale\") ($modCore + \"_FullArmLength2_MD.input1X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_Blnd.outputR\") ($modCore + \"_FullArmLength2_MD.input2X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength2_MD.outputX\") ($modCore + \"_LowerArmIKCtrl.scaleX\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength2_MD.outputX\") ($modCore + \"_Elbow2JntIK.scaleX\");\n\t\t}\n\t\t\n\t\n\t\t//ADD STRETCH TO IK WRIST CONTROL\n\t\tsetAttr -e-k true ($modCore + \"_WristIKCtrl.stretch\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.stretch\") ($modCore + \"_ArmLength_Blnd.blender\");\n\t\t\n\t\t//ADD ELBOW LOCK TO IK WRIST CONTROL\n\t\taddAttr -ln \"elbowLock\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_WristIKCtrl.elbowLock\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.elbowLock\") ($modCore + \"_ShoulderLock_Blnd.blender\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.elbowLock\") ($modCore + \"_elbowLock_Blnd.blender\");\n\t\t\n\t\t//ADD ARM SCALE\n\t\taddAttr -ln \"armScale\"  -at double  -min 0.01 -dv 1 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_WristIKCtrl.armScale\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_ShoulderLock_Blnd.outputR\") ($modCore + \"_ShoulderScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_WristIKCtrl.armScale\") ($modCore + \"_ShoulderScale_MD.input2X\");\n\t\tconnectAttr -force ($modCore + \"_ShoulderScale_MD.outputX\") ($modCore + \"_ShoulderJntIK.scaleX\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ElbowScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_elbowLock_Blnd.outputR\") ($modCore + \"_ElbowScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_WristIKCtrl.armScale\") ($modCore + \"_ElbowScale_MD.input2X\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_ElbowScale_MD.outputX\") ($modCore + \"_ElbowJntIK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_ElbowScale_MD.outputX\") ($modCore + \"_Elbow1JntIK.scaleX\");\n\t\t}\n\t\t\n\t\n\t\t//////////////////////////////////HAND IKFK SWITCH CONTROL///////////////////////////////////////////\n\t\tcurve -n ($modCore + \"_SwitchCtrl\") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2\n\t\t-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2\n\t\t-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10\n\t\t-k 11 -k 12 -k 13 -k 14 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_SwitchCtrlShape\");\n\t\tpickWalk -d up;\n\t\t\n\t\tmove -r -os -wd 0 0 -8 ($modCore + \"_SwitchCtrl\");\n\t\tgroup -n ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_SwitchCtrl\"); xform -os -piv 0 0 0;\n\t\tscale -r 0.2 0.2 0.2 ($modCore + \"_SwitchCtrlGrp\");\n\t\tmakeIdentity -apply true -t 0 -r 1 -s 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tdelete `pointConstraint ($modCore + \"_WristJnt\") ($modCore + \"_SwitchCtrlGrp\")`;\n\t\tparent ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_WristIKCtrlGrp\");\n\t\tmakeIdentity -apply false -r 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tparent -w ($modCore + \"_SwitchCtrlGrp\");\n\t\t\n\t\tsetAttr (($modCore + \"_SwitchCtrlGrp.scale\"), ($ArmLength / 3.5), ($ArmLength / 3.5), ($ArmLength / 3.5));\n\t\t\n\t\taddAttr -ln \"switchIkFk\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.switchIkFk\");\n\t\taddAttr -ln \"autoVolume\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.autoVolume\");\n\t\tsetAttr ($modCore + \"_SwitchCtrl.autoVolume\") 1;\n\t\t\n\t\txform -cp ($modCore + \"_SwitchCtrl\");\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_WristJnt\") ($modCore + \"_SwitchCtrlGrp\");\n\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_SwitchCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \t\n\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t\n\t\t////////////////////////////////////SIDE////////////////////////////////////\n\t\t//ARM\n\t\tparentConstraint -mo ($modCore + \"_ScaleGrp\") ($modCore + \"_ClavicleCtrlGrp\");\n\t\t\n\t\t//FK\n\t\tparentConstraint -mo ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ClavicleJnt\");\n\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z\n\t\t($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ClavicleCtrl\") ($modName + \"_MAINCtrl\") ($modCore + \"_ShoulderFKCtrlGrp2\");\n\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//SHOULDER ORIENT\n\t\taddAttr -ln \"shoulderOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_ShoulderFKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_ShoulderFKCtrl.shoulderOrient\");\n\t\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") 0;\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") 1;\n\t\t\n\t\t//CHEST & CLAVICLE INFLUENCE\n\t\taddAttr -ln \"clavicleInfluence\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderFK_Inf_MD\");\n\t\tconnectAttr -force ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") ($modCore + \"_ShoulderFK_Inf_MD.input1Y\");\n\t\tsetAttr ($modCore + \"_ShoulderFK_Inf_MD.input1X\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") ($modCore + \"_ShoulderFK_Inf_MD.input1X\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") 1;\n\t\tsetAttr ($modCore + \"_ShoulderFK_Inf_MD.input1X\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") ($modCore + \"_ShoulderFK_Inf_MD.input1X\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") 0;\n\t\t\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFK_Inf_MD.input2X\");\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFK_Inf_MD.input2Y\");\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFK_Inf_MD.outputX\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFK_Inf_MD.outputY\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modCore + \"_ClavicleCtrlW1\");\n\t\t\n\t\tselectKey -k -f 0 -f 1 ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1_\" + $modName + \"_MAINCtrlW2\") ;\n\t\tselectKey -add -k -f 0 -f 1 ($modCore + \"_ShoulderFK_Inf_MD_input1X\") ;\n\t\tkeyTangent -itt spline -ott spline ;\n\n\t\tparentConstraint -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJntFK\");\n\t\tpointConstraint  -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJnt\");\n\t\tpointConstraint  -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJntIK\");\n\t\n\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_ShoulderJntFK.scaleX\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ElbowJntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_WristFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_ElbowFKCtrl.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow1JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_Elbow2JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_WristFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow1FKCtrl.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow2FKCtrl.scaleX\");\n\t\t}\t\t\n\t\t\t\n\t\tparentConstraint -mo ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJntFK\");\n\t\tsetAttr ($modCore + \"_WristJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//CONNECT SCALE TO FK CONTROLS\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_ElbowJntFK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow1JntFK.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow2JntFK.scaleX\");\n\t\t}\n\t\n\t\t//select pCube1;\n\t\t//IK\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\t\n\t\t\tselect ($modCore + \"_ShoulderJntIK.rotatePivot\") ($modCore + \"_WristJntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_ArmIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_ArmIKHandle\") ($modCore + \"_WristIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect ($modCore + \"_Elbow2JntIK.rotatePivot\") ($modCore + \"_WristJntIK.rotatePivot\");\n\t\t\tikHandle -n ($modCore + \"_LowerArmIKHandle\") -sol ikSCsolver;\n\t\t\tparentConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKHandle\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKHandle.v\") 0;\n\t\n\t\t\tselect ($modCore + \"_ShoulderJntIK.rotatePivot\") ($modCore + \"_Elbow2JntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_ArmIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_ArmIKHandle\") ($modCore + \"_LowerArmIKCtrl\");\n\t\t\t\n\t\t}\n\t\tpoleVectorConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ArmIKHandle\") ;\n\t\t//select pCube1;\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristJntIK\");\n\t\tsetAttr ($modCore + \"_WristJntIK_parentConstraint1.interpType\") 2;\n\t\n\t\t//CHECK POLE VECTOR\n\t\tif (`objExists ($modCore + \"_Elbow1Jnt\")`)\n\t\t{\n\t\t\t$lSelectionOrient = `getAttr ($modCore + \"_ShoulderJntIK.rotate\")`;\n\t\t\tif ($lSelectionOrient[0] > 90 || $lSelectionOrient[0] < -90 || $lSelectionOrient[2] > 90 || $lSelectionOrient[2] < -90)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_ArmIKHandle.twist\") 180;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\n\t\t//CONNECT IK AND FK JOINTS TO ORIGINALS\n\t\t//SHOULDER\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderJntIKFK_BlndScale\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntFK.scale\") ($modCore + \"_ShoulderJntIKFK_BlndScale.color1\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIK.scale\") ($modCore + \"_ShoulderJntIKFK_BlndScale.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ShoulderJntIKFK_BlndScale.blender\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderVolume_MD\");\n\t\tsetAttr ($modCore + \"_ShoulderVolume_MD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_ShoulderVolume_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_BlndScale.outputR\") ($modCore + \"_ShoulderVolume_MD.input2X\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderJntIKFK_AutoBlnd\");\n\t\tsetAttr ($modCore + \"_ShoulderJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\tconnectAttr -f ($modCore + \"_ShoulderVolume_MD.outputX\") ($modCore + \"_ShoulderJntIKFK_AutoBlnd.color1R\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ShoulderJnt.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ShoulderJnt.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_ShoulderJntIKFK_AutoBlnd.blender\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n  ($modCore + \"_ShoulderJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntFK.rotate\") ($modCore + \"_ShoulderJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIK.rotate\") ($modCore + \"_ShoulderJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ShoulderJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_BlndScale.outputR\") ($modCore + \"_ShoulderJnt.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_BlndRotate.output\") ($modCore + \"_ShoulderJnt.rotate\");\n\t\t\n\t\t\n\t\t//ELBOW\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ElbowJntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntFK.scale\") ($modCore + \"_ElbowJntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIK.scale\") ($modCore + \"_ElbowJntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ElbowJntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ElbowVolume_MD\");\n\t\t\tsetAttr ($modCore + \"_ElbowVolume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_ElbowVolume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_BlndScale.outputR\") ($modCore + \"_ElbowVolume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ElbowJntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_ElbowJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowVolume_MD.outputX\") ($modCore + \"_ElbowJntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ElbowJnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ElbowJnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_ElbowJntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ElbowJntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntFK.rotate\") ($modCore + \"_ElbowJntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIK.rotate\") ($modCore + \"_ElbowJntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ElbowJntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_BlndScale.outputR\") ($modCore + \"_ElbowJnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_BlndRotate.output\") ($modCore + \"_ElbowJnt.rotate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow1JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntFK.scale\") ($modCore + \"_Elbow1JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIK.scale\") ($modCore + \"_Elbow1JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow1JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Elbow1Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Elbow1Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Elbow1Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow1Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow1JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Elbow1JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1Volume_MD.outputX\") ($modCore + \"_Elbow1JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow1Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow1Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Elbow1JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow1JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntFK.rotate\") ($modCore + \"_Elbow1JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIK.rotate\") ($modCore + \"_Elbow1JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow1JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow1Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_BlndRotate.output\") ($modCore + \"_Elbow1Jnt.rotate\");\n\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow2JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntFK.scale\") ($modCore + \"_Elbow2JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIK.scale\") ($modCore + \"_Elbow2JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow2JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Elbow2Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Elbow2Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Elbow2Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow2Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow2JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Elbow2JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2Volume_MD.outputX\") ($modCore + \"_Elbow2JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow2Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow2Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Elbow2JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow2JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntFK.rotate\") ($modCore + \"_Elbow2JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIK.rotate\") ($modCore + \"_Elbow2JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow2JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow2Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_BlndRotate.output\") ($modCore + \"_Elbow2Jnt.rotate\");\n\t\t}\n\t\n\t\t//WRIST\n\t\torientConstraint -mo ($modCore + \"_WristJntFK\") ($modCore + \"_WristJntIKDummy\") ($modCore + \"_WristJntGrp1\");\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.interpType\") 2;\n\t\tsetAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 0;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\") 0;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\") 0;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\");\n\t\tsetAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 1;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\") 1;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\");\n\t\t\n\t\t//scaleConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristJnt\");\n\t\t//selectKey -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") ;\n\t\t//selectKey -add -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") ;\n\t\t//keyTangent -itt spline -ott spline ;\n\t\t//setAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 0;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") 0;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 1;\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\");\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\t//setAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 1;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") 1;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\");\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\t\n\t\t//selectKey -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") ;\n\t\t//selectKey -add -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") ;\n\t\t//keyTangent -itt spline -ott spline ;\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_WristJntIKFK_BlndScale\");\n\t\tconnectAttr -f ($modCore + \"_WristJntFK.scale\") ($modCore + \"_WristJntIKFK_BlndScale.color1\");\n\t\tconnectAttr -f ($modCore + \"_WristJntIK.scale\") ($modCore + \"_WristJntIKFK_BlndScale.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntIKFK_BlndScale.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_WristJntIKFK_BlndScale.output\") ($modCore + \"_WristJnt.scale\");\n\t\t\n\n\t\t//ELBOWIKCtrl FOLLOW\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_WristIKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\taddAttr -ln \"follow\"  -at \"enum\" -en \"Main:Wrist:Shoulder:Wrist and Shoulder:\" ($modCore + \"_ElbowIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_ElbowIKCtrl.follow\");\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 1;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 2;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\") 1;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 3;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 1;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 0;\n\t\t\n\t\t\n\t\t//CONNECTOR LINE\n\t\tcurve -n ($modCore + \"_ElbowIKConnectorCtrl\") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ElbowIKConnectorCtrlShape\");\n\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKConnectorCtrl\") `;\n\t\tparent ($modCore + \"_ElbowIKConnectorCtrl\") ($modCore + \"_ElbowIKCtrl\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKTargetConnectorLctr\");\n\t\tparent ($modCore + \"_ElbowIKTargetConnectorLctr\") ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKAimConnectorLctr\")`;\n\t\tparent ($modCore + \"_ElbowIKAimConnectorLctr\") ($modCore + \"_ElbowIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKConnectorCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint  ($modCore + \"_Elbow1Jnt\") ($modCore + \"_ElbowIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Elbow1Jnt\") ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Elbow1Jnt\") ($modCore + \"_ElbowIKConnectorCtrl\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_ElbowIKTargetConnectorLctr.tz\") ($modCore + \"_ElbowIKConnectorCtrl.sz\");\n\t\tsetAttr ($modCore + \"_ElbowIKAimConnectorLctr.v\") 0;\n\t\t\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_ElbowIKConnectorCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_ElbowIKConnectorCtrl.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_ElbowIKConnectorCtrl.nonControl\");\n\t\t\n\t\t//VISIBILITY TOGGLES////////////////////////////////////////////////////////////////////\n\t\t\n\t\n\t\t//ARM\n\t\tshadingNode -asUtility condition -n ($modCore + \"_ArmIKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ArmIKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_ArmIKViz.secondTerm\") 0.7;\n\t\tsetAttr ($modCore + \"_ArmIKViz.operation\") 3;\n\t\t\t\n\t\tconnectAttr -f ($modCore + \"_ArmIKViz.outColorR\") ($modCore + \"_ElbowIKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_ArmIKViz.outColorR\") ($modCore + \"_WristIKCtrl.v\");\n\t\tif (`objExists ($modCore + \"_LowerArmIKCtrl\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ArmIKViz.outColorR\") ($modCore + \"_LowerArmIKCtrl.v\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_LowerArmIKCtrl.v\");\n\t\t}\n\t\tshadingNode -asUtility condition -n ($modCore + \"_ArmFKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ArmFKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_ArmFKViz.secondTerm\") 0.3;\n\t\tsetAttr ($modCore + \"_ArmFKViz.operation\") 5;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_ElbowFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_Elbow1FKCtrl.v\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_Elbow2FKCtrl.v\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_WristFKCtrl.v\");\n\t\t\n\t\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\t\n\t\t//JOINTS\n\t\tsetAttr ($modCore + \"_ShoulderJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_ShoulderJntFK.v\") 0;\n\t\tsetAttr ($modCore + \"_WristJntFK.v\") 0;\n\t\n\t\n\t\tsetAttr ($modCore + \"_ArmLengthOriginLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_WristJntIKDummyGrp2.v\") 0;\n\t\tsetAttr ($modCore + \"_WristJntFKGrp2.v\") 0;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_ElbowJntFKGrp2.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Elbow1JntFKGrp2.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Elbow2JntFKGrp2.v\") 0;\n\t\t}\n\t\t\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl_TargetLctr.v\") 0;\n\t\t\n\t\t//CONTROLS\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ShoulderFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ShoulderFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ShoulderFKCtrl.v\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.v\");\n\t\t\t\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.v\");\n\t\t\t\n\t\t\t\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.v\");\n\t\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_LowerArmIKCtrl\");\n\t\t}\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristIKCtrl.v\");\n\t\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.v\");\n\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.v\");\n\t\tsetAttr ($modCore + \"_ElbowIKConnectorCtrl.template\") 1;\n\t\t\n\t\tsetAttr ($modCore + \"_ArmIKHandle.v\") 0;\n\t\t\n\t\t\n\t\t//LOCK GROUPS\n\t\t\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\tselect -cl;\n\t\t//WRIST FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_WristFKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_WristFKLctr\")`;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_WristFKLctr\");\n\t\tparent ($modCore + \"_WristFKLctr\") ($modCore + \"_WristIKCtrlGrp\");\n\t\tparentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristFKLctr\");\n\t\t\n\t\t//WRIST IK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_WristIKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_WristIKLctr\")`;\n\t\tparent ($modCore + \"_WristIKLctr\") ($modCore + \"_WristFKCtrlGrp\");\n\t\torientConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristIKLctr\");\n\t\tsetAttr ($modCore + \"_WristIKLctr_orientConstraint1.interpType\") 2;\n\t\t\n\t\t//ELBOW FK LOCATOR\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Elbow_FKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_Elbow_FKAimLctr\")`;\n\t\t\tparent ($modCore + \"_Elbow_FKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Elbow_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow_FKAimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Elbow1_FKAimLctr\") ($modCore + \"_Elbow1FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_Elbow1_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Elbow1_FKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\t\n\t\t\tspaceLocator -n ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Elbow2_FKAimLctr\") ($modCore + \"_Elbow2FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_Elbow2_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Elbow2_FKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t}\t\t\n\t\t\n\t\t//SHOULDER FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_ShoulderFKOrientLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_ShoulderJnt\") ($modCore + \"_ShoulderFKOrientLctr\")`;\n\t\tparent ($modCore + \"_ShoulderFKOrientLctr\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\torientConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderFKOrientLctr\");\n\t\t\n\t\t//HIDE SNAP LOCATORS\n\t\tsetAttr ($modCore + \"_ShoulderFKOrientLctr.v\") 0;\n\t\tif (`objExists ($modCore + \"_Elbow_FKAimLctr.v\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Elbow_FKAimLctr.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Elbow1_FKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Elbow2_FKAimLctr.v\") 0;\n\t\t}\t\t\n\t\tsetAttr ($modCore + \"_WristIKLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_WristFKLctr.v\") 0;\n\t\t\n\t\tsetAttr ($modCore + \"_ShoulderIKLockLctr.v\") 0;\n\t\t\n\t\t\n\t\t//PARENT TO MAIN CONTROL\n\t\t\n\t\t//SET ALL CONSTRAINTS TO SHORTEST INTERPOLATION\n\t\tselect ;\n\t\t\n\t\tstring $selectedParentConstraints[] = `ls ($modCore + \"*_parentConstraint1\")`;\n\t\tfor ($crntParentConstraint in $selectedParentConstraints)\n\t\t{setAttr ($crntParentConstraint + \".interpType\") 2;}\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\t\n\t\tif (`objExists ($modCore + \"_Shoulder_CurveJnt\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_LowerTwist75Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwist25Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwistHalfLctr_parentConstraint1.interpType\") 2;\n\t\t}\n\t\t\n\t\t//HIERARCHY CLEAN-UP\n\t\tparent ($modCore + \"_ClavicleCtrlGrp\") ($modCore + \"_ClavicleJnt\")\n\t\t($modCore + \"_WristJntFKGrp2\") ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_ElbowIKCtrlGrp\")\n\t\t($modCore + \"_ElbowIKCtrl_TargetLctr\") ($modCore + \"_WristJntIKDummyGrp2\")\n\t\t($modCore + \"_ArmLengthOriginLctr\") ($modCore + \"_ShoulderIKLockLctr\")\n\t\t($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp2\")\n\t\t($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_WristJntGrp2\")\n\t\t($modCore + \"_WristJntFK\")\n\t\t($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparent ($modCore + \"_LowerArmIKHandle\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\n\t\t//CREATE CONSTRAINT FOR WRIST IKCtrlGrp\n\t\t//CHECK IF ATTACHED TO ROOT\n\t\tif ($modAttachNode == \"ROOT\")\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modCore + \"_WristIKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_WristIKCtrlGrp\");\n\t\t}\n\n\t\t//ADD DYNAMICtrl PARENTING CHANNELS\n\t\taddAttr -ln \"follow\" -at double  -min 1 -max 1 -dv 1 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e -keyable true ($modCore + \"_WristIKCtrl.follow\");\n\t\tsetAttr -lock true ($modCore + \"_WristIKCtrl.follow\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\taddAttr -ln \"parent\" -at double -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_WristIKCtrl.parent\");\n\t\t}\n\t\taddAttr -ln \"ROOT\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_WristIKCtrl.ROOT\");\n\n\t\taddAttr -ln \"ROOTType\" -at \"enum\" -en \"ROOTC:ROOTsecondaryC:\" ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_WristIKCtrl.ROOTType\");\n\n\n\t\t//IK WRIST DYNAMICtrl CONSTRAINTS\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.parent\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW3\");\n\t\t}\n\t\t\n\t\t//ROOT CONNECTIONS\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_WristIKROOTInf_MD\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOT\") ($modCore + \"_WristIKROOTInf_MD.input1X\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOT\") ($modCore + \"_WristIKROOTInf_MD.input1Y\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOTType\") ($modCore + \"_WristIKROOTInf_MD.input2Y\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_WristIKROOTInf_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOTType\") ($modCore + \"_WristIKROOTInf_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_WristIKROOTInf_Reverse.outputX\") ($modCore + \"_WristIKROOTInf_MD.input2X\");\n\n\t\tconnectAttr -f ($modCore + \"_WristIKROOTInf_MD.outputX\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -f ($modCore + \"_WristIKROOTInf_MD.outputY\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTSecondaryCtrlW2\");\n\t\t\n\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + \"_WristIKParent_PMA\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.parent\") ($modCore + \"_WristIKParent_PMA.input1D[0]\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOT\") ($modCore + \"_WristIKParent_PMA.input1D[1]\");\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_WristIKParent_Condition\");\n\t\tsetAttr ($modCore + \"_WristIKParent_Condition.operation\") 4;\n\t\tsetAttr ($modCore + \"_WristIKParent_Condition.secondTerm\") 1;\n\t\tconnectAttr -f ($modCore + \"_WristIKParent_PMA.output1D\") ($modCore + \"_WristIKParent_Condition.firstTerm\");\n\t\tconnectAttr -force ($modCore + \"_WristIKParent_PMA.output1D\") ($modCore + \"_WristIKParent_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_WristIKParent_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_WristIKParent_Condition.outColorR\") ($modCore + \"_WristIKParent_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_WristIKParent_Reverse.outputX\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\t\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\t\n\t\t//SINGLE ELBOW\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\t//WRIST IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_WristIKtoFKLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_WristIKtoFKLctr\")`;\n\t\t\tparent ($modCore + \"_WristIKtoFKLctr\") ($modCore + \"_WristIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_WristIKtoFKLctr\");\n\t\t\tparentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristIKtoFKLctr\");\n\t\t\t\n\t\t\t//WRIST FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_WristFKtoIKLctr\");\n\t\t\tsetAttr ($modCore + \"_WristFKtoIKLctr.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_WristFKtoIKLctr\")`;\n\t\t\tparent ($modCore + \"_WristFKtoIKLctr\") ($modCore + \"_WristFKCtrlGrp\");\n\t\t\torientConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristFKtoIKLctr\");\n\t\t\tsetAttr ($modCore + \"_WristFKtoIKLctr_orientConstraint1.interpType\") 2;\n\t\t\t\n\t\t\t//ELBOW IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_ElbowIKtoFKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKtoFKAimLctr\")`;\n\t\t\tparent ($modCore + \"_ElbowIKtoFKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKtoFKAimLctr\");\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ElbowIKtoFKAimLctr\");\n\t\t\t\n\t\t\t//SHOULDER FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_ShoulderFKtoIKOrientLctr\");\n\t\t\tsetAttr ($modCore + \"_ShoulderFKtoIKOrientLctr.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_ShoulderJnt\") ($modCore + \"_ShoulderFKtoIKOrientLctr\")`;\n\t\t\tparent ($modCore + \"_ShoulderFKtoIKOrientLctr\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\torientConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderFKtoIKOrientLctr\");\n\t\t\t\n\t\t\t//TURN OFF VISIBILITY\n\t\t\tsetAttr ($modCore + \"_WristIKtoFKLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_WristFKtoIKLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_ElbowIKtoFKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_ShoulderFKtoIKOrientLctr.v\") 0;\n\t\t}\n\t\t\n\t\t//ELBOW HIERARCHY CLEANUP////////////////////////////////////////////////////////\n\t\tif (`objExists ($modCore + \"_ElbowJntFKGrp2\")`)\n\t\t{\n\t\t\tparent ($modCore + \"_ElbowJntFKGrp2\")  ($modCore + \"_ElbowFKCtrlGrp\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_Elbow1FKCtrlGrp\") ($modCore + \"_Elbow2FKCtrlGrp\")\n\t\t\t($modCore + \"_Elbow1JntFKGrp2\") ($modCore + \"_Elbow2JntFKGrp2\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\t\n\t\tselect $topNode;\n\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Lower1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Middle1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Upper1\")`)\n\t\t{\n\t\t\tRRM_ToonLimbs(\"arm\", $prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, $modAttachNode, $topNode);\n\t\t}\n\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tstring $crntModControl;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"arm\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t}\n\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t\t$inverseFront = 1;\n\t\n\t\tif (!`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\t$i = 2;\n\t\t}\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE LEG MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_GenerateRigLeg(string $moduleName, string $topNode)\n{\n\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\t$core = `getAttr ($topNode + \".core\")`;\n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 1;\n\t\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\tint $inverseFront = 0;\n\t$i = 2;\n\tif (!`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$mirrorInt = 2;\n\t}\n\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\n\twhile ($mirrorInt <=2)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"leg\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\n\t\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t//UPPER ROLL JOINTS\n\t\tint $sizeUpperCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$UpperCJnt = `ls ($modCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperCJnt = `size $UpperCJnt`;\n\t\t}\n\t\taddAttr -ln \"upperRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.upperRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.upperRoll\") $sizeUpperCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.upperRoll\");\n\t\t\n\t\tint $sizeLowerCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$LowerCJnt = `ls ($modCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeLowerCJnt = `size $LowerCJnt`;\n\t\t}\n\t\taddAttr -ln \"lowerRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.lowerRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.lowerRoll\") $sizeLowerCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.lowerRoll\");\n\t\n\t\taddAttr -ln \"kneeNum\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.kneeNum\") ;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.kneeNum\") \"1\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.kneeNum\") \"2\";\n\t\t}\t\t\n\t\tsetAttr -l true ($modCore + \"Grp.kneeNum\");\n\t\t\n\t\n\t\tint $sizeMiddleCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$MiddleCJnt = `ls ($modCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCJnt = `size $MiddleCJnt`;\n\t\t}\n\t\taddAttr -ln \"midRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.midRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.midRoll\") $sizeMiddleCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.midRoll\");\n\t\t\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\")  ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\n\t\t//HIP FK CONTROL\n\t\tcircle -n ($modCore + \"_HipFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tdelete -ch ($modCore + \"_HipFKCtrl\");\n\t\tgroup -n ($modCore + \"_HipFKCtrlGrp\") ($modCore + \"_HipFKCtrl\");\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp.rotateOrder\") 1;\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_HipFKCtrlGrp\")`;\n\t\tfloat $upVector = 1;\n\t\tfloat $kneeLocCheck;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\t$kneeLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Knee.translateZ\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$kneeLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Knee1.translateZ\")`;\n\t\t}\n\t\tif ($kneeLocCheck < -0.0001)\n\t\t{\n\t\t\t$upVector = -1;\n\t\t}\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_HipFKCtrlGrp\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_HipFKCtrlGrp\")`;\n\t\t}\n\t\t\n\t\tfloat $lLegLength;\n\t\tfloat $lKneeLength[];\n\t\tfloat $lKnee1Length[];\n\t\tfloat $lKnee2Length[];\n\t\tfloat $lAnkleLength[];\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lKneeLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lAnkleLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t$lLegLength = (($lKneeLength[0] + $lAnkleLength[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lKnee1Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lKnee2Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t$lKneeLength[0] = ($lKnee1Length[0] + $lKnee2Length[0]);\n\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lAnkleLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\n\t\t\t$lLegLength = (($lKnee1Length[0] + $lKnee2Length[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_HipFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_HipFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_HipFKCtrl\");\n\t\t\n\t\tsetAttr (($modCore + \"_HipFKCtrl.scale\"), ($lLegLength/2), ($lLegLength/2), ($lLegLength/2));\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_HipFKCtrlGrp\");\n\t\t\t\n\t\t//KNEE FK CONTROL\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_KneeFKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_KneeFKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_KneeFKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_KneeFKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_KneeFKCtrlGrp\")`;\n\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_KneeFKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_KneeFKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_Knee1FKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee1FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_Knee1FKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_Knee1FKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\t\n\t\t\tduplicate -n ($modCore + \"_Knee2FKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee2FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_Knee2FKCtrlGrp\")`;\n\t\t\trotate -r -os 0 0 -90 ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t}\n\t\t\n\t\t\n\t\t//ANKLE FK CONTROL\n\t\tduplicate -n ($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_AnkleFKCtrlGrp\")`;\n\t\tdelete `orientConstraint -offset 0 0 -90 (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_AnkleFKCtrlGrp\")`;\n\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_AnkleFKCtrlGrp\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_AnkleFKCtrlGrp\");\n\t\tselect ($modCore + \"_AnkleFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_AnkleFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_AnkleFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_AnkleFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_AnkleFKCtrl\");\n\t\n\t\t//BALL CONTROL LOCATORS\n\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_HeelPivot\") ($modCore + \"_StartLctr\")`;\n\t\tdelete `pointConstraint -skip x -skip z (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_StartLctr\")`;\n\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t(\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_StartLctr\")`;\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_EndLctr\")`;\n\t\t$lFootLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\tdelete ($modCore + \"_StartLctr\");\n\t\n\t\t//BALL FK CONTROL\n\t\tcircle -n ($modCore + \"_BallFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmove -r 0 0 0.5 ($modCore + \"_BallFKCtrl.cv[0:7]\");\n\t\n\t\tdelete -ch ($modCore + \"_BallFKCtrl\");\n\t\tgroup -n ($modCore + \"_BallFKCtrlGrp\") ($modCore + \"_BallFKCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_BallFKCtrlGrp.rotateOrder\") 1;\n\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ball\") ($modCore + \"_BallFKCtrlGrp\")`;\n\t\tdelete `orientConstraint -offset 0 -90 -90 (\"RRM_\" + $prfx + $core + \"_Ball\") ($modCore + \"_BallFKCtrlGrp\")`;\n\t\tscale -r ($lFootLength[0]/5) ($lFootLength[0]/5) ($lFootLength[0]/4) ($modCore + \"_BallFKCtrlGrp\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_BallFKCtrlGrp\");\n\t\tselect ($modCore + \"_BallFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_BallFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_BallFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_BallFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_BallFKCtrl\");\n\t\t\n\t\t//TOE FK CONTROL\n\t\tcircle -n ($modCore + \"_ToeFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmove -r 0 0 0.5 ($modCore + \"_ToeFKCtrl.cv[0:7]\");\n\t\n\t\tdelete -ch ($modCore + \"_ToeFKCtrl\");\n\t\tgroup -n ($modCore + \"_ToeFKCtrlGrp\") ($modCore + \"_ToeFKCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_ToeFKCtrlGrp.rotateOrder\") 1;\n\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_ToeFKCtrlGrp\")`;\n\t\tdelete `orientConstraint -offset 0 -90 -90 (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_ToeFKCtrlGrp\")`;\n\t\tscale -r ($lFootLength[0]/5) ($lFootLength[0]/5) ($lFootLength[0]/4) ($modCore + \"_ToeFKCtrlGrp\");\n\t\tselect ($modCore + \"_ToeFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ToeFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_ToeFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_ToeFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_ToeFKCtrl\");\n\t\t\n\t\t//////////////////////JOINTS//////////////////////\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_HipJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJnt\")`;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_KneeJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_KneeFKCtrl\") ($modCore + \"_KneeJnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_AnkleJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJnt\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_HipJnt\")\n\t\t\t($modCore + \"_KneeJnt\") ($modCore + \"_AnkleJnt\");\n\t\t\t\n\t\t\tparent ($modCore + \"_KneeJnt\")  ($modCore + \"_HipJnt\");\n\t\t\tparent ($modCore + \"_AnkleJnt\") ($modCore + \"_KneeJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Knee1Jnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee1Jnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Knee2Jnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_Knee2Jnt\")`;\n\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_AnkleJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJnt\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1  ($modCore + \"_HipJnt\")\n\t\t\t($modCore + \"_Knee1Jnt\") ($modCore + \"_Knee2Jnt\") ($modCore + \"_AnkleJnt\");\n\t\n\t\t\tparent ($modCore + \"_Knee1Jnt\")  ($modCore + \"_HipJnt\");\n\t\t\tparent ($modCore + \"_Knee2Jnt\") ($modCore + \"_Knee1Jnt\"); \n\t\t\tparent ($modCore + \"_AnkleJnt\") ($modCore + \"_Knee2Jnt\");\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_BallJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_BallFKCtrl\") ($modCore + \"_BallJnt\")`;\t\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_ToeJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_ToeFKCtrl\") ($modCore + \"_ToeJnt\")`;\n\t\t\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_BallJnt\") ($modCore + \"_ToeJnt\");\n\t\t\n\t\tparent ($modCore + \"_BallJnt\") ($modCore + \"_AnkleJnt\");\n\t\tparent ($modCore + \"_ToeJnt\") ($modCore + \"_BallJnt\");\n\t\n\t\t//KNEE ORIENTATION\n\t\tif (`objExists ($modCore + \"_KneeJnt\")`)\n\t\t{\n\t\t\tif ($kneeLocCheck < -0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_KneeJnt.preferredAngleY\") -60;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_KneeJnt.preferredAngleY\") 60;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($kneeLocCheck < -0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Knee1Jnt.preferredAngleY\") -30;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Knee1Jnt.preferredAngleY\") 30;\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t////////////////////IK/FK JOINTS////////////////////////////////////\t\n\t\t//LEGrp FK\n\t\tduplicate -n ($modCore + \"_HipJntFK\") ($modCore + \"_HipJnt\");\n\t\tselect ($modCore + \"_HipJntFK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_KneeJntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntFK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Knee1JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee2JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntFK\");\n\t\t}\n\t\tselect ($modCore + \"_AnkleJntFK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_BallJntFK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ToeJntFK\");\n\t\t\n\t\t//LEGrp IK\n\t\tduplicate -n ($modCore + \"_HipJntIK\") ($modCore + \"_HipJnt\");\n\t\tselect ($modCore + \"_HipJntIK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_KneeJntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntIK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Knee1JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee2JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntIK\");\n\t\t}\t\n\t\tselect ($modCore + \"_AnkleJntIK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_BallJntIK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ToeJntIK\");\n\t\t\n\t\t//DETACH FK LEGrp JOINTS FOR SCALE COMPENSATION\n\t\n\t\tparent -w ($modCore + \"_AnkleJntFK\");\n\t\tgroup -n ($modCore + \"_AnkleJntFKGrp1\") ($modCore + \"_AnkleJntFK\");\n\t\tgroup -n ($modCore + \"_AnkleJntFKGrp2\") ($modCore + \"_AnkleJntFKGrp1\");\n\t\t$lAnkleLocation = `xform -q -ws -t ($modCore + \"_AnkleJnt\")`;\n\t\tmove $lAnkleLocation[0] $lAnkleLocation[1] $lAnkleLocation[2] ($modCore + \"_AnkleJntFKGrp1.scalePivot\") ($modCore + \"_AnkleJntFKGrp1.rotatePivot\") ;\n\t\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_KneeJntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2JntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\t}\n\t\t\t\n\t\t$lKneeLocation = `xform -q -ws -t ($modCore + \"_HipJnt\")`;\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\t$lKneeLocation = `xform -q -ws -t ($modCore + \"_KneeJnt\")`;\n\t\t\tmove $lKneeLocation[0] $lKneeLocation[1] $lKneeLocation[2] ($modCore + \"_AnkleJntFKGrp2.scalePivot\") ($modCore + \"_AnkleJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_KneeJntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\t\n\t\t\tparent -w ($modCore + \"_KneeJntFK\");\n\t\t\tgroup -n ($modCore + \"_KneeJntFKGrp1\") ($modCore + \"_KneeJntFK\");\n\t\t\tgroup -n ($modCore + \"_KneeJntFKGrp2\") ($modCore + \"_KneeJntFKGrp1\");\n\t\t\t$lHipLocation = `xform -q -ws -t ($modCore + \"_HipJnt\")`;\n\t\t\tmove $lKneeLocation[0] $lKneeLocation[1] $lKneeLocation[2] ($modCore + \"_KneeJntFKGrp1.scalePivot\") ($modCore + \"_KneeJntFKGrp1.rotatePivot\") ;\n\t\t\tmove $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($modCore + \"_KneeJntFKGrp2.scalePivot\") ($modCore + \"_KneeJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_KneeFKCtrl\") ($modCore + \"_KneeJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_HipJntFK\") ($modCore + \"_KneeJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$lKnee2Location = `xform -q -ws -t ($modCore + \"_Knee2Jnt\")`;\n\t\t\tmove $lKnee2Location[0] $lKnee2Location[1] $lKnee2Location[2] ($modCore + \"_AnkleJntFKGrp2.scalePivot\") ($modCore + \"_AnkleJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2JntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\n\t\t\tparent -w ($modCore + \"_Knee1JntFK\") ($modCore + \"_Knee2JntFK\");\n\t\t\t\n\t\t\tgroup -n ($modCore + \"_Knee1JntFKGrp1\") ($modCore + \"_Knee1JntFK\");\n\t\t\tgroup -n ($modCore + \"_Knee1JntFKGrp2\") ($modCore + \"_Knee1JntFKGrp1\");\n\t\t\t$lHipLocation = `xform -q -ws -t ($modCore + \"_HipJnt\")`;\n\t\t\t$lKnee1Location = `xform -q -ws -t ($modCore + \"_Knee1Jnt\")`;\n\t\t\t$lKnee2Location = `xform -q -ws -t ($modCore + \"_Knee2Jnt\")`;\n\t\t\tmove $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($modCore + \"_Knee1JntFKGrp1.scalePivot\") ($modCore + \"_Knee1JntFKGrp1.rotatePivot\") ;\n\t\t\tmove $lKnee1Location[0] $lKnee1Location[1] $lKnee1Location[2] ($modCore + \"_Knee1JntFKGrp2.scalePivot\") ($modCore + \"_Knee1JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee1JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_HipJntFK\") ($modCore + \"_Knee1JntFKGrp2\");\n\t\n\t\t\tgroup -n ($modCore + \"_Knee2JntFKGrp1\") ($modCore + \"_Knee2JntFK\");\n\t\t\tgroup -n ($modCore + \"_Knee2JntFKGrp2\") ($modCore + \"_Knee2JntFKGrp1\");\n\t\t\tmove $lKnee1Location[0] $lKnee1Location[1] $lKnee1Location[2] ($modCore + \"_Knee2JntFKGrp1.scalePivot\") ($modCore + \"_Knee2JntFKGrp1.rotatePivot\") ;\n\t\t\tmove $lKnee2Location[0] $lKnee2Location[1] $lKnee2Location[2] ($modCore + \"_Knee2JntFKGrp2.scalePivot\") ($modCore + \"_Knee2JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_Knee2JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1JntFK\") ($modCore + \"_Knee2JntFKGrp2\");\n\t\t}\n\t\t\n\t\t//CONSTRAIN HIP JOINTS TO ATTACH NODE\n\t\tpointConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJnt\");\n\t\tpointConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJntFK\");\n\t\tpointConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJntIK\");\n\t\t//select pCube1;\n\t\n\t\t//FOOT IK CONTROL\n\t\tcircle -n ($modCore + \"_FootIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 2.5 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1;\n\t\n\t\tscale -r 0.4 1 1 ($modCore + \"_FootIKCtrl.cv[13]\") ($modCore + \"_FootIKCtrl.cv[5]\");\n\t\tscale -r 0.6 1 1 ($modCore + \"_FootIKCtrl.cv[14]\") ($modCore + \"_FootIKCtrl.cv[4]\");\n\t\tscale -r 0.78 1 1 ($modCore + \"_FootIKCtrl.cv[3]\") ($modCore + \"_FootIKCtrl.cv[15]\"); \n\t\tscale -r 0.78 1 1 ($modCore + \"_FootIKCtrl.cv[12]\") ($modCore + \"_FootIKCtrl.cv[6]\");\n\t\tscale -r 0.89 1 1 ($modCore + \"_FootIKCtrl.cv[7]\") ($modCore + \"_FootIKCtrl.cv[11]\");\n\t\tmove -r -os -wd 0 0.565 0 ($modCore + \"_FootIKCtrl.cv[5]\") ($modCore + \"_FootIKCtrl.cv[13]\");\n\t\tmove -r -os -wd 0 0.1 0 ($modCore + \"_FootIKCtrl.cv[4]\") ($modCore + \"_FootIKCtrl.cv[14]\") ($modCore + \"_FootIKCtrl.cv[6]\") ($modCore + \"_FootIKCtrl.cv[12]\");\n\t\tmove -r 0 0 1.5 ($modCore + \"_FootIKCtrl.cv[0:15]\");\n\t\tscale -r ($lFootLength[0]/4.2) ($lFootLength[0]/4.2) ($lFootLength[0]/3.4) ($modCore + \"_FootIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_FootIKCtrl\");\n\t\tdelete -ch ($modCore + \"_FootIKCtrl\");\n\t\tgroup -n ($modCore + \"_FootIKCtrlGrp\") ($modCore + \"_FootIKCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_FootIKCtrl.rotateOrder\") 1;\n\t\t\n\t\t//TOE IK CONTROL\n\t\tcircle -n ($modCore + \"_ToeIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\t\tdelete -ch;\n\t\tmove -r ($multiplier * -0.251) 1.330 2.207($modCore + \"_ToeIKCtrl.cv[1]\") ;\n\t\tmove -r 0.254 1.085 1.162($modCore + \"_ToeIKCtrl.cv[0]\") ;\n\t\tmove -r 0.051 0.451 -0.205 ($modCore + \"_ToeIKCtrl.cv[7]\") ;\n\t\tmove -r 0.188 0.259 -0.109 ($modCore + \"_ToeIKCtrl.cv[6]\") ;\n\t\tmove -r -0.277 0.154 0.308 ($modCore + \"_ToeIKCtrl.cv[5]\") ;\n\t\tmove -r -0.395 0.259 -0.033 ($modCore + \"_ToeIKCtrl.cv[4]\") ;\n\t\tmove -r 0.003 0.474 -0.205 ($modCore + \"_ToeIKCtrl.cv[3]\") ;\n\t\tmove -r -0.369 1.190 1.331 ($modCore + \"_ToeIKCtrl.cv[2]\") ;\n\t\tmove -r -os -wd 0 0 0.9 ($modCore + \"_ToeIKCtrl.cv[0:7]\") ;\n\t\tscale -r -p 0cm 0cm 0cm $multiplier 1 1 ($modCore + \"_ToeIKCtrl.cv[0:7]\");\n\t\t\n\t\tmove -r -.001 0 1.85 ($modCore + \"_ToeIKCtrl\");\n\t\tscale -r ($lFootLength[0]/4) ($lFootLength[0]/4) ($lFootLength[0]/4.4) ($modCore + \"_ToeIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ToeIKCtrl\");\n\t\tgroup -n ($modCore + \"_ToeIKCtrlGrp\") ($modCore + \"_ToeIKCtrl\");\n\t\tparent ($modCore + \"_ToeIKCtrlGrp\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t\n\t\t//HEEL IK CONTROL\n\t\tcircle -n ($modCore + \"_HeelIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\t\tdelete -ch;\n\t\tmove -r -0.25107 1.330277 2.206782 ($modCore + \"_HeelIKCtrl.cv[1]\") ;\n\t\tmove -r 0.254402 1.084741 1.162191 ($modCore + \"_HeelIKCtrl.cv[0]\") ;\n\t\tmove -r 0.0513063 0.450871 -0.204969 ($modCore + \"_HeelIKCtrl.cv[7]\") ;\n\t\tmove -r 0.187803 0.259426 -0.108661 ($modCore + \"_HeelIKCtrl.cv[6]\") ;\n\t\tmove -r -0.276837 0.154413 0.307813 ($modCore + \"_HeelIKCtrl.cv[5]\") ;\n\t\tmove -r -0.395115 0.259426 -0.0326967 ($modCore + \"_HeelIKCtrl.cv[4]\") ;\n\t\tmove -r 0.00260226 0.47359 -0.204969 ($modCore + \"_HeelIKCtrl.cv[3]\") ;\n\t\tmove -r -0.369241 1.189888 1.331089 ($modCore + \"_HeelIKCtrl.cv[2]\") ;\n\t\tmove -r -os -wd 0 0 0.8 ($modCore + \"_HeelIKCtrl.cv[0:7]\") ;\n\t\tscale -r -p 0cm 0cm 0cm $multiplier 1 -1 ($modCore + \"_HeelIKCtrl.cv[0:7]\");\n\t\tscale -r ($lFootLength[0]/3.7) ($lFootLength[0]/3.7) ($lFootLength[0]/5.5) ($modCore + \"_HeelIKCtrl\");\n\t\tmove -r -.001 0 1.85 ($modCore + \"_HeelIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_HeelIKCtrl\");\n\t\tgroup -n ($modCore + \"_HeelIKCtrlGrp\") ($modCore + \"_HeelIKCtrl\");\n\t\tparent ($modCore + \"_HeelIKCtrlGrp\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Ground\") ($modCore + \"_FootIKCtrlGrp\")`;\n\t\t$lAnklePosition = `xform -ws -q -rp ($modCore + \"_AnkleJnt\")`;\n\t\t$lBallLocation = `xform  -q -t ($modCore + \"_BallJnt\")`;\n\t\t$lToeLocation = `xform -q -t ($modCore + \"_ToeJnt\")`;\n\t\tmakeIdentity -apply true -t 0 -s 1 ($modCore + \"_FootIKCtrlGrp\");\n\t\t\n\t\t\n\t\t//MOVE TOE CTRL PIVOT\n\t\t$limbJointLoc = `xform -ws -q -t ($modCore + \"_ToeJnt\")`;\n\t\t$heelLoc = `xform -ws -q -rp (\"RRM_\" + $prfx + $core + \"_HeelPivot\")`;\n\t\tdelete `pointConstraint ($modCore + \"_ToeJnt\") ($modCore + \"_ToeIKCtrl\")`;\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_HeelPivot\") ($modCore + \"_HeelIKCtrl\")`;\n\t\tmove $heelLoc[0]  $heelLoc[1] $heelLoc[2] ($modCore + \"_HeelIKCtrlGrp.scalePivot\") ($modCore + \"_HeelIKCtrlGrp.rotatePivot\") ;\n\t\tmove $limbJointLoc[0]  $limbJointLoc[1] $limbJointLoc[2] ($modCore + \"_ToeIKCtrlGrp.scalePivot\") ($modCore + \"_ToeIKCtrlGrp.rotatePivot\") ;\n\t\tmove $lAnklePosition[0] $lAnklePosition[1] $lAnklePosition[2] ($modCore + \"_FootIKCtrl.scalePivot\") ($modCore + \"_FootIKCtrl.rotatePivot\") ;\n\t\n\t\t\n\t\t//FOOT IK LOCATORS\n\t\tspaceLocator -n ($modCore + \"_FootBallPivotLctr\");\n\t\tdelete `pointConstraint ($modCore + \"_BallJnt\") ($modCore + \"_FootBallPivotLctr\")`;\n\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t($modCore + \"_ToeJnt\") ($modCore + \"_FootBallPivotLctr\")`;\n\t\t\n\t\tduplicate -rr -n ($modCore + \"_FootToePivotLctr\") ($modCore + \"_FootBallPivotLctr\");\n\t\t\n\t\tduplicate -n ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_FootBallPivotLctr\");\n\t\tparent ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_FootBallPivotLctr\");\n\t\n\t\tselect ($modCore + \"_AnkleJntIK.rotatePivot\") ($modCore + \"_BallJntIK.rotatePivot\") ; \n\t\tikHandle -n ($modCore + \"_BallIKHandle\") -sol ikSCsolver;\n\t\tparent ($modCore + \"_BallIKHandle\") ($modCore + \"_FootBallPivotLctr2\");\n\t\tselect ($modCore + \"_BallJntIK.rotatePivot\") ($modCore + \"_ToeJntIK.rotatePivot\") ; \n\t\tikHandle -n ($modCore + \"_ToeIKHandle\") -sol ikSCsolver;\n\t\tparent ($modCore + \"_ToeIKHandle\") ($modCore + \"_FootToePivotLctr\");\n\t\n\t\tspaceLocator -n ($modCore + \"_BallSwivelLctr\");\n\t\tdelete `pointConstraint ($modCore + \"_BallJnt\") ($modCore + \"_BallSwivelLctr\")`;\n\t\tparent ($modCore + \"_BallSwivelLctr\") ($modCore + \"_ToeIKCtrl\");\n\t\tmakeIdentity -apply false -r 1 ($modCore + \"_BallSwivelLctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_FootRightTiltLctr\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_FootRightTilt\") ($modCore + \"_FootRightTiltLctr\")`;\n\t\tspaceLocator -n ($modCore + \"_FootLeftTiltLctr\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_FootLeftTilt\") ($modCore + \"_FootLeftTiltLctr\")`;\n\t\t\n\t\tspaceLocator -n ($modCore + \"_HeelLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_HeelIKCtrl\") ($modCore + \"_HeelLctr\")`;\n\t\tparent ($modCore + \"_HeelLctr\") ($modCore + \"_HeelIKCtrl\");\n\t\tsetAttr ($modCore + \"_HeelLctr.v\") 0;\n\t\t\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_HeelPivot\") ($modCore + \"_HeelIKCtrlGrp\")`;\n\t\n\t\tparent ($modCore + \"_HeelIKCtrlGrp\") ($modCore + \"_ToeIKCtrl\");\n\t\tparent ($modCore + \"_BallSwivelLctr\") ($modCore + \"_HeelLctr\");\n\t\tparent ($modCore + \"_FootRightTiltLctr\") ($modCore + \"_BallSwivelLctr\");\n\t\tparent ($modCore + \"_FootLeftTiltLctr\")  ($modCore + \"_FootRightTiltLctr\");\n\t\tparent ($modCore + \"_FootBallPivotLctr\") ($modCore + \"_FootToePivotLctr\") ($modCore + \"_FootLeftTiltLctr\");\n\t\t\n\t\tmakeIdentity -apply true -t 1 -r 0 -s 1 ($modCore + \"_ToeIKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + \"_FootIKCtrl\") ($modCore + \"_ToeIKCtrlGrp\");\n\t\t\n\t\t//select pCube1;\n\t\tsetAttr -l 0 -k 1 ($modCore + \"_HipJntIK.rx\");\n\t\tsetAttr -l 0 -k 1 ($modCore + \"_HipJntIK.ry\");\n\t\tsetAttr -l 0 -k 1 ($modCore + \"_HipJntIK.rz\");\n\t\tif (`objExists ($modCore + \"_KneeJntIK\")`)\n\t\t{\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_KneeJntIK.rx\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_KneeJntIK.ry\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_KneeJntIK.rz\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee1JntIK.rx\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee1JntIK.ry\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee1JntIK.rz\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee2JntIK.rx\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee2JntIK.ry\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee2JntIK.rz\");\n\t\t}\n\t\n\t\t//KNEE IK CONTROL\n\t\tcurve -n ($modCore + \"_KneeIKCtrl\") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0\n\t\t-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0\n\t\t-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0\t\n\t\t-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9\n\t\t-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22\n\t\t-k 23 -k 24 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_KneeIKCtrlShape\");\n\t\t\n\t\tmove -r 0 0 0.95 ($modCore + \"_KneeIKCtrl.cv[12]\")  ($modCore + \"_KneeIKCtrl.cv[0]\") ($modCore + \"_KneeIKCtrl.cv[24]\") ($modCore + \"_KneeIKCtrl.cv[18]\") ($modCore + \"_KneeIKCtrl.cv[6]\") ;\n\t\tmove -r 0 0 -0.65 ($modCore + \"_KneeIKCtrl.cv[3]\") ($modCore + \"_KneeIKCtrl.cv[9]\") ($modCore + \"_KneeIKCtrl.cv[15]\") ($modCore + \"_KneeIKCtrl.cv[21]\") ;\n\t\tgroup -n ($modCore + \"_KneeIKCtrlGrp\") ($modCore + \"_KneeIKCtrl\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_KneeIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_KneeIKCtrl.scale\"), ($lLegLength / 16), ($lLegLength / 16), ($lLegLength / 16));\n\t\t\tsetAttr ($modCore + \"_KneeIKCtrl.tz\") ($lLegLength * 1.8);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_KneeIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_KneeIKCtrl.scale\"), ($lLegLength / 16), ($lLegLength / 16), ($lLegLength / 16));\n\t\t\tsetAttr ($modCore + \"_KneeIKCtrl.tz\") ($lLegLength * 1.8);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\t\n\t\t//LOWER LEGrp CONTROL\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tcurve -n ($modCore + \"_LowerLegIKCtrl\") -d 1 -p -1 0 4 -p -4 0 4 -p -3 0 5 -p -2 0 6 -p -1 0 7 -p 0 0 8 -p 1 0 7 -p 2 0 6 -p 3 0 5 -p 4 0 4 -p 1 0 4 -p 1 0 3 -p 1 0 2 -p 1 0 1 -p 1 0 0 -p 1 0 -1 -p 1 0 -2 -p 1 0 -3 -p 1 0 -4 -p 4 0 -4 -p 3 0 -5 -p 2 0 -6 -p 1 0 -7 -p 0 0 -8 -p -1 0 -7 -p -2 0 -6 -p -3 0 -5 -p -4 0 -4 -p -1 0 -4 -p -1 0 -3 -p -1 0 -2 -p -1 0 -1 -p -1 0 0 -p -1 0 1 -p -1 0 2 -p -1 0 3 -p -1 0 4 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_LowerLegIKCtrlShape\");\n\t\t\tnonLinear -type bend -lowBound -1 -highBound 1 -curvature 0.6;\n\t\t\t$bend = `ls -sl`;\n\t\t\trename $bend ($modCore + \"_LowerLegIKCBend\");\n\t\t\trotate -a -os -90 0 -90 ($modCore + \"_LowerLegIKCBend\");\n\t\n\t\t\tdelete -ch ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tsetAttr (($modCore + \"_LowerLegIKCtrl.scale\"), ($lLegLength/14), ($lLegLength/14), ($lLegLength/14));\n\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\t\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrlGrp\") ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrlGrp2\") ($modCore + \"_LowerLegIKCtrlGrp\");\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrlGrp3\") ($modCore + \"_LowerLegIKCtrlGrp2\");\t\t\t\n\t\t\tparent ($modCore + \"_LowerLegIKCtrlGrp3\") ($modCore + \"_ScaleGrp\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp.rotateOrder\") 1;\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp2.rotateOrder\") 1;\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp3.rotateOrder\") 1;\n\t\n\t\t\tspaceLocator -n ($modCore + \"_lowerLegIKLctr\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_lowerLegIKLctr\")`;\n\t\t\tparent ($modCore + \"_lowerLegIKLctr\") ($modCore + \"_HipFKCtrl\");\n\t\t\tsetAttr ($modCore + \"_lowerLegIKLctr.v\") 0;\n\t\t\t\n\t\n\n\t\t\t\n\t\t\t//MOVE GROUP 3 TO BALL LOCATION AND ORIENT IT SO IT IS AIMING AT LOWER IK CONTROL\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrlGrp3\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee2\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrlGrp3\")`;\n\t\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_LowerLegIKCtrlGrp3\");\n\t\t\t\n\t\t\t//LOCATOR FOR UP AXIS ON LOWER FOOT CONTROL USING ROTATE Y ONLY FORM FOOTIKC\n\t\t\tspaceLocator -n ($modCore + \"_LowerLegIKCtrl_UpLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrl_UpLctr.rotateOrder\") 1;\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\") ($modCore + \"_LowerLegIKCtrl_UpLctr\");\n\t\t\t//delete `orientConstraint -skip x -skip z ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\")`;\n\t\t\tdelete `orientConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\")`;\n\t\t\tpointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\");\n\t\t\tparent ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrl_UpLctrGrp.v\") 0;\n\t\t\torientConstraint -mo -skip x -skip z ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrl_UpLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrl_UpLctr_orientConstraint1.interpType\") 2;\n\t\t\t\n\t\t\taimConstraint -mo -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_LowerLegIKCtrl_UpLctr\")\n\t\t\t($modCore + \"_lowerLegIKLctr\") ($modCore + \"_LowerLegIKCtrlGrp2\");\n\t\t\t//select pCube1;\n\t\t\tspaceLocator -n ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\");\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\")`;\n\t\t\tparent ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\") ($modCore + \"_FootBallPivotLctr\");\n\t\t\t//delete `aimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee2\")\n\t\t\t//(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\")`;\n\t\t\tdelete `orientConstraint ($modCore + \"_LowerLegIKCtrlGrp2\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\");\n\n\t\t\torientConstraint -mo ($modCore + \"_LowerLegIKCtrlGrp2\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\") ($modCore + \"_LowerLegIKCtrlGrp\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrl\")`;\n\t\t\t$AnklePos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Ankle\")`;\n\t\t\tmove -a $AnklePos[0] $AnklePos[1] $AnklePos[2] ($modCore + \"_LowerLegIKCtrl.scalePivot\") ($modCore + \"_LowerLegIKCtrl.rotatePivot\") ;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\t\n\t\t\t//ADD ORIENTATION ATTRIBUTE FOR LOWER LEGrp IKCtrl ORIENTATION\n\t\t\taddAttr -ln \"autoOrient\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerLegIKCtrl.autoOrient\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerLegIKCtrl.autoOrient\") ($modCore + \"_LowerLegIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerLegIKCtrlGrp2W0\");\n\t\t\t\n\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_LowerLegIKCtrl_Reverse\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerLegIKCtrl.autoOrient\") ($modCore + \"_LowerLegIKCtrl_Reverse.inputX\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerLegIKCtrl_Reverse.outputX\") ($modCore + \"_LowerLegIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerLegIKCtrlGrp2_LctrOffsetW1\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset.v\") 0;\n\n\t\t\tspaceLocator -n ($modCore + \"_LowerKneeIKOffsetLctr\");\n\t\t\tdelete `pointConstraint ($modCore + \"_Knee2Jnt\") ($modCore + \"_LowerKneeIKOffsetLctr\")`;\n\t\t\t//*/\n\t\t}\n\n\t\t//select pCube1;\n\t\t\n\t\t//KNEE AIM LOCATORS\n\t\tspaceLocator -n ($modCore + \"_KneeIKCtrl_TargetLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKCtrl_HipLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKCtrl_AnkleLctr\");\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_KneeIKCtrl_HipLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_ScaleGrp\") ($modCore + \"_KneeIKCtrl_HipLctr\");\n\t\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_KneeIKCtrl_AnkleLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\")  ($modCore + \"_KneeIKCtrl_AnkleLctr\");\n\t\t\n\t\tparent ($modCore + \"_KneeIKCtrl_HipLctr\") ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_ScaleGrp\");\n\t\tsetAttr ($modCore + \"_KneeIKCtrl_HipLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrl_AnkleLctr.v\") 0;\n\t\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\t\n\t\t\tdelete `pointConstraint ($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKCtrl_TargetLctr\")`;\n\t\t\tpointConstraint -mo ($modCore + \"_KneeIKCtrl_HipLctr\") ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_KneeIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_KneeIKCtrl_TargetLctr\") ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_KneeIKCtrl_HipLctr\") ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_KneeIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_KneeIKCtrl_TargetLctr\") ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\t\t\n\n\t\t//IK SCALE\n\t\t\n\t\t//NODES\n\t\tspaceLocator -n ($modCore + \"_LegLengthOriginLctr\");\n\t\tpointConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_LegLengthEndLctr\");\n\t\tparent ($modCore + \"_LegLengthEndLctr\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t\n\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LegLengthEndLctr\")`;\n\t\t\tparentConstraint ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_LegLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_LowerLegIKCLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCLctr.v\") 0;\n\t\t\tdelete `parentConstraint ($modCore + \"_Knee2Jnt\") ($modCore + \"_LowerLegIKCLctr\")`;\n\t\t\tparent  ($modCore + \"_LowerLegIKCLctr\") ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tpointConstraint ($modCore + \"_LowerLegIKCLctr\") ($modCore + \"_LegLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t}\n\n\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LegLength_MD\");\n\t\tsetAttr ($modCore + \"_LegLength_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_LegLengthEndLctr.translateX\") ($modCore + \"_LegLength_MD.input1X\");\n\t\tsetAttr ($modCore + \"_LegLength_MD.input2X\") ($lLegLength*2);\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_LegLength_Condition\");\n\t\tconnectAttr -f ($modCore + \"_LegLength_MD.outputX\") ($modCore + \"_LegLength_Condition.firstTerm\");\n\t\tsetAttr ($modCore + \"_LegLength_Condition.secondTerm\") 1;\n\t\tsetAttr ($modCore + \"_LegLength_Condition.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_LegLength_MD.outputX\") ($modCore + \"_LegLength_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_LegLength_Blnd\");\n\t\tconnectAttr -f ($modCore + \"_LegLength_Condition.outColorR\") ($modCore + \"_LegLength_Blnd.color1R\");\n\t\tsetAttr ($modCore + \"_LegLength_Blnd.color2\") -type double3 1 0 1 ;\n\t\t\n\t\t//ADD STRETCH TO IK ANKLE CONTROL\n\t\taddAttr -ln \"stretch\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\n\t\t//LEGrp IK LOCK\n\t\t\n\t\t//LEGrp IK LOCK LOCATORS\n\t\tspaceLocator -n ($modCore + \"_HipIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_AnkleIKLockLctr\");\n\t\tparent ($modCore + \"_KneeIKLockLctr\") ($modCore + \"_HipIKLockLctr\");\n\t\tparent ($modCore + \"_AnkleIKLockLctr\") ($modCore + \"_KneeIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_HipIKLockLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_KneeIKCtrl\") ($modCore + \"_HipIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKLockLctr\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_FootIKCtrl\") ($modCore + \"_KneeIKLockLctr\");\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleIKLockLctr\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_AnkleIKLockLctr\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_KneeIKLockLctr.translateX\") ($modCore + \"_HipLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.input2X\") $lKneeLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_kneeLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_AnkleIKLockLctr.translateX\") ($modCore + \"_kneeLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.input2X\") $lAnkleLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_HipLockLength_MD.outputX\") ($modCore + \"_HipLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_HipLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_kneeLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_kneeLockLength_MD.outputX\") ($modCore + \"_kneeLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_kneeLock_Blnd.color2R\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_HipIKLockLctr\");\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_LowerLegIKCtrl\") ($modCore + \"_LowerKneeIKOffsetLctr\");\n\t\t\t\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_KneeIKLockLctr\");\n\t\t\tpointConstraint ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_AnkleIKLockLctr\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_KneeIKLockLctr.translateX\") ($modCore + \"_HipLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.input2X\") $lKnee1Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_kneeLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_AnkleIKLockLctr.translateX\") ($modCore + \"_kneeLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.input2X\") $lKnee2Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_HipLockLength_MD.outputX\") ($modCore + \"_HipLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_HipLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_kneeLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_kneeLockLength_MD.outputX\") ($modCore + \"_kneeLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_kneeLock_Blnd.color2R\");\n\n\t\t\t//AUTO STRETCH ON LOWER LEGrp IK CONTROL\n\t\t\taddAttr -ln \"lowerScale\" -at double -min 0.01 -dv 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerLegIKCtrl.lowerScale\");\n\t\t\t\n\t\t\t//GET LEGrp LENGTH\n\t\t\t\n\t\t\t$Knee1Length2 = `getAttr ($modCore + \"_Knee1Jnt.tx\")`;\n\t\t\t$Knee2Length2 = `getAttr ($modCore + \"_Knee2Jnt.tx\")`;\n\t\t\t$AnkleLength2 = `getAttr ($modCore + \"_AnkleJnt.tx\")`;\n\t\t\t$FullLegLength = ($Knee1Length2 + $Knee2Length2 + $AnkleLength2);\n\t\t\t\n\t\t\t//LEGrp LENGTH LOCATORS\n\t\t\tspaceLocator -n ($modCore + \"_FullLegLengthAimLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_FullLegLengthEndLctr\");\n\t\t\tparent ($modCore + \"_FullLegLengthEndLctr\") ($modCore + \"_FullLegLengthAimLctr\");\n\t\t\tparent ($modCore + \"_FullLegLengthAimLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\tpointConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_FullLegLengthAimLctr\");\n\t\t\tpointConstraint ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\") ($modCore + \"_FullLegLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_FootIKCtrl\") ($modCore + \"_FullLegLengthAimLctr\");\n\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullLegLength_MD\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_MD.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLengthEndLctr.translateX\") ($modCore + \"_FullLegLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_MD.input2X\") $FullLegLength;\n\t\t\t\n\t\t\tshadingNode -asUtility condition -n ($modCore + \"_FullLegLength_Condition\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_MD.outputX\") ($modCore + \"_FullLegLength_Condition.firstTerm\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_Condition.secondTerm\") 1;\n\t\t\tsetAttr ($modCore + \"_FullLegLength_Condition.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_MD.outputX\") ($modCore + \"_FullLegLength_Condition.colorIfTrueR\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_FullLegLength_Blnd\");\n\t\t\tconnectAttr -force ($modCore + \"_FootIKCtrl.stretch\") ($modCore + \"_FullLegLength_Blnd.blender\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_Condition.outColorR\") ($modCore + \"_FullLegLength_Blnd.color1R\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_Blnd.color2R\") 1;\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_FullLegLengthAimLctr.v\") 0;\n\t\t\t\n\t\t\t//MULTIPLY STRETCH WITH LOWER SCALE\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullLegLength2_MD\");\n\t\t\tconnectAttr -force ($modCore + \"_LowerLegIKCtrl.lowerScale\") ($modCore + \"_FullLegLength2_MD.input1X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_Blnd.outputR\") ($modCore + \"_FullLegLength2_MD.input2X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength2_MD.outputX\") ($modCore + \"_LowerLegIKCtrl.scaleY\");\n\t\t\t\n\t\t\t//CREATE MULTIPLY/DIVIDE TO CONNECT TO THE KNEE2JntIK\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullLegLength2_Inv_MD\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength2_Inv_MD.operation\") 2;\n\t\t\tsetAttr ($modCore + \"_FullLegLength2_Inv_MD.input1X\")  1;\n\t\t\tconnectAttr ($modCore + \"_FullLegLength2_MD.outputX\") ($modCore + \"_Knee2JntIK.scaleX\");\n\t\t\tconnectAttr ($modCore + \"_FullLegLength2_MD.outputX\") ($modCore + \"_FullLegLength2_Inv_MD.input2X\");\n\t\t}\n\t\t\n\t\t//select pCube1;\n\t\t\t\n\t\t//ADD STRETCH TO IK ANKLE CONTROL\n\t\tsetAttr -e-k true ($modCore + \"_FootIKCtrl.stretch\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.stretch\") ($modCore + \"_LegLength_Blnd.blender\");\n\t\t\n\t\t//ADD KNEE LOCK TO IK ANKLE CONTROL\n\t\taddAttr -ln \"kneeLock\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_FootIKCtrl.kneeLock\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.kneeLock\") ($modCore + \"_HipLock_Blnd.blender\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.kneeLock\") ($modCore + \"_kneeLock_Blnd.blender\");\n\t\t\n\t\t//ADD LEGrp SCALE\n\t\taddAttr -ln \"legScale\"  -at double  -min 0.01 -dv 1 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_FootIKCtrl.legScale\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_HipLock_Blnd.outputR\") ($modCore + \"_HipScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_FootIKCtrl.legScale\") ($modCore + \"_HipScale_MD.input2X\");\n\t\tconnectAttr -force ($modCore + \"_HipScale_MD.outputX\") ($modCore + \"_HipJntIK.scaleX\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_KneeScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_kneeLock_Blnd.outputR\") ($modCore + \"_KneeScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_FootIKCtrl.legScale\") ($modCore + \"_KneeScale_MD.input2X\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_KneeScale_MD.outputX\") ($modCore + \"_KneeJntIK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_KneeScale_MD.outputX\") ($modCore + \"_Knee1JntIK.scaleX\");\n\t\t}\n\t\n\t\t\n\t\n\t\t//////////////////////////////////FOOT IKFK SWITCH CONTROL///////////////////////////////////////////\n\t\tcurve -n ($modCore + \"_SwitchCtrl\") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2\n\t\t-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2\n\t\t-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10\n\t\t-k 11 -k 12 -k 13 -k 14 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_SwitchCtrlShape\");\n\t\tpickWalk -d up;\n\t\t\n\t\tmove -r -os -wd 0 0 -8 ($modCore + \"_SwitchCtrl\");\n\t\tgroup -n ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_SwitchCtrl\"); xform -os -piv 0 0 0;\n\t\tscale -r 0.2 0.2 0.2 ($modCore + \"_SwitchCtrlGrp\");\n\t\tmakeIdentity -apply true -t 0 -r 1 -s 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tdelete `pointConstraint ($modCore + \"_AnkleJnt\") ($modCore + \"_SwitchCtrlGrp\")`;\n\t\tparent ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_FootIKCtrlGrp\");\n\t\tmakeIdentity -apply false -r 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tparent -w ($modCore + \"_SwitchCtrlGrp\");\n\t\t\n\t\tsetAttr (($modCore + \"_SwitchCtrlGrp.scale\"), ($lLegLength / 3.5), ($lLegLength / 3.5), ($lLegLength / 3.5));\n\t\t\n\t\taddAttr -ln \"switchIkFk\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.switchIkFk\");\n\t\taddAttr -ln \"autoVolume\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.autoVolume\");\n\t\tsetAttr ($modCore + \"_SwitchCtrl.autoVolume\") 1;\n\t\t\n\t\txform -cp ($modCore + \"_SwitchCtrl\");\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_AnkleJnt\") ($modCore + \"_SwitchCtrlGrp\");\n\t\n\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_SwitchCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//select pCube1;\n\t\t\n\t\t//LEG\n\t\t\n\t\t//FK\n\t\t$lHipLocation = `xform -q -ws -t ($modCore + \"_HipFKCtrlGrp\")`;\n\t\tmove $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($modCore + \"_HipFKCtrlGrp.scalePivot\") ($modCore + \"_HipFKCtrlGrp.rotatePivot\") ;\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z\n\t\t($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_MAINCtrl\") ($modCore + \"_HipFKCtrlGrp\");\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//HIP ORIENT\n\t\taddAttr -ln \"hipOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_HipFKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_HipFKCtrl.hipOrient\");\n\t\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\");\n\t\tsetAttr ($modCore + \"_HipFKCtrl.hipOrient\") 0;\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\") 0;\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\");\n\t\tsetAttr ($modCore + \"_HipFKCtrl.hipOrient\") 1;\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJntFK\");\n\t\n\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_HipJntFK.scaleX\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_HipFKCtrl\") ($modCore + \"_KneeFKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_KneeJntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_AnkleFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_KneeFKCtrl.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee1JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee2FKCtrlGrp\");\n\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_Knee2JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_AnkleFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee1FKCtrl.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee2FKCtrl.scaleX\");\n\t\t}\n\t\t\t\n\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJntFK\");\n\t\tsetAttr ($modCore + \"_AnkleJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_BallFKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + \"_BallFKCtrl\") ($modCore + \"_BallJntFK\");\n\t\tsetAttr ($modCore + \"_BallFKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\tsetAttr ($modCore + \"_BallJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_BallFKCtrl\") ($modCore + \"_ToeFKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + \"_ToeFKCtrl\")  ($modCore + \"_ToeJntFK\");\n\t\tsetAttr ($modCore + \"_ToeFKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\tsetAttr ($modCore + \"_ToeJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//CONNECT SCALE TO FK CONTROLS\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_KneeJntFK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee1JntFK.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee2JntFK.scaleX\");\n\t\t}\n\t\n\t\t//select pCube1;\n\t\t\n\t\t//IK\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tselect ($modCore + \"_HipJntIK.rotatePivot\") ($modCore + \"_AnkleJntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_LegIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_LegIKHandle\") ($modCore + \"_FootBallPivotLctr2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect ($modCore + \"_Knee2JntIK.rotatePivot\") ($modCore + \"_AnkleJntIK.rotatePivot\");\n\t\t\tikHandle -n ($modCore + \"_LowerLegIKHandle\") -sol ikSCsolver;\n\t\t\tparent ($modCore + \"_LowerLegIKHandle\") ($modCore + \"_FootBallPivotLctr2\");\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_LowerLegIKHandle\");\n\t\n\t\t\tselect ($modCore + \"_HipJntIK.rotatePivot\") ($modCore + \"_Knee2JntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_LegIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_LegIKHandle\") ($modCore + \"_LowerLegIKCtrl\");\n\t\t\t\n\t\t}\n\t\t//select pCube1;\n\t\tpoleVectorConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_LegIKHandle\") ;\n\n\t\t//select pCube1;\n\t\t\t\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleJntIK\");\n\t\tsetAttr ($modCore + \"_AnkleJntIK_parentConstraint1.interpType\") 2;\t\n\t\t\n\t\t//CONNECT IK AND FK JOINTS TO ORIGINALS\n\t\t//HIP\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipJntIKFK_BlndScale\");\n\t\tconnectAttr -f ($modCore + \"_HipJntFK.scale\") ($modCore + \"_HipJntIKFK_BlndScale.color1\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIK.scale\") ($modCore + \"_HipJntIKFK_BlndScale.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_HipJntIKFK_BlndScale.blender\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipVolume_MD\");\n\t\tsetAttr ($modCore + \"_HipVolume_MD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_HipVolume_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_BlndScale.outputR\") ($modCore + \"_HipVolume_MD.input2X\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipJntIKFK_AutoBlnd\");\n\t\tsetAttr ($modCore + \"_HipJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\tconnectAttr -f ($modCore + \"_HipVolume_MD.outputX\") ($modCore + \"_HipJntIKFK_AutoBlnd.color1R\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_AutoBlnd.outputR\") ($modCore + \"_HipJnt.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_AutoBlnd.outputR\") ($modCore + \"_HipJnt.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_HipJntIKFK_AutoBlnd.blender\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n  ($modCore + \"_HipJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_HipJntFK.rotate\") ($modCore + \"_HipJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIK.rotate\") ($modCore + \"_HipJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_HipJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_BlndScale.outputR\") ($modCore + \"_HipJnt.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_BlndRotate.output\") ($modCore + \"_HipJnt.rotate\");\n\t\t\n\t\t\n\t\t//KNEE\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_KneeJntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntFK.scale\") ($modCore + \"_KneeJntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIK.scale\") ($modCore + \"_KneeJntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_KneeJntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_KneeVolume_MD\");\n\t\t\tsetAttr ($modCore + \"_KneeVolume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_KneeVolume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_BlndScale.outputR\") ($modCore + \"_KneeVolume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_KneeJntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_KneeJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_KneeVolume_MD.outputX\") ($modCore + \"_KneeJntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_AutoBlnd.outputR\") ($modCore + \"_KneeJnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_AutoBlnd.outputR\") ($modCore + \"_KneeJnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_KneeJntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_KneeJntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntFK.rotate\") ($modCore + \"_KneeJntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIK.rotate\") ($modCore + \"_KneeJntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_KneeJntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_BlndScale.outputR\") ($modCore + \"_KneeJnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_BlndRotate.output\") ($modCore + \"_KneeJnt.rotate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee1JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntFK.scale\") ($modCore + \"_Knee1JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIK.scale\") ($modCore + \"_Knee1JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee1JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Knee1Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Knee1Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Knee1Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee1Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee1JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Knee1JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Knee1Volume_MD.outputX\") ($modCore + \"_Knee1JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee1Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee1Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Knee1JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee1JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntFK.rotate\") ($modCore + \"_Knee1JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIK.rotate\") ($modCore + \"_Knee1JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee1JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee1Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_BlndRotate.output\") ($modCore + \"_Knee1Jnt.rotate\");\n\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee2JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntFK.scale\") ($modCore + \"_Knee2JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIK.scale\") ($modCore + \"_Knee2JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee2JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Knee2Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Knee2Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Knee2Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee2Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee2JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Knee2JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Knee2Volume_MD.outputX\") ($modCore + \"_Knee2JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee2Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee2Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Knee2JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee2JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntFK.rotate\") ($modCore + \"_Knee2JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIK.rotate\") ($modCore + \"_Knee2JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee2JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee2Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_BlndRotate.output\") ($modCore + \"_Knee2Jnt.rotate\");\n\t\t}\t\t\n\t\n\t\t//ANKLE\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_AnkleJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_AnkleJntFK.rotate\") ($modCore + \"_AnkleJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_AnkleJntIK.rotate\") ($modCore + \"_AnkleJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_AnkleJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_AnkleJntIKFK_BlndRotate.output\") ($modCore + \"_AnkleJnt.rotate\");\n\t\t\n\t\t//BALL\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_BallJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_BallJntFK.rotate\") ($modCore + \"_BallJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_BallJntIK.rotate\") ($modCore + \"_BallJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_BallJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_BallJntIKFK_BlndRotate.output\") ($modCore + \"_BallJnt.rotate\");\n\t\t\n\t\t//TOE\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ToeJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_ToeJntFK.rotate\") ($modCore + \"_ToeJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_ToeJntIK.rotate\") ($modCore + \"_ToeJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ToeJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_ToeJntIKFK_BlndRotate.output\") ($modCore + \"_ToeJnt.rotate\");\n\t\t\n\t\t//KNEE IKCtrl FOLLOW\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\taddAttr -ln \"follow\"  -at \"enum\" -en \"Main:Ankle:Hip:Ankle and Hip:\" ($modCore + \"_KneeIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_KneeIKCtrl.follow\");\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 1;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 2;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\") 1;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 3;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 1;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 0;\n\t\t\n\t\t//FOOT\n\t\taddAttr -ln \"footTilt\"  -at double  -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.footTilt\");\n\t\taddAttr -ln \"ballUpDn\"  -at double  -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.ballUpDn\");\n\t\taddAttr -ln \"toeUpDn\"  -at double  -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.toeUpDn\");\n\t\taddAttr -ln \"ballSwivel\"  -at double -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.ballSwivel\");\n\t\taddAttr -ln \"heelBall\"  -at double -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.heelBall\");\n\t\t//SDK TILT\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootRightTiltLctr.rotateZ\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootLeftTiltLctr.rotateZ\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.footTilt\") -10;\n\t\trotate -r 0 0 90 ($modCore + \"_FootRightTiltLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootRightTiltLctr.rotateZ\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.footTilt\") 10;\n\t\trotate -r 0 0 -90 ($modCore + \"_FootLeftTiltLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootLeftTiltLctr.rotateZ\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.footTilt\") 0;\n\t\t//SDK HEEL UP DN\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballUpDn\") ($modCore + \"_FootBallPivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballUpDn\") -10;\n\t\trotate -r -90 0 0 ($modCore + \"_FootBallPivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballUpDn\") ($modCore + \"_FootBallPivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballUpDn\") 10;\n\t\trotate -r 90 0 0 ($modCore + \"_FootBallPivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballUpDn\") ($modCore + \"_FootBallPivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballUpDn\") 0;\n\t\t//SDK TOE UP DN\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.toeUpDn\") ($modCore + \"_FootToePivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.toeUpDn\") -10;\n\t\trotate -r 90 0 0 ($modCore + \"_FootToePivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.toeUpDn\") ($modCore + \"_FootToePivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.toeUpDn\") 10;\n\t\trotate -r -90 0 0 ($modCore + \"_FootToePivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.toeUpDn\") ($modCore + \"_FootToePivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.toeUpDn\") 0;\n\t\t//SDK BALL SWIVEL\t\t\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballSwivel\") ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballSwivel\") -10;\n\t\trotate -r 0 90 0 ($modCore + \"_BallSwivelLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballSwivel\") ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballSwivel\") 10;\n\t\trotate -r 0 -90 0 ($modCore + \"_BallSwivelLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballSwivel\") ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballSwivel\") 0;\n\t\t//SDK HEEL BALL (LEGACY)\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_HeelLctr.rotateX\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_FootBallPivotLctr2.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.heelBall\") -10;\n\t\trotate -r -90 0 0 ($modCore + \"_HeelLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_HeelLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.heelBall\") 10;\n\t\trotate -r 90 0 0 ($modCore + \"_FootBallPivotLctr2\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_FootBallPivotLctr2.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.heelBall\") 0;\n\t\t\n\t\tselectKey -add -k ($modCore + \"_FootRightTiltLctr_rotateZ\") ;\n\t\tselectKey -add -k ($modCore + \"_FootLeftTiltLctr_rotateZ\") ;\n\t\tselectKey -add -k ($modCore + \"_FootToePivotLctr_rotateX\") ;\n\t\tselectKey -add -k ($modCore + \"_FootBallPivotLctr_rotateX\") ;\n\t\tselectKey -add -k ($modCore + \"_FootBallPivotLctr2_rotateX\") ;\n\t\tselectKey -add -k ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tkeyTangent -itt spline -ott spline ;\n\t\n\t\tsetInfinity -pri linear graphEditor1FromOutliner ($modCore + \"_BallSwivelLctr.ry\");\n\t\tsetInfinity -poi linear graphEditor1FromOutliner ($modCore + \"_BallSwivelLctr.ry\");\n\t\t\n\t\n\t\t//CONNECTOR LINE\n\t\tcurve -n ($modCore + \"_KneeIKConnectorCtrl\") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_KneeIKConnectorCtrlShape\");\n\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKConnectorCtrl\") `;\n\t\tparent ($modCore + \"_KneeIKConnectorCtrl\") ($modCore + \"_KneeIKCtrl\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKTargetConnectorLctr\");\n\t\tparent ($modCore + \"_KneeIKTargetConnectorLctr\") ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKAimConnectorLctr\")`;\n\t\tparent ($modCore + \"_KneeIKAimConnectorLctr\") ($modCore + \"_KneeIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKConnectorCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint  ($modCore + \"_Knee1Jnt\") ($modCore + \"_KneeIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Knee1Jnt\") ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Knee1Jnt\") ($modCore + \"_KneeIKConnectorCtrl\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_KneeIKTargetConnectorLctr.tz\") ($modCore + \"_KneeIKConnectorCtrl.sz\");\n\t\tsetAttr ($modCore + \"_KneeIKAimConnectorLctr.v\") 0;\n\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_KneeIKConnectorCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_KneeIKConnectorCtrl.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_KneeIKConnectorCtrl.nonControl\");\n\n\n\t\t//VISIBILITY TOGGLES////////////////////////////////////////////////////////////////////\n\t\t\n\t\n\t\t//LEG\n\t\tshadingNode -asUtility condition -n ($modCore + \"_LegIKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_LegIKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_LegIKViz.secondTerm\") 0.7;\n\t\tsetAttr ($modCore + \"_LegIKViz.operation\") 3;\n\t\t\t\n\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_KneeIKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_FootIKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_ToeIKCtrl.v\");\n\t\tif (`objExists ($modCore + \"_LowerLegIKCtrl\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_LowerLegIKCtrl.v\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_LowerLegIKCtrl.v\");\n\t\t}\n\t\tshadingNode -asUtility condition -n ($modCore + \"_LegFKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_LegFKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_LegFKViz.secondTerm\") 0.3;\n\t\tsetAttr ($modCore + \"_LegFKViz.operation\") 5;\n\t\tsetAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 0;\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_KneeFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_Knee1FKCtrl.v\");\n\t\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_Knee2FKCtrl.v\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_AnkleFKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_BallFKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_ToeFKCtrl.v\");\n\t\t\n\t\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\t\t//MAKE FEET JOINTS VISIBLE\n\t\tsetAttr ($modCore + \"_AnkleJnt.overrideEnabled\") 1;\n\t\n\t\t\n\t\t//JOINTS\n\t\tsetAttr ($modCore + \"_HipJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_HipJntFK.v\") 0;\n\t\tsetAttr ($modCore + \"_AnkleJntFK.v\") 0;\n\t\n\t\n\t\tsetAttr ($modCore + \"_LegLengthOriginLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_AnkleJntFKGrp2.v\") 0;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_KneeJntFKGrp2.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Knee1JntFKGrp2.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Knee2JntFKGrp2.v\") 0;\n\t\t}\n\t\t\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl_TargetLctr.v\") 0;\n\t\t\n\t\t//CONTROLS\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HipFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HipFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HipFKCtrl.v\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.v\");\n\t\t\t\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.v\");\n\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.v\");\n\t\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_LowerLegIKCtrl\");\n\t\t}\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_FootIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_FootIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_FootIKCtrl.v\");\n\t\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.v\");\n\t\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.v\");\n\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.v\");\n\t\tsetAttr ($modCore + \"_KneeIKConnectorCtrl.template\") 1;\n\n\t\tsetAttr ($modCore + \"_LegIKHandle.v\") 0;\n\t\t\n\t\tsetAttr ($modCore + \"_BallSwivelLctr.v\") 0;\t\n\t\t\n\t\t\n\t\t//LOCK GROUPS\n\t\t\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\tselect -cl;\n\t\t//ANKLE FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_AnkleFKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_FootIKCtrlGrp\") ($modCore + \"_AnkleFKLctr\")`;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_AnkleFKLctr\");\n\t\tparent ($modCore + \"_AnkleFKLctr\") ($modCore + \"_FootIKCtrlGrp\");\n\t\tparentConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleFKLctr\");\n\t\t\n\t\t//ANKLE IK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_AnkleIKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_AnkleIKLctr\")`;\n\t\tparent ($modCore + \"_AnkleIKLctr\") ($modCore + \"_AnkleFKCtrlGrp\");\n\t\torientConstraint -mo ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleIKLctr\");\n\t\tsetAttr ($modCore + \"_AnkleIKLctr_orientConstraint1.interpType\") 2;\n\t\t\n\t\t//KNEE FK LOCATOR\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Knee_FKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_Knee_FKAimLctr\")`;\n\t\t\tparent ($modCore + \"_Knee_FKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Knee_FKAimLctr\");\n\t\t\t\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee_FKAimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Knee1_FKAimLctr\") ($modCore + \"_Knee1FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_KneeIKCtrl\") ($modCore + \"_Knee1_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Knee1_FKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\t\n\t\t\tspaceLocator -n ($modCore + \"_Knee2_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Knee2_FKAimLctr\") ($modCore + \"_Knee2FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Knee2_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_KneeIKCtrl\") ($modCore + \"_Knee2_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Knee2_FKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Knee2_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee2_FKAimLctr\");\n\t\t}\t\t\n\t\t\n\t\t//HIP FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_HipFKOrientLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_HipJnt\") ($modCore + \"_HipFKOrientLctr\")`;\n\t\tparent ($modCore + \"_HipFKOrientLctr\") ($modCore + \"_HipFKCtrlGrp\");\n\t\torientConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_HipFKOrientLctr\");\n\t\t\n\t\t//HIDE SNAP LOCATORS\n\t\tsetAttr ($modCore + \"_HipFKOrientLctr.v\") 0;\n\t\tif (`objExists ($modCore + \"_Knee_FKAimLctr.v\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Knee_FKAimLctr.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Knee1_FKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Knee2_FKAimLctr.v\") 0;\n\t\t}\t\t\n\t\tsetAttr ($modCore + \"_AnkleIKLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_AnkleFKLctr.v\") 0;\n\t\t\n\t\tsetAttr ($modCore + \"_HipIKLockLctr.v\") 0;\n\t\t\n\t\t\n\t\t//PARENT TO MAIN CONTROL\n\t\t\n\t\t//SET ALL CONSTRAINTS TO SHORTEST INTERPOLATION\n\t\tstring $selectedParentConstraints[] = `ls ($modCore + \"*_parentConstraint1\")`;\n\t\tfor ($crntParentConstraint in $selectedParentConstraints)\n\t\t{setAttr ($crntParentConstraint + \".interpType\") 2;}\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\t\n\t\tif (`objExists ($modCore + \"_HipCurveJnt\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_LowerTwist75Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwist25Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwistHalfLctr_parentConstraint1.interpType\") 2;\n\t\t}\n\t\t\n\t\t//HIERARCHY CLEAN-UP\n\t\tparent \n\t\t($modCore + \"_AnkleJntFKGrp2\") \n\t\t($modCore + \"_FootIKCtrlGrp\") ($modCore + \"_KneeIKCtrlGrp\") ($modCore + \"_KneeIKCtrl_TargetLctr\")\n\t\t($modCore + \"_LegLengthOriginLctr\") ($modCore + \"_HipIKLockLctr\")\n\t\t($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\")\n\t\t\n\t\t($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_BallFKCtrlGrp\") ($modCore + \"_ToeFKCtrlGrp\")\n\t\t($modCore + \"_HipJnt\") ($modCore + \"_HipJntFK\") ($modCore + \"_HipJntIK\")\n\t\t($modCore + \"_ScaleGrp\");\n\t\t//select pCube1;\n\t\t//CREATE CONSTRAINT FOR WRIST IKCtrlGrp\n\t\t//CHECK IF ATTACHED TO ROOT\n\t\tif ($modAttachNode == \"ROOT\")\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t}\n\n\t\t//ADD DYNAMICtrl PARENTING CHANNELS\n\t\taddAttr -ln \"follow\" -at double  -min 1 -max 1 -dv 1 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e -keyable true ($modCore + \"_FootIKCtrl.follow\");\n\t\tsetAttr -lock true ($modCore + \"_FootIKCtrl.follow\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\taddAttr -ln \"parent\" -at double -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_FootIKCtrl.parent\");\n\t\t}\n\t\taddAttr -ln \"ROOT\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_FootIKCtrl.ROOT\");\n\n\t\taddAttr -ln \"ROOTType\" -at \"enum\" -en \"ROOTC:ROOTsecondaryC:\" ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_FootIKCtrl.ROOTType\");\n\n\n\t\t//IK WRIST DYNAMICtrl CONSTRAINTS\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.parent\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW3\");\n\t\t}\n\t\t\n\t\t//ROOT CONNECTIONS\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FootIKROOTInf_MD\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOT\") ($modCore + \"_FootIKROOTInf_MD.input1X\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOT\") ($modCore + \"_FootIKROOTInf_MD.input1Y\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOTType\") ($modCore + \"_FootIKROOTInf_MD.input2Y\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_FootIKROOTInf_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOTType\") ($modCore + \"_FootIKROOTInf_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_FootIKROOTInf_Reverse.outputX\") ($modCore + \"_FootIKROOTInf_MD.input2X\");\n\n\t\tconnectAttr -f ($modCore + \"_FootIKROOTInf_MD.outputX\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -f ($modCore + \"_FootIKROOTInf_MD.outputY\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTSecondaryCtrlW2\");\n\t\t\n\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + \"_FootIKParent_PMA\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.parent\") ($modCore + \"_FootIKParent_PMA.input1D[0]\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOT\") ($modCore + \"_FootIKParent_PMA.input1D[1]\");\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_FootIKParent_Condition\");\n\t\tsetAttr ($modCore + \"_FootIKParent_Condition.operation\") 4;\n\t\tsetAttr ($modCore + \"_FootIKParent_Condition.secondTerm\") 1;\n\t\tconnectAttr -f ($modCore + \"_FootIKParent_PMA.output1D\") ($modCore + \"_FootIKParent_Condition.firstTerm\");\n\t\tconnectAttr -force ($modCore + \"_FootIKParent_PMA.output1D\") ($modCore + \"_FootIKParent_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_FootIKParent_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_FootIKParent_Condition.outColorR\") ($modCore + \"_FootIKParent_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_FootIKParent_Reverse.outputX\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\n\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\t\n\t\t//SINGLE KNEE\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\t//ANKLE IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_AnkleIKtoFKLctr\");\n\t\t\tsetAttr ($modCore + \"_AnkleIKtoFKLctr.rotateOrder\") 1;\n\t\t\tgroup -n ($modCore + \"_AnkleIKtoFKLctrGrp\") ($modCore + \"_AnkleIKtoFKLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleIKtoFKLctrGrp\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleIKtoFKLctr\");\n\t\t\tparent ($modCore + \"_AnkleIKtoFKLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\t//ANKLE FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_AnkleFKtoIKLctr\");\n\t\t\tgroup -n ($modCore + \"_AnkleFKtoIKLctrGrp2\") ($modCore + \"_AnkleFKtoIKLctr\");\n\t\t\tgroup -n ($modCore + \"_AnkleFKtoIKLctrGrp\") ($modCore + \"_AnkleFKtoIKLctrGrp2\");\n\t\t\trotate 0 0 -90 ($modCore + \"_AnkleFKtoIKLctrGrp2\");\n\t\t\tdelete `pointConstraint ($modCore + \"_AnkleJnt\") ($modCore + \"_AnkleFKtoIKLctrGrp\")`;\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"scene\" -skip x -skip z ($modCore + \"_BallJnt\") ($modCore + \"_ToeJnt\") ($modCore + \"_AnkleFKtoIKLctrGrp\");\n\t\t\tdelete ($modCore + \"_AnkleFKtoIKLctrGrp_aimConstraint1\");\n\t\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_AnkleFKtoIKLctrGrp\");\n\t\t\torientConstraint -mo ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleFKtoIKLctr\");\n\t\t\tsetAttr ($modCore + \"_AnkleFKtoIKLctr_orientConstraint1.interpType\") 2;\n\t\t\tparent ($modCore + \"_AnkleFKtoIKLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\t//KNEE IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_KneeIKtoFKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKtoFKAimLctr\")`;\n\t\t\tparent ($modCore + \"_KneeIKtoFKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKtoFKAimLctr\");\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_KneeIKtoFKAimLctr\");\n\t\t\t\n\t\t\t//HIP FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_HipFKtoIKOrientLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_HipFKCtrlGrp\") ($modCore + \"_HipFKtoIKOrientLctr\")`;\n\t\t\tparent ($modCore + \"_HipFKtoIKOrientLctr\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_HipFKtoIKOrientLctr\");\n\t\t\torientConstraint -mo ($modCore + \"_HipJntIK\") ($modCore + \"_HipFKtoIKOrientLctr\");\n\t\t\t\n\t\t\t\t\n\t\t\t//HIDE SNAP LOCATORS\n\t\t\tsetAttr ($modCore + \"_KneeIKtoFKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_AnkleFKtoIKLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_AnkleIKtoFKLctr.v\") 0;\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_HipIKLockLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_HipFKtoIKOrientLctr.v\") 0;\n\t\t}\n\t\t//KNEE HIERARCHY CLEANUP\t\t\n\t\tif (`objExists ($modCore + \"_KneeJntFKGrp2\")`)\n\t\t{\n\t\t\tparent ($modCore + \"_KneeJntFKGrp2\")  ($modCore + \"_KneeFKCtrlGrp\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_Knee1FKCtrlGrp\") ($modCore + \"_Knee2FKCtrlGrp\")\n\t\t\t($modCore + \"_Knee1JntFKGrp2\") ($modCore + \"_Knee2JntFKGrp2\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\n\t\t//CHECK POLE VECTOR\n\t\tif (`objExists ($modCore + \"_Knee1Jnt\")`)\n\t\t{\n\t\t\t$lhipOrient = `getAttr ($modCore + \"_HipJnt.rotate\")`;\n\t\t\tif ($lhipOrient[0] > 90 || $lhipOrient[0] < -90 || $lhipOrient[2] > 90 || $lhipOrient[2] < -90)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_LegIKHandle.twist\") 180;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\n\t\tselect $topNode;\n\t\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Lower1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Middle1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Upper1\")`)\n\t\t{\n\t\t\t//RRM_ToonLimbs(\"leg\", $prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, $lLegLength, $lKneeLength, $lKnee1Length, $lKnee2Length, $lAnkleLength, $topNode);\n\t\t\tRRM_ToonLimbs(\"leg\", $prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, ($modName + \"_\" + $modAttachNode + \"Jnt\"), $topNode);\n\t\t\t///////RRM_ToonLegs($prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, $lLegLength, $lKneeLength, $lKnee1Length, $lKnee2Length, $lAnkleLength, $topNode);\n\t\t}\n\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\tif (!`objExists ($crntModControl + \".modCoreName\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\n\t\t\t\t//ADD MODULE TYPE\n\t\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"leg\";\n\t\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t\t}\n\t\t}\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$mirrorInt++;\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t\t$inverseFront = 1;\n\t\n\t\tif (!`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\t$i = 2;\n\t\t}\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE FK CHAIN MODULE/////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigFkChain(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 1;\n\t$multiplier = 1;\n\tfloat $rotOffset = 0;\n\n\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\n\t$crntSide = \"\";\n\t$oppSide = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 0;\n\t\t$crntSide = \"left\";\n\t\t$oppSide = \"right\";\n\t}\n\t\n\twhile ($mirrorInt <= 1)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\t\t\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"fkChain\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t$fkChains = `ls (\"RRM_\" + $prfx + $core + \"_??_01\")`;\n\t\t$fkChainsNum = `size $fkChains`;\n\t\n\t\taddAttr -ln \"fkChains\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.fkChains\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.fkChains\") $fkChainsNum;\n\t\tsetAttr -l true ($modCore + \"Grp.fkChains\");\n\t\t\n\t\tselect ;\n\t\t$fkjointsPerChain = `ls (\"RRM_\" + $prfx + $core + \"_01_??\")`;\n\t\t$fkjointsPerChainNum = `size $fkjointsPerChain`;\n\t\n\t\taddAttr -ln \"jointsPerChain\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.jointsPerChain\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.jointsPerChain\") $fkjointsPerChainNum;\n\t\tsetAttr -l true ($modCore + \"Grp.jointsPerChain\");\n\t\t\n\t\t//SCALE GROUP\n\t\tspaceLocator -n ($modCore + \"_AveragePosition_Lctr\");\n\t\tparentConstraint $fkChains ($modCore + \"_AveragePosition_Lctr\");\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\n\t\t//GROUP FOR NODES\n\t\tgroup -em -n ($modCore + \"_curveNodesGrp\");\n\t\tparent ($modCore + \"_curveNodesGrp\") ($modCore + \"_ScaleGrp\");\n\t\tgroup -em -n ($modCore + \"_extraCurveNodesGrp\");\n\t\tsetAttr ($modCore + \"_extraCurveNodesGrp.inheritsTransform\") 0; \n\t\tparent ($modCore + \"_extraCurveNodesGrp\") ($modName + \"_MAINCtrl\");\n\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modCore + \"_AveragePosition_Lctr\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modCore + \"_AveragePosition_Lctr\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tdelete ($modCore + \"_AveragePosition_Lctr\");\n\t\t\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\t\t\t\t\t\n\t\t$allJoints = `ls (\"RRM_\" + $prfx + $core + \"_??_??\")`;\n\t\t$sizeAllJoints = `size $allJoints`;\n\t\t$fKChain = `ls (\"RRM_\" + $prfx + $core + \"_??_01\")`;\n\t\t$fKChainSize = `size $fKChain`;\n\t\t$crntCh = 1;\n\t\t$crntJnt = 1;\n\t\t\n\t\t//MASTER CONTROLLER\n\t\tcircle -n ($modCore + \"_MasterCtrl\") -c 0 0 0 -nr 5 0 0 -sw 360 -r 1 -d 1 -ut 0 -tol 0 -s 4 -ch 0;\n\t\trotate -r 45 0 0 ($modCore + \"_MasterCtrl\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_MasterCtrl\");\n\t\tgroup -n ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_MasterCtrl\");\n\t\tspaceLocator -n ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\tspaceLocator -n ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector $multiplier 0 0 -upVector 0 1 0 -worldUpType \"objectRotation\" -worldUpObject (\"RRM_\" + $prfx + $core + \"_Parent\")\n\t\t$fKChain ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\tpointConstraint $fKChain ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_MasterCtrl_EndAttachLctr\") ($modCore + \"_MasterCtrlGrp\")`;\n\t\tdelete `orientConstraint ($modCore + \"_MasterCtrl_StartAttachLctr\") ($modCore + \"_MasterCtrlGrp\")`;\n\t\tparent ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\tdelete ($modCore + \"_MasterCtrl_StartAttachLctr\") ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t\n\t\tif ($fKChainSize > 1)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tparent ($modCore + \"_MasterCtrl_SizeEndLctr\") ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint $fKChain[0] ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector $multiplier 0 0 -upVector 0 1 0 -worldUpType \"none\" $fKChain[($fKChainSize - 1)] ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint $fKChain[($fKChainSize - 1)] ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tfloat $chains = `getAttr ($modCore + \"_MasterCtrl_SizeEndLctr.tx\")`;\n\t\t\tscale -r 1 ($chains * .8) ($chains * .3) ($modCore + \"_MasterCtrl\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_MasterCtrl\");\n\t\t\tdelete ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tparent ($modCore + \"_MasterCtrl_SizeEndLctr\") ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $fKChain[0] ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint $fKChain[0] ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tfloat $chains = `getAttr ($modCore + \"_MasterCtrl_SizeEndLctr.tx\")`;\n\t\t\tscale -r 1 ($chains * .8) ($chains * .3) ($modCore + \"_MasterCtrl\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_MasterCtrl\");\n\t\t\tdelete ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t}\n\t\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_MasterCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\t\n\t\t//CONTROLLER SIZE\n\t\tfloat $controllerSize = 1;\n\t\tfloat $fKChainDistance = 1;\n\t\tspaceLocator -n ($modCore + \"_StartLctr\");\n\t\tspaceLocator -n ($modCore + \"_EndLctr\");\n\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\t\t\t\t\t\n\t\n\t\tif ($sizeAllJoints >1)\n\t\t{\n\t\t\tpointConstraint $allJoints[0] ($modCore + \"_StartLctr\");\n\t\t\taimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $allJoints[($sizeAllJoints - 1)] ($modCore + \"_StartLctr\");\n\t\t\tpointConstraint $allJoints[($sizeAllJoints - 1)] ($modCore + \"_EndLctr\");\n\t\t\t$fKChainDistance = `getAttr ($modCore + \"_EndLctr.tx\")`;\n\t\t\t$controllerSize = ($fKChainDistance/$sizeAllJoints * 2);\n\t\t}\n\t\telse \n\t\t{\t\t\t\t\n\t\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_StartLctr\");\n\t\t\taimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $allJoints[0] ($modCore + \"_StartLctr\");\n\t\t\tpointConstraint $allJoints[0] ($modCore + \"_EndLctr\");\n\t\t\t$fKChainDistance = `getAttr ($modCore + \"_EndLctr.tx\")`;\n\t\t\t$controllerSize = ($fKChainDistance/$sizeAllJoints * 0.5);\n\t\t}\n\t\tdelete ($modCore + \"_StartLctr\");\n\t\t\n\t\t//MAIN GROUP TO ATTACH CHAINS TO PARENT CONTROL\n\t\tgroup -em -n ($modCore + \"_MainChainCtrlGrp\");\n\t\tparent ($modCore + \"_MainChainCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\n\t\tif ($fKChainSize > 2)\n\t\t{\n\t\t\t\taddAttr -ln \"FkAutoSpreadPos\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.FkAutoSpreadPos\");\n\t\t\t\taddAttr -ln \"FkAutoSpreadRot\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.FkAutoSpreadRot\");\n\t\t}\n\t\t\n\t\t//ADD SPLINE ATTRIBUTES\n\t\taddAttr -ln \"splineEffect\"  -at \"enum\" -en \"Settings:\"  ($modCore + \"_MasterCtrl\");\n\t\tsetAttr -e-keyable true -l true ($modCore + \"_MasterCtrl.splineEffect\");\n\n\t\taddAttr -ln \"blendedAdditive\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MasterCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.blendedAdditive\");\n\n\t\tif ($fKChainSize > 2)\n\t\t{\n\t\t\taddAttr -ln \"splineAutoSpreadPos\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.splineAutoSpreadPos\");\n\n\t\t\taddAttr -ln \"splineAutoSpreadRot\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.splineAutoSpreadRot\");\n\t\t}\n\t\t$doubleLoop = 0;\n\t\t$type = \"\";\n\t\twhile ($doubleLoop < 2)\n\t\t{\n\t\t\tif ($doubleLoop == 0)\n\t\t\t{\n\t\t\t}\n\t\t\tif ($fKChainSize > 2)\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\");\n\t\t\t\n\t\t\t\tstring $nPdCh = \"_\";\n\t\t\t\tif ($fKChainSize < 10)\n\t\t\t\t{\n\t\t\t\t\t$nPdCh = \"_0\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_01_01\") ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\")`;\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_01_01\") ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\")`;\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $fKChainSize + \"_01\")($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\")`;\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $fKChainSize + \"_01\")($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\")`;\n\t\n\t\t\t\tif ($doubleLoop == 0)\n\t\t\t\t{\n\t\t\t\t\t//CREATE REVERSE NODE TO TURN OFF INFLUENCE OF MASTER CONTROL\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SpreadPos_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.FkAutoSpreadPos\") ($modCore + \"_MasterCtrl_SpreadPos_Reverse.inputX\");\n\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SpreadRot_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.FkAutoSpreadRot\") ($modCore + \"_MasterCtrl_SpreadRot_Reverse.inputX\");\n\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SplineSpreadPos_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.splineAutoSpreadPos\") ($modCore + \"_MasterCtrl_SplineSpreadPos_Reverse.inputX\");\n\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SplineSpreadRot_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.splineAutoSpreadRot\") ($modCore + \"_MasterCtrl_SplineSpreadRot_Reverse.inputX\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tparent  ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\tparent  ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\tparent  ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\tparent  ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t\n\t\t\t\tsetAttr ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr.v\") 0;\n\t\t\t\tsetAttr ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr.v\") 0;\n\t\t\t\tsetAttr ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr.v\") 0;\n\t\t\t\tsetAttr ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr.v\") 0;\n\t\t\t}\n\t\t\t$type = \"Spline\";\n\t\t\t$doubleLoop++;\n\t\t}\n\t\t\n\t\n\t\tfor ($crntFKChain in $fKChain)                                    \n\t\t{\n\t\t\tstring $nPdCh = \"_\";\n\t\t\tif ($crntCh < 10)\n\t\t\t{\n\t\t\t\t$nPdCh = \"_0\";\n\t\t\t}\n\t\n\t\t\t$fKJoints = `ls (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + \"??\")`;\n\t\t\t$fKJointSize = `size $fKJoints`;\n\t\t\tstring $crntFKJoint;\n\t\t\tint $crntJnt = 1;\n\t\t\tfor ($crntFKJoint in $fKJoints)\n\t\t\t{\n\t\t\t\tstring $nPd = \"\";\n\t\t\t\tif ($crntJnt < 10)\n\t\t\t\t{\n\t\t\t\t\t$nPd = \"0\";\n\t\t\t\t}\n\t\t\t\t$nextJnt = ($crntJnt + 1);\n\t\t\t\t$nPdNext = \"\";\n\t\t\t\tif ($nextJnt <10)\n\t\t\t\t{\n\t\t\t\t\t$nPdNext = \"0\";\n\t\t\t\t}\n\t\t\t\t$previousJnt = ($crntJnt - 1);\n\t\t\t\t$nPdPrev = \"\";\n\t\t\t\tif ($previousJnt <10)\n\t\t\t\t{\n\t\t\t\t\t$nPdPrev = \"0\";\n\t\t\t\t}\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\");\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.v\") 0;\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.v\") 0;\n\t\t\t\t\n\t\t\t\tif ($crntJnt == 1)\n\t\t\t\t{\n\t\t\t\t\t//GET JOINT DIRECTION\n\t\t\t\t\t$upPos = `xform -q -ws -t  (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"DShape.cv[1]\")`;\n\t\t\t\t\t$aimPos = `xform -q -ws -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Shape.cv[1]\")`;\n\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\");\n\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\");\n\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr.translate\"), $upPos[0], $upPos[1], $upPos[2]);\n\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr.translate\"), $aimPos[0], $aimPos[1], $aimPos[2]);\n\n\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntGrp2\") ($modCore + $nPdCh + $crntCh + \"JntGrp\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntFKGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntIKGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntIKGrp2\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp\");\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"JntGrp2\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"JntIKGrp2\") ($modCore + \"_ScaleGrp\");\n\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")`;\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"JntGrp2\")`;\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"JntIKGrp2\")`;\n\n\t\t\t\t\tdelete `aimConstraint -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\") ($modCore + $nPdCh + $crntCh + \"JntGrp2\")`;\n\t\t\t\t\tdelete `aimConstraint -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")`;\n\t\t\t\t\tdelete `aimConstraint -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp2\")`;\n\t\t\t\t\tmakeIdentity -apply true -t 1 ($modCore + $nPdCh + $crntCh + \"JntGrp2\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"JntIKGrp2\");\n\t\t\t\t\t\n\t\t\t\t\tdelete ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\");\n\t\t\t\t\n\t\t\t\t\t//CREATE BLEND\n\t\t\t\t\taddAttr -ln (\"splineIK\" + $nPdCh + $crntCh + \"Inf\") -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MasterCtrl\");\n\t\t\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif ($crntSide == \"right\" && $fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\tselect -cl;\n\t\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\");\n\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide.v\") 0;\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t}\n\n\t\t\t\t//MAIN CONTROL\n\t\t\t\tcircle -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1;\n\t\t\t\tscale -r 1 1 0.667 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.cv[3]\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.cv[7]\") ;\n\t\n\t\t\t\tscale -r 1 ($controllerSize * 2) ($controllerSize * 1) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\tdelete -ch ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\t\t\n\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp2\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp2\");\n\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\t\t\t\t\n\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\tif ($crntFKJoint == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($crntSide == \"left\" || $crntSide == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t//SPLINE CONTROL\n\t\t\t\t\tcircle -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") -c 0 0 0 -nr 0 0 1 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1;\n\t\t\t\t\tscale -r 0.5 0.9 0.9 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.cv[3]\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.cv[7]\") ;\n\t\t\n\t\t\t\t\tscale -r ($controllerSize * $multiplier * 1) ($controllerSize * $multiplier * 0.5) 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\tdelete -ch ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\n\t\t\t\t\tmove -r -os -wd 0 ($controllerSize * $multiplier *2) 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.cv[0:7]\");\n\t\t\t\t\t\t\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp2\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\"); xform -os -piv 0 0 0;\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp2\"); xform -os -piv 0 0 0;\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\")`;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//PARENT CONSTRAIN GROUPS FOR SPREADING\n\t\t\t\tif ($fKChainSize > 2 && $crntJnt == 1 && $crntCh != 1 && $crntCh != $fKChainSize)\n\t\t\t\t{\n\t\t\t\t\t//ONCE FOR FK AND ONCE FOR SPLINE\n\t\t\t\t\t$type = \"\";\n\t\t\t\t\t$spreadPos = \".FkAutoSpreadPos\";\n\t\t\t\t\t$spreadRot = \".FkAutoSpreadRot\";\n\t\t\t\t\tint $doubleLoop = 0;\n\t\t\t\t\twhile ($doubleLoop < 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t//print (\"$crntJnt is \" + $crntJnt + \"\\n\");\n\t\t\t\t\t\t//print (\"$type is \" + $type + \"\\n\");\n\t\t\t\t\t\t//CREATE GROUP AND CONSTRAINT\n\t\t\t\t\t\tgroup -em -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\") ($modCore + \"_MainChainCtrlGrp\");\n\t\t\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\")`;\n\t\t\t\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_MainChainCtrlGrp\") ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\") ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($modCore + \"_MainChainCtrlGrp\") ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\") ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//ADD ATTRIBUTES AND SET WEIGHTS\n\t\t\t\t\t\tfloat $crntChFloat = ($crntCh - 1);\n\t\t\t\t\t\tfloat $fKChainSizeFloat = ($fKChainSize - 1);\n\t\t\t\t\t\tfloat $spreadVal = ($crntChFloat/$fKChainSizeFloat);\n\t\n\t\t\t\t\t\taddAttr -ln \"translateSpreadVal\" -at double -min 0 -max 1 -dv $spreadVal ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl\");\n\t\t\t\t\t\tsetAttr -e -keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\");\n\t\t\t\t\t\taddAttr -ln \"rotateSpreadVal\" -at double -min 0 -max 1 -dv $spreadVal ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl\");\n\t\t\t\t\t\tsetAttr -e -keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.rotateSpreadVal\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE MD NODE FOR TRANSLATE START AND END LOCATOR WEIGHTS\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadPos) ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input1X\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadPos) ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input1Y\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadRot) ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input1X\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadRot) ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input1Y\");\n\n\t\t\t\t\t\t//CONNECT REVERSE NODE TO TURN OFF INFLUENCE OF MASTER CONTROL\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl_\" + $type + \"SpreadPos_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint1.\" + $modCore + \"_MainChainCtrlGrpW0\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl_\" + $type + \"SpreadRot_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint2.\" + $modCore + \"_MainChainCtrlGrpW0\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CONNECT CONSTRAINT WEIGHTS TO MD NODE\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input2X\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.rotateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input2X\");\n\t\t\t\t\t\t//REVERSE NODE FOR INVERTED VALUE\n\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Translate\" + $type + \"Spread_Reverse\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Translate\" + $type + \"Spread_Reverse.inputX\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Translate\" + $type + \"Spread_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input2Y\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Rotate\" + $type + \"Spread_Reverse\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Rotate\" + $type + \"Spread_Reverse.inputX\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Rotate\" + $type + \"Spread_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input2Y\");\n\t\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.outputY\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint1.\" + $modCore + \"_SpreadTranslate_\" + $type + \"StartLctrW1\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.outputY\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint2.\" + $modCore + \"_SpreadRotate_\" + $type + \"StartLctrW1\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint1.\" + $modCore + \"_SpreadTranslate_\" + $type + \"EndLctrW2\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint2.\" + $modCore + \"_SpreadRotate_\" + $type + \"EndLctrW2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ($fKJointSize == 1)\n\t\t\t\t\t\t{//DON'T LOOP IF THERE IS ONLY ONE JOINT PER CHAIN\n\t\t\t\t\t\t\t$doubleLoop = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$type = \"Spline\";\n\t\t\t\t\t\t$spreadPos = \".splineAutoSpreadPos\";\n\t\t\t\t\t\t$spreadRot = \".splineAutoSpreadRot\";\n\t\t\t\t\t\t$doubleLoop++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ($fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\") ($modCore + \"_MainChainCtrlGrp\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + \"_MainChainCtrlGrp\");\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t//ORIENT JOINT\n\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPdNext + $nextJnt)`)\n\t\t\t\t{\n\t\t\t\t\t//GET LOCATION OF TOP CV\n\t\t\t\t\t$proxyAim = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Shape.cv[1]\")`;\n\t\t\t\t\t$proxyUp = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"DShape.cv[1]\")`;\n\t\t\t\t\t//CREATE LOCATOR\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\tmove -r $proxyAim[0] $proxyAim[1] $proxyAim[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tmove -r $proxyUp[0] $proxyUp[1] $proxyUp[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\t\n\t\t\t\t\tdelete `aimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\")\n\t\t\t\t\t(\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\n\t\t\t\t\tscale -r 1 0.667 0.9 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\t\t\t\t\t//GET ORIENTATION USING THE END POINT OF THE END CONTROL\n\t\t\t\t\t$proxyAim = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"DShape.cv[1]\")`;\n\t\t\t\t\t$ProxyUp = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Shape.cv[5]\")`;\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\tmove -r $proxyAim[0] $proxyAim[1] $proxyAim[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tmove -r $ProxyUp[0] $ProxyUp[1] $ProxyUp[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\t\n\t\t\t\t\tdelete `aimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\")\n\t\t\t\t\t(\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\n\t\t\t\t\tscale -r 1 0.667 0.9 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\t//ORIENT SPLINE CONTROLS\n\t\t\t\t\tif ($crntJnt == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp\");\n\t\n\t\t\t\t\t\t//CONNECT BLEND\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE ADD\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE BLENDS TO DISABLE ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntIK_Pos = `getAttr ($modCore + $nPdCh + $crntCh + \"JntIKGrp.translate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.color2\"), $JntIK_Pos[0], $JntIK_Pos[1], $JntIK_Pos[2]);\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntIK_Rot = `getAttr ($modCore + $nPdCh + $crntCh + \"JntIKGrp.rotate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.color2\"), $JntIK_Rot[0], $JntIK_Rot[1], $JntIK_Rot[2]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma.input3D[1]\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma.input3D[1]\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE MASTER BLEND FOR BLEND AND ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp.translate\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp.rotate\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\")`;\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\")`;\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\")`;\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\")\n\t\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\t\t\n\t\t\t\t\tif ($crntSide == \"right\" && $fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\")`;\n\t\t\t\t\t\trotate -r -os 0 180 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\");\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//SCALE CONSTRAINT FK JOINTS TO CONTROLS\n\t\t\t\t\tif ($crntJnt == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//scaleConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.scale\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD.input1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD.input2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.scale\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tif ($crntJnt != 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\");\n\t\t\t\t\t\t//scaleConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Ctrl.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp.scale\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Jnt\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntIK\");\n\t\t\t\t\t\tif ($crntSide == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntIKGuide\");\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//ORIENT SPLINE CONTROLS\n\t\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\")`;\n\t\t\t\t\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_ScaleGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\");\n\t\n\t\t\t\t\t\t\tif ($crntJnt != 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//ADD ATTRIBUTES TO THE CONTROLS\n\t\t\t\t\t\t\t\taddAttr -ln \"followAmount\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\");\n\t\t\n\t\t\t\t\t\t\t\taddAttr -ln \"parentInfluence\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.parentInfluence\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//ATTRIBUTE CONNECTIONS\n\t\t\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.inputX\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\t\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD\");\n\t\t\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_ParentInf_Rev\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input1X\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input1Y\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.parentInfluence\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input2X\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.parentInfluence\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_ParentInf_Rev.inputX\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_ParentInf_Rev.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input2Y\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"SplineCtrlW2\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.outputY\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modCore + \"_ScaleGrpW1\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ($crntJnt == 1 && $fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//ORIENT SPLINE CONTROLS\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\")`;\n\t\t\t\t\t\tif ($crntCh == 1 || $crntCh == $fKChainSize)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_ScaleGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//parentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp\");\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp\");\n\t\n\t\t\t\t\t\t//ADD ATTRIBUTES TO THE FIRST CONTROL\n\t\t\t\t\t\taddAttr -ln \"followAmount\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\");\n\t\t\t\t\t\t\n\t\t\t\t\t\taddAttr -ln \"stretch\" -at double -min 0 -max 1 -dv 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.stretch\");\n\t\t\t\t\t\t\n\t\t\t\t\t\taddAttr -ln \"autoVolume\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.autoVolume\");\n\t\n\t\t\t\t\t\t//ATTRIBUTE CONNECTIONS\n\t\t\t\t\t\tif ($crntCh == 1 || $crntCh == $fKChainSize)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modCore + \"_ScaleGrpW1\");\n\t\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.inputX\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t//CONNECT SPLINE ATTRIBUTE TO CONDITIONALS FOR THE VISIBILITY OF THE CONTROLS\n\t\t\t\t\t\tshadingNode -asUtility condition -n ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.firstTerm\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.secondTerm\") 0;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.operation\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility condition -n ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.firstTerm\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.secondTerm\") 1;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.operation\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE CONDITIONAL TO OVERRIDE VISIBILITY IF ADDITIVE IS ON.\n\t\t\t\t\t\tshadingNode -asUtility condition -n ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition.firstTerm\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition.colorIfTrueR\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CREATE BLEND FOR THE STARTING GROUP IF IT DOESN'T ALREADY EXIST\n\t\t\t\t\t\t//CONNECT SPLINE ATTRIBUTE TO BLEND THE SKINNING JOINTS\n\t\t\t\t\t\t//BLENDS\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.scale\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//ADDS\n\t\t\t\t\t\t//CREATE BLENDS TO DISABLE ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntFK_Pos = `getAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.translate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.color2\"), $JntFK_Pos[0], $JntFK_Pos[1], $JntFK_Pos[2]);\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntFK_Rot = `getAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.rotate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.color2\"), $JntFK_Rot[0], $JntFK_Rot[1], $JntFK_Rot[2]);\n\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma.input3D[1]\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma.input3D[1]\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE SUBTRACT TO ZERO OUT JOINTS\n\t\t\t\t\t\t$jointTranslate = `getAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.translate\")`;\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.operation\") 2;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.input3D[0]\");\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.input3D[1]\"), ($jointTranslate[0]*1), ($jointTranslate[1]*1), ($jointTranslate[2]*1));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE MASTER BLEND FOR BLEND AND ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.output\")  ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.translate\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.output\")  ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.rotate\");\n\t\t\t\t\n\t\t\t\t\t\t//CONNECT SPLINE ATTRIBUTE TO THE VISIBILITY OF THE CONTROLS\n\t\t\t\t\t\tconnectAttr -f  ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.v\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.v\");\n\t\t\t\t\t\tsetAttr -l 1 -k 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.v\");\n\t\t\t\t\t\tsetAttr -l 1 -k 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.v\");\n\t\n\t\t\t\t\t}\n\t\t\t\t\t//ORIENT CONSTRAINT RIGHT IK JOINTS TO GUIDE JOINTS\n\t\t\t\t\tif ($crntSide == \"right\" && $fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.scale\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t//CREATE SPLINE IK\n\t\t\t\t\tif (($crntJnt == $fKJointSize) && ($fKJointSize > 2))\n\t\t\t\t\t{\n\t\t\t\t\t\t$JntIK = \"JntIK\";\n\t\t\t\t\t\tif ($crntSide == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$JntIK = \"JntIKGuide\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK);\n\t\t\t\t\t\tikHandle -n ($modCore + $nPdCh + $crntCh + \"_IKHandle\") -sol ikSplineSolver -scv false;\n\t\t\t\t\t\t$SplineCurve = `listConnections -type \"nurbsCurve\" ($modCore + $nPdCh + $crntCh + \"_IKHandle\")`;\n\t\t\t\t\t\trename $SplineCurve ($modCore + $nPdCh + $crntCh + \"_SplineCurve\");\n\t\t\t\t\t\tarclen -ch 1 ($modCore + $nPdCh + $crntCh + \"_SplineCurve\");\n\t\t\t\t\t\t$curveInfoNode = `listConnections -t curveInfo -d 1 -s 0 ($modCore + $nPdCh + $crntCh + \"_SplineCurveShape\")`;\n\t\t\t\t\t\trename $curveInfoNode[0] ($modCore + $nPdCh + $crntCh + \"_SplineLengthInfo\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_SplineCurve.v\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurve.template\") 1;\n\n\t\t\t\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $nPdCh + $crntCh + \"_SplineCurve\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_SplineCurve.nonControl\");\n\t\t\t\t\t\tsetAttr -lock true ($modCore + $nPdCh + $crntCh + \"_SplineCurve.nonControl\");\n\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurve\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKHandle\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKHandle.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CONNECT SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.operation\") 2;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_SplineLengthInfo.arcLength\") ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.input1X\");\n\t\t\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.input2X\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input1X\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.operation\") 2;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat $splineLengthValue = `getAttr ($modCore + $nPdCh + $crntCh + \"_SplineLengthInfo.arcLength\")`;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input2X\") $splineLengthValue;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//BLEND SCALE\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.stretch\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color1R\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleX\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK + \".scaleX\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//INVERSE SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input1X\") 1;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input2X\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.operation\") 2;\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.autoVolume\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color1R\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleZ\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK + \".scaleZ\");\n\t\n\t\t\t\t\t\t//ADVANCED TWIST\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr\");\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr\");\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr\");\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr\");\n\t\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr\") ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr\") ($modCore + \"Grp\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr.v\") 0;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKHandle.dTwistControlEnable\") 1;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKHandle.dWorldUpType\")  4;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr.xformMatrix\") ($modCore + $nPdCh + $crntCh + \"_IKHandle.dWorldUpMatrix\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr.xformMatrix\")   ($modCore + $nPdCh + $crntCh + \"_IKHandle.dWorldUpMatrixEnd\");\n\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t////////////CREATE CLUSTERS////////////\n\t\t\t\t\t\t//START CLUSTER\n\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_SplineCurve.cv[0:1]\");\n\t\t\t\t\t\tnewCluster \" -envelope 1\";\n\t\t\t\t\t\trename ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr\");\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr.v\") 0;\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//MIDDLE CLUSTERS\n\t\t\t\t\t\tint $midClstrInt = 2;\n\t\t\t\t\t\tint $prevMidClstrInt = 1;\n\t\t\t\t\t\tstring $prevMidControlnPd;\n\t\t\t\t\t\twhile ($midClstrInt < $crntJnt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$midControlnPd = \"0\";\n\t\t\t\t\t\t\tif ($midClstrInt > 9)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$midControlnPd = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$prevMidControlnPd = \"0\";\n\t\t\t\t\t\t\tif ($midClstrInt > 9)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$prevMidControlnPd = \"\";\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_SplineCurve.cv[\" + $midClstrInt + \"]\");\n\t\t\t\t\t\t\tnewCluster \" -envelope 1\";\n\t\t\t\t\t\t\trename ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr\");\n\t\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr\");\n\t\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr.v\") 0;\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//CONNECT STRETCH TO MIDDLE JOINTS\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + $JntIK + \".scaleX\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + $JntIK + \".scaleY\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + $JntIK + \".scaleZ\");\n\t\t\t\t\t\t\t$midClstrInt++;\n\t\t\t\t\t\t\t$prevMidClstrInt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//END CLUSTER\n\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_SplineCurve.cv[\" + $crntJnt + \":\" + ($crntJnt + 1) + \"]\");\n\t\t\t\t\t\tnewCluster \" -envelope 1\";\n\t\t\t\t\t\trename ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr\");\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr.v\") 0;\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (($crntJnt == $fKJointSize) && ($fKJointSize == 2))\n\t\t\t\t\t{\n\t\t\t\t\t\t$JntIK = \"JntIK\";\n\t\t\t\t\t\tif ($crntSide == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$JntIK = \"JntIKGuide\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//USE AIM CONSTRAINTS IF ONLY TWO JOINTS PER CHAIN\n\t\t\t\t\t\t//delete `aimConstraint -mo -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modCore + $nPdCh + $crntCh + \"_01\" + \"SplineCtrl\")\n\t\t\t\t\t\t//($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK)`;\n\t\t\t\t\t\t//makeIdentity -apply true -r 1 ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK);\n\t\t\t\t\t\taimConstraint -mo -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modCore + $nPdCh + $crntCh + \"_01\" + \"SplineCtrl\")\n\t\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK);\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//STRETCH\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr.v\") 0;\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\");\n\t\t\t\t\t\tpointConstraint ($modCore + $nPdCh + $crntCh + \"_01\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\taimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\tpointConstraint ($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr\");\n\t\t\t\t\t\t$targetLctrPos = `getAttr ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr.tx\")`;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.operation\") 2;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr.tx\") ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input1X\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input2X\") $targetLctrPos;\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.stretch\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color1R\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleX\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK + \".scaleX\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//INVERSE SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.operation\") 2;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input1X\") 1;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input2X\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.autoVolume\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color1R\");\n\t\t\t\t\t\t                                                                                                                                         \n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleZ\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK + \".scaleZ\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"JntGrp\");\n\t\t\t\t}\n\t\t\t\t$crntJnt++;\n\t\t\t}\n\t\t\t$crntCh++;\n\t\t}\n\t\t//ATTACH LOCATORS TO FIRST JOINT OF START AND END JOINT\n\t\tif ($fKChainSize > 2)\n\t\t{\n\t\t\tstring $nPdCh = \"_\";\n\t\t\tif ($fKChainSize < 10)\n\t\t\t{\n\t\t\t\t$nPdCh = \"_0\";\n\t\t\t}\n\t\t\t$doubleLoop = 0;\n\t\t\t$type = \"\";\n\t\t\t$jointType = \"FK\";\n\t\t\twhile ($doubleLoop < 2)\n\t\t\t{\n\t\t\t\tpointConstraint -mo  ($modCore + \"_01_01Jnt\" + $jointType) ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\");\n\t\t\t\tpointConstraint -mo  ($modCore + $nPdCh + $fKChainSize + \"_01Jnt\" + $jointType) ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\");\n\t\t\t\tparentConstraint -mo ($modCore + \"_01_01Jnt\" + $jointType) ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\");\n\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $fKChainSize + \"_01Jnt\" + $jointType)($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\");\n\t\t\t\t$jointType = \"IK\";\n\t\t\t\t$type = \"Spline\";\n\t\t\t\t$doubleLoop++;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t\t\t\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"fkChain\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t\t\n\t\t\t//ADD DIRECTION\n\t\t\t$direction = `getAttr ($topNode + \".direction\")`;\n\t\t\taddAttr -ln \"direction\"  -at long ($crntModControl);\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".direction\");\n\t\t\tsetAttr ($crntModControl + \".direction\") $direction;\n\t\t\tsetAttr -l true ($crntModControl + \".direction\");\n\t\t}\n\t\t\n\t\t//LOCK MAIN CONTROL ATTRIBUTES\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.tx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.ty\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.tz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.sz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.v\");\n\n\t\tselect -cl;\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t\t$rotOffset = 180;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE HEAD MODULE////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigHead(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 2;\n\t$multiplier = 1;\n\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 1;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 2)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"head\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFICtrl ATTRIBUTES\n\t\t//JAW\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Jaw\")`)\n\t\t{\n\t\t\taddAttr -ln \"jaw\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.jaw\");\n\t\t\tsetAttr -l true ($modCore + \"Grp.jaw\");\n\t\t}\n\t\n\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType \"objectrotation\" -worldUpVector 1 0 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Parent\")\n\t\t(\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_ScaleGrp\")`;\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\n\t\t//MASTER SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_MasterCtrlScaleGrp\");\n\t\n\t\t//HEAD CONTROL\n\t\tcurve -n ($modCore + \"_MasterCtrl\") -d 1 -p -1 0 -1 -p 1 0 -1 -p 1 0 1 -p -1 0 1 -p -1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t//rotate -r 0 0 90 ($modCore + \"_MasterCtrl\");\n\t\t//makeIdentity -apply true -r 1 ($modCore + \"_MasterCtrl\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_MasterCtrlShape\");\n\t\t\n\t\t//GET SIZE\n\t\tspaceLocator -n ($modCore + \"_HeadStartLctr\");\n\t\tspaceLocator -n ($modCore + \"_HeadEndLctr\");\n\t\tparent ($modCore + \"_HeadEndLctr\") ($modCore + \"_HeadStartLctr\");\n\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_HeadStartLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_HeadStartLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_HeadEndLctr\");\n\t\t$scale = `getAttr ($modCore + \"_HeadEndLctr.tx\")`;\n\t\tscale -r ($scale /5) ($scale /5) ($scale /5) ($modCore + \"_MasterCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_MasterCtrl\");\n\t\n\t\tgroup -n ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_MasterCtrl\");\n\t\tparent ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_MasterCtrlGrp\")`;\n\t\t//makeIdentity -apply false -t 1 -r 1 ($modCore + \"_MasterCtrlGrp\");\n\t\tmove -r -os -wd 0 ($scale * 1.3) 0 ($modCore + \"_MasterCtrl.cv[0:24]\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_MasterCtrl\");\n\t\tparentConstraint -mo ($modCore) ($modCore + \"_MasterCtrlGrp\");\n\t\t \n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_MasterCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient);\n\t\t\n\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Jaw\")`)\n\t\t{\n\t\t//JAW CONTROL\n\t\t\tcircle -n ($modCore + \"_JawCtrl\");\n\t\t\tscale -r 1 0.5 1 ($modCore + \"_JawCtrl\");\n\t\t\tmove -r -os -wd 0 0 1.2 ($modCore + \"_JawCtrl.cv[1]\") ($modCore + \"_JawCtrl.cv[5]\");\n\t\t\tmove -r -os -wd 0 0 0.58 ($modCore + \"_JawCtrl.cv[0]\") ($modCore + \"_JawCtrl.cv[2]\") ($modCore + \"_JawCtrl.cv[4]\") ($modCore + \"_JawCtrl.cv[6]\");\n\t\t\tselect ($modCore + \"_JawCtrl\") ;\n\t\t\trotate -r -os 35 0 0 ($modCore + \"_JawCtrl\");\n\t\t\tscale -r ($scale /3) ($scale /3) ($scale /3);\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_JawCtrl\");\n\t\t\tdelete -ch ($modCore + \"_JawCtrl\");\n\t\t\tgroup -n ($modCore + \"_JawCtrlGrp\");\n\t\t\tparent ($modCore + \"_JawCtrlGrp\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t\t\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Jaw\") ($modCore + \"_JawCtrlGrp\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_JawEnd\") ($modCore + \"_JawCtrl\")`;\n\t\t\t$jawCOffset = `getAttr ($modCore + \"_JawCtrl.translate\")`;\n\t\t\tmove -r ($jawCOffset[0] * 1.2) ($jawCOffset[1] * 1.2) ($jawCOffset[2] * 1.2) ($modCore + \"_JawCtrl.translate\");\n\t\t\tmakeIdentity -apply true ($modCore + \"_JawCtrl\");\n\t\t\t$jawPivot = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Jaw\")`;\n\t\t\tmove -a $jawPivot[0] $jawPivot[1] $jawPivot[2] ($modCore + \"_JawCtrl.scalePivot\") ($modCore + \"_JawCtrl.rotatePivot\") ;\n\t\t\t\n\t\t\tparent ($modCore + \"_MasterCtrlScaleGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\n\t\t\t//JOINTS\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_JawJnt\");\n\t\t\tjoint -n ($modCore + \"_JawEndJnt\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Jaw\") ($modCore + \"_JawJnt\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_JawCtrl\") ($modCore + \"_JawJnt\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_JawEnd\") ($modCore + \"_JawEndJnt\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_MasterCtrl\") ($modCore + \"_JawCtrlGrp\");\n\t\t\t\n\t\t\tparent ($modCore + \"_JawJnt\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t}\n\t\t\t\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_TopJnt\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_TopJnt\")`;\n\t\tparentConstraint -mo ($modCore + \"_MasterCtrl\") ($modCore + \"_TopJnt\");\n\t\t\n\t\tparent ($modCore + \"_TopJnt\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t\n\t\t//SET JAW AND END NODES TO SCALE WITH MASTER CTRL\n\t\tscaleConstraint ($modCore + \"_MasterCtrl\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t\n\t\tdelete ($modCore + \"_HeadStartLctr\") ($modCore + \"_HeadEndLctr\");\n\t\n\t\t//ADD CORE NAME\n\t\tselect ($modCore + \"_MasterCtrl\");\n\t\tif (`objExists ($modCore + \"_JawCtrl\")`)\n\t\t{\n\t\t\tselect -add ($modCore + \"_JawCtrl\");\n\t\t}\n\t\t$modControls = `ls -sl`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"head\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t}\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE LOOK AT MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EyeControl()\n{\n\tcircle -n \"RRM_EyeControl\" -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\tcurve -n \"RRM_EyeControl1\" -d 1 -p 0 0 -1 -p 0 0 1 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename \"RRM_EyeControl1Shape\";\n\tcurve -n \"RRM_EyeControl2\" -d 1 -p -1 0 0 -p 1 0 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename \"RRM_EyeControl2Shape\";\n\t\t\n\tparent -r -s \"RRM_EyeControl1Shape\" \"RRM_EyeControl2Shape\" \"RRM_EyeControl\";\n\tdelete \"RRM_EyeControl1\" \"RRM_EyeControl2\";\n\tdelete -ch \"RRM_EyeControl\";\n}\n\nglobal proc RRM_GenerateRigLookAt(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\t$mirrorInt = 1;\n\tfloat $rotOffset = 0;\n\tfloat $lookAtSize;\n\tstring $modAttachNode;\n\tstring $modCore;\n\t\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 0;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 1)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\t\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"lookAt\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t$lookAts = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\n\t\n\t\taddAttr -ln \"lookAts\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.lookAts\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.lookAts\") $lookAtNum;\n\t\tsetAttr -l true ($modCore + \"Grp.lookAts\");\n\t\n\t\t//SCALE GROUP\n\t\tspaceLocator -n ($modCore + \"_AveragePosition_Lctr\");\n\t\tparentConstraint $lookAts ($modCore + \"_AveragePosition_Lctr\");\n\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tdelete ($modCore + \"_AveragePosition_Lctr\");\n\t\t\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\n\t\n\t\t//MASTER CONTROLLER\n\t\tcircle -n ($modCore + \"_MasterCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 1 -ut 0 -tol 0 -s 4 -ch 1;\n\t\trotate -r 45 90 0 ($modCore + \"_MasterCtrl\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_MasterCtrl\");\n\t\tdelete -ch ($modCore + \"_MasterCtrl\");\n\t\tgroup -n ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_MasterCtrl\");\n\t\tparent ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\n\t\t//SCALE MASTER CONTROLLER\n\t\t$lookAts = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\t\n\t\t\n\t\tif ($lookAtNum == 1)\n\t\t{\n\t\t\t$lookAtSize = `getAttr \"RRM_MAIN.scaleY\"`;\n\t\t\tscale -a ($lookAtSize * 1) ($lookAtSize * 1) $lookAtSize ($modCore + \"_MasterCtrlGrp\");\n\t\t\tdelete `parentConstraint $lookAts ($modCore + \"_MasterCtrlGrp\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t\tparent ($modCore + \"_MasterCtrl_EndAttachLctr\") ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\tpointConstraint $lookAts[0] ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + \"Grp\")\n\t\t\t$lookAts ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\tpointConstraint $lookAts ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t\t$lookAtSize = `getAttr ($modCore + \"_MasterCtrl_EndAttachLctr.tx\")`;\n\t\t\tscale -a ($lookAtSize * 2.5) ($lookAtSize * 1.25) $lookAtSize ($modCore + \"_MasterCtrlGrp\");\n\t\t\t\n\t\t\t//POSITION\n\t\t\tdelete `parentConstraint $lookAts ($modCore + \"_MasterCtrlGrp\")`;\n\t\t\tdelete ($modCore + \"_MasterCtrl_StartAttachLctr\") ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t}\n\t\n\t\tparentConstraint -mo ($modCore) ($modCore + \"_MasterCtrlGrp\");\n\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_MasterCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\t\n\t\t\n\t\t//EYE CONTROLS\n\t\t$lookAts = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\n\t\tstring $crntLookAt;\n\t\t$crntNum = 1;\n\t\tfor ($crntLookAt in $lookAts)\n\t\t{\n\t\t\tstring $nPd = \"\";\n\t\t\tif ($crntNum < 10)\n\t\t\t{\n\t\t\t\t$nPd = \"0\";\n\t\t\t}\n\t\t\tRRM_EyeControl;\n\t\t\trename \"RRM_EyeControl\" ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\trotate -r 90 90 0 ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\tgroup -n ($modCore + \"_\" + $nPd + $crntNum + \"Grp1\") ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\tgroup -n ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"Grp1\");\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_ScaleGrp\");\n\t\t\tdelete `pointConstraint $crntLookAt ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")`;\n\t\t\t\n\t\t\t//GET END LOCATION OF EYE CONTROL\n\t\t\t$lookAtUpLoc = `xform -q -ws -t ($crntLookAt + \"EShape.cv[0]\")`;\n\t\t\t$lookAtAimLoc = `xform -q -ws -t ($crntLookAt + \"DShape.cv[1]\")`;\n\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\");\n\t\t\tmove -a $lookAtAimLoc[0] $lookAtAimLoc[1] $lookAtAimLoc[2] ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\");\n\t\t\tmove -a $lookAtUpLoc[0] $lookAtUpLoc[1] $lookAtUpLoc[2] ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\");\n\t\t\t\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\")\n\t\t\t($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")`;\n\t\t\t\n\t\t\tdelete `pointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"Grp1\")`;\n\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\");\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\") ($modCore + \"_ScaleGrp\");\t\t\n\t\t\tpointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")\n\t\t\t($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\") ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\");\n\t\n\t\t\t//AIM EYE CONTROL AT JOINT\n\t\t\taimConstraint -offset 0 0 0 -aimVector -1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")\n\t\t\t($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t\n\t\t\t//SCALE EACH CONTROLLER\n\t\t\tif ($lookAtNum == 1)\n\t\t\t{\n\t\t\t\t$lookAtSize = `getAttr \"RRM_MAIN.scaleY\"`;\n\t\t\t\tscale -a ($lookAtSize * .75) ($lookAtSize * .75) ($lookAtSize * .75) ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\");\n\t\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\tpointConstraint $lookAts[0] ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\")\n\t\t\t\t$lookAts ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\tpointConstraint $lookAts ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\");\n\t\t\t\t$lookAtSize = `getAttr ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr.tx\")`;\n\t\t\t\tscale -a ($lookAtSize * .75) ($lookAtSize * .75) ($lookAtSize * .75) ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t\tdelete ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\");\n\t\t\t}\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t\n\t\t\t\n\t\t\t//CREATE CONNECTOR\n\t\t\tcurve -n ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\") -d 1 -p 0 0 0 -p 0 0 -1 -k 0 -k 1 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrlShape\");\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\") ($modCore + \"Grp\");\n\t\t\n\t\t\tselect ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrlShape.cv[0]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1\");\n\t\t\tpointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\") ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1\");\n\t\t\t\n\t\t\tselect ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrlShape.cv[1]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2\");\n\t\t\tpointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2\");\n\t\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1\")\t($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2\") ($modCore + \"Grp\");\n\t\t\tsetAttr ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1.visibility\") 0;\n\t\t\tsetAttr ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2.visibility\") 0;\n\t\t\t\n\t\t\ttoggle -state on -template ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\");\n\t\t\t\n\t\t\tdelete ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\");\n\t\t\t\n\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl.nonControl\");\n\t\t\tsetAttr -lock true ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl.nonControl\");\n\n\t\t\t$crntNum++;\n\t\t}\n\t\n\t\t//ADD CORE NAME AND LOCK CHANNELS\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t\t\t\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"lookAt\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".rx\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".ry\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".rz\");\n\t\t}\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t\t$rotOffset = 180;\n\t}\n\t//ADD MASTER CONTROL FOR ALL EYES\n\t\n\t//CONTROL\n\tcircle -n ($modName + \"_\" + $core + \"_LookAtCtrl1\") -c 0 0 0 -nr 0 1 0 -sw 75 -r 1 -d 3 -ut 0 -tol 0 -s 3 -ch 0; objectMoveCommand;\n\trotate -r -os 0 7.5 0 ($modName + \"_\" + $core + \"_LookAtCtrl1\");\n\tmakeIdentity -apply  true -r 1 ($modName + \"_\" + $core + \"_LookAtCtrl1\");\n\t\n\tcurve -n ($modName + \"_\" + $core + \"_LookAtCtrl\") -d 1 -p -0.130526 0 -0.991445 -p -0.130526 0 -0.130526 -p -0.991445 0 -0.130526 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;\n\trename ($modName + \"_\" + $core + \"_LookAtCtrlShape\");\n\tparent -r -s ($modName + \"_\" + $core + \"_LookAtCtrl1Shape\") ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tdelete ($modName + \"_\" + $core + \"_LookAtCtrl1\");\n\tselect ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tduplicate -rr; rotate -r 0 90 0; for ($i=1; $i<3; ++$i) duplicate -rr -st; select ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tselect -hi ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tselect -d ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tselect -add ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tparent -r -s;\n\tdelete ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tgroup -n ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tparent ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ($modName + \"_MAINCtrl\");\n\trotate -r 90 0 0 ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ;\n\tscale -r ($lookAtSize/.75) ($lookAtSize/.75) ($lookAtSize/.75) ($modName + \"_\" + $core + \"_LookAtCtrlGrp\");\n\tmakeIdentity -apply true -r 1 -s 1 ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ;\n\t\n\t//MOVE INTO POSITION\n\tselect ($modName + \"*\" + $core + \"_??Ctrl\");\n\tselect -d ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\t$eyeControls = `ls -sl`;\n\tpickWalk -d up;\n\t$eyeControlsGrp = `ls -sl`;\n\tdelete `pointConstraint $eyeControls ($modName + \"_\" + $core + \"_LookAtCtrlGrp\")`;\n\tmakeIdentity -apply true -t 1 ($modName + \"_\" + $core + \"_LookAtCtrlGrp\");\n\t\n\t//AIM CONSTRAINT\n\t$eyeControlsGrp2 = `ls ($modName + \"*\" + $core + \"_??Grp2\")`;\n\t\n\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t$eyeControlsGrp2 ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\t\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.rx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.ry\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.rz\");\t\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.v\");\t\n\t\n\tstring $each;\n\tfor ($each in $eyeControlsGrp)\n\t{\n\t\tparentConstraint -mo ($modName + \"_\" + $core + \"_LookAtCtrl\") $each;\n\t}\n\t\n\t//ADD ATTRIBUTE FOR PARENT ORIENT\n\taddAttr -ln \"localSpace\"  -at double  -min 0 -max 1 -dv 1 ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_\" + $core + \"_LookAtCtrl.localSpace\");\n\t\n\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_MAINCtrl\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp\");\n\tconnectAttr -f ($modName + \"_\" + $core + \"_LookAtCtrl.localSpace\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\n\tshadingNode -asUtility reverse -n ($modName + \"_\" + $core + \"_LookAtCtrlGrp_Rev\");\n\tconnectAttr -f ($modName + \"_\" + $core + \"_LookAtCtrl.localSpace\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp_Rev.inputX\");\n\tconnectAttr -f ($modName + \"_\" + $core + \"_LookAtCtrlGrp_Rev.outputX\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\");\n\n\t\n\taddAttr -ln \"modCoreName\"  -dt \"string\" ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_\" + $core + \"_LookAtCtrl.modCoreName\");\n\tsetAttr -type \"string\" ($modName + \"_\" + $core + \"_LookAtCtrl.modCoreName\") $modCore;\n\tsetAttr -e-lock true ($modName + \"_\" + $core + \"_LookAtCtrl.modCoreName\");\n\t\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE AUXILIARY MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_GenerateRigAuxiliary(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t//$modType = `getAttr ($topNode + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\t$mirrorInt = 1;\n\t//float $rotOffset = 0;\n\t//float $lookAtSize;\n\tstring $modAttachNode;\n\tstring $modCore;\n\t\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 0;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 1)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Aux.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core + \"_Aux\");\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core + \"_Aux\");\n\t\t\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"auxiliary\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\t\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\n\t\t//CONTROL\n\t\t//GET SCALE OF THE PROXY\n\t\t\n\t\t//LOCATOR FOR CONSTRAINTS\n\t\tspaceLocator -n ($modCore + \"CtrlGrp2Lctr\");\n\t\tparent ($modCore + \"CtrlGrp2Lctr\") ($modCore + \"Grp\");\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\")`;\n\t\t//parentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"CtrlGrp2Lctr\");\n\t\tdelete `scaleConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\")`;\n\t\t$auxScale = `getAttr (\"RRM_\" + $prfx + $core + \".scale\")`;\n\t\t$auxRadius = (($auxScale[0] + $auxScale[1] + $auxScale[2])/3)*.375 + 0.25;\n\n\t\tcircle -n ($modCore + \"Ctrl\")  -nr 0 1 0 -sw 360 -r $auxRadius -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\t\tcircle -n ($modCore + \"Ctrl2\") -nr 1 0 0 -sw 360 -r $auxRadius -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\t\tcircle -n ($modCore + \"Ctrl3\") -nr 0 0 1 -sw 360 -r $auxRadius -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\t\tparent -r -s ($modCore + \"Ctrl2Shape\") ($modCore + \"Ctrl3Shape\") ($modCore + \"Ctrl\");\n\t\tdelete ($modCore + \"Ctrl2\") ($modCore + \"Ctrl3\");\n\t\tgroup -n ($modCore + \"CtrlGrp\") ($modCore + \"Ctrl\");\n\t\tgroup -n ($modCore + \"CtrlGrp2\") ($modCore + \"CtrlGrp\");\n\t\tparent ($modCore + \"CtrlGrp2\") ($modCore);\n\t\t\n\t\tsetAttr ($modCore + \"CtrlGrp2Lctr.v\") 0;\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"CtrlGrp2Lctr.v\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"Ctrl.v\");\n\n\t\t\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2\")`;\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Aux\") ($modCore + \"CtrlGrp\")`;\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\") ($modCore + \"CtrlGrp2\");\n\t\torientConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\") ($modCore + \"CtrlGrp\");\n\t\t\n\t\taddAttr -ln \"followParentOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"Ctrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"Ctrl.followParentOrient\");\n\t\taddAttr -ln \"followParentPosition\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"Ctrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"Ctrl.followParentPosition\");\n\t\tconnectAttr -f ($modCore + \"Ctrl.followParentOrient\") ($modCore + \"CtrlGrp_orientConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentOrient\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentOrient\") ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentOrient\") 0;\n\t\tsetAttr ($modCore + \"Ctrl.followParentOrient\") 1;\n\t\tsetAttr ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentOrient\") ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\n\t\tconnectAttr -f ($modCore + \"Ctrl.followParentPosition\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentPosition\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentPosition\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentPosition\") 0;\n\t\tsetAttr ($modCore + \"Ctrl.followParentPosition\") 1;\n\t\tsetAttr ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentPosition\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\n\t\tselectKey -k ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\t\tkeyTangent -itt spline -ott spline ;\n\t\t\n\n\t\t//ADD MODULE CORE NAME\n\t\taddAttr -ln \"modCoreName\"  -dt \"string\" ($modCore + \"Ctrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"Ctrl.modCoreName\");\n\t\tsetAttr -type \"string\" ($modCore + \"Ctrl.modCoreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -e-lock true ($modCore + \"Ctrl.modCoreName\");\n\t\t\n\t\t//ADD MODULE TYPE\n\t\taddAttr -ln \"moduleType\"  -dt \"string\" (($modCore + \"Ctrl\"));\n\t\tsetAttr -e -keyable true ($modCore + \"Ctrl.moduleType\");\n\t\tsetAttr -type \"string\" ($modCore + \"Ctrl.moduleType\") \"auxiliary\";\n\t\tsetAttr -l true ($modCore + \"Ctrl.moduleType\");\n\t\t\t\t\n\t\t//JOINT\n\t\tjoint -n ($modCore + \"Jnt\");\n\t\tparent ($modCore + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\tparentConstraint ($modCore + \"Ctrl\") ($modCore + \"Jnt\");\n\t\t//scaleConstraint ($modCore + \"Ctrl\")  ($modCore + \"Jnt\");\n\t\tconnectAttr ($modCore + \"Ctrl.scale\")  ($modCore + \"Jnt.scale\");\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t\t$rotOffset = 180;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Aux\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Aux\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Aux\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Aux\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Aux\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Aux\");}\n}\n\t\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////TAB 2 FUNCTIONALITY///////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditLoadParent(string $parent)\n{\n\t$crnt = `ls -sl`;\n\t$crntSize = `size $crnt`;\n\tif ($crntSize == 1)\n\t{\n\t\t$each = $crnt[0];\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tstring $modName = `getAttr ($each + \".modName\")`;\n\t\t\tstring $modType = `getAttr (\"RRM_\" + $modName + \".top\")`;\n\t\t\tif ($modType == $parent)\n\t\t\t{\n\t\t\t\ttextFieldButtonGrp -e -text $modName (\"RRM_EditLoad\" + $parent + \"TextField\");\n\t\t\t\tselect $crnt[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twarning (\"SELECTED PROXY NODE IS NOT A \\\"\" + $parent + \"\\\"\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"PLEASE SELECT A VALID PROXY NODE TO LOAD\";\n\t\t}\n\t}\n\telse if ($crntSize == 0)\n\t{\n\t\twarning \"PLEASE SELECT A PROXY NODE TO LOAD\";\n\t}\n\telse\n\t{\n\t\twarning \"PLEASE SELECT ONLY ONE NODE. MIRRORED PARENTS WILL AUTOMATICALLY BE CONNECTED PROPERLY\";\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY SPLINE MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditSpline()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\t$modName = `textFieldButtonGrp -q -text RRM_EditLoadsplineTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\t\t\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\tint $splineNum = `intSliderGrp -q -v RRM_SplineEditNum`;\n\t$mirrorMod = 0;\n\t$prfx = \"\";\n\t$oppPrfx = \"\";\n\t$i = 0;\n\t\n\t\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$mirrorMod = 1;\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\t\t\n\t\tselect $connectors (\"RRM_?_\" + $modName + \"_??Grp\");\n\t}\n\telse\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\t\t\n\t\tselect $connectors (\"RRM_\" + $modName + \"_??Grp\");\n\t}\n\n\t//DELETE OLD SPLINE NODES\n\t$splineJointGrp = `ls -sl`;\n\tselect -hi $splineJointGrp;\n\t$allSplineJointGrp = `ls -sl`;\n\tlockNode -lock off $allSplineJointGrp;\n\tdelete $splineJointGrp;\n\t\n\t//REBUILD SPLINE NODES\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxySpline2($modName, $mirrorMod, $prfx, $oppPrfx, $splineNum, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY ARM MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditArm()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadarmTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $upperArmNum = `intSliderGrp -q -v upperArmModEditNum`;\n\tint $lowerArmNum = `intSliderGrp -q -v forearmModEditNum`;\n\tint $elbowNum = `intSliderGrp -q -v RRM_ElbowEditNum`;\n\tint $elbowJoints = `radioButtonGrp -q -select RRM_ElbowEditJoints`;\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t//CHANGE ATTRIBUTES\n\tlockNode -lock 0 (\"RRM_\" + $modName);\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".upperArmNum\");\n\tsetAttr (\"RRM_\" + $modName + \".upperArmNum\") $upperArmNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".upperArmNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".lowerArmNum\");\n\tsetAttr (\"RRM_\" + $modName + \".lowerArmNum\") $lowerArmNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".lowerArmNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".elbowNum\");\n\tsetAttr (\"RRM_\" + $modName + \".elbowNum\") $elbowNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".elbowNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".elbowJoints\");\n\tsetAttr (\"RRM_\" + $modName + \".elbowJoints\") $elbowJoints;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".elbowJoints\");\n\tlockNode -lock 1 (\"RRM_\" + $modName);\n\n\t$i = 1;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_ElbowGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_ElbowGrp\") (\"RRM_r_\" + $modName + \"_ElbowGrp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_Elbow1Grp\") (\"RRM_l_\" + $modName + \"_Elbow2Grp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_Elbow2AimLctr\") (\"RRM_l_\" + $modName + \"_AimLctr\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Elbow1Grp\") (\"RRM_r_\" + $modName + \"_Elbow2Grp\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Elbow2AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Upper*\") (\"RRM_r_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Middle*\") (\"RRM_r_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Lower*\") (\"RRM_r_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\t\t\n\t\t$mirrorMod = 2;\n\t}\n\telse\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_\" + $modName + \"_ElbowGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_ElbowGrp\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_Elbow1Grp\") (\"RRM_\" + $modName + \"_Elbow2Grp\")\n\t\t\t(\"RRM_\" + $modName + \"_Elbow2AimLctr\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\n\t}\n\n\t//DELETE OLD ARM NODES\n\t$elbowNodes = `ls -sl`;\n\tselect -hi $elbowNodes;\n\t$allElbowNodes = `ls -sl`;\n\tlockNode -lock off $allElbowNodes;\n\tdelete $allElbowNodes;\n\t\n\t//REBUILD ARM NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyArm2($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY LEG MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditLeg()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadlegTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $upperLegNum = `intSliderGrp -q -v upperLegModEditNum`;\n\tint $lowerLegNum = `intSliderGrp -q -v lowerLegModEditNum`;\n\tint $kneeNum = `intSliderGrp -q -v RRM_KneeEditNum`;\n\tint $kneeJoints = `radioButtonGrp -q -select RRM_KneeEditJoints`;\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$posOffset = 2;\n\t\n\t$i = 1;\n\t\n\t//CHANGE ATTRIBUTES\n\tlockNode -lock 0 (\"RRM_\" + $modName);\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".upperLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".upperLegNum\") $upperLegNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".upperLegNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".lowerLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".lowerLegNum\") $lowerLegNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".lowerLegNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".kneeNum\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeNum\") $kneeNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".kneeNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".kneeJoints\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeJoints\") $kneeJoints;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".kneeJoints\");\n\tlockNode -lock 1 (\"RRM_\" + $modName);\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_KneeGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_KneeGrp\") (\"RRM_r_\" + $modName + \"_KneeGrp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_Knee1Grp\") (\"RRM_l_\" + $modName + \"_Knee2Grp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_Knee2AimLctr\") (\"RRM_l_\" + $modName + \"_AimLctr\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Knee1Grp\") (\"RRM_r_\" + $modName + \"_Knee2Grp\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Knee2AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Upper*\") (\"RRM_r_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Middle*\") (\"RRM_r_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Lower*\") (\"RRM_r_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\n\t\t$mirrorMod = 2;\n\t}\n\telse\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_\" + $modName + \"_KneeGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_KneeGrp\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_Knee1Grp\") (\"RRM_\" + $modName + \"_Knee2Grp\")\n\t\t\t(\"RRM_\" + $modName + \"_Knee2AimLctr\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\n\t}\n\t//DELETE OLD LEGrp NODES\n\t$kneeNodes = `ls -sl`;\n\tselect -hi $kneeNodes;\n\t$allKneeNodes = `ls -sl`;\n\tlockNode -lock off $allKneeNodes;\n\tdelete $kneeNodes;\n\t\t\n\t//REBUILD LEGrp NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyLeg2($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $posOffset, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$posOffset = -2;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\tselect $finalSelect $each;\n\t\t\t\t$finalSelect = `ls -sl`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY FK CHAIN MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditFkChain()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadfkChainTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $chainsNum = `intSliderGrp -q -v fkChainModEditChains`;\n\tint $jointsNum = `intSliderGrp -q -v fkChainModEditJointsPerChain`;\n\tint $direction = `getAttr (\"RRM_\" + $modName + \".direction\")`;\n\tint $mirrorMod = 0;\n\n\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$rotOffset = 0;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t$i=0;\n\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tselect (\"RRM_l_\" + $modName + \"_Grp\") (\"RRM_r_\" + $modName + \"_Grp\")$connectors;\n\t\t$mirrorMod = 1;\n\t}\n\telse\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\t\tselect (\"RRM_\" + $modName + \"_Grp\") $connectors;\n\t}\n\n\t//DELETE OLD FK NODES\n\t$fkNodes = `ls -sl`;\n\tselect -hi $fkNodes;\n\t$allFkNodes = `ls -sl`;\n\tlockNode -lock off $allFkNodes;\n\tdelete $allFkNodes;\n\t\n\t//UNLOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock off $lockNodes;\n\n\t//REBUILD FK NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyFKChain2($modName, $chainsNum, $jointsNum, $direction, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY HEAD MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditHead()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadheadTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\tint $i;\n\t\n\t//CHECK FOR PAIRING\n\tif (!`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\t\t$mirrorMod = 0;\n\t}\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Jaw\")`)\n\t\t{\n\t\t\t//SET JAW ON IN PARENT NODE\n\t\t\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\") 0;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t\tlockNode -lock off (\"RRM_\" + $modName);\n\t\t\tsetAttr -l false (\"RRM_\" + $modName + \".jaw\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".jaw\") 0;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $modName);\n\t\t\n\n\t\t\tselect -hi (\"RRM_*_RRM_\" + $prfx + $modName + \"_JawCtrl\")  (\"RRM_*_RRM_\" + $prfx + $modName + \"_Jaw_AimLctr\")\n\t\t\t(\"RRM_*_RRM_\" + $prfx + $modName + \"_JawEndCtrl\")  (\"RRM_*_RRM_\" + $prfx + $modName + \"_JawEnd_AimLctr\");\n\t\t\t$connectors = `ls -sl`;\n\t\t\t\n\t\t\tselect -hi (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tselect -add $connectors;\n\t\t\t$jawHierarchy = `ls -sl`;\n\t\t\tlockNode -lock off $jawHierarchy;\n\t\t\tdelete $jawHierarchy;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//SET JAW ON IN PARENT NODE\n\t\t\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\") 1;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t\tlockNode -lock off (\"RRM_\" + $modName);\n\t\t\tsetAttr -l false (\"RRM_\" + $modName + \".jaw\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".jaw\") 1;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $modName);\n\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base\t (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Jaw\")`;\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tmakeIdentity -apply false -s 1 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Jaw\")`;\n\t\t\t$jawLoc = `getAttr  (\"RRM_\" + $prfx + $modName + \"_Jaw.ty\")`;\n\t\t\tmove -r -ls 0 0 ($jawLoc/6) (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.core\") ($prfx + $modName + \"_Jaw\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.core\");\n\t\t\n\t\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\trotate -r 90 0 0 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_JawEnd\")`;\n\t\t\tparent  (\"RRM_\" + $prfx + $modName + \"_JawEnd\")  (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmakeIdentity -apply false -s 1  (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmove -r -ls 0 (($jawLoc/3)*2) $jawLoc (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\") ($prfx + $modName + \"_JawEnd\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\");\n        \n\t\t\tlockNode -lock on (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\n\t\t\t//CONNECTORS\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Jaw\"));\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Jaw\"), (\"RRM_\" + $prfx + $modName + \"_JawEnd\"));\n\t\t}\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY LOOK AT MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditLookAt()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadlookAtTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $jointsNum = `intSliderGrp -q -v lookAtModEditJoints`;\n\tint $mirrorMod = 0;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$i = 0;\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tselect (\"RRM_l_\" + $modName + \"_Grp\") (\"RRM_r_\" + $modName + \"_Grp\") $connectors;\n\t\t//(\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\t\t\n\t\t$mirrorMod = 1;\n\t}\n\telse\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tselect (\"RRM_\" + $modName + \"_Grp\") $connectors;\n\t}\n\n\t//DELETE OLD LOOK AT NODES\n\t$fkNodes = `ls -sl`;\n\tselect -hi $fkNodes;\n\t$allFkNodes = `ls -sl`;\n\tlockNode -lock off $allFkNodes;\n\tdelete $allFkNodes;\n\t\n\t//UNLOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock off $lockNodes;\n\t\n\t//REBUILD LOOK AT NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyLookAt2($modName, $jointsNum, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\t\tif ($modNameCheck == \"\")\n\t\t\t\t{\n\t\t\t\t\tlockNode -lock off $each;\n\t\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n//////////////////////////////////////SINGLE HIERARCHY////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE ROOT SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigRootSH()\n{\n\t//GET NAME\n\t $modName = `textField -q -text RRM_TextFieldCharName`;\n\t \n\t //CREATE LAYERS\n\t//LAYER\n\tcreateDisplayLayer -n ($modName + \"_SHJointsLayer\") -number 1 -empty;\n\tselect -cl;\t\n\tjoint -n ($modName + \"_ROOTSHJnt\");\n\tparentConstraint ($modName + \"_ROOTJnt\") ($modName + \"_ROOTSHJnt\");\n\tgroup -n ($modName + \"_SHJntGrp\") ($modName + \"_ROOTSHJnt\"); xform -os -piv 0 0 0;\n\tparent ($modName + \"_SHJntGrp\") ($modName);\n\t$JointOrient = `getAttr  ($modName + \"_ROOTJnt.jointOrient\")`;\n\tsetAttr (($modName + \"_ROOTSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\teditDisplayLayerMembers -noRecurse ($modName + \"_SHJointsLayer\") `ls ($modName + \"_SHJntGrp\")`;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////GENERATE ROOT AND MAIN SH MODULE/////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigRootMainSH()\n{\n\t//GET NAME\n\t $modName = `textField -q -text RRM_TextFieldCharName`;\n\t \n\t //CREATE LAYERS\n\t//LAYER\n\tcreateDisplayLayer -n ($modName + \"_SHJointsLayer\") -number 1 -empty;\n\n\tselect -cl;\t\n\tjoint -n ($modName + \"_MAINSHJnt\");\n\tparentConstraint ($modName + \"_MAINCtrl\") ($modName + \"_MAINSHJnt\");\n\tgroup -n ($modName + \"_SHJntGrp\") ($modName + \"_MAINSHJnt\"); xform -os -piv 0 0 0;\n\tparent ($modName + \"_SHJntGrp\") ($modName);\n\tselect -cl;\t\n\tjoint -n ($modName + \"_ROOTSHJnt\");\n\taddAttr -ln \"hips\"  -at bool ($modName + \"_ROOTSHJnt\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTSHJnt.hips\");\n\n\tparentConstraint ($modName + \"_ROOTJnt\") ($modName + \"_ROOTSHJnt\");\n\tparent ($modName + \"_ROOTSHJnt\") ($modName + \"_MAINSHJnt\");\n\t$JointOrient = `getAttr  ($modName + \"_ROOTJnt.jointOrient\")`;\n\tsetAttr (($modName + \"_ROOTSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\teditDisplayLayerMembers -noRecurse ($modName + \"_SHJointsLayer\") `ls ($modName + \"_SHJntGrp\")`;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////GENERATE SPLINE SH MODULE/////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigSplineSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t//GET ATTRIBUTES\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t//GENERATE JOINTS\n\t$splineProxies = `ls (\"RRM_\" + $lPrfx + $core + \"_??\")`;\n\tint $crntNum = 0;\n\t$numPadding = \"_0\";\n\t$prevPadding = \"_0\";\n\tfloat $splineLoc[];\n\tfor ($crntProxy in $splineProxies)\n\t{\n\t\t$crntNum++;\n\t\tif ($crntNum >= 10)\n\t\t{$numPadding = \"_\";}\n\t\t\t\n\t\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\t\tparentConstraint ($mod_lCore + $numPadding + $crntNum + \"Jnt\") ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\n\t\tif ($crntNum == 1)\n\t\t{\n\t\t\tparent ($mod_lCore + $numPadding + $crntNum + \"SHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\taddAttr -ln \"splineStart\"  -at bool ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + $numPadding + $crntNum + \"SHJnt.splineStart\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint $previousNum = ($crntNum - 1);\n\t\t\tparent ($mod_lCore + $numPadding + $crntNum + \"SHJnt\")  ($mod_lCore + $prevPadding + $previousNum + \"SHJnt\");\n\t\t}\n\t\t$JointOrient = `getAttr  ($mod_lCore + $numPadding + $crntNum + \"Jnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + $numPadding + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_TopSHJnt\");\n\taddAttr -ln \"splineEnd\"  -at bool ($mod_lCore + \"_TopSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_TopSHJnt.splineEnd\");\n\n\tparentConstraint ($mod_lCore + \"_TopJnt\") ($mod_lCore + \"_TopSHJnt\");\n\tparent ($mod_lCore + \"_TopSHJnt\") ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\t$JointOrient = `getAttr  ($mod_lCore + \"_TopJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\tif (`objExists (\"RRM_\" + $lPrfx + $core + \"_Hip\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_HipSHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_HipJnt\") ($mod_lCore + \"_HipSHJnt\");\n\t\tparent ($mod_lCore + \"_HipSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_HipJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n\t\n\t//RIGHT SIDE/////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////\n\t\n\t\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\n\t\t//GENERATE JOINTS\n\t\t$splineProxies = `ls (\"RRM_\" + $rPrfx + $core + \"_??\")`;\n\t\tint $crntNum = 0;\n\t\t$numPadding = \"_0\";\n\t\tfloat $splineLoc[];\n\t\tfor ($crntProxy in $splineProxies)\n\t\t{\n\t\t\t$crntNum++;\n\t\t\tif ($crntNum >= 10)\n\t\t\t{$numPadding = \"_\";}\n\t\t\t\t\n\t\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_rCore + $numPadding + $crntNum + \"Jnt\") ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\n\t\t\tif ($crntNum == 1)\n\t\t\t{\n\t\t\t\tparent ($mod_rCore + $numPadding + $crntNum + \"SHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\t\taddAttr -ln \"splineStart\"  -at bool ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + $numPadding + $crntNum + \"SHJnt.splineStart\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint $previousNum = ($crntNum - 1);\n\t\t\t\tparent ($mod_rCore + $numPadding + $crntNum + \"SHJnt\")  ($mod_rCore + $prevPadding + $previousNum + \"SHJnt\");\n\t\t\t}\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + $numPadding + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + $numPadding + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_TopSHJnt\");\n\t\taddAttr -ln \"splineEnd\"  -at bool ($mod_rCore + \"_TopSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_TopSHJnt.splineEnd\");\n\t\n\t\tparentConstraint ($mod_rCore + \"_TopJnt\") ($mod_rCore + \"_TopSHJnt\");\n\t\tparent ($mod_rCore + \"_TopSHJnt\") ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_TopJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\tif (`objExists (\"RRM_\" + $lPrfx + $core + \"_Hip\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_HipSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_HipJnt\") ($mod_rCore + \"_HipSHJnt\");\n\t\t\tparent ($mod_rCore + \"_HipSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_HipJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t}\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE ARM SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigArmSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t//GENERATE JOINTS\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_ClavicleSHJnt\");\n\taddAttr -ln \"shoulder\"  -at bool ($mod_lCore + \"_ClavicleSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_ClavicleSHJnt.shoulder\");\n\n\tparentConstraint ($mod_lCore + \"_ClavicleJnt\") ($mod_lCore + \"_ClavicleSHJnt\");\n\tparent  ($mod_lCore + \"_ClavicleSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t$JointOrient = `getAttr  ($mod_lCore + \"_ClavicleJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_ClavicleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\t$parentJnt = ($mod_lCore + \"_ClavicleSHJnt\");\n\t\n\tif (!`objExists ($mod_rCore + \"_Shoulder_CurveJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_ShoulderSHJnt\");\n\t\taddAttr -ln \"arm\"  -at bool ($mod_lCore + \"_ShoulderSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_ShoulderSHJnt.arm\");\n\t\n\t\tparentConstraint ($mod_lCore + \"_ShoulderJnt\") ($mod_lCore + \"_ShoulderSHJnt\");\n\t\tparent ($mod_lCore + \"_ShoulderSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_ShoulderJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_ShoulderSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_ShoulderSHJnt\");\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t\taddAttr -ln \"arm\"  -at bool ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_Shoulder_CurveSHJnt.arm\");\n\n\t\tparentConstraint ($mod_lCore + \"_Shoulder_CurveJnt\") ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t\tparent ($mod_lCore + \"_Shoulder_CurveSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Shoulder_CurveJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_Shoulder_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t}\t\t\n\t\n\t//CHECK FOR TOON ARMS\n\tif (`objExists ($mod_lCore + \"_Upper_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Upper_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\tif (`objExists ($mod_lCore + \"_ElbowJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Elbow_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_ElbowSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_ElbowSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_ElbowSHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_ElbowJnt\")  ($mod_lCore + \"_ElbowSHJnt\");\n\t\t\tparent ($mod_lCore + \"_ElbowSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_ElbowJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_ElbowSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_ElbowSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow_CurveSHJnt.forearm\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Elbow_CurveJnt\") ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Elbow1_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow1SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Elbow1Jnt\")  ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow1SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow1Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow1_CurveSHJnt.forearm\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Elbow1_CurveJnt\") ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow1_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow1_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t}\n\t\t\n\t\tif (`objExists ($mod_lCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$middleCurveJnt = `ls ($mod_lCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Elbow2_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow2SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Elbow2Jnt\")  ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow2SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow2Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow2_CurveSHJnt.forearm\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Elbow2_CurveJnt\") ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow2_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow2_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t}\n\t}\n\n\tif (`objExists ($mod_lCore + \"_Lower_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Lower_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_WristSHJnt\");\n\taddAttr -ln \"hand\"  -at bool ($mod_lCore + \"_WristSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_WristSHJnt.hand\");\n\n\tparentConstraint ($mod_lCore + \"_WristJnt\") ($mod_lCore + \"_WristSHJnt\");\n\tparent  ($mod_lCore + \"_WristSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_WristJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_WristSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\t//RIGHT SIDE//////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$rPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\t//GENERATE JOINTS\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_ClavicleSHJnt\");\n\t\taddAttr -ln \"shoulder\"  -at bool ($mod_rCore + \"_ClavicleSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_ClavicleSHJnt.shoulder\");\n\t\n\t\tparentConstraint ($mod_rCore + \"_ClavicleJnt\") ($mod_rCore + \"_ClavicleSHJnt\");\n\t\tparent  ($mod_rCore + \"_ClavicleSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ClavicleJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_ClavicleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\t$parentJnt = ($mod_rCore + \"_ClavicleSHJnt\");\n\t\t\n\t\tif (!`objExists ($mod_rCore + \"_Shoulder_CurveJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t\taddAttr -ln \"arm\"  -at bool ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_ShoulderSHJnt.arm\");\n\t\n\t\t\tparentConstraint ($mod_rCore + \"_ShoulderJnt\") ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t\tparent ($mod_rCore + \"_ShoulderSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ShoulderJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_ShoulderSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_Shoulder_CurveSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_Shoulder_CurveJnt\") ($mod_rCore + \"_Shoulder_CurveSHJnt\");\n\t\t\tparent ($mod_rCore + \"_Shoulder_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Shoulder_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_Shoulder_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_Shoulder_CurveSHJnt\");\n\t\t}\t\t\n\t\t\n\t\t//CHECK FOR TOON ARMS\n\t\tif (`objExists ($mod_rCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\tif (`objExists ($mod_rCore + \"_ElbowJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Elbow_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_ElbowSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_ElbowJnt\")  ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_ElbowSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ElbowJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_ElbowSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow_CurveSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Elbow_CurveJnt\") ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Elbow1_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow1SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Elbow1Jnt\")  ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow1SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow1Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow1_CurveSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Elbow1_CurveJnt\") ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow1_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow1_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t}\n\t\t\t\t\n\t\t\tif (`objExists ($mod_rCore + \"_Middle_Curve1Jnt\")`)\n\t\t\t{\n\t\t\t\t$middleCurveJnt = `ls ($mod_rCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\t\tint $crntNum = 1;\n\t\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t\t{\n\t\t\t\t\tselect -cl;\n\t\t\t\t\tjoint -n ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparentConstraint ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparent ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\t\tsetAttr (($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\t\n\t\t\t\t\t//$parentJnt = ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\t$crntNum++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Elbow2_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow2SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Elbow2Jnt\")  ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow2SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow2Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow2_CurveSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Elbow2_CurveJnt\") ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow2_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow2_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t}\n\t\t}\n    \t\n\t\tif (`objExists ($mod_rCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tstring $crntUpper;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_WristSHJnt\");\n\t\taddAttr -ln \"hand\"  -at bool ($mod_rCore + \"_WristSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_WristSHJnt.hand\");\n\n\t\tparentConstraint ($mod_rCore + \"_WristJnt\") ($mod_rCore + \"_WristSHJnt\");\n\t\tparent  ($mod_rCore + \"_WristSHJnt\") $parentJnt;\t\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_WristJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_WristSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE LEG SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigLegSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t//GENERATE JOINTS\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\tif (!`objExists ($mod_rCore + \"_HipCurveJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_HipSHJnt\");\n\t\taddAttr -ln \"upLeg\"  -at bool ($mod_lCore + \"_HipSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_HipSHJnt.upLeg\");\n\t\n\t\tparentConstraint ($mod_lCore + \"_HipJnt\") ($mod_lCore + \"_HipSHJnt\");\n\t\tparent ($mod_lCore + \"_HipSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_HipJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_HipSHJnt\");\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_HipCurveSHJnt\");\n\t\taddAttr -ln \"upLeg\"  -at bool ($mod_lCore + \"_HipCurveSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_HipCurveSHJnt.upLeg\");\n\t\n\t\tparentConstraint ($mod_lCore + \"_HipCurveJnt\") ($mod_lCore + \"_HipCurveSHJnt\");\n\t\tparent ($mod_lCore + \"_HipCurveSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_HipCurveJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_HipCurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_HipCurveSHJnt\");\n\t}\t\t\n\t\n\t//CHECK FOR TOON LEGS\n\tif (`objExists ($mod_lCore + \"_Upper_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Upper_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tstring $crntUpper;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\tif (`objExists ($mod_lCore + \"_KneeJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Knee_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_KneeSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_KneeSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_KneeSHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_KneeJnt\")  ($mod_lCore + \"_KneeSHJnt\");\n\t\t\tparent ($mod_lCore + \"_KneeSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_KneeJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_KneeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_KneeSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t\taddAttr -ln \"leg\"  -at bool ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee_CurveSHJnt.leg\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Knee_CurveJnt\") ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Knee1_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Knee1SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Knee1SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee1SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Knee1Jnt\")  ($mod_lCore + \"_Knee1SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee1SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee1Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Knee1SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t\taddAttr -ln \"leg\"  -at bool ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee1_CurveSHJnt.leg\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Knee1_CurveJnt\") ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee1_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee1_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t}\n\t\t\n\t\tif (`objExists ($mod_lCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$middleCurveJnt = `ls ($mod_lCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\tstring $crntMiddleCurve;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Knee2_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Knee2SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Knee2SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee2SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Knee2Jnt\")  ($mod_lCore + \"_Knee2SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee2SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee2Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Knee2SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t\taddAttr -ln \"leg\"  -at bool ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee2_CurveSHJnt.leg\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Knee2_CurveJnt\") ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee2_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee2_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t}\n\t}\n\n\tif (`objExists ($mod_lCore + \"_Lower_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Lower_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tstring $crntUpper;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_AnkleSHJnt\");\n\taddAttr -ln \"foot\"  -at bool ($mod_lCore + \"_AnkleSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_AnkleSHJnt.foot\");\n\n\tparentConstraint ($mod_lCore + \"_AnkleJnt\") ($mod_lCore + \"_AnkleSHJnt\");\n\tparent  ($mod_lCore + \"_AnkleSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_AnkleJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_AnkleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t$parentJnt = ($mod_lCore + \"_AnkleSHJnt\");\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_BallSHJnt\");\n\taddAttr -ln \"toeBase\"  -at bool ($mod_lCore + \"_BallSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_BallSHJnt.toeBase\");\n\n\tparentConstraint ($mod_lCore + \"_BallJnt\") ($mod_lCore + \"_BallSHJnt\");\n\tparent ($mod_lCore + \"_BallSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_BallJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_BallSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t$parentJnt = ($mod_lCore + \"_BallSHJnt\");\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_ToeSHJnt\");\n\tparentConstraint ($mod_lCore + \"_ToeJnt\") ($mod_lCore + \"_ToeSHJnt\");\n\tparent  ($mod_lCore + \"_ToeSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_ToeJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_ToeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\t//RIGHT SIDE//////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$rPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\t//GENERATE JOINTS\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\tif (!`objExists ($mod_rCore + \"_HipCurveJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_HipSHJnt\");\n\t\t\taddAttr -ln \"upLeg\"  -at bool ($mod_rCore + \"_HipSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_HipSHJnt.upLeg\");\n\n\t\t\tparentConstraint ($mod_rCore + \"_HipJnt\") ($mod_rCore + \"_HipSHJnt\");\n\t\t\tparent ($mod_rCore + \"_HipSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_HipJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_HipSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t\taddAttr -ln \"upLeg\"  -at bool ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_HipCurveSHJnt.upLeg\");\n\n\t\t\tparentConstraint ($mod_rCore + \"_HipCurveJnt\") ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t\tparent ($mod_rCore + \"_HipCurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_HipCurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_HipCurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t}\t\t\n\t\t\n\t\t//CHECK FOR TOON LEGS\n\t\tif (`objExists ($mod_rCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tstring $crntUpper;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\tif (`objExists ($mod_rCore + \"_KneeJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Knee_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_KneeSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_KneeJnt\")  ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_KneeSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_KneeJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_KneeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"leg\"  -at bool ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee_CurveSHJnt.leg\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Knee_CurveJnt\") ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Knee1_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee1SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Knee1Jnt\")  ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee1SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee1Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"leg\"  -at bool ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee1_CurveSHJnt.leg\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Knee1_CurveJnt\") ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee1_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee1_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t}\n\t\t\t\n\t\t\tif (`objExists ($mod_rCore + \"_Middle_Curve1Jnt\")`)\n\t\t\t{\n\t\t\t\t$middleCurveJnt = `ls ($mod_rCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\t\tstring $crntMiddleCurve;\n\t\t\t\tint $crntNum = 1;\n\t\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tselect -cl;\n\t\t\t\t\tjoint -n ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparentConstraint ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparent ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\t\tsetAttr (($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\t\n\t\t\t\t\t//$parentJnt = ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\t$crntNum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Knee2_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee2SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Knee2Jnt\")  ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee2SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee2Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"leg\"  -at bool ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee2_CurveSHJnt.leg\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Knee2_CurveJnt\") ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee2_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee2_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t}\n\t\t}\n    \t\n\t\tif (`objExists ($mod_rCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tstring $crntUpper;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_AnkleSHJnt\");\n\t\taddAttr -ln \"foot\"  -at bool ($mod_rCore + \"_AnkleSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_AnkleSHJnt.foot\");\n\n\t\tparentConstraint ($mod_rCore + \"_AnkleJnt\") ($mod_rCore + \"_AnkleSHJnt\");\n\t\tparent  ($mod_rCore + \"_AnkleSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_AnkleJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_AnkleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_rCore + \"_AnkleSHJnt\");\n\t\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_BallSHJnt\");\n\t\taddAttr -ln \"toeBase\"  -at bool ($mod_rCore + \"_BallSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_BallSHJnt.toeBase\");\n\n\t\tparentConstraint ($mod_rCore + \"_BallJnt\") ($mod_rCore + \"_BallSHJnt\");\n\t\tparent  ($mod_rCore + \"_BallSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_BallJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_BallSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_rCore + \"_BallSHJnt\");\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_ToeSHJnt\");\n\t\tparentConstraint ($mod_rCore + \"_ToeJnt\") ($mod_rCore + \"_ToeSHJnt\");\n\t\tparent  ($mod_rCore + \"_ToeSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ToeJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_ToeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////////////////////////GENERATE FK CHAIN SH MODULE////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigFkChainSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\t$allJoints = `ls (\"RRM_\" + $lPrfx + $core + \"_??_??\")`;\n\t$sizeAllJoints = `size $allJoints`;\n\t$fKChain = `ls (\"RRM_\" + $lPrfx + $core + \"_??_01\")`;\n\t$fKChainSize = `size $fKChain`;\n\tstring $crntFKChain;\n\t$crntCh = 1;\n\t$crntJnt = 1;\n\t\t\n\tfor ($crntFKChain in $fKChain)                                    \n\t{\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\tstring $nPdCh = \"\";\n\t\tif ($crntCh < 10)\n\t\t{\n\t\t\t$nPdCh = \"0\";\n\t\t}\n\t\t\n\t\t$fKJoints = `ls (\"RRM_\" + $lPrfx + $core + \"_\" + $nPdCh + $crntCh + \"_\" + \"??\")`;\n\t\tstring $crntFKJoint;\n\t\t$crntJnt = 1;\n\t\tfor ($crntFKJoint in $fKJoints)\n\t\t{\n\t\t\tstring $nPd = \"\";\n\t\t\tif ($crntJnt < 10)\n\t\t\t{\n\t\t\t\t$nPd = \"0\";\n\t\t\t}\n\t\t\t$nextJnt = ($crntJnt + 1);\n\t\t\t$nPdNext = \"\";\n\t\t\tif ($nextJnt <10)\n\t\t\t{\n\t\t\t\t$nPdNext = \"0\";\n\t\t\t}\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t$parentJnt = ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\n\t\t\t$crntJnt++;\n\t\t}\n\t\t$crntCh++;\n\t}\n\t\n\t//RIGHT SIDE////////////////////////////////////////////////////////\n\t///////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\t$allJoints = `ls (\"RRM_\" + $lPrfx + $core + \"_??_??\")`;\n\t\t$sizeAllJoints = `size $allJoints`;\n\t\t$fKChain = `ls (\"RRM_\" + $lPrfx + $core + \"_??_01\")`;\n\t\t$fKChainSize = `size $fKChain`;\n\t\t$crntCh = 1;\n\t\t$crntJnt = 1;\n\t\t\t\n\t\tfor ($crntFKChain in $fKChain)                                    \n\t\t{\n\t\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\tstring $nPdCh = \"\";\n\t\t\tif ($crntCh < 10)\n\t\t\t{\n\t\t\t\t$nPdCh = \"0\";\n\t\t\t}\n\t\t\t\n\t\t\tselect ;\n\t\t\t$fKProxies = `ls (\"RRM_\" + $lPrfx + $core + \"_\" + $nPdCh + $crntCh + \"_\" + \"??\")`;\n\t\t\t$crntJnt = 1;\n\t\t\tfor ($crntFKJoint in $fKProxies)\n\t\t\t{\n\t\t\t\tstring $nPd = \"\";\n\t\t\t\tif ($crntJnt < 10)\n\t\t\t\t{\n\t\t\t\t\t$nPd = \"0\";\n\t\t\t\t}\n\t\t\t\t$nextJnt = ($crntJnt + 1);\n\t\t\t\t$nPdNext = \"\";\n\t\t\t\tif ($nextJnt <10)\n\t\t\t\t{\n\t\t\t\t\t$nPdNext = \"0\";\n\t\t\t\t}\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t$parentJnt = ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\t\n\t\t\t\t$crntJnt++;\n\t\t\t}\n\t\t\t$crntCh++;\n\t\t}\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////////////////////////GENERATE HEAD SH MODULE////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigHeadSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\n\tif (`objExists ($mod_lCore + \"_JawJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_JawSHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_JawJnt\") ($mod_lCore + \"_JawSHJnt\");\n\t\tparent ($mod_lCore + \"_JawSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_lCore + \"_JawJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_JawSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_JawEndSHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_JawEndJnt\") ($mod_lCore + \"_JawEndSHJnt\");\n\t\tparent ($mod_lCore + \"_JawEndSHJnt\") ($mod_lCore + \"_JawSHJnt\");\n\t\t$JointOrient = `getAttr ($mod_lCore + \"_JawEndJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_JawEndSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_TopSHJnt\");\n\tparentConstraint ($mod_lCore + \"_TopJnt\") ($mod_lCore + \"_TopSHJnt\");\n\tparent ($mod_lCore + \"_TopSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr ($mod_lCore + \"_TopJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\n\t//RIGHT SIDE\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n    \t\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\tif (`objExists ($mod_rCore + \"_JawJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_JawSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_JawJnt\") ($mod_rCore + \"_JawSHJnt\");\n\t\t\tparent ($mod_rCore + \"_JawSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_JawJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_JawSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_JawEndSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_JawEndJnt\") ($mod_rCore + \"_JawEndSHJnt\");\n\t\t\tparent ($mod_rCore + \"_JawEndSHJnt\") ($mod_rCore + \"_JawSHJnt\");\n\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_JawEndJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_JawEndSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t}\n    \t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_TopSHJnt\");\n\t\tparentConstraint ($mod_rCore + \"_TopJnt\") ($mod_rCore + \"_TopSHJnt\");\n\t\tparent ($mod_rCore + \"_TopSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_rCore + \"_TopJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\n\t}\n}\n\t\t\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE LOOK AT SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigLookAtSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\t//EYE JOINTS\n\t$lookAts = `ls (\"RRM_\" + $lPrfx + $core + \"_??\")`;\n\t$lookAtNum = `size $lookAts`;\n\tstring $crntLookAt;\n\t$crntNum = 1;\n\tfor ($crntLookAt in $lookAts)\n\t{\n\t\tstring $nPd = \"\";\n\t\tif ($crntNum < 10)\n\t\t{\n\t\t\t$nPd = \"0\";\n\t\t}\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_\" + $nPd + $crntNum + \"Jnt\") ($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\tparent ($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_lCore + \"_\" + $nPd + $crntNum + \"Jnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\t$crntNum++;\n\t}\n\t\n\t//RIGHT SIDE\t\t\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$rPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n    \t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\t//EYE JOINTS\n\t\t$lookAts = `ls (\"RRM_\" + $lPrfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\n\t\tstring $crntLookAt;\n\t\t$crntNum = 1;\n\t\tfor ($crntLookAt in $lookAts)\n\t\t{\n\t\t\tstring $nPd = \"\";\n\t\t\tif ($crntNum < 10)\n\t\t\t{\n\t\t\t\t$nPd = \"0\";\n\t\t\t}\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_\" + $nPd + $crntNum + \"Jnt\") ($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_\" + $nPd + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t$crntNum++;\n\t\t}\n\t}\n}\n\n\t\t\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE AUX AT SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigAuxiliarySH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t//string $modAttachNode;\n\t\n\t//if (`objExists (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`)\n\t//{\n\t//\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t//}\n\t//else if (`objExists (\"RRM_\" + $lPrfx + $core + \"_Aux.attachNode\")`)\n\t//{\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Aux.attachNode\")`;\n\t//}\n\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core + \"_Aux\");\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core + \"_Aux\");\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"SHJnt\");\n\tparentConstraint ($mod_lCore + \"Jnt\") ($mod_lCore + \"SHJnt\");\n\tparent ($mod_lCore + \"SHJnt\") $parentJnt;\n\t$JointOrient = `getAttr ($mod_lCore + \"Jnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\n\t//RIGHT SIDE\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Aux.attachNode\")`;\n    \t\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core + \"_Aux\");\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core + \"_Aux\");\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n    \t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"SHJnt\");\n\t\tparentConstraint ($mod_rCore + \"Jnt\") ($mod_rCore + \"SHJnt\");\n\t\tparent ($mod_rCore + \"SHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_rCore + \"Jnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n}\n\n\nglobal proc RRM_MirrorAttributes(string $moduleName)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\n\tif (`objExists ($modName + \"_l_\" + $moduleName + \"*Ctrl\")`)\n\t{\n\t\tselect ;\n\t\t$lControls = `ls -type \"transform\" ($modName + \"_l_\" + $moduleName + \"*Ctrl\")`;\n\t\t\n\t\tfor ($lCurrentControl in $lControls)\n\t\t{\n\t\t\tif (!`objExists ($lCurrentControl + \".rightControl\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"rightControl\"  -dt \"string\" $lCurrentControl;\n\t\t\t\tsetAttr -e-keyable true ($lCurrentControl + \".rightControl\");\n\t\t\t\t$name = substituteAllString ($lCurrentControl, ($modName + \"_l_\"), (\"_r_\"));\n\t\t\t\tsetAttr -type \"string\" ($lCurrentControl + \".rightControl\") $name;\n\t\t\t\tsetAttr -l true ($lCurrentControl + \".rightControl\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (`objExists ($modName + \"_r_\" + $moduleName + \"*Ctrl\")`)  \n\t\t{\n\t\t\t$rControls = `ls -type \"transform\" ($modName + \"_r_\" + $moduleName + \"*Ctrl\")`;\n\t\t\t\n\t\t\tfor ($rCurrentControl in $rControls)\n\t\t\t{\n\t\t\t\tif (!`objExists ($rCurrentControl + \".leftControl\")`)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"leftControl\"  -dt \"string\" $rCurrentControl;\n\t\t\t\t\tsetAttr -e-keyable true ($rCurrentControl + \".leftControl\");\n\t\t\t\t\t$name = substituteAllString ($rCurrentControl, ($modName + \"_r_\"), (\"_l_\"));\n\t\t\t\t\tsetAttr -type \"string\" ($rCurrentControl + \".leftControl\") $name;\n\t\t\t\t\tsetAttr -l true ($rCurrentControl + \".leftControl\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nglobal proc RRM_AddRigName(string $modControls[], string $modName)\n{\n\tfor ($crntControl in $modControls)\n\t{\n\t\taddAttr -ln \"modRigName\"  -dt \"string\" $crntControl;\n\t\tsetAttr -e-keyable true ($crntControl + \".modRigName\");\n\t\tsetAttr -type \"string\" ($crntControl + \".modRigName\") $modName;\n\t\tsetAttr -l true ($crntControl + \".modRigName\");\n\t}\n\t\n\taddAttr -ln \"modRigConnection\"  -dt \"string\" $modName;\n\tsetAttr -e-keyable true ($modName + \".modRigConnection\");\n\tsetAttr -type \"string\" ($modName + \".modRigConnection\") $modName;\n\tsetAttr -l true ($modName + \".modRigConnection\");\n\t\n\tfor ($crntControl in $modControls)\n\t{\n\t\taddAttr -ln \"modRigConnection\"  -dt \"string\" $crntControl;\n\t\tsetAttr -e-keyable true ($crntControl + \".modRigConnection\");\n\t\tconnectAttr -f ($modName + \".modRigConnection\") ($crntControl + \".modRigConnection\");\n\t\tsetAttr -l true ($crntControl + \".modRigConnection\");\n\t}\n}\n\nglobal proc RRM_AddControlsSize(string $modControls[])\n{\n\tfor ($each in $modControls)\n\t{\n\t\tif (!`objExists ($each + \".nonControl\")`)\n\t\t{\n\t\t\taddAttr -ln \"controlSizeX\"  -at double  -dv 1 $each;\n\t\t\tsetAttr -e -keyable true ($each + \".controlSizeX\");\n\t\t\tsetAttr -lock true ($each + \".controlSizeX\");\n\n\t\t\taddAttr -ln \"controlSizeY\"  -at double  -dv 1 $each;\n\t\t\tsetAttr -e -keyable true ($each + \".controlSizeY\");\n\t\t\tsetAttr -lock true ($each + \".controlSizeY\");\n\n\t\t\taddAttr -ln \"controlSizeZ\"  -at double  -dv 1 $each;\n\t\t\tsetAttr -e -keyable true ($each + \".controlSizeZ\");\n\t\t\tsetAttr -lock true ($each + \".controlSizeZ\");\n\t\t}\n\t}\n}\n\nglobal proc RRM_LockAndHideNonModNodes()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\tselect -hi ($modName + \"_MAINCtrl\");\n\t$allNodes = `ls -sl`;\n\t$nurbsCurveShapes = `ls -sl -type \"nurbsCurve\"`;\n\tselect $nurbsCurveShapes;\n\tpickWalk -d up;\n\t$nurbsCurves = `ls -sl`;\n\t$joints = `ls -type \"joint\" $allNodes`;\n\t$constraints = `ls -type \"constraint\" $allNodes`;\n\t\n\tselect $allNodes;\n\tselect -d $nurbsCurves $nurbsCurveShapes $joints $constraints;\n\t$nonKeyableNodes = `ls -sl`;\n\t$sizeNonKeyableNodes = `size $nonKeyableNodes`;\n\t\n\tglobal string $gMainProgressBar;\n\tprogressBar -edit\n    \t-beginProgress\n    \t-isInterruptable true\n    \t-status \"Finishing up...\"\n    \t-maxValue ($sizeNonKeyableNodes)\n    \t$gMainProgressBar;\n    \t\n    $crntNum = 1;\n    \t\n\tstring $crntNode;\n\tfor ($crntNode in $nonKeyableNodes)\n\t{\n\t\t$keyableAttributes = `listAttr -lf -k -v $crntNode`;\n\t\tstring $crntAttribute;\n\t\tfor ($crntAttribute in $keyableAttributes)\n\t\t{\n\t\t\tif(`attributeExists $crntAttribute $crntNode`)\n\t\t\t{\n\t\t\t\tsetAttr -k 0 -l 1 ($crntNode + \".\" + $crntAttribute);\n\t\t\t}\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\t\t\n\t\t$crntNum++;\n\t}\n\tfor ($crntNode in $constraints)\n\t{\n\t\t$keyableAttributes = `listAttr -lf -k -v $crntNode`;\n\t\tfor ($crntAttribute in $keyableAttributes)\n\t\t{\n\t\t\tif(`attributeExists $crntAttribute $crntNode`)\n\t\t\t{\n\t\t\t\tsetAttr -l 1 ($crntNode + \".\" + $crntAttribute);\n\t\t\t}\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\t\t\n\t\t$crntNum++;\n\t}\t\t\n\t$nonKeyableJoints = `ls $joints`;\n\tstring $crntJoint;\n\tfor ($crntJoint in $nonKeyableJoints)\n\t{\n\t\t$keyableAttributes = `listAttr -lf -k -v $crntJoint`;\n\t\tstring $crntAttribute;\n\t\tfor ($crntAttribute in $keyableAttributes)\n\t\t{\n\t\t\tif(`attributeExists $crntAttribute $crntJoint`)\n\t\t\t{\n\t\t\t\tsetAttr -k 0 ($crntJoint + \".\" + $crntAttribute);\n\t\t\t}\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\t\t\n\t\t$crntNum++;\n\t}\n\tprogressBar -edit -endProgress $gMainProgressBar;\n\n}\n\n\nglobal proc RRM_SingleHierarchyInterface()\n{\n\t//CHARACTER NAME\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\n\n\tstring $returnVal_SH_Generate = `confirmDialog\n\t-title \"Do you wish to Generate a Single Hierarchy Joint Set?\"\n\t\t-message \"A single hierarchy is only recommended for use in a game environment.\\n-Some features may not work properly.\\n-Joints do not stretch, but will maintain volume.\"\n\t\t-button \"No\"\n\t\t-button \"Yes\"\n\t\t-button \"Yes, and Create Joint at Origin\"\n\t\t-defaultButton \"No\"`;\n\t\t\n\t\n\tif ($returnVal_SH_Generate == \"Yes\"||$returnVal_SH_Generate == \"Yes, and Create Joint at Origin\") \n\t{\n\t\tprint {\"\\nBUILDING \\\"\" + $modName + \"\\\" SINGLE HIERARCHY...\\n\"};\n\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\tstring $topNodes[];\n\t\tstring $crntNode;\n           \n\t\t//SELECT TOP NODES\t\t\t\n\t\tfor ($crntNode in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntNode + \".top\")`)\n\t\t    {\n\t\t    $topNodes = `ls $crntNode $topNodes`;\n\t\t    }\n\t\t}\n\t\t//REORDER\n\t\tint $topNodesSize = `size $topNodes`;\n\t\tint $crntNum = $topNodesSize;\n\t\t\n\t\tstring $reOrder[];\n\t\twhile ($topNodesSize > 0)\n\t\t{\n\t\t$topNodesSize--;\n\t\t$reOrder = `ls $reOrder $topNodes[$topNodesSize]`;\n\t\t}\n\t\t\n\t\t//GENERATE RIG\n\t\tif ($returnVal_SH_Generate == \"Yes\")\n\t\t{\n\t\t\tRRM_GenerateRigRootSH;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tRRM_GenerateRigRootMainSH;\n\t\t}\n\t\tstring $topNode;\n\t\tfor ($topNode in $reOrder)\n\t\t{\n\t\t\t$modType = `getAttr ($topNode + \".top\")`;\n\t\t\tif ($modType == \"spline\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigSplineSH;\n\t\t\t}\n\t\t\telse if ($modType == \"arm\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigArmSH;\n\t\t\t}\n\t\t\telse if ($modType == \"leg\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigLegSH;\n\t\t\t}\n\t\t\telse if ($modType == \"fkChain\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigFkChainSH;\n\t\t\t}\n\t\t\telse if ($modType == \"head\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigHeadSH;\n\t\t\t}\n\t\t\telse if ($modType == \"lookAt\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigLookAtSH;\n\t\t\t}\n\t\t\telse if ($modType == \"auxiliary\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigAuxiliarySH;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\tprint \"\\nSINGLE HIERARCHY COMPLETED!\\n\";\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n//BUTTON PROC\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRig()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\n\n\tif (`objExists RRM_MAIN`)\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t$size = `size $hierarchy`;\n\t\tif ($size > 2)\n\t\t{\n\t\t\tstring $topNodes[];\n\t\t\tstring $crntNode;\n\n\t\t\t//SELECT TOP NODES\t\t\t\n\t\t\tfor ($crntNode in $hierarchy)\n\t\t\t{\n\t\t\t    if (`objExists ($crntNode + \".top\")`)\n\t\t\t    {\n\t\t\t    $topNodes = `ls $crntNode $topNodes`;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tint $nodeNum = `size $topNodes`;\n\t\t\tif ($nodeNum > 0)\n\t\t\t{\n\t\t\t\tselect $topNodes;\n\n\t\t\t\tglobal string $gMainProgressBar;\n\t\t\t\tprogressBar -edit\n    \t\t\t\t-beginProgress\n    \t\t\t\t-isInterruptable true\n    \t\t\t\t-status \"Generating Rig\"\n    \t\t\t\t-maxValue ($nodeNum + 2)\n    \t\t\t\t$gMainProgressBar;\n    \t\t\t\n\t\t\t\t//REORDER\n\t\t\t\t$topNodesSize = `size $topNodes`;\n\t\t\t\t$crntNum = $topNodesSize;\n\t\t\t\t\n\t\t\t\tstring $reOrder[];\n\t\t\t\twhile ($topNodesSize > 0)\n\t\t\t\t{\n\t\t\t\t\t$topNodesSize--;\n\t\t\t\t\t$reOrder = `ls $reOrder $topNodes[$topNodesSize]`;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//GENERATE RIG\n\t\t\t\tRRM_GenerateRigRoot;\n\t\t\t\tstring $topNode;\n\t\t\t\tint $shoulderCheck = 0;\n\t\t\t\tint $hipCheck = 0;\n\t\t\t\tfor ($topNode in $reOrder)\n\t\t\t\t{\n\t\t\t\t\t$modType = `getAttr ($topNode + \".top\")`;\n\t\t\t\t\t$moduleName = `getAttr ($topNode + \".core\")`;\n\t\t\t\t\tif ($modType == \"spline\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Spline\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigSpline($moduleName, $topNode);\n\t\t\t\t\t}    \n\t\t\t\t\telse if ($modType == \"arm\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Arm\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigArm($moduleName, $topNode);\n\t\t\t\t\t\t$shoulderCheck = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"leg\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Leg\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigLeg($moduleName, $topNode);\n\t\t\t\t\t\t$hipCheck = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"fkChain\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building FK Chain\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigFkChain($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"head\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Head\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigHead($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"lookAt\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Look-At\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigLookAt($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"auxiliary\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Auxiliary\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigAuxiliary($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t//ADD MIRROR OBJECT ATTRIBUTE\n\t\t\t\t\tRRM_MirrorAttributes($moduleName);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$modControls = `ls -type \"transform\" ($modName + \"_*Ctrl\")`;\n\t\t\t\t\n\t\t\t\t//ADD RIG NAME TO CONTROLS\n\t\t\t\tRRM_AddRigName($modControls, $modName);\n\t\t\t\t\n\t\t\t\t//ADD CORE CONTROL NAME\n\t\t\t\tRRM_ControlName($modControls);\n\t\t\t\t\n\t\t\t\t//ADD CONTROL SIZE TO CONTROLS\n\t\t\t\tRRM_AddControlsSize($modControls);\n\t\t\t\t\n\t\t\t\t//CREATE LAYERS\n\t\t\t\t//LAYER\n\t\t\t\tprogressBar -edit -step 1 -status \"Building Layers\" $gMainProgressBar;\n\t\t\t\t\n\t\t\t\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\t\t\tcreateDisplayLayer -n ($modName + \"_JointsLayer\") -number 1 -empty;\t\n\t\t\t\tcreateDisplayLayer -n ($modName + \"_ControlsLayer\") -number 1 -empty;\n\t\t\t\t\n\t\t\t\tselect ($modName + \"_*Ctrl\");\n\t\t\t\tselect -d ($modName + \"_MAINCtrl\");\n\t\t\t\teditDisplayLayerMembers -noRecurse ($modName + \"_ControlsLayer\") `ls -sl`;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tprogressBar -edit -step 1 -status \"Building Layers\" $gMainProgressBar;\n\t\t\t\tselect ($modName + \"_*Jnt\");\n\t\t\t\tif ($shoulderCheck == 1)\n\t\t\t\t{\n\t\t\t\t\tselect -d -hierarchy ($modName + \"*ShoulderJnt\");\n\t\t\t\t}\n\t\t\t\tif ($hipCheck == 1)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($modName + \"*KneeJnt\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\tselect -d -hierarchy ($modName + \"*KneeJnt\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tselect -d -hierarchy ($modName + \"*Knee1Jnt\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$joints = `ls -sl`;\n\t\t\t\t\n\t\t\t\teditDisplayLayerMembers -noRecurse ($modName + \"_JointsLayer\") `ls -sl`;\n\t\t\t\t\n\t\t\t\tprogressBar -edit -endProgress $gMainProgressBar;\n\t\t\t\t//MAKE ALL NODES UNKEYABLE\n\t\t\t\tRRM_LockAndHideNonModNodes;\n\n\t\t\t\tRRM_SingleHierarchyInterface;\n\t\t\t\t\n\t\t\t\tselect ($modName + \"_MAINCtrl\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Your Rig Has No Modules\"\n\t\t\t-message \"You must create modules and attach them to your rig.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Your Rig Has No Modules\"\n\t\t\t-message \"You must create modules and attach them to your rig.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t}\n\t}\n\telse\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t-title \"No Rig Exists\"\n\t\t-message \"You must first create a Proxy rig to RRM_Generate a final rig from.\\n\"\n\t\t-button \"OK\"\n\t\t-defaultButton \"OK\"\n\t\t-cancelButton \"OK\"\n\t\t-icon \"critical\"`;\n\t}\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\tif (`objExists ($modName + \"_MAINCtrl\")`)\n\t{\n\t\tselect ($modName + \"_MAINCtrl\");\n\t}\n\t\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//changeLinearUnit $crntUnit;\n}\n\n///PROMPTS\nglobal proc RRM_GenerateRigPrompts()\n{\n\tstring $modName = `textField -q -text RRM_TextFieldCharName`;\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the rig in character Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Rig's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Rig's Name is not Unique\"\n\t\t\t-message \"A rig already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\t//CHECK IF NODE EDITOR IS OPEN\n\t\tstring $nodeEditor[] = `getPanel -scriptType nodeEditorPanel `;\n\t\t\n\t\tfor ($editor in $nodeEditor )\n\t\t{\n\t\t\tstring $tokens[];\n\t\t\tstring $control = `scriptedPanel -q -ctl $editor`;\n\t\t\n\t\t\tif ( $control != \"\" )\n\t\t\t{\n\t\t\t\tif ( 0 < `tokenize $control \"|\" $tokens` )\n\t\t\t\t{\n\t\t\t\t\tprint ( \"Window for Node Editor: \" + $tokens[0] + \"\\n\" );\n\t\t\t\t  \n\t\t\t\t\tstring $NodeEditorUI = `confirmDialog\n\t\t\t\t\t\t-title \"Close Node Editor Before Proceeding?\"\n\t\t\t\t\t\t-message \"The Node Editor is open.\\nGenerating a rig with the node editor opened will cause the rig to take much longer to RRM_Generate \\n\"\n\t\t\t\t\t\t-button \"Close Node Editor\"\n\t\t\t\t\t\t-button \"Ignore\"\n\t\t\t\t\t\t-button \"Cancel\"\n\t\t\t\t\t\t-defaultButton \"Close Node Editor\"\n\t\t\t\t\t\t-dismissString \"Ignore\"\n\t\t\t\t\t\t-cancelButton \"Ignore\"`;\n\t\t\t\t\t\t//-icon \"critical\"`;\n\t\t\t\t\t\t\n\t\t\t\t\tif ($NodeEditorUI == \"Close Node Editor\")\n\t\t\t\t\t{\n\t\t\t\t\t\tdeleteUI -window nodeEditorPanel2Window;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t  \t}\n\t\t}\n\t\t\n\t\tRRM_GenerateRig;\n\t\tif (`objExists ($modName + \"_MAINCtrl\")`)\n\t\t{\n\t\t\tRRM_ColorControls;\n\t\t\tif (`objExists RRM_ProxiesLayer`)\n\t\t\t{\n\t\t\t\tsetAttr RRM_ProxiesLayer.visibility 0;\n\t\t\t}\n\t\t}\n\t}\n\t//LOAD RIG NAME INTO TEXT FIELD\n\ttextFieldButtonGrp -e -tx $modName RRM_LoadRigTextFieldButtonGrp;\n\t\n\tselect -cl;\n}\n\n///////DEPENDENCIES\nglobal proc RRM_ElbowNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_ElbowJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_ElbowNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_ElbowNum;\n\t}\n}\n\nglobal proc RRM_KneeNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_KneeJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_KneeNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_KneeNum;\n\t}\n}\n\nglobal proc RRM_ElbowEditNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_ElbowEditJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_ElbowEditNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_ElbowEditNum;\n\t}\n}\n\nglobal proc RRM_KneeEditNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_KneeEditJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_KneeEditNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_KneeEditNum;\n\t}\n}\n\nglobal proc RRM_ToggleTemplate()\n{\n\t$crntSetting = `checkBox -q -v RRM_TemplateCheckBox`;\n\tif ($crntSetting == 1)\n\t{\n\t\toptionMenu -e -enable 1 RRM_TemplateType;\n\t}\n\telse\n\t{\n\t\toptionMenu -e -enable 0 RRM_TemplateType;\n\t}\n}\n\nglobal proc RRM_ToggleTransferParent()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_TransferSelectionButton`;\n\tif ($crntSetting == 1)\n\t{\n\t\tcheckBox -e -enable 0 RRM_TransferParent;\n\t}\n\telse\n\t{\n\t\tcheckBox -e -enable 1 RRM_TransferParent;\n\t}\n}\n\n//DELETE PROXY RIG\nglobal proc RRM_DeleteProxyRig()\n{\n\tstring $confirmDeleteProxies = `confirmDialog\n\t\t-title \"Delete Proxies\"\n\t\t-message \"Are you sure you want to delete your proxy rig?\\n\"\n\t\t-button \"Delete Proxies\"\n\t\t-button \"Cancel\"\n\t\t-defaultButton \"Cancel\"\n\t\t-dismissString \"Cancel\"\n\t\t-cancelButton \"Cancel\"`;\n\t\t//-icon \"critical\"`;\n\t\t\n\tif ($confirmDeleteProxies == \"Delete Proxies\")\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$rigHierarchy = `ls -sl`;\n\t\tlockNode -lock off $rigHierarchy;\n\t\tdelete RRM_MAIN;\n\t\t\n\t\tif (`objExists RRM_ProxiesLayer`)\n\t\t{\n\t\t\tdelete RRM_ProxiesLayer;\n\t\t}\n\t}\n}\n\n\n//STANDARD JOINT SELECTION\nglobal proc RRM_SelectStandardJoints(string $modName)\n{\n\tselect ($modName + \"_*Jnt\");\n\tif (`objExists ($modName + \"_ROOTSHJnt\")`)\n\t{\n\t\tselect -d ($modName + \"_*SHJnt\");\n\t}\n\t$allStandardJoints = `ls -sl`;\n\tstring $skinningJoints[];\n\tfor ($each in $allStandardJoints)\n\t{\n\t\t$drawStyle = `getAttr ($each + \".drawStyle\")`;\n\t\t$visibility = `getAttr ($each + \".visibility\")`;\n\n\t\tif ($drawStyle == 0 && $visibility == 1)\n\t\t{\n\t\t\t$skinningJoints = `ls $skinningJoints $each`;\n\t\t}\n\t}\n\tselect $skinningJoints;\n}\n\n//SINGLE HIERARCHY JOINT SELECTION\nglobal proc RRM_SelectSingleHierarchyJoints(string $modName)\n{\n\tselect ($modName + \"_*SHJnt\");\n}\n\n\n///SELECT JOINTS\nglobal proc RRM_LoadRig()\n{\n\t$selection = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tif ($selectionSize > 0)\n\t{\n\t\tif (`objExists ($selection[0] + \".modRigConnection\")`)\n\t\t{\n\t\t\t$rigName = `getAttr ($selection[0] + \".modRigConnection\")`;\n\t\t\ttextFieldButtonGrp -e -tx $rigName RRM_LoadRigTextFieldButtonGrp;\n\t\t}\n\t\telse\n\t\t{warning \"Selected Object is not a Rapid Rig Modular Control\";}\n\t}\n\telse\n\t{warning \"Nothing Selected. Please Select a Rapid Rig Modular Control\";}\n}\n\nglobal proc RRM_SelectJoints(string $modName)\n{\n\tif (`objExists ($modName + \"_ROOTSHJnt\")`)\n\t{\n\t\tstring $returnVal_Skin = `confirmDialog\n\t\t-title \"Select Skinning Joints\"\n\t\t-message \"Which joints do you wish to select?\"\n\t\t-button \"Standard\"\n\t\t-button \"Single Hierarchy\"\n\t\t-button \"Cancel\"\n\t\t-defaultButton \"Cancel\"\n\t\t-cancelButton \"Cancel\"`;\n\t\n\t\tif ($returnVal_Skin == \"Standard\")\n\t\t{\n\t\t\tRRM_SelectStandardJoints($modName);\n\t\t\tprint \"STANDARD JOINTS SELECTED! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIGrp.\\n\";\n\t\t}\n\t\n\t\tif ($returnVal_Skin == \"Single Hierarchy\")\n\t\t{\n\t\t\tRRM_SelectSingleHierarchyJoints($modName);\n\t\t\tprint \"SINGLE HIERARCHY JOINTS SELECTED! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIGrp.\\n\";\n\t\t}\n\t}\n\telse if (`objExists ($modName + \"_ROOTJnt\")`)\n\t{\n\t\tRRM_SelectStandardJoints($modName);\n\t\tprint \"SUCCESS! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIGrp.\\n\";\t\t\n\t}\n\telse\n\t{\n\t\terror \"NO JOINTS HAVE BEEN CREATED YET!\\n\";\n\t}\n}\n\nglobal proc RRM_CreateCharacterSet(int $subCharSet)\n{\n\t$selection = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tif ($selectionSize == 1)\n\t{\n\t\t//CHECK IF MAINC IS SELECTED\n\t\tif (`objExists ($selection[0] + \".isMain\")`)\n\t\t{\n\t\t\t//CREATE CHARACTER SET\n\t\t\t$rigName = `getAttr ($selection[0] + \".modRigName\")`;\n\t\t\tif (!`objExists ($rigName + \"_CharSet\")`)\n\t\t\t{\n\t\t\t\tcharacter -em -name ($rigName + \"_CharSet\") -excludeVisibility;\n\t\t\t\tif ($subCharSet == 0)\n\t\t\t\t{\n\t\t\t\t\tselect -hi $selection[0];\n\t\t\t\t\t$curveHierarchy = `ls -sl -type \"nurbsCurve\"`;\n\t\t\t\t\tselect $curveHierarchy;\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$hierarchy = `ls -sl`;\n\t\t\t\t\tfor ($each in $hierarchy)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".modControlName\")` && !`objExists ($each + \".nonControl\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcharacter -add ($rigName + \"_CharSet\") $each;\n\t\t\t\t\t\t\tprint (\"Adding \\\"\" + $each + \"\\\" to \" + ($rigName + \"_CharSet\") + \".\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//CREATE SUB CHARACTER SETS\n\t\t\t\t\tselect -hi $selection[0];\n\t\t\t\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t\t\t\t\n\t\t\t\t\t//FIND MODULE TOP GROUPS\n\t\t\t\t\tselect $selection[0]; \n\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t$firstChild = `ls -sl`;\n\t\t\t\t\tstring $nextChild[];\n\t\t\t\t\tstring $modules[];\n\t\t\t\t\twhile ($firstChild[0] != $nextChild[0])\n\t\t\t\t\t{\n\t\t\t\t\t\t$selectedChild = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($selectedChild[0] + \".topNode\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tselect $modules $selectedChild;\n\t\t\t\t\t\t\t$modules = `ls -sl`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselect $selectedChild;\n\t\t\t\t\t\tpickWalk -d right;\n\t\t\t\t\t\t$nextChild = `ls -sl`;\n\t\t\t\t\t}\n\t\t\t\t\t//print $modules;\n\t\t\t\t\tfor ($each in $modules)\n\t\t\t\t\t{\n\t\t\t\t\t\tint $i;\n\t\t\t\t\t\tcharacter -em -name ($each + \"_CharSet\") -excludeVisibility;\n\t\t\t\t\t\tcharacter -add ($rigName + \"_CharSet\") ($each + \"_CharSet\");\n\t\t\t\t\t\tselect -hi $each;\n\t\t\t\t\t\t$curveHierarchy = `ls -sl -type \"nurbsCurve\"`;\n\t\t\t\t\t\tselect $curveHierarchy;\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$hierarchy = `ls -sl`;\n\t\t\t\t\t\tfor ($eachControl in $hierarchy)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (`objExists ($eachControl + \".modControlName\")` && !`objExists ($eachControl + \".nonControl\")`)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$existingChar = `listConnections -d 0 -t \"character\" $eachControl`;\n\t\t\t\t\t\t\t\t$charSize = `size $existingChar`;\n\t\t\t\t\t\t\t\tif ($charSize == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcharacter -add ($each + \"_CharSet\") $eachControl;\n\t\t\t\t\t\t\t\t\tprint (\"Adding \\\"\" + $eachControl + \"\\\" to \" + ($each + \"_CharSet\") + \".\\n\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twarning (\"A character set already exists for \\\"\" + $rigName + \"\\\".\");\n\t\t\t}\n\t\t}\n\t}\n\telse if ($selectionSize > 1)\n\t{\n\t\twarning \"Please select only the MAINC of your rig\";\n\t}\n\telse\n\t{\n\t\twarning \"You must select the MAINC of your rig\";\n\t}\n\tselect $selection;\n}\n\n//////////////////////////CONTROLLER RESIZING////////////////////////////////////////\nglobal proc RRM_ControlEnableDisableMirror()\n{\n    $checkVal = `radioButtonGrp -q -select RRM_ControlScaleSelection`;\n    if ($checkVal == 3)\n    {\n        checkBox -edit -en 0  RRM_ControlMirror;\n    }\n    else\n    {\n        checkBox -edit -en 1  RRM_ControlMirror;\n    }\n}\nglobal proc RRM_ControlEnableDisableUniformScales()\n{\n    $checkVal = `checkBox -q -value RRM_ControlUniformScale`;\n    if ($checkVal == 0)\n    {\n        checkBoxGrp -edit -en1 1 -en2 1 -en3 1 RRM_ControlScaleAxes;\n    }\n    else if ($checkVal == 1)\n    {\n        checkBoxGrp -edit -en1 0 -en2 0 -en3 0 RRM_ControlScaleAxes;\n    }\n}\n\n\n\nglobal proc RRM_ControlScale(float $RRM_ControlScaleChange, int $selectionType, int $modScaleMirror, int $modUniformScaleAxes, int $RRM_ControlScaleAxis1, int $RRM_ControlScaleAxis2, int $RRM_ControlScaleAxis3)\n{\n\t//GO THROUGH CURVES\n\t$selection = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\t$controls = `ls -sl`;\n\t//string $controls[];\n\tstring $tempControls[];\n\tstring $modRigName;\n\tstring $each;\n\t\n\t\n\tif ($selectionSize > 0)\n\t{\n\t\tfor ($each in $selection)\n\t\t{\n\t\t\tif (`objExists ($selection[0] + \".modRigName\")`)\n\t\t\t{\n\t\t\t\t$modRigName = `getAttr ($each + \".modRigName\")`; \n\t\t\t\tif ($selectionType == 1 && $modScaleMirror == 1)\n\t\t\t\t{\n\t\t\t\t\tif ($modScaleMirror == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".rightControl\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".rightControl\")`;\n\t\t\t\t\t\t\t$oppControl = ($modRigName + $oppControl);\n\t\t\t\t\t\t\t$controls = `ls $controls $oppControl`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (`objExists ($each + \".leftControl\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".leftControl\")`;\n\t\t\t\t\t\t\t$oppControl = ($modRigName + $oppControl);\n\t\t\t\t\t\t\t$controls = `ls $controls $oppControl`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ($selectionType == 2)\n\t\t\t\t{\n\t\t\t\t\tfor ($each in $selection)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$modRigName = `getAttr ($each + \".modRigName\")`; \n\t\t\t\t\t\t\t//GET BRANCHES\n\t\t\t\t\t\t\t$coreName = `getAttr ($each + \".modCoreName\")`;\n\t\t\t\t\t\t\t$crntBranch = ($modRigName + $coreName + \"Grp\");\n\t\t\t\t\t\t\t$controls = `ls $controls $crntBranch`;\n\t\t\t\t\t\t\t//GET MIRRORED BRANCHES\n\t\t\t\t\t\t\tif ($modScaleMirror == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (`objExists ($each + \".rightControl\")`)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".rightControl\")`;\n\t\t\t\t\t\t\t\t\t$oppCoreName = `getAttr ($modRigName + $oppControl + \".modCoreName\")`;\n\t\t\t\t\t\t\t\t\t$oppBranch = ($modRigName + $oppCoreName + \"Grp\");\n\t\t\t\t\t\t\t\t\t$controls = `ls $controls $oppBranch`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (`objExists ($each + \".leftControl\")`)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".leftControl\")`;\n\t\t\t\t\t\t\t\t\t$oppCoreName = `getAttr ($modRigName + $oppControl + \".modCoreName\")`;\n\t\t\t\t\t\t\t\t\t$oppBranch = ($modRigName + $oppCoreName + \"Grp\");\n\t\t\t\t\t\t\t\t\t$controls = `ls $controls $oppBranch`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ($selectionType == 3)\n\t\t\t\t{\n\t\t\t\t\tfor ($each in $selection)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$modRigName = `getAttr ($each + \".modRigName\")`; \n\t\t\t\t\t\t\t//GET RIGrp NAMES\n\t\t\t\t\t\t\t$controls = `ls $controls $modRigName`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\t{warning ($each + \" IS NOT A VALID CONTROL. SKIPPING.\");}\n\t\t}\n\t}\n\telse\n\t\t{warning \"NOTHING SELECTED. PLEASE SELECT A VALID RRM CONTROL\";}\n\n\t\t\t\t\n\tif ($selectionType == 2||$selectionType == 3)\n\t{\n\t\tselect -hi $controls;\n\t\t$controlsHierarchy = `ls -sl -type \"nurbsCurve\"`;\n\t\tselect $controlsHierarchy;\n\t\tpickWalk -d up;\n\t\t$controls = `ls -sl`;\n\t\tfor ($each in $controls)\n\t\t{\n\t\t\tif (!`objExists ($each + \".nonControl\")`)\n\t\t\t{\n\t\t\t\t$tempControls = `ls $tempControls $each`;\n\t\t\t}\n\t\t}\n\t\t$controls = `ls $tempControls`;\n\t}\n\t\t\t\t\n\tfor ($each in $controls)\n\t{\n\t\t//CHECK NODE TYPE\n\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t{\n\t\t\t//SCALE\n\t\t\tfloat $controlScaleX = 1;\n\t\t\tfloat $controlScaleY = 1;\n\t\t\tfloat $controlScaleZ = 1;\n\t\t\tif ($modUniformScaleAxes == 1)\n\t\t\t{\n\t\t\t\t$controlScaleX = $RRM_ControlScaleChange;\n\t\t\t\t$controlScaleY = $RRM_ControlScaleChange;\n\t\t\t\t$controlScaleZ = $RRM_ControlScaleChange;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($RRM_ControlScaleAxis1 == 1)\n\t\t\t\t{\n\t\t\t\t\t$controlScaleX = $RRM_ControlScaleChange;\n\t\t\t\t}\n\t\t\t\tif ($RRM_ControlScaleAxis2 == 1)\n\t\t\t\t{\n\t\t\t\t\t$controlScaleY = $RRM_ControlScaleChange;\n\t\t\t\t}\n\t\t\t\tif ($RRM_ControlScaleAxis3 == 1)\n\t\t\t\t{\n\t\t\t\t\t$controlScaleZ = $RRM_ControlScaleChange;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//GET SHAPES\n\t\t\t$worldSpace = `xform -q -ws -rp $each`;\n\t\t\t$curveShapes = `listRelatives -shapes $each`;\n\t\t\tstring $eachShape;\n\t\t\tfor ($eachShape in $curveShapes)\n\t\t\t{\n\t\t\t\t$cvs = `ls ($eachShape + \".cv[*]\")`;\n\t\t\t\tif (!`objExists ($each + \".kneeLock\")`)\n\t\t\t\t{\n\t\t\t\t\tscale -r -p $worldSpace[0] $worldSpace[1] $worldSpace[2] $controlScaleX $controlScaleY $controlScaleZ $cvs;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tscale -r -p $worldSpace[0] 0 $worldSpace[2] $controlScaleX $controlScaleY $controlScaleZ $cvs;\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t}\n\t\t\t//UPDATE SIZE ATTRIBUTE\n\t\t\tsetAttr -l false ($each + \".controlSizeX\");\n\t\t\tsetAttr -l false ($each + \".controlSizeY\");\n\t\t\tsetAttr -l false ($each + \".controlSizeZ\");\n\t\t\tfloat $valX = `getAttr ($each + \".controlSizeX\")`;\n\t\t\tfloat $valY = `getAttr ($each + \".controlSizeY\")`;\n\t\t\tfloat $valZ = `getAttr ($each + \".controlSizeZ\")`;\n\t\t\tsetAttr ($each + \".controlSizeX\") ($valX * $controlScaleX);\n\t\t\tsetAttr ($each + \".controlSizeY\") ($valY * $controlScaleY);\n\t\t\tsetAttr ($each + \".controlSizeZ\") ($valZ * $controlScaleZ);\n\t\t\tsetAttr -l true ($each + \".controlSizeX\");\n\t\t\tsetAttr -l true ($each + \".controlSizeY\");\n\t\t\tsetAttr -l true ($each + \".controlSizeZ\");\n\t\t}\n\t}\n\tselect $selection;\n}\n\n\n//////////////////////////SAVE CONTROL SHAPES////////////////////////////////////////\nglobal proc RRM_WriteControlShapes()\n{\n\t$initialSelection = `ls -sl`;\n\t$controls = `ls -sl -type \"transform\"`;\n\t$controlsSize = `size $controls`;\n\tif ($controlsSize > 0)\n\t{\n\t\t//GET ALL CONTROLS\n\t\tif (`objExists ($controls[0] + \".modRigName\")`)\n\t\t{\n\t\t\tstring $mayaFolder;\n\t\t\n\t\t\tfileBrowserDialog -mode 1\n\t\t\t-fileCommand ( \"RRM_SaveControlShapes \\\"\" + $mayaFolder + \"\\\"\" )\n\t\t\t-actionName \"Save\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No RRM Control Selected\"\n\t\t\t-message \"You must first select a control from your modular rig that you wish to save the transforms from.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t}\n\t}\n\telse\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t-title \"Nothing Selected\"\n\t\t-message \"You must first select a control from your modular rig that you wish to load the transforms to.\\n\"\n\t\t-button \"OK\"\n\t\t-defaultButton \"OK\"\n\t\t-cancelButton \"OK\"\n\t\t-icon \"critical\"`;\n\t}\n\tselect $initialSelection;\n}\n\nglobal proc RRM_SaveControlShapes(string $mayaFolder, string $result, string $type)\n{\n\tprint (\"\\nSAVING TO: \"+ $result + \"\\n\");\n\t$fileID = `fopen $result \"w\"`;\n\n\t$selection = `ls -sl`;\n\t$modRigName = `getAttr ($selection[0] + \".modRigName\")`;\n\tselect -hi ($modRigName + \"_MAINCtrl\");\n\t\n\t$controls = `ls -sl -type \"transform\"`;\n\tfor ($each in $controls)\n\t{\n\t\tif (`objExists ($each + \".controlSizeX\")` && `objExists ($each + \".modRigName\")`)\n\t\t{\n\t\t\t//GET NAME OF CONTROL WITHOUT RIGrp NAME\n\t\t\t$shapes = `listRelatives -shapes $each`;\n\t\t\t\n\t\t\tfor ($eachShape in $shapes)\n\t\t\t{\n\t\t\t\tif (`objExists ($eachShape + \".cv[0]\")`)\n\t\t\t\t{\n\t\t\t\t\tfprint $fileID (\"if (`objExists \" + $eachShape + \"`) {\");\n\t\t\t\t\tint $numSpans = `getAttr ($eachShape + \".spans\")`;\n\t\t\t\t\tint $degree   = `getAttr ($eachShape + \".degree\")`;\n\t\t\t\t\tint $form     = `getAttr ($eachShape + \".form\")`;\n\t\t\t\t\n\t\t\t\t\tint $numCVs   = $numSpans + $degree;\n\t\t\t\t\n\t\t\t\t\t// Adjust for periodic curve:\n\t\t\t\t\tif ( $form == 2 ) $numCVs -= $degree;\n\t\t\t\t\t\n\t\t\t\t\tint $i = 0;\n\t\t\t\t\twhile ($i <= $numCVs)\n\t\t\t\t\t{\n\t\t\t\t\t\t$pos = `xform -q -os -t ($eachShape + \".cv[\" + $i + \"]\")`;\n\t\t\t\t\t\tfprint $fileID (\"move -os \" + $pos[0] + \" \" + $pos[1] + \" \" + $pos[2] + \" \" + ($eachShape + \".cv[\" + $i + \"]; \"));\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t\t$overrideColor = `getAttr ($eachShape + \".overrideColor\")`;\n\t\t\t\t\tfprint $fileID (\"setAttr \" + $eachShape + \".overrideColor \" + $overrideColor + \"; \");\n\t\t\t\t\tfprint $fileID (\"} else {warning (\\\"\" + $eachShape + \" does not exist. Skipping\\\");}\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfclose $fileID;\n\t\n\tprint (\"\\nFILE SUCCESSFULLY SAVED TO: \"+ $result + \"\\n\");\n}\n\nglobal proc RRM_ReadControlShapes()\n{\n \tstring $mayaFolder2;\n\tfileBrowserDialog -mode 0\n\t-fileCommand ( \"RRM_LoadControlShapes \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t-actionName \"Load\";\n}\n\nglobal proc RRM_LoadControlShapes(string $mayaFolder2, string $result2, string $type2)\n{\n\t//FILE PATH\n\tprint (\"LOADING SHAPES FROM \"+$result2+\"\\n\");\n\t//OPEN FILE FOR READING\n\t$fileID = `fopen $result2 \"r\"`;\n\t//GET FIRST LINE\n\tstring $nextLine = `fgetline $fileID`;\n\t//LOOP\n\twhile (size($nextLine) > 0)\n\t{\n\t\teval ($nextLine);\n\t\tprint ($nextLine);\n\t\t$nextLine = `fgetline $fileID`;\n\t}\n\t//RETURN ARRAY\n\tfclose $fileID;\n}\n\n\n//////////////////////////OVERRIDE COLOR////////////////////////////////////////\n\nglobal proc RRM_ControlOverrideColor(int $colorVal)\n{\n\t$selection = `ls -sl -type \"transform\"`;\n\tfor ($each in $selection)\n\t{\n\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t{\n\t\t\t$shapes = `listRelatives -fullPath -shapes $each`;\n\t\t\tfor ($eachShape in $shapes)\n\t\t\t{\n\t\t\t\tsetAttr ($eachShape + \".overrideColor\") $colorVal;\n\t\t\t}\n\t\t}\n\t}\n\tselect $selection;\n}\n\n//DELETE RIG\nglobal proc RRM_DeleteRig(string $rigName, int $keep)\n{\n\tif ($keep == 1)\n\t{\n\t\tparent -w ($rigName + \"_SHJntGrp\");\n\t\tselect -hi ($rigName + \"_SHJntGrp\");\n\t\t$SHJoints = `ls -sl -type \"joint\"`;\n\t\tstring $each;\n\t\tfor ($each in $SHJoints)\n\t\t{\n\t\t\tdelete -constraints $each;\n\t\t}\n\t}\n\t\n\tselect -cl;\n\tselect -hi $rigName;\n\t$dagNodes = `ls -sl`;\n\tselect -d $dagNodes;\n\t$nonDagNodes = `ls -sl`;\n\n\t\t\n\t//DELETE NODES\n\tdelete $rigName;\n\tfor ($each in $nonDagNodes)\n\t{\n\t\tif (`objExists $each`)\n\t\t{\n\t\t\tdelete $each;\n\t\t}\n\t}\n\n\t//EXTRA UTILITY NODES\n\t$MD_Nodes = `ls -type \"multiplyDivide\" ($rigName + \"_*\")`;\n\t$Blend_Nodes = `ls -type \"blendColors\" ($rigName + \"_*\")`;\n\t$Condition_Nodes = `ls -type \"condition\" ($rigName + \"_*\")`;\n\t$Additive_Nodes = `ls -sl -type \"plusMinusAverage\" ($rigName + \"_*\")`;\n\t\n\t$Util_Nodes = `ls $MD_Nodes $Blend_Nodes $Condition_Nodes $Additive_Nodes`;\n\t//int $i = 0;\n\t//while ($i < 30)\n\t//{\n\t//\tfor ($each in $Util_Nodes)\n\t//\t{\n\t//\t\t$connections = `listConnections -s off $each`;\n\t//\t\t$numConnections = `size $connections`;\n\t//\t\tif ($numConnections <= 1)\n\t//\t\t{\n\t//\t\t\tselect $Util_Nodes;\n\t//\t\t\tselect -d $each;\n\t//\t\t\t$Util_Nodes = `ls -sl`;\n\t//\t\t\tdelete $each;\n\t//\t\t\t$Util_NodesSize = `size $Util_Nodes`;\n\t//\t\t\tif ($Util_NodesSize == 0)\n\t//\t\t\t{\n\t//\t\t\t\t$i = 30;\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//\t$i++;\n\t//}\n\tdelete $Util_Nodes;\n\t\n\t//LAYERS\n\tif (`objExists ($rigName + \"_SHJointsLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_SHJointsLayer\");\n\t}\n\tif (`objExists ($rigName + \"_GeoLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_GeoLayer\");\n\t}\n\tif (`objExists ($rigName + \"_ControlsLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_ControlsLayer\");\n\t}\n\tif (`objExists ($rigName + \"_JointsLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_JointsLayer\");\n\t}\n\t\n\t//MATERIALS\n\tif (`objExists ($rigName + \"_geoColor01\")`)\n\t{\n\t\tdelete ($rigName + \"_geoColor01\");\n\t}\n\tif (`objExists ($rigName + \"_geoColor02\")`)\n\t{\n\t\tdelete ($rigName + \"_geoColor02\");\n\t}\n\tif (`objExists ($rigName + \"_EyeWhites\")`)\n\t{\n\t\tdelete ($rigName + \"_EyeWhites\");\n\t}\n\tif (`objExists ($rigName + \"_Pupils\")`)\n\t{\n\t\tdelete ($rigName + \"_Pupils\");\n\t}\n}\n\n\nglobal proc RRM_DeleteRigUI()\n{\n\t$selection = `ls -sl`;\n\t$selectSize = `size $selection`;\n\t\n\tif ($selectSize == 1)\n\t{\n\t\tif (`objExists ($selection[0] + \".modRigName\")`)\n\t\t{\n\t\t\t$modRigName = `getAttr ($selection[0] + \".modRigName\")`;\n\t\t\t\n\t\t\tif (!`objExists ($modRigName + \"_ROOTSHJnt\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_DeleteRig = `confirmDialog\n\t\t\t\t-title (\"Are you sure you want to delete \\\"\" + ($modRigName) + \"\\\" rig?\")\n\t\t\t\t-message (\"This will delete the entire rig and anything you may have added to the \\\"\" + ($modRigName) + \"\\\" hierarchy. You may not be able to undo.\")\n\t\t\t\t-button \"Proceed\"\n\t\t\t\t-button \"Cancel\"\n\t\t\t\t-defaultButton \"Cancel\"\n\t\t\t\t-cancelButton \"Cancel\"`;\n\t\t\t\t\n\t\t\t\tif ($returnVal_DeleteRig == \"Proceed\") \n\t\t\t\t{\n\t\t\t\t\tprint (\"DELETING \\\"\" + ($modRigName) + \"\\\"...\\n\");\n\t\t\t\t\tRRM_DeleteRig($modRigName, 0);\n\t\t\t\t\tprint (\"\\\"\" + ($modRigName) + \"\\\" DELETED\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring $returnVal_DeleteRig = `confirmDialog\n\t\t\t\t-title (\"Are you sure you want to delete \\\"\" + ($modRigName) + \"\\\" rig?\")\n\t\t\t\t-message (\"This will delete the entire rig and anything you may have added to the \\\"\" + ($modRigName) + \"\\\" hierarchy. You may not be able to undo.\")\n\t\t\t\t-button \"Proceed\"\n\t\t\t\t-button \"Proceed, Keep SH Joints\"\n\t\t\t\t-button \"Cancel\"\n\t\t\t\t-defaultButton \"Cancel\"\n\t\t\t\t-cancelButton \"Cancel\"`;\n\t\t\t\t\n\t\t\t\tif ($returnVal_DeleteRig == \"Proceed\") \n\t\t\t\t{\n\t\t\t\t\tprint (\"DELETING \\\"\" + ($modRigName) + \"\\\"...\\n\");\n\t\t\t\t\tRRM_DeleteRig($modRigName, 0);\n\t\t\t\t\tprint (\"\\\"\" + ($modRigName) + \"\\\" DELETED\\n\");\n\t\t\t\t}\n\t\t\t\tif ($returnVal_DeleteRig == \"Proceed, Keep SH Joints\") \n\t\t\t\t{\n\t\t\t\t\tprint (\"DELETING \\\"\" + ($modRigName) + \"\\\"...\\n\");\n\t\t\t\t\tRRM_DeleteRig($modRigName, 1);\n\t\t\t\t\tprint (\"\\\"\" + ($modRigName) + \"\\\" DELETED. SINGLE HIERARCHY JOINTS PRESERVED\\n\");\n\t\t\t\t}\n\t\t\t}\t\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Select \\\"MAINC\\\"\"\n\t\t\t-message \"You need to select a control of the rig you wish to delete\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t\t}\n\t}\n\telse if ($selectSize == 0)\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Nothing Selected\"\n\t\t\t-message \"You need to select a control of the rig you wish to delete\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n\telse\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: More Than One Object Selected\"\n\t\t\t-message \"Please select only one control of the rig you wish to delete\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_SH_RenameHead()\n{\n\t$headJoint = `ls -sl`;\n\t$headJointCheck = `nodeType $headJoint[0]`;\n\t\n\tif ($headJointCheck == \"joint\")\n\t{\n\t\trename $headJoint[0] \"Head\";\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t}\n\tselect $headJoint;\n}\n\nglobal proc RRM_SH_RenameHips()\n{\n\t$ROOTJoint = `ls -sl`;\n\t$ROOTJointCheck = `nodeType $ROOTJoint[0]`;\n\t\n\tif ($ROOTJointCheck == \"joint\")\n\t{\n\t\trename $ROOTJoint[0] \"Hips\";\n\t\tselect \"Hips\";\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $ROOTJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameSpline()\n{\n\t$splineJoint = `ls -sl`;\n\t$splineJointCheck = `nodeType $splineJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($splineJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($splineJoint[0] + \".splineStart\")`)\n\t\t{\n\t\t\tselect -hi $splineJoint;\n\t\t\t$splineHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $splineHierarchy`;\n\t\t\tint $splineEnd;\n\t\t\tint $i;\n\t\t\tstring $splineJoints[];// = $splineJoint[0];\n\t\t\tstring $iString;\n\t\t\t\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (!`objExists ($splineHierarchy[$i] + \".splineEnd\")`)\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\tif ($i == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Spine\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Spine\" + $iString);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\trename $splineHierarchy[$i] (\"Spine\" + $iString);\n\t\t\t\t\t$i=100;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"Spine\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected object is not the first joint of a spline\";\n\t\t\tselect $splineJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $splineJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameNeck()\n{\n\t$splineJoint = `ls -sl`;\n\t$splineJointCheck = `nodeType $splineJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($splineJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($splineJoint[0] + \".splineStart\")`)\n\t\t{\n\t\t\tselect -hi $splineJoint;\n\t\t\t$splineHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $splineHierarchy`;\n\t\t\tint $splineEnd;\n\t\t\tint $i;\n\t\t\tstring $splineJoints[];// = $splineJoint[0];\n\t\t\tstring $iString;\n\t\t\t\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (!`objExists ($splineHierarchy[$i] + \".splineEnd\")`)\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\tif ($i == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Neck\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Neck\" + $iString);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\trename $splineHierarchy[$i] (\"Neck\" + $iString);\n\t\t\t\t\t$i=100;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"Neck\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected object is not the first joint of a spline\";\n\t\t\tselect $splineJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $splineJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameLeftArm()\n{\n\t$clavicleJoint = `ls -sl`;\n\t$clavicleJointCheck = `nodeType $clavicleJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($clavicleJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($clavicleJoint[0] + \".shoulder\")`)\n\t\t{\n\t\t\tselect -hi $clavicleJoint;\n\t\t\t$armHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $armHierarchy`;\n\t\t\tint $i = 1;\n\t\t\t\n\t\t\trename $clavicleJoint[0] \"LeftShoulder\";\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($armHierarchy[$i])`)\n\t\t\t\t\t{\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".arm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"LeftArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".forearm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"LeftForeArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".hand\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"LeftHand\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"LeftShoulder\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a arm\";\n\t\t\tselect $clavicleJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $clavicleJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameRightArm()\n{\n\t$clavicleJoint = `ls -sl`;\n\t$clavicleJointCheck = `nodeType $clavicleJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($clavicleJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($clavicleJoint[0] + \".shoulder\")`)\n\t\t{\n\t\t\tselect -hi $clavicleJoint;\n\t\t\t$armHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $armHierarchy`;\n\t\t\tint $i = 1;\n\t\t\t\n\t\t\trename $clavicleJoint[0] \"RightShoulder\";\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($armHierarchy[$i])`)\n\t\t\t\t\t{\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".arm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"RightArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".forearm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"RightForeArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".hand\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"RightHand\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"RightShoulder\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a arm\";\n\t\t\tselect $clavicleJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $clavicleJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameLeftLeg()\n{\n\t$hipJoint = `ls -sl`;\n\t$hipJointCheck = `nodeType $hipJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($hipJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($hipJoint[0] + \".upLeg\")`)\n\t\t{\n\t\t\tselect -hi $hipJoint;\n\t\t\t$legHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $legHierarchy`;\n\t\t\tint $i = 1;\n\t\t\tstring $legJoints[];\n\t\t\t\n\t\t\trename $hipJoint[0] \"LeftUpLeg\";\n\t\t\twhile ($i <= $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($legHierarchy[$i])`)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".leg\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"LeftLeg\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".foot\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"LeftFoot\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".toeBase\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"LeftToeBase\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"LeftUpLeg\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a leg\";\n\t\t\tselect $hipJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $hipJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameRightLeg()\n{\n\t$hipJoint = `ls -sl`;\n\t$hipJointCheck = `nodeType $hipJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($hipJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($hipJoint[0] + \".upLeg\")`)\n\t\t{\n\t\t\tselect -hi $hipJoint;\n\t\t\t$legHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $legHierarchy`;\n\t\t\tint $i = 1;\n\t\t\tstring $legJoints[];\n\t\t\t\n\t\t\trename $hipJoint[0] \"RightUpLeg\";\n\t\t\twhile ($i <= $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($legHierarchy[$i])`)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".leg\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"RightLeg\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".foot\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"RightFoot\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".toeBase\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"RightToeBase\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"RightUpLeg\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a leg\";\n\t\t\tselect $hipJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $hipJoint;\n\t}\n}\n\nglobal proc RRM_GetVersionNumber()\n{\n\t$selection = `ls -sl`;\n\t$selectSize = `size $selection`;\n\t\n\tif ($selectSize == 1)\n\t{\n\t\tif (`objExists ($selection[0] + \".versionNumber\")`)\n\t\t{\n\t\t\t$rigName = `getAttr ($selection[0] + \".modRigName\")`;\n\t\t\t$rigVersionNumber = `getAttr ($selection[0] + \".versionNumber\")`;\n\t\t\t\n\t\t\tstring $returnVal_DeleteRig = `confirmDialog\n\t\t\t-title (\"The rig \\\"\" + ($rigName) + \"\\\" is version: \" + $rigVersionNumber)\n\t\t\t-message (\"Click the \\\"Go To Rapid Rig Web Page\\\" button to see if you have the latest version.\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Select \\\"MAINC\\\"\"\n\t\t\t-message \"You need to select the Main Controller to check your rig's version\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t\t}\n\t}\n\telse if ($selectSize == 0)\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Nothing Selected\"\n\t\t\t-message \"You need to select the Main Controller to check your rig's version\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n\telse\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: More Than One Object Selected\"\n\t\t\t-message \"You need to select the Main Controller to check your rig's version\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n}\n\nglobal proc RRM_GoToCreativeCrash()\n{\n\tlaunch -web \"http://www.creativecrash.com/maya/script/-rapid-rig-modular-procedural-auto-rig-for-maya\";\n}\n//////////////////////////////////////////////////////////////////\n////////////////////////Main Window///////////////////////////////\n//////////////////////////////////////////////////////////////////\n\nglobal proc RRM_CreateProxyMainGUI()\n{\n\tstring $form = `formLayout`;\n\tstring $tabs = `tabLayout -cr false RRM_RigTab`;\n\t\n\t//TAB 1////////////////////////////////////////////////////////////////////////\n\trowColumnLayout -nc 2 -cw 1 385 -cw 2 385 RRM_ProxySteps;\n\t//STEP 1.1: Name\n\t\tframeLayout -label \"Step 1.1: Create Proxy Module Base\"\n\t\t\t-width 375\n\t\t\tRRM_ProxyCreateProxyBaseFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_ProxyCreateProxyBaseColumnLayout;\n\t\t\t\n\t\trowColumnLayout -nc 2 -columnWidth 1 110 -columnWidth 2 180;\n\t\t\tcheckBox -label \"Use Template:\"\n\t\t\t-v 0 -cc RRM_ToggleTemplate\n\t\t\tRRM_TemplateCheckBox;\n\t\t\toptionMenu -w 120\n\t\t\t-en 0\n\t\t\tRRM_TemplateType;\n\t\t\tmenuItem -label \"Bi-Ped (human)\";\n\t\t\tmenuItem -label \"Quadruped\";\n\t\t\tmenuItem -label \"Arachnid\";\n\t\t\tmenuItem -label \"Bird\";\n\t\t\tsetParent RRM_ProxyCreateProxyBaseColumnLayout;\n\n\t\tcolumnLayout;\n\t\t\tbutton -label \"Create\" -w 378 -bgc 0.7 0.7 0.7\n\t\t\t-command \"RRM_CreateProxyMainProxy(`checkBox -q -v RRM_TemplateCheckBox`)\";\n\n\t\t\tsetParent RRM_ProxyCreateProxyBaseColumnLayout;\n\t\t\n\tstring $RRM_ProxyTabs = `tabLayout -cr false -h 545 RRM_ProxyTabs`;\n\t//STEP 1.2\n\tcolumnLayout RRM_AddModules;\n\t\tframeLayout -label \"Step 1.2: Add Modules\"\n\t\tRRM_AddModulesFrameLayout;\n\t\t\tscrollLayout\n\t\t\t\t-w 376\n\t\t\t\t-h 499\n        \t\t-horizontalScrollBarThickness 16\n        \t\t-verticalScrollBarThickness   16\n        \t\taddModScrollLayout;\n        \t\t\n        columnLayout RRM_AddModulesColumnLayout;\n\n\t\t\n\t//RIBBON SPLINE\n\t\tframeLayout -label \"Ribbon Spline Options (Spine, Neck)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0.114 0.356 0.451\n\t\t\tRRM_SplineOptionsFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_SplineOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_SplineButton\" -aie 1 RRM_TextFieldSplineName;\n        \n        setParent..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 2\n\t\t\t-max 100\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4\n\t\t\tRRM_SplineNum;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 0\n\t\t\tRRM_SplineMirror;\n\t\t\t\n\t\tbutton -w 325 -label \"Create Spline\" -bgc 0.114 0.356 0.451\n\t\t\n\t\t-command \"RRM_SplinePrompts(\\\n\t\t`textField -q -text RRM_TextFieldSplineName`,\\\n\t\t`intSliderGrp -q -v RRM_SplineNum`,\\\n\t\t`checkBox -q -v RRM_SplineMirror`);\"\n\t\tRRM_SplineButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\t\n\t//ARM\n\t\tframeLayout -label \"Arm Options\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0 .275 .098\n\t\t\tRRM_ArmOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_ArmOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_ArmButton\" -aie 1 RRM_TextFieldArmName;\n        \n        setParent RRM_ArmOptionsColumnLayout;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_UpperArmNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_ForearmNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t/*-label \"Three Buttons\"*/ -labelArray2 \"One Elbow Joint\" \"Two Elbow Joints\"\n\t\t-sl 1 -cc RRM_ElbowNumLock RRM_ElbowJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_ElbowNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t/*-label \"Three Buttons\"*/ -labelArray3 \"Left\" \"Pair\" \"Right\"\n\t\t-sl 2 RRM_ArmMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Arm\" -bgc 0 .275 .098\n\t\t\n\t\t-command \"RRM_ArmPrompts(\\\n\t\t`textField -q -text RRM_TextFieldArmName`,\\\n\t\t`intSliderGrp -q -v RRM_UpperArmNum`,\\\n\t\t`intSliderGrp -q -v RRM_ForearmNum`,\\\n\t\t`intSliderGrp -q -v RRM_ElbowNum`,\\\n\t\t`radioButtonGrp -q -select RRM_ElbowJoints`,\\\n\t\t`radioButtonGrp -q -select RRM_ArmMirror`);\"\t\t\n\t\tRRM_ArmButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\t\t\n\t\t\n\t//LEG\n\t\tframeLayout -label \"Leg Options\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .631 .188 .412\n\t\t\tRRM_LegOptionsFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_LegOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_LegButton\" -aie 1 RRM_TextFieldLegName;\n        \n        setParent..;\n\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\t$RRM_UpperLegNum = `intSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_UpperLegNum`;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_LowerLegNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t/*-label \"Three Buttons\"*/ -labelArray2 \"One Knee Joint\" \"Two Knee Joints\"\n\t\t-sl 1 -cc RRM_KneeNumLock RRM_KneeJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_KneeNum;\n\t\t\t\n\t\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t/*-label \"Three Buttons\"*/ -labelArray2 \"Single\" \"Pair\"\n\t\t-sl 2 RRM_LegMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Leg\" -bgc .631 .188 .412\n\t\t\n\t\t-command \"RRM_LegPrompts(\\\n\t\t`textField -q -text RRM_TextFieldLegName`,\\\n\t\t`intSliderGrp -q -v RRM_UpperLegNum`,\\\n\t\t`intSliderGrp -q -v RRM_LowerLegNum`,\\\n\t\t`intSliderGrp -q -v RRM_KneeNum`,\\\n\t\t`radioButtonGrp -q -select RRM_KneeJoints`,\\\n\t\t`radioButtonGrp -q -select RRM_LegMirror`);\"\n\t\tRRM_LegButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\n\t\t\n\t//FK CHAINS\n\t\tframeLayout -label \"FK Chain Options (Fingers, Toes, Tail, Tentacle, Antenna)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .784 0 .784\n\t\t\tRRM_FKChainOptionsFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_FKChainOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_FKChainButton\" -aie 1 RRM_TextFieldFKChainName;\n        \n        setParent..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Chains\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 5 RRM_FkChain_Chains;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints per Chain\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4 RRM_FkChain_JointsPerChain;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-labelArray3 \"X Outward\" \"+Y\" \"+Z\" -sl 1 RRM_FkChainDirection;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-shareCollection RRM_FkChainDirection\n\t\t-labelArray3 \"X Inward\" \"-Y\" \"-Z\" RRM_FkChainDirection2;\n\t\t\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 1\n\t\t\tRRM_FkMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create FK Chain\" -bgc .784 0 .784\n\t\t\n\t\t-command \"RRM_FKChainPrompts(\\\n\t\t`textField -q -text RRM_TextFieldFKChainName`,\\\n\t\t`intSliderGrp -q -v RRM_FkChain_Chains`,\\\n\t\t`intSliderGrp -q -v RRM_FkChain_JointsPerChain`,\\\n\t\t`checkBox -q -v RRM_FkMirror`,\\\n\t\t`radioButtonGrp -q -select RRM_FkChainDirection`,\\\n\t\t`radioButtonGrp -q -select RRM_FkChainDirection2`);\"\n\t\tRRM_FKChainButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\n\t\n\t//HEAD\n\t\tframeLayout -label \"Head\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .608 0 .157\n\t\t\tRRM_HeadOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_HeadOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_HeadButton\" -aie 1 RRM_TextFieldHeadName;\n        \n        setParent..;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 10;\n\t    checkBox\n\t\t\t-label \"Jaw\"\n\t\t\t-value 1\n\t\t\tRRM_Jaw;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" -1;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 0\n\t\t\tRRM_HeadMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Head\" -bgc .608 0 .157\n\t\t\n\t\t-command \"RRM_HeadPrompts(\\\n\t\t`textField -q -text RRM_TextFieldHeadName`,\\\n\t\t`checkBox -q -v RRM_Jaw`,\\\n\t\t`checkBox -q -v RRM_HeadMirror`);\"\n\t\tRRM_HeadButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\t\t\n\t//LOOK-AT\n\t\tframeLayout -label \"Look-At Joints (Eyes, etc)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .435 .188 .631\n\t\t\tRRM_LookAtOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_LookAtOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_LookAtButton\" -aie 1 textFieldLookAtModName;\n        \n        setParent RRM_LookAtOptionsColumnLayout;\n                \n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 1 lookAtModJoints;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-labelArray3 \"X Outward\" \"+Y\" \"+Z\" -sl 3 RRM_LookAtDirection;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-shareCollection RRM_LookAtDirection\n\t\t-labelArray3 \"X Inward\" \"-Y\" \"-Z\" RRM_LookAtDirection2;\n\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 1\n\t\t\tlookAtModMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Look-At\" -bgc .435 .188 .631\n\t\t\n\t\t-command \"RRM_LookAtPrompts(\\\n\t\t`textField -q -text textFieldLookAtModName`,\\\n\t\t`intSliderGrp -q -v lookAtModJoints`,\\\n\t\t`checkBox -q -v lookAtModMirror`,\\\n\t\t`radioButtonGrp -q -select RRM_LookAtDirection`,\\\n\t\t`radioButtonGrp -q -select RRM_LookAtDirection2`);\"\n\t\tRRM_LookAtButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\n\t//AUXILIARY\n\t\tframeLayout -label \"Auxiliary Joints (Single Joint)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .639 .416 .169\n\t\t\tRRM_AuxiliaryOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_AuxiliaryOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_AuxiliaryButton\" -aie 1 textFieldAuxiliaryModName;\n        \n\t\tsetParent RRM_AuxiliaryOptionsColumnLayout;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 1\n\t\t\tAuxiliaryModMirror;\n\t\t\t\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Auxiliary\" -bgc .639 .416 .169\n\n\t\t-command \"RRM_AuxiliaryPrompts(\\\n\t\t`textField -q -text textFieldAuxiliaryModName`,\\\n\t\t`checkBox -q -v AuxiliaryModMirror`);\"\n\t\tRRM_AuxiliaryButton;\n\n\t\tsetParent RRM_AuxiliaryOptionsColumnLayout;\n\n        setParent RRM_ProxyTabs;\n\n\t\n\t//STEP 1.3\n\tcolumnLayout RRM_EditModules;\n\t\tframeLayout -label \"Step 1.3: Edit Modules\" RRM_EditModuleFrameLayout;\n\t\t\tscrollLayout\n\t\t\t\t-w 376\n\t\t\t\t-h 499\n        \t\t-horizontalScrollBarThickness 16\n        \t\t-verticalScrollBarThickness   16\n        \t\t-bgc .45 .45 .45\n        \t\tRRM_EditScrollFrameLayout;\n        \t\t\n        \tcolumnLayout RRM_EditScrollColumnLayout;\n\t\t\n\t//EDIT SPLINE\n\t\tframeLayout -label \"Edit Ribbon Splines\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0.114 0.356 0.451\n\t\t\tRRM_EditSplineFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_EditSplineColumnLayout;\n\t\n\t    columnLayout;\n        textFieldButtonGrp -label \" Spline Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"spline\\\" )\" RRM_EditLoadsplineTextField;\n\n\n\t\tsetParent ..;\n\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 2\n\t\t\t-max 99\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4\n\t\t\tRRM_SplineEditNum;\n\t\t\t\n\t\tsetParent ..;\n\t\tcolumnLayout;\n\t\tbutton -label \"Apply Edits to Loaded Spline\" -w 340 -bgc 0.114 0.356 0.451 -command RRM_EditSpline;\n\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\n\t//EDIT ARM\n\t\tframeLayout -label \"Edit Arms\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0 .275 .098\n\t\t\tRRM_EditArmsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_EditArmsColumnLayout;\n\t\n\n\t    columnLayout;\n        textFieldButtonGrp -label \" Arm Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"arm\\\" )\" RRM_EditLoadarmTextField;\n\n\n\t\tsetParent ..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 upperArmModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 forearmModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t-labelArray2 \"One Elbow Joint\" \"Two Elbow Joints\"\n\t\t-sl 1 -cc RRM_ElbowEditNumLock RRM_ElbowEditJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_ElbowEditNum;\n\t\t\n\t\tsetParent ..;\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -label \"Apply Edits to Loaded Arm\" -w 340 -bgc 0 .275 .098 -command RRM_EditArm;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\t\n\t//EDIT LEGS\n\t\tframeLayout -label \"Edit Legs\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .631 .188 .412\n\t\t\tRRM_EditLegsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_EditLegsColumnLayout;\n\t\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n        textFieldButtonGrp -label \" Leg Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"leg\\\" )\" RRM_EditLoadlegTextField;\n\n\n\t\tsetParent ..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 upperLegModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 lowerLegModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t-labelArray2 \"One Knee Joint\" \"Two Knee Joints\"\n\t\t-sl 1 -cc RRM_KneeEditNumLock RRM_KneeEditJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_KneeEditNum;\n\t\t\n\t\tsetParent ..;\n\t\tcolumnLayout;\n\t\tbutton -label \"Apply Edits to Loaded Leg\" -w 340 -bgc .631 .188 .412 -command RRM_EditLeg;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\t\n\t\t\n\t//EDIT FK CHAINS\n\t\tframeLayout -label \"Edit FK Chains\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .784 0 .784\n\t\t\tRRM_EditFKChainFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_EditFKChainColumnLayout;\n\t\n\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n        textFieldButtonGrp -label \" Fk Chain Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"fkChain\\\" )\" RRM_EditLoadfkChainTextField;\n        \n        setParent..;\n\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Chains\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 5 fkChainModEditChains;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints per Chain\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4 fkChainModEditJointsPerChain;\n\t\t\t\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 340 -label \"Apply Edits to Loaded FK Chain\" -bgc .784 0 .784 -command RRM_EditFkChain;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\n\t\n\t//EDIT HEAD\n\t\tframeLayout -label \"Edit Head\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0.529 0.162 0.199\n\t\t\tRRM_EditHeadFrameLayout;\n\t\n\t    columnLayout;\n        textFieldButtonGrp -label \" Head Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"head\\\" )\" RRM_EditLoadheadTextField;\n\n\t\tbutton -label \"Toggle Jaw\" -w 340 -bgc 0.529 0.162 0.199 -command RRM_EditHead;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\n\t\t\n\t//EDIT LOOK-AT\n\t\tframeLayout -label \"Edit Look-Ats\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .435 .188 .631\n\t\t\tRRM_EditLookAtFrameLayout;\n\t\n\t    columnLayout;\n        textFieldButtonGrp -label \" Look-At Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"lookAt\\\" )\" RRM_EditLoadlookAtTextField;\n\n        \n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 1 lookAtModEditJoints;\n\t\t\t\n\t\tbutton -label \"Apply Edits to Loaded Look-At\" -w 340 -bgc .435 .188 .631 -command RRM_EditLookAt;\n\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\tsetParent..;\n\n\t\t\n        \n        tabLayout -edit -h 545 -tabLabel RRM_AddModules \"Create Modules\" -tabLabel RRM_EditModules \"Edit Modules\" $RRM_ProxyTabs;\n        \n        setParent RRM_ProxySteps;\n\n    \n    //STEP 2.1 CHANGE PROXY COLOURS\n    columnLayout RRM_ModifyProxies;\n\t\tframeLayout -label \"Step 2.1 Override Selected Proxy Branch Color\" -bgc .25 .25 .25 RRM_ControlColorOverrides;\n\t\trowColumnLayout -nc 16 -bgc .25 .25 .25 -w 384;\n\t\tbutton -bgc  .471 .471 .471\t\t-label \"D\" -w 24 -ann \"0\"  -c \"RRM_ProxyOverrideColor(00)\";\n\t\tbutton -bgc  0 0 0\t\t\t\t-label \"\"  -w 24 -ann \"1\"  -c \"RRM_ProxyOverrideColor(01)\";\n\t\tbutton -bgc  .251 .251 .251\t\t-label \"\"  -w 24 -ann \"2\"  -c \"RRM_ProxyOverrideColor(02)\";\n\t\tbutton -bgc  .502 .502 .502\t\t-label \"\"  -w 24 -ann \"3\"  -c \"RRM_ProxyOverrideColor(03)\";\n\t\tbutton -bgc  .608 0 .157\t\t-label \"\"  -w 24 -ann \"4\"  -c \"RRM_ProxyOverrideColor(04)\";\n\t\tbutton -bgc  0 .016 .376\t\t-label \"\"  -w 23 -ann \"5\"  -c \"RRM_ProxyOverrideColor(05)\";\n\t\tbutton -bgc  0 0 1\t\t\t\t-label \"\"  -w 23 -ann \"6\"  -c \"RRM_ProxyOverrideColor(06)\";\n\t\tbutton -bgc  0 .275 .098\t\t-label \"\"  -w 23 -ann \"7\"  -c \"RRM_ProxyOverrideColor(07)\";\n\t\tbutton -bgc  .149 0 .263\t\t-label \"\"  -w 23 -ann \"8\"  -c \"RRM_ProxyOverrideColor(08)\";\n\t\tbutton -bgc  .784 0 .784\t\t-label \"\"  -w 23 -ann \"9\"  -c \"RRM_ProxyOverrideColor(09)\";\n\t\tbutton -bgc  .541 .282 .2\t\t-label \"\"  -w 24 -ann \"10\" -c \"RRM_ProxyOverrideColor(10)\";\n\t\tbutton -bgc  .247 .137 .122\t\t-label \"\"  -w 24 -ann \"11\" -c \"RRM_ProxyOverrideColor(11)\";\n\t\tbutton -bgc  .6 .149 0\t\t\t-label \"\"  -w 24 -ann \"12\" -c \"RRM_ProxyOverrideColor(12)\";\n\t\tbutton -bgc  1 0 0\t\t\t\t-label \"\"  -w 24 -ann \"13\" -c \"RRM_ProxyOverrideColor(13)\";\n\t\tbutton -bgc  0 1 0\t\t\t\t-label \"\"  -w 24 -ann \"14\" -c \"RRM_ProxyOverrideColor(14)\";\n\t\t\n\t\tbutton -bgc  0 .255 .6\t\t\t-label \"\"  -w 24 -ann \"15\" -c \"RRM_ProxyOverrideColor(15)\";\n\t\tbutton -bgc  1 1 1\t\t\t\t-label \"\"  -w 24 -ann \"16\" -c \"RRM_ProxyOverrideColor(16)\";\n\t\tbutton -bgc  1 1 0\t\t\t\t-label \"\"  -w 24 -ann \"17\" -c \"RRM_ProxyOverrideColor(17)\";\n\t\tbutton -bgc  .392 .863 1\t\t-label \"\"  -w 24 -ann \"18\" -c \"RRM_ProxyOverrideColor(18)\";\n\t\tbutton -bgc  .263 1 .639\t\t-label \"\"  -w 24 -ann \"23\" -c \"RRM_ProxyOverrideColor(23)\";\n\t\tbutton -bgc  1 .69 .69\t\t\t-label \"\"  -w 23 -ann \"20\" -c \"RRM_ProxyOverrideColor(20)\";\n\t\tbutton -bgc  .967 .675 .475\t\t-label \"\"  -w 23 -ann \"21\" -c \"RRM_ProxyOverrideColor(21)\";\n\t\tbutton -bgc  1 1 .388\t\t\t-label \"\"  -w 23 -ann \"22\" -c \"RRM_ProxyOverrideColor(22)\";\n\t\tbutton -bgc  0 .6 .329\t\t\t-label \"\"  -w 23 -ann \"23\" -c \"RRM_ProxyOverrideColor(23)\";\n\t\tbutton -bgc  .631 .412 .188\t\t-label \"\"  -w 23 -ann \"24\" -c \"RRM_ProxyOverrideColor(24)\";\n\t\tbutton -bgc  .624 .631 .188\t\t-label \"\"  -w 23 -ann \"25\" -c \"RRM_ProxyOverrideColor(25)\";\n\t\tbutton -bgc  .408 .631 .188\t\t-label \"\"  -w 23 -ann \"26\" -c \"RRM_ProxyOverrideColor(26)\";\n\t\tbutton -bgc  .188 .631 .365\t\t-label \"\"  -w 24 -ann \"27\" -c \"RRM_ProxyOverrideColor(27)\";\n\t\tbutton -bgc  .188 .631 .631\t\t-label \"\"  -w 24 -ann \"28\" -c \"RRM_ProxyOverrideColor(28)\";\n\t\tbutton -bgc  .188 .404 .631\t\t-label \"\"  -w 24 -ann \"29\" -c \"RRM_ProxyOverrideColor(29)\";\n\t\tbutton -bgc  .435 .188 .631\t\t-label \"\"  -w 24 -ann \"30\" -c \"RRM_ProxyOverrideColor(30)\";\n\t\tbutton -bgc  .631 .188 .412\t\t-label \"\"  -w 24 -ann \"31\" -c \"RRM_ProxyOverrideColor(31)\";\n\n\t\tsetParent RRM_ModifyProxies;\n\t\n\n\t//STEP 2.2 RENAME MODULE\n\t\tframeLayout -label \"Step 2.2: Rename Selected Module\"\n\t\t\t-width 384\n\t\t\t-bgc -.35 .35 .35\n\t\t\tRRM_RenameModFrameLayout;\n\t\n\t    columnLayout \n\t    -bgc .35 .35 .35\n\t    RRM_RenameModColumnLayout;\n    \n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 120 -columnWidth 2 258;\n    \n\t    text -label \"Module's New Name: \";\n\t\ttextField -enterCommand \"setFocus RRM_RenameButton\" -aie 1 textFieldRenameName;\n\t\t\n\t    setParent RRM_RenameModColumnLayout;\n\t    \n\t    columnLayout;\n\t    \t\t\t\t\n\t\tbutton -label \"Rename Selected Module\" -w 368 -command \"RRM_ClonePrompts(\\\n\t\t`textField -q -text textFieldRenameName`,\\\n\t\t0, 0);\"\n\t\tRRM_RenameButton;\n\t\t\n\t\tsetParent RRM_ModifyProxies;\n  \n\t\t\n\t//STEP 2.3 CLONE MODULE\n\t\tframeLayout -label \"Step 2.3: Clone Selected Module\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_CloneModFrameLayout;\n\t\n\t    columnLayout\n\t    -bgc .25 .25 .25 RRM_CloneModColumnLayout;\n\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 132 -columnWidth 2 246;\n\n\t    text -label \"Cloned Module's Name: \";\n\t\ttextField -enterCommand \"setFocus RRM_CloneButton\" -aie 1 textFieldCloneName;\n\t\t\n\t    setParent RRM_CloneModColumnLayout;\n\t    \n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 128 -columnWidth 2 248;\n\t    \t\n\t    checkBox\n\t\t\t-label \"Include branches\"\n\t\t\t-value 1\n\t\t\tRRM_CloneBranchCheckBox;\n\t\t\t\n\t\tbutton -label \"Clone Selected Module\" -w 185 -command \"RRM_ClonePrompts(\\\n\t\t`textField -q -text textFieldCloneName`,\\\n\t\t`checkBox -q -v RRM_CloneBranchCheckBox`,1);\"\n\t\tRRM_CloneButton;\n\t\t\n\t\tsetParent RRM_ModifyProxies;\n      \n\n\t\t//STEP 2.4 RE-TARGET\n\t\tframeLayout -label \"Step 2.4: Attach Module to New Node\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_RetargetModFrameLayout;\n\t\t\n\t\tcolumnLayout -bgc .35 .35 .35;\n        textFieldButtonGrp -label \" New Attach Module:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 114 220 80 -bc RRM_LoadNewModuleAttachNode RRM_LoadNewModuleAttachNodeTextField;\n        button -label \"Attach Selected Modules to New Module\" -w 376\n        -command \"RRM_AttachToNewModule (`textFieldButtonGrp -q -text RRM_LoadNewModuleAttachNodeTextField`)\";\n      \n\t\t\tsetParent RRM_ModifyProxies;\n\t\t\t\n\t\t//STEP 2.5 DELETE MODULE\n\t\tframeLayout -label \"Step 2.5: Delete Module\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_DeleteModFrameLayout;\n\t\n\t\t//DELETE\n\t\tcolumnLayout -bgc .25 .25 .25;\n\t\tbutton -label \"Delete Selected Module and Branches\" -w 379 -bgc .5 0.0 0.0 -command RRM_DeleteBranchPrompts;\n\t\tsetParent RRM_ModifyProxies;\n\t\t\n\t\t//STEP 2.6 POSE\n\t\tframeLayout -label \"Step 2.6: Pose Proxy Rig (Does not affect ROOT or Parent nodes)\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_PoseProxyFrameLayout;\n\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0 -bgc .35 .35 .35;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t/*-label \"Three Buttons\"*/ -labelArray3 \"Selected\" \"Branch\" \"All\"\n\t\t-sl 1 RRM_ResetSelection;\n\t\t\n\t\trowColumnLayout -nc 3 -cw 1 126 -cw 2 127 -cw 3 126;\n\t\t\tbutton -label \"Right to Left\"\n\t\t\t-command \"RRM_RightToLeftProxies (`radioButtonGrp -q -select RRM_ResetSelection`)\"\n\t\t\tRRM_RightToLeftProxies;\n\t\t\tbutton -label \"Reset\"\n\t\t\t-command \"RRM_ResetProxies (`radioButtonGrp -q -select RRM_ResetSelection`)\"\n\t\t\tRRM_ResetProxies;\t\t\n\t\t\tbutton -label \"Left to Right\"\n\t\t\t-command \"RRM_LeftToRightProxies (`radioButtonGrp -q -select RRM_ResetSelection`)\"\n\t\t\tRRM_LeftToRightProxies;\n\t\n\t\t\tsetParent RRM_ModifyProxies;\n\n\t\t\t\n\t//STEP 2.7 PINNING\n\t\tframeLayout -label \"Step 2.7: Pinning (pinned modules are not influenced by parent)\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_PinProxyFrameLayout;\n\t\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 189 -cw 2 189 -bgc .25 .25 .25;\n\t\t\tbutton -label \"Pin Module\" -bgc 0.780 0.330 0.330\n\t\t\t-command \"RRM_PinProxies(1, 0)\";\n\t\t\tbutton -label \"Unpin Module\" -bgc 0.330 0.420 0.780\n\t\t\t-command \"RRM_PinProxies(0, 1)\";\t\t\n\t\n\t\t\tsetParent RRM_ModifyProxies;\n\t\n\t\n\t//STEP 2.8 TRANSFER\n\t\tframeLayout -label \"Step 2.8: Transfer Transforms  *Select Target Then Destination*\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_TransferProxyTransformsFrameLayout;\n\t\t\t\n\t\tcolumnLayout \n\t\t-bgc .35 .35 .35 RRM_TransferProxyTransformsColumnLayout;\n\t\n\t\trowColumnLayout -nc 2 -cw 1 220 -cw 2 150\n\t\t-bgc .35 .35 .35;\n\t\t\t$selectedOrBranch = `radioButtonGrp -numberOfRadioButtons 2\n\t\t\t-labelArray2 \"Selected\" \"Branch\"\n\t\t\t-sl 1\n\t\t\t-cc RRM_ToggleTransferParent\n\t\t\tRRM_TransferSelectionButton`;\n\t\t\t\n\t\t\t$transferParentCheck = `checkBox -v 0 -label \"Include Parent\" -ed 0 RRM_TransferParent`;\n\t\t\n\t\t\tsetParent RRM_TransferProxyTransformsColumnLayout;\n\t\tcolumnLayout ;//-cw 370 -cat \"left\" 5;\n\t\t\tbutton -label \"Transfer\"\n\t\t\t-width 378\n\t\t\t-bgc .35 .35 .35\n\t\t\t-command \"RRM_TransferModTransforms\"\n\t\t\tRRM_TransferModTransformsButton;\n\n\t\tsetParent RRM_ModifyProxies;\n\n\t\t\t\n\t\t//STEP 2.9 SAVE LOAD\n\t\tframeLayout -label \"Step 2.9: Save/Load Proxy Transforms\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_SaveLoadProxyTransformsFrameLayout;\n\t\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 189 -cw 2 189\n\t\t\t-bgc .25 .25 .25;\n\t\t\tbutton -label \"Save Transforms\"       \n\t\t\t-command \"RRM_WritePathProxyTransforms\";\n\t\t\tbutton -label \"Load Transforms\"\n\t\t\t-command \"RRM_ReadPathProxyTransform\";\t\t\n\t\n\t\t\tsetParent RRM_ModifyProxies;\n\t\t\t\n\t\t\t\n\t\t//STEP 2.10 SAVE LOAD\n\t\tframeLayout -label \"Step 2.10: Save/Load Proxy Setup\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_SaveLoadProxySetupFrameLayout;\n\t\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 189 -cw 2 189\n\t\t\t-bgc .35 .35 .35;\n\t\t\tbutton -label \"Save Setup\"       \n\t\t\t-command \"RRM_WritePathProxySetup\";\n\t\t\tbutton -label \"Load Setup\"\n\t\t\t-command \"RRM_ReadPathProxySetup\";\t\t\n\t\n\t\t\t\n\t\t\tsetParent RRM_RigTab;\n\t\n\t\n\t//TAB 2////////////////////////////////////////////////////////////////////////\n\trowColumnLayout -nc 2 -cw 1 355 -cw 2 415 RRM_RigSteps;\n\t//STEP 3.1\n\t\tframeLayout -label \"Step 3.1: Character Name\"\n\t\t\t-width 355 RRM_GenerateRigFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_GenerateRigColumnLayout;\n\t\t\n\t\tcolumnLayout -cw 355 -cat \"left\" 1;\n\t\t$charModName = `textField\n\t\t\t-width 345 RRM_TextFieldCharName`;\n\t\t\t\n\t\t\tsetParent RRM_GenerateRigColumnLayout;\n\n\t\t\n\t//STEP 3.2\n\t\tframeLayout -label \"Step 3.2: Create Character Rig\"\n\t\t\t-width 355\n\t\t\tRRM_CreateRigFrameLayout;\n\t\n\t\t\tbutton -bgc .30 .65 .30 -label \"Generate Modular Rig\"\n\t\t\t-command \"RRM_GenerateRigPrompts\"\n\t\t\tRRM_GenerateRigPromptsButton;\n\t\n\t\t\tsetParent RRM_GenerateRigColumnLayout;\n\t\n\t//STEP 3.3\n\t\tframeLayout -label \"Step 3.3: Skin Geometry to Rig\"\n\t\t\t-width 355\n\t\t\tRRM_SelectSkinningJointsFrameLayout;\n\t\t\n\t\t\tcolumnLayout RRM_SelectSkinningJointsColumnLayout;\n\t\n\t\t\ttextFieldButtonGrp -buttonLabel \"Load Rig\"\n\t\t\t-cal 1 \"left\"\n\t\t\t-columnWidth2 290 70\n\t\t\t-ann \"Select a control of the Rapid Rig you want to load\"\n\t\t\t-buttonCommand \"RRM_LoadRig\"\n\t\t\tRRM_LoadRigTextFieldButtonGrp;\n\t\t\t\n\t\t\tcolumnLayout -cw 355 -cat \"left\" 5;\n\t\t\t\n\t\t\tsetParent..;\n\n\t\t\tbutton -w 350 -label \"Select Skinning Joints\"\n\t\t\t-command \"RRM_SelectJoints(`textFieldButtonGrp -q -tx RRM_LoadRigTextFieldButtonGrp`)\"\n\t\t\tRRM_SelectJointsButton;\n\t\n\t\tsetParent RRM_GenerateRigColumnLayout;\n\t\t\n\t//STEP 3.4\n\tframeLayout -label \"Step 3.4: Character Set Creation\"\n\t\t-width 355\n\t\tRRM_CreateCharacterSetFrameLayout;\n\t\t\n\t\tcolumnLayout RRM_CreateCharacterSetColumnLayout;\n\t\tcheckBox -label \"Create Subcharacter Set for Each Module\" RRM_SubCharacterCheckBox;\n\t\t\n\t\tbutton -w 350 -label \"Create Character Set\"\n\t\t\t-ann \"Select MAINC of the Rig you want to create the character set for.\"\n\t\t\t-command \"RRM_CreateCharacterSet(`checkBox -q -v RRM_SubCharacterCheckBox`)\"\n\t\t\tRRM_CreateCharacterSetButton;\t\t\n\t\n\t\tsetParent RRM_RigSteps;\n\n\t//STEP 4.1\n\t\tcolumnLayout \"RRM_Tab2_RightColumn\";\n\t\tframeLayout -label \"Step 4.1: Resize Controllers\"\n\t\t\t-width 415\n\t\t\tRRM_ResizeControllersFrameLayout;\n\t\t\t\n\t\tcolumnLayout -cw 415 -cat \"left\" 0;\n\n        rowColumnLayout -nc 2 -cw 1 340 -cw 2 75;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-labelArray3 \"Selected\" \"Branch\" \"All\"\n\t\t-sl 1\n\t\t-cc RRM_ControlEnableDisableMirror\n\t\tRRM_ControlScaleSelection;\n\t\t\n\t\tcheckBox -label \"Mirror\"\n\t\t-v 1 -enable 1 RRM_ControlMirror;\n\t\tsetParent..;\t\t\n\n\t\tcolumnLayout -cal \"left\";\n\t\tcheckBox -label \"Uniform Scale\"\n\t\t-v 1 -enable 1\n\t\t-cc RRM_ControlEnableDisableUniformScales\n\t\tRRM_ControlUniformScale;\n\t\t\n\t\tcheckBoxGrp -numberOfCheckBoxes 3\n\t\t-label \"Local Axes:\"\n\t\t-labelArray3 \"X\" \"Y\" \"Z\"\n\t\t-valueArray3 1 1 1\n\t\t-en1 0 -en2 0 -en3 0\n\t\tRRM_ControlScaleAxes;\n\t\t\n\t\t\n\t\tfloatSliderGrp -label \"Scale Factor:\" -field true\n\t\t-min 0.1 -max 2 -fieldMaxValue 10 -value 1\n\t\t-precision 3\n\t\tRRM_ControlScaleChange;\n\t\tsetParent..;\n\t\tcolumnLayout;\n\t\tbutton -label \"Scale Control(s)\"\n\t\t-width 410\n\t\t-command \"RRM_ControlScale(`floatSliderGrp -query -value RRM_ControlScaleChange`,\\\n\t\t`radioButtonGrp -q -select RRM_ControlScaleSelection`,\\\n\t\t`checkBox -q -v RRM_ControlMirror`,\\\n\t\t`checkBox -q -v RRM_ControlUniformScale`,\\\n\t\t`checkBoxGrp -q -value1 RRM_ControlScaleAxes`,\\\n\t\t`checkBoxGrp -q -value2 RRM_ControlScaleAxes`,\\\n\t\t`checkBoxGrp -q -value3 RRM_ControlScaleAxes`);\"\n\t\tRRM_ControlScaleButton;\n\t\t\n\t\tsetParent RRM_Tab2_RightColumn;\n\t\t\n\t//STEP 4.2: SAVE CONTROLS\n\t\tframeLayout -label \"Step 3.5: Save & Load Control Shapes and Colors\" -width 415 RRA_SaveLoadControlShapes;\n\t\trowColumnLayout -nc 2;\n\t\tbutton -label \"Save Shapes and Colors\" -w 206 -c \"RRM_WriteControlShapes\";\n\t\tbutton -label \"Load Shapes and Colors\" -w 206 -c \"RRM_ReadControlShapes\";\n\t\t\n\t\tsetParent RRM_Tab2_RightColumn;\n\t\t\n\t//STEP 4.3\n\t\tframeLayout -label \"Step 3.6: Override Control Color\" RRM_ControlColorOverrides;\n\t\trowColumnLayout -nc 16;\n\t\tbutton -bgc  .471 .471 .471\t\t-label \"D\" -w 25 -ann \"0\"  -c \"RRM_ControlOverrideColor(00)\";\n\t\tbutton -bgc  0 0 0\t\t\t\t-label \"\"  -w 25 -ann \"1\"  -c \"RRM_ControlOverrideColor(01)\";\n\t\tbutton -bgc  .251 .251 .251\t\t-label \"\"  -w 25 -ann \"2\"  -c \"RRM_ControlOverrideColor(02)\";\n\t\tbutton -bgc  .502 .502 .502\t\t-label \"\"  -w 25 -ann \"3\"  -c \"RRM_ControlOverrideColor(03)\";\n\t\tbutton -bgc  .608 0 .157\t\t-label \"\"  -w 25 -ann \"4\"  -c \"RRM_ControlOverrideColor(04)\";\n\t\tbutton -bgc  0 .016 .376\t\t-label \"\"  -w 25 -ann \"5\"  -c \"RRM_ControlOverrideColor(05)\";\n\t\tbutton -bgc  0 0 1\t\t\t\t-label \"\"  -w 25 -ann \"6\"  -c \"RRM_ControlOverrideColor(06)\";\n\t\tbutton -bgc  0 .275 .098\t\t-label \"\"  -w 25 -ann \"7\"  -c \"RRM_ControlOverrideColor(07)\";\n\t\tbutton -bgc  .149 0 .263\t\t-label \"\"  -w 25 -ann \"8\"  -c \"RRM_ControlOverrideColor(08)\";\n\t\tbutton -bgc  .784 0 .784\t\t-label \"\"  -w 25 -ann \"9\"  -c \"RRM_ControlOverrideColor(09)\";\n\t\tbutton -bgc  .541 .282 .2\t\t-label \"\"  -w 25 -ann \"10\" -c \"RRM_ControlOverrideColor(10)\";\n\t\tbutton -bgc  .247 .137 .122\t\t-label \"\"  -w 25 -ann \"11\" -c \"RRM_ControlOverrideColor(11)\";\n\t\tbutton -bgc  .6 .149 0\t\t\t-label \"\"  -w 25 -ann \"12\" -c \"RRM_ControlOverrideColor(12)\";\n\t\tbutton -bgc  1 0 0\t\t\t\t-label \"\"  -w 25 -ann \"13\" -c \"RRM_ControlOverrideColor(13)\";\n\t\tbutton -bgc  0 1 0\t\t\t\t-label \"\"  -w 25 -ann \"14\" -c \"RRM_ControlOverrideColor(14)\";\n\t\tbutton -bgc  0 .255 .6\t\t\t-label \"\"  -w 25 -ann \"15\" -c \"RRM_ControlOverrideColor(15)\";\n\t\tbutton -bgc  1 1 1\t\t\t\t-label \"\"  -w 25 -ann \"16\" -c \"RRM_ControlOverrideColor(16)\";\n\t\tbutton -bgc  1 1 0\t\t\t\t-label \"\"  -w 25 -ann \"17\" -c \"RRM_ControlOverrideColor(17)\";\n\t\tbutton -bgc  .392 .863 1\t\t-label \"\"  -w 25 -ann \"18\" -c \"RRM_ControlOverrideColor(18)\";\n\t\tbutton -bgc  .263 1 .639\t\t-label \"\"  -w 25 -ann \"19\" -c \"RRM_ControlOverrideColor(19)\";\n\t\tbutton -bgc  1 .69 .69\t\t\t-label \"\"  -w 25 -ann \"20\" -c \"RRM_ControlOverrideColor(20)\";\n\t\tbutton -bgc  .967 .675 .475\t\t-label \"\"  -w 25 -ann \"21\" -c \"RRM_ControlOverrideColor(21)\";\n\t\tbutton -bgc  1 1 .388\t\t\t-label \"\"  -w 25 -ann \"22\" -c \"RRM_ControlOverrideColor(22)\";\n\t\tbutton -bgc  0 .6 .329\t\t\t-label \"\"  -w 25 -ann \"23\" -c \"RRM_ControlOverrideColor(23)\";\n\t\tbutton -bgc  .631 .412 .188\t\t-label \"\"  -w 25 -ann \"24\" -c \"RRM_ControlOverrideColor(24)\";\n\t\tbutton -bgc  .624 .631 .188\t\t-label \"\"  -w 25 -ann \"25\" -c \"RRM_ControlOverrideColor(25)\";\n\t\tbutton -bgc  .408 .631 .188\t\t-label \"\"  -w 25 -ann \"26\" -c \"RRM_ControlOverrideColor(26)\";\n\t\tbutton -bgc  .188 .631 .365\t\t-label \"\"  -w 25 -ann \"27\" -c \"RRM_ControlOverrideColor(27)\";\n\t\tbutton -bgc  .188 .631 .631\t\t-label \"\"  -w 25 -ann \"28\" -c \"RRM_ControlOverrideColor(28)\";\n\t\tbutton -bgc  .188 .404 .631\t\t-label \"\"  -w 25 -ann \"29\" -c \"RRM_ControlOverrideColor(29)\";\n\t\tbutton -bgc  .435 .188 .631\t\t-label \"\"  -w 25 -ann \"30\" -c \"RRM_ControlOverrideColor(30)\";\n\t\tbutton -bgc  .631 .188 .412\t\t-label \"\"  -w 25 -ann \"31\" -c \"RRM_ControlOverrideColor(31)\";\n\t\t\n\t\t\t\n\t\t\tsetParent RRM_RigSteps;\n\t\t\tsetParent ..;\n\t//TAB 3////////////////////////////////////////////////////////////////////////\t\n\trowColumnLayout -nc 2 -cw 1 355 -cw 2 415 RRM_RigExtras;\n\t\n\t\tframeLayout -label \"Step 5.1: Delete the Proxy Rig\"\n\t\t\t-width 355\n\t\t\tRRM_DeleteProxyRigFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_DeleteProxyRigColumnLayout;\n\n\t\t\t\n\t\t\t//STEP 5.1\n\t\t\tbutton -label \"Delete Proxies\" -w 354\n\t\t\t-bgc .8 0.25 0.25\n\t\t\t-ann \"This will delete your proxy rig once you have no further use for it.\"\n\t\t\t-command \"RRM_DeleteProxyRig\"\n\t\t\tRRM_DeleteProxyRigButton;\n\t\t\t\n\t\t\t\n\t\t\tsetParent RRM_DeleteProxyRigColumnLayout;\n\t\t\t\n\t\t\t//STEP 5.2\n\t\tframeLayout -label \"Step 5.2: Select Any Control to Delete the Entire Rig\"\n\t\t\t-width 355\n\t\t\tRRM_DeleteModularRigFrameLayout;\n\t\t\t\n\t\tbutton -label \"Delete Rig\"\n\t\t-bgc .8 0.25 0.25\n\t\t-annotation \"Select a control of your rig and click this button to delete that rig.\"\n\t\t-command \"RRM_DeleteRigUI\"\n\t\tRRM_DeleteRigUIButton;\n\t\t\n\t\tsetParent RRM_DeleteProxyRigColumnLayout;\n\n\t\t//STEP 5.3\n\t\tframeLayout -label \"Rapid Rig Info\"\n\t\t\t-width 355\n\t\t\tRRM_RapidRigInfoFrameLayout;\n\t\t\t\n\t\tcolumnLayout -cw 355;\n\n\t\tcolumnLayout -cw 50 -cat \"left\" 5;\n\t\tbutton -w 355 -label \"RRM Version Number\"\n\t\t-annotation \"Select the Main Control and click this button to see what version your rig is.\"\n\t\t-command \"RRM_GetVersionNumber\"\n\t\tRRM_GetVersionNumberButton;\n\t\t\n\t\tbutton -w 355 -label \"Go To \\\"Rapid Rig: Modular\\\" Web Page\"\n\t\t-annotation \"Go to the CreativecCrash webpage for Rapid Rig: Modular.\"\n\t\t-command \"RRM_GoToCreativeCrash\"\n\t\tRRM_GoToCreativeCrashButton;\n\t\t\n\t\t\n\t\ttext -label \"\\n\\n\\n\\n                email me with questions and feedback:\\n\\n                             dustin@rapidrig.com\\n\\n\\n\" -align \"left\";\n\t\n\t\n\t\t//STEP 6\n\t\t\tsetParent RRM_DeleteProxyRigColumnLayout;\n\t\t\tsetParent RRM_RigExtras;\n\t\t\tframeLayout -label \"Rename Single Hierarchy to Match Motionbuilder Naming\"\n\t\t\t-w 415 RRM_RenameSHJointsFrameLayout;\n\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 205 -cw 2 205;\n\t\t\tbutton -label \"Rename Head\" -ann \"Select a joint to rename to Head\" -c RRM_SH_RenameHead;\n\t\t\tbutton -label \"Rename Neck\" -ann \"Select the first joint of a chain to rename to Neck\" -c RRM_SH_RenameNeck;\n\t\t\tbutton -label \"Rename Spine\" -ann \"Select the first joint of a chain to rename to Spine\" -c RRM_SH_RenameSpline;\n\t\t\tbutton -label \"Rename Hips\"  -ann \"Select a joint to rename to Hips\" -c RRM_SH_RenameHips;\n\t\t\tbutton -label \"Rename Left Arm\"  -ann \"Select clavicle joint of an Arm\" -c RRM_SH_RenameLeftArm;\n\t\t\tbutton -label \"Rename Right Arm\" -ann \"Select clavicle joint of an Arm\" -c RRM_SH_RenameRightArm;\n\t\t\tbutton -label \"Rename Left Leg\"  -ann \"Select hip joint of a Leg\" -c RRM_SH_RenameLeftLeg;\n\t\t\tbutton -label \"Rename Right Leg\" -ann \"Select hip joint of a Leg\" -c RRM_SH_RenameRightLeg;\n\t\t\t\n\t\t\tsetParent ..;\n\t\t\t\n\t\n\ttabLayout -edit -tabLabel RRM_ProxySteps \"Setup Proxies\" /*-tabLabel RRM_EditProxy \"Modify Proxies\"*/ -tabLabel RRM_RigSteps \"Generate Rig\" -tabLabel RRM_RigExtras \"Extras\" $tabs;\n\n\t\tint $top, $left, $value[2];\n\t\t$value = `scrollLayout -query -scrollAreaValue addModScrollLayout`;\n\t\t$top = $value[0];\n\t\t$left = $value[1];\n}\n\n\n//MAIN PROCEDURE FOR WINDOW\nglobal proc RapidRig_Modular()                                        \n{\n\tif (`window -exists RRM_Window`) \n\t{\n\t\tdeleteUI RRM_Window; \n\t}\n\twindow -title \"Rapid Rig: Modular 1.4.4\"\n\t\t-wh 375 212\n\t\t-rtf on\n\t\t-mnb false\n\t\t-mxb false\n\t\t-s 1\n\t\tRRM_Window;\n\t\n\tRRM_CreateProxyMainGUI();\n\t\n\tshowWindow RRM_Window;\n\twindow -e -w 375 -h 212 RRM_Window;\n}\n\nRapidRig_Modular();\n" 
        -enableBackground 0
        -align "center" 
        -label "//CopyRight Dustin Nelson 2010-2014. Please do not distribute\n//..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "//Theworkhorse/g/1_Long Winter Studios/Rigging Resources/Scripts and Installs/RapidRig_Modular/RRModular_Icon.png" 
        -image1 "//Theworkhorse/g/1_Long Winter Studios/Rigging Resources/Scripts and Installs/RapidRig_Modular/RRModular_Icon.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//CopyRight Dustin Nelson 2010-2014. Please do not distribute\n//http://www.creativecrash.com/maya/script/-rapid-rig-modular-procedural-auto-rig-for-maya\n//Script for Modular Character Rigging.\n//VERSION 1.4.4\n//JULY 23, 2014\n//FILE IS NOT INTENDED TO BE HARMFUL, HOWEVER USE AT YOUR OWN RISK\n/*/////////////////////////////////////////////////////////////////////////////\n// \n//\tINSTRUCTIONS:\n//\t1. INSTALLATION\n//\tTYPE IN THE FOLLOWING COMMAND IN MAYA TO GET YOUR SCRIPT DIRECTORY:\n//\n//\tinternalVar -userScriptDir;\n//\n//\t2. PUT THE RapidRig_Modular.mel file in that directoy.\n//\n//\t3. START UP MAYA, ENTER THE FOLLOWING COMMAND INTO\n//\tTHE COMMAND LINE OR THE SCRIPT EDITOR:\n//\n//\tRapidRig_Modular\n//\n//\t4. TO HAVE EASY ACCESS TO SCRIPT, CREATE A SHELF BUTTON             \n//\tWITH ONLY THAT COMMAND. EVERY TIME YOU HIT THE BUTTON,              \n//\tTHE RAPID RIGrp INTERFACE WILL POP UP. HAPPY ANIMATING!               \n//                                                                      \n////////////////////////////////////////////////////////////////////////*/\n\nglobal proc int RRM_CheckName(string $validate)\n{\n\tstring $nameMatch = `match \"^[a-zA-Z][0-9a-zA-Z_]*$\" $validate`;\n\tint $goodMatch = ! `strcmp $nameMatch $validate`;\n\t\n\treturn $goodMatch;\n}\n\nglobal proc RRM_CreateProxyModuleProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\n\t//CREATE PROXY BASE\n\tcircle -n RRM_Base -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\tduplicate -rr -n RRM_BaseB;\n\trotate 90 0 0 RRM_BaseB;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_BaseB;\n\tduplicate -rr -n RRM_BaseCtrl;\n\trotate 0 90 0 RRM_BaseCtrl;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_BaseCtrl;\n\t\n\tspaceLocator -n RRM_BaseD;\n\tsetAttr \"RRM_BaseDShape.localScaleZ\" .25;\n\tsetAttr \"RRM_BaseDShape.localScaleX\" .25;\n\tsetAttr \"RRM_BaseDShape.localScaleY\" .25;\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_BaseDShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_BaseDShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_BaseDShape.localScaleY\" .0025;\n\t}\n\t\t\n\n\tparent -r -s RRM_BaseBShape RRM_BaseCtrlShape RRM_BaseDShape RRM_Base;\n\tdelete RRM_BaseB RRM_BaseCtrl RRM_BaseD;\n\tselect RRM_Base;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_Base;\n\tdelete -ch RRM_Base;\n\t\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.core;\n\t\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.ext;\n\n\t//ADD CLONE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_Base;\n\tsetAttr -e-keyable true RRM_Base.modName;\n\t\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_Base.v\";\n\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\tchangeLinearUnit $crntUnit;\n}\n\nglobal proc RRM_CreateProxyBaseUpProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\n\tcircle -n RRM_BaseUp -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcircle -n RRM_BaseUpB -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcircle -n RRM_BaseUpCtrl -nr 0 0 1 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcurve -n RRM_BaseUpD -d 1 -p 0 -1 0 -p 0 3 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename RRM_BaseUpDShape;\n\tcurve -n RRM_BaseUpE -d 1 -p 0 2.5 0.5 -p 0 3 0 -p 0 2.5 -0.5 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;\n\trename RRM_BaseUpEShape;\n\tcurve -n RRM_BaseUpF -d 1 -p -0.5 2.5 0 -p 0 3 0 -p 0.5 2.5 0 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;\n\trename RRM_BaseUpFShape;\n\tcircle -n RRM_BaseUpGrp -c 0 2.5 0 -nr 0 1 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tpickWalk -d down;\n\trename RRM_BaseUpGShape;\n\t\n\tspaceLocator -n RRM_BaseUpH;\n\tsetAttr \"RRM_BaseUpHShape.localScaleZ\" .25;\n\tsetAttr \"RRM_BaseUpHShape.localScaleX\" .25;\n\tsetAttr \"RRM_BaseUpHShape.localScaleY\" .25;\t\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_BaseUpHShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_BaseUpHShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_BaseUpHShape.localScaleY\" .0025;\n\t}\n\t\n\tparent -r -s RRM_BaseUpBShape RRM_BaseUpCtrlShape RRM_BaseUpDShape RRM_BaseUpEShape RRM_BaseUpFShape RRM_BaseUpGShape RRM_BaseUpHShape RRM_BaseUp;\n\tdelete RRM_BaseUpB RRM_BaseUpCtrl RRM_BaseUpD RRM_BaseUpE RRM_BaseUpF RRM_BaseUpGrp RRM_BaseUpH;\n\tselect RRM_BaseUp;\n\tscale -r 0.25 0.25 0.25 RRM_BaseUp;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_BaseUp;\n\t\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.core;\n\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.ext;\n\t\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_BaseUp;\n\tsetAttr -e-keyable true RRM_BaseUp.modName;\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_BaseUp.v\";\n\n\n}\n\nglobal proc RRM_CreateProxyRootProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\t\n\t//CREATE PROXY BASE\n\tRRM_CreateProxyModuleProxy($crntUnit);\n\trename RRM_Base RRM_ROOT;\n\t\n\tcurve -n RRM_ROOTE -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p -0.5 0.5 0.5\n\t-p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5\n\t-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;\n\tpickWalk -d down;\n\trename RRM_ROOTEShape;\n\tparent -r -s RRM_ROOTEShape RRM_ROOT;\n\tdelete RRM_ROOTE;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_ROOT;\n\tdelete -ch RRM_ROOT;\n\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_ROOT.v\";\n\n\n}\n\nglobal proc RRM_CreateProxyCOG_C(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\n\tcircle -n RRM_OuterCOG_Ctrl -r 6 -nr 0 1 0;\n\tcircle -n RRM_InnerCOG_Ctrl -r 3 -nr 0 1 0;\n\trotate -r -os 0 -18 0 RRM_InnerCOG_Ctrl;\n\tcurve -n RRM_XConnectorCOG_Ctrl -d 1 -p 6 0 0 -p -6 0 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename RRM_XConnectorCOG_CtrlShape;\n\tcurve -n RRM_YConnectorCOG_Ctrl -d 1 -p 0 0 -6 -p 0 0 6 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename RRM_YConnectorCOG_CtrlShape;\n\t\n\t$transforms = `ls RRM_InnerCOG_Ctrl RRM_XConnectorCOG_Ctrl RRM_YConnectorCOG_Ctrl`;\n\tpickWalk -d down;\n\t$curves = `ls -sl`;\n\tparent -r -s $curves RRM_OuterCOG_Ctrl;\n\tdelete $transforms;\n\trename RRM_OuterCOG_Ctrl RRM_COG;\n\t\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_COG.v\";\n\t\n\n\tsetAttr -l 1 -k 0 \"RRM_COG.v\";\n\n\n}\n\n\nglobal proc RRM_CreateProxyParentProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\t\n\t//CREATE PROXY PARENT\n\tcurve -n RRM_Parent -d 1 -p 0.5 1 0.5 -p 0.5 1 -0.5 -p -0.5 1 -0.5 -p -0.5 1 0.5 -p -0.5 0.1 0.5 -p 0.5 0.1 0.5 -p 0.5 1 0.5 -p -0.5 1 0.5\n\t-p -0.5 1 -0.5 -p -0.5 0.1 -0.5 -p 0.5 0.1 -0.5 -p 0.5 1 -0.5 -p 0.5 1 0.5 -p 0.5 0.1 0.5 -p 0.5 0.1 -0.5 -p -0.5 0.1 -0.5 -p -0.5 0.1 0.5\n\t-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;\n\tpickWalk -d down;\n\trename RRM_ParentShape;\n\tscale -r 0.8 1.25 0.8 RRM_Parent;\n\tmakeIdentity -apply true -s 1 RRM_Parent;\n\t\n\tcurve -n RRM_ParentB -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p -0.5 0.5 0.5\n\t-p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5\n\t-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;\n\tpickWalk -d down;\n\trename RRM_ParentBShape;\n\tscale -r 0.25 0.75 0.25 RRM_Parent;\n\tscale -r 0.5 0.5 0.5 RRM_ParentB;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_Parent RRM_ParentB;\t\t\n\n\tspaceLocator -n RRM_ParentCtrl;\n\tsetAttr \"RRM_ParentCtrlShape.localScaleZ\" .25;\n\tsetAttr \"RRM_ParentCtrlShape.localScaleX\" .25;\n\tsetAttr \"RRM_ParentCtrlShape.localScaleY\" .25;\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_ParentCtrlShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_ParentCtrlShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_ParentCtrlShape.localScaleY\" .0025;\n\t}\n\t\n\tparent -r -s RRM_ParentBShape RRM_ParentCtrlShape RRM_Parent;\n\tdelete RRM_ParentB RRM_ParentCtrl;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_Parent;\n\tdelete -ch RRM_Parent;\n\n\t//ADD PARENT ATTRIBUTE\n\taddAttr -ln \"parent\"  -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.parent;\n\n\taddAttr -ln \"attachNode\"  -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.attachNode;\n\t\n\t//ADD PINNED ATTRIBUTE\n\taddAttr -ln \"pinned\"  -at bool RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.pinned;\n\tsetAttr RRM_Parent.pinned 0;\n\tsetAttr -lock true RRM_Parent.pinned;\n\t\n\t//ADD CONNECTOR VIZ ATTRIBUTE\n\taddAttr -ln \"connectors\"  -at bool RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.connectors;\n\tsetAttr RRM_Parent.connectors 1;\n\t\n\t//SET SO CAN'T ATTACH TO PARENT OBJECT\n\taddAttr -ln \"noAttach\"  -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.noAttach;\n\t\n\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.core;\n\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.ext;\n\n\t//ADD CLONE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_Parent;\n\tsetAttr -e-keyable true RRM_Parent.modName;\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_Parent.v\";\n\n\n}\n\nglobal proc RRM_CreateProxyEndProxy(string $crntUnit)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t\t//changeLinearUnit \"centimeter\"\n\t}\n\t\t\n\t//CREATE PROXY END\n\tcircle -n RRM_End -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\tduplicate -rr -n RRM_EndB;\n\trotate 90 0 0;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\tduplicate -rr -n RRM_EndCtrl;\n\trotate 0 90 0 ;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\tcurve -n RRM_EndD -d 1 -p 0.375 -0.25 -0.375 -p 0 0.5 0 -p 0.375 -0.25 0.375 -p 0.375 -0.25 -0.375 -p -0.375 -0.25 -0.375 -p 0 0.5 0 -p -0.375 -0.25 0.375\n\t-p -0.375 -0.25 -0.375 -p -0.375 -0.25 0.375 -p 0.375 -0.25 0.375 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 ;\n\tpickWalk -d down;\n\trename RRM_EndDShape;\n\n\tspaceLocator -n RRM_EndE;\n\tsetAttr \"RRM_EndEShape.localScaleZ\" .25;\n\tsetAttr \"RRM_EndEShape.localScaleX\" .25;\n\tsetAttr \"RRM_EndEShape.localScaleY\" .25;\n\tif ($crntUnit == \"m\")\n\t{\n\t\tsetAttr \"RRM_EndEShape.localScaleZ\" .0025;\n\t\tsetAttr \"RRM_EndEShape.localScaleX\" .0025;\n\t\tsetAttr \"RRM_EndEShape.localScaleY\" .0025;\n\t}\n\t\n\tparent -r -s RRM_EndBShape RRM_EndCtrlShape RRM_EndDShape RRM_EndEShape RRM_End;\n\tdelete RRM_EndB RRM_EndCtrl RRM_EndD RRM_EndE;\n\tselect RRM_End;\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 RRM_End;\n\tdelete -ch RRM_End;\n\n\t//ADD CORE ATTRIBUTE\n\taddAttr -ln \"core\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.core;\n\n\t//ADD EXT ATTRIBUTE\n\taddAttr -ln \"ext\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.ext;\n\n\t//ADD CLONE ATTRIBUTE\n\taddAttr -ln \"clone\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.clone;\n\n\t//ADD MODNAME ATTRIBUTE\n\taddAttr -ln \"modName\" -dt \"string\" RRM_End;\n\tsetAttr -e-keyable true RRM_End.modName;\n\n\tsetAttr -lock true -keyable false -channelBox false \"RRM_End.v\";\n\n\n}\n\n\nglobal proc RRM_ProxyLockNodes(string $modNodes[])\n{\n\tlockNode $modNodes;\n}\n\nglobal proc RRM_ProxyLimits(string $xforms[])\n{\n\tfor ($each in $xforms)\n\t{\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 $each;\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 $each;\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 $each;\n\t}\n}\n\t\n\nglobal proc RRM_ProxyConnectors(string $modName, string $prfx, string $node1, string $node2)\n{\n\n\n\t$selection = `ls -sl`;\n\t$node1Loc = `xform -q -ws -rp $node1`;\n\t$node2Loc = `xform -q -ws -rp $node2`;\n\t\n\tif ($prfx == \"r_\")\n\t{\n\t\tif (`objExists ($node1 + \".pair\")`&&`objExists ($node2 + \".parent\")`)\n\t\t{\n\t\t\t$rightAttachPoint = `getAttr ($node1 + \".opposite\")`;\n\t\t\t$node1 = (\"RRM_\" + $rightAttachPoint);\n\t\t\t$node1Loc = `xform -q -ws -rp $node1`;\n\t\t}\n\t\telse if (`objExists ($node1 + \".pair\")`&&`objExists ($node2 + \".modType\")`)\n\t\t{\n\t\t\t$rightAttachPoint = `getAttr ($node1 + \".opposite\")`;\n\t\t\t$node1 = (\"RRM_\" + $rightAttachPoint);\n\t\t\t$node1Loc = `xform -q -ws -rp $node1`;\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t//NEW\n\tcurve -n ($node1 + \"_\" + $node2 + \"Ctrl\") -d 1 -p 0 0 0 -p 1 0 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename  ($node1 + \"_\" + $node2 + \"CtrlShape\");\n\tspaceLocator -n ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\tspaceLocator -n ($node1 + \"_\" + $node2 + \"_TargetLctr\");\n\tparent ($node1 + \"_\" + $node2 + \"_TargetLctr\") ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\tpointConstraint $node1 ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $node2 ($node1 + \"_\" + $node2 + \"_AimLctr\");\n\tpointConstraint $node2 ($node1 + \"_\" + $node2 + \"_TargetLctr\");\n\tconnectAttr -f ($node1 + \"_\" + $node2 + \"_AimLctr.translate\") ($node1 + \"_\" + $node2 + \"Ctrl.translate\");\n\tconnectAttr -f ($node1 + \"_\" + $node2 + \"_AimLctr.rotate\") ($node1 + \"_\" + $node2 + \"Ctrl.rotate\");\n\tconnectAttr -f ($node1 + \"_\" + $node2 + \"_TargetLctr.tx\") ($node1 + \"_\" + $node2 + \"Ctrl.sx\");\n\tsetAttr ($node1 + \"_\" + $node2 + \"_AimLctr.v\") 0;\n\t\n\t//ONLY TEMPLATE IF IT IS NOT A PARENT NODE\n\tif (!`objExists ($node2 + \".parent\")` && !`objExists ($node2 + \".modType\")`)\n\t{\n\t\tsetAttr ($node1 + \"_\" + $node2 + \"Ctrl.template\") 1;\n\t}\n\telse\n\t{\n\t\tsetAttr ($node1 + \"_\" + $node2 + \"Ctrl.overrideEnabled\") 1;\n\t\tsetAttr ($node1 + \"_\" + $node2 + \"Ctrl.overrideColor\") 6;\n\t}\n\t\n\tif (!`objExists (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\")`)\n\t{\n\t\tgroup -em -n (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\"); xform -os -piv 0 0 0;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp.inheritsTransform\") 0;\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\") (\"RRM_\" + $prfx + $modName);\n\t\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t{\n\t\t\tconnectAttr -f  (\"RRM_\" + $prfx + $modName + \"_Parent.connectors\") (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f  (\"RRM_\" + $prfx + $modName + \"_Aux.connectors\") (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp.v\");\n\t\t}\n\t}\n\tparent ($node1 + \"_\" + $node2 + \"Ctrl\") ($node1 + \"_\" + $node2 + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\");\n\tsetAttr (($node1 + \"_\" + $node2 + \"_AimLctr.scale\"), 1,1,1);\n\t\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.tx\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.ty\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.tz\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.rx\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.ry\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.rz\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.sx\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.sy\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.sz\");\n\tsetAttr -lock true -keyable false -channelBox false ($node1 + \"_\" + $node2 + \"Ctrl.v\");\t\n\t\n\t\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\tselect $selection;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//changeLinearUnit $crntUnit;\t\n}\n\t\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////MAIN & ROOT/////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyMainProxy(int $checkTemplate)\n{\n\n\t\n\tif (`objExists \"RRM_MAIN\"`)\n\t{\n\t\tstring $selectControl = `confirmDialog\n\t\t\t-title \"A Proxy Rig Already Exists In This Scene\"\n\t\t\t-message \"You must either delete the existing Proxy rig or RRM_Generate a final rig before creating a new Proxy rig.\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-icon \"information\"`;\n\t}\n\telse\n\t{\n\t\t//SET UNITS TO CENTIMETERS\n\t\tstring $crntUnit = `currentUnit -query -linear`;\n\t\t//if ($crntUnit != \"cm\")\n\t\t//{\n\t\t//\t//changeLinearUnit \"centimeter\"\n\t\t//}\n\t\t\n\t\tcurve -n RRM_MAIN -d 1 -p 0 0 11 -p 2 0 9 -p 2 0 7 -p 7 0 7 -p 7 0 2 -p 9 0 2 -p 10 0 0 -p 9 0 -2 -p 7 0 -2 -p 7 0 -7 -p 2 0 -7 -p 2 0 -9 -p 0 0 -10 -p -2 0 -9 -p -2 0 -7 -p -7 0 -7 -p -7 0 -2 -p -9 0 -2 -p -10 0 0 -p -9 0 2 -p -7 0 2 -p -7 0 7 -p -2 0 7 -p -2 0 9 -p 0 0 11 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 ;\n\t\tpickWalk -d down;\n\t\trename RRM_MAINShape;\n\t\t\n\t\tcurve -n RRM_MAIN2 -d 1 -p 6.5 0 6.5 -p 6.5 0 -6.5 -p -6.5 0 -6.5 -p -6.5 0 6.5 -p 6.5 0 6.5 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\tpickWalk -d down;\n\t\trename RRM_MAINShape2;\n\t\tparent -r -s RRM_MAINShape2 RRM_MAIN;\n\t\tdelete RRM_MAIN2;\n\t\tdelete -ch RRM_MAIN;\n\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.tx\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.ty\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.tz\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.rx\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.ry\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.rz\";\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_MAIN.v\";\n    \t\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 RRM_MAIN;\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 RRM_MAIN;\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 RRM_MAIN;\n\t\t\n\t\tRRM_CreateProxyRootProxy($crntUnit);\n    \t\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 RRM_ROOT;\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 RRM_ROOT;\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 RRM_ROOT;\n\n\t\tsetAttr -lock true -keyable false -channelBox false \"RRM_ROOT.v\";\n    \t\n\t\tsetAttr \"RRM_ROOT.overrideEnabled\" 1;\n\t\tsetAttr \"RRM_ROOT.overrideColor\" 17;\n\t\t\n\t\tparent RRM_ROOT RRM_MAIN;\n    \t\n\t\taddAttr -ln \"core\" -dt \"string\" RRM_MAIN;\n\t\tsetAttr -e-keyable true RRM_MAIN.core;\n\t\tsetAttr -type \"string\" RRM_MAIN.core \"MAIN\";\n\t\tsetAttr -l true \"RRM_MAIN.core\";\t\n    \t\n\t\tsetAttr -type \"string\" RRM_ROOT.core \"ROOT\";\n\t\tsetAttr -l true \"RRM_ROOT.core\";\n\t\t\n\t\tRRM_CreateProxyCOG_C($crntUnit);\n\t\t//ADD CORE ATTRIBUTE\n\t\taddAttr -ln \"core\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.core;\n\t\t\n\t\t//ADD EXT ATTRIBUTE\n\t\taddAttr -ln \"ext\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.ext;\n\t\n\t\t//ADD CLONE ATTRIBUTE\n\t\taddAttr -ln \"clone\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.clone;\n\t\n\t\t//ADD MODNAME ATTRIBUTE\n\t\taddAttr -ln \"modName\" -dt \"string\" RRM_COG;\n\t\tsetAttr -e-keyable true RRM_COG.modName;\n\n\t\tsetAttr -type \"string\" RRM_COG.core \"COG_Ctrl\";\n\t\tsetAttr -l true \"RRM_COG.core\";\n\n\t\tparent RRM_COG RRM_ROOT;\n\t\t\n\t\taddAttr -ln \"template_COG_Ctrl\"  -at bool  RRM_ROOT;\n\t\tsetAttr -e-keyable true RRM_ROOT.template_COG_Ctrl;\n\t\tsetAttr RRM_ROOT.template_COG_Ctrl 1;\n\t\tconnectAttr -f RRM_ROOT.template_COG_Ctrl RRM_COG.template;\t\n\t\t\n\t\tsetAttr -lock true -keyable false -channelBox false RRM_ROOT.v;\n\t\t\n\t\t\n\t\t//LAYER\n\t\tif (!`objExists RRM_ProxiesLayer`)\n\t\t{\n\t\t\tselect RRM_MAIN;\n\t\t\tcreateDisplayLayer -n RRM_ProxiesLayer -number 1 -nr;\n\t\t}\n\t\t\n\t\t//PRESETS\n\t\tif ($checkTemplate == 1)\n\t\t{\n\t\t\t$RRM_TemplateType = `optionMenu -q -sl RRM_TemplateType`;\n\t\t\tif ($RRM_TemplateType == 1)\n\t\t\t{//HUMAN BIPED\n\t\t\t\tmove -r -os -wd 0 16 0 RRM_ROOT;\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxySpline(\"Spine\", 4, 0);\n\t\t\t\tmove -r -os -wd 0 4 0 RRM_Spine_Top;\n\t\t\t\t//ARMS\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxyArm(\"Arm\", 0, 0, 0, 1, 2);\n\t\t\t\t//HANDS\n\t\t\t\tselect RRM_l_Arm_Wrist;\n\t\t\t\tRRM_CreateProxyFKChain(\"Finger\", 4, 4, 1, 0, 1);\n\t\t\t\tselect RRM_l_Arm_Wrist;\n\t\t\t\tRRM_CreateProxyFKChain(\"Thumb\", 1, 4, 3, 0, 1);\n\t\t\t\tmove -r -os -wd 1 0 -1 RRM_l_Thumb_01_01;\n\t\t\t\tmove -r -os -wd -1 0 -1 RRM_r_Thumb_01_01;\n\t\t\t\t//HEAD\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxySpline(\"Neck\", 2, 0);\n\t\t\t\tmove -r -os -wd 0 -4.5 0 RRM_Neck_Top;\n\t\t\t\tselect RRM_Neck_Top;\n\t\t\t\tRRM_CreateProxyHead(\"Head\", 1, 0);\n\t\t\t\tselect RRM_Head_Top;\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 3, 0, 1);\n\t\t\t\tmove -r -os -wd 0 -1 0 RRM_l_Eye_Parent RRM_r_Eye_Parent;\n\t\t\t\t//LEGS\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"Leg\", 0, 0, 0, 1, 2);\n\t\t\t}\n\t\t\telse if ($RRM_TemplateType == 2)\n\t\t\t{//QUADRUPED\n\t\t\t\tmove -r -os -wd 0 10 -7 RRM_ROOT;\n\t\t\t\trotate -r 0 0 0 RRM_ROOT;\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxySpline(\"Spine\", 4, 0);\n\t\t\t\trotate -r -os 90 0 0 RRM_Spine_Parent;\n\t\t\t\tmove -r -os -wd 0 4 0 RRM_Spine_Top;\n\t\t\t\t//HIND LEGS\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"HindLeg\", 0, 0, 0, 2, 2);\n\t\t\t\t//FRONT LEGS\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxyFKChain(\"Clavicle\", 1, 1, 1, 0, 1);\n\t\t\t\tmove -r -os -wd -3 0 0 RRM_l_Clavicle_01_01;\n\t\t\t\tmove -r -os -wd -.5 0 0 RRM_l_Clavicle_Parent;\n\t\t\t\tselect RRM_l_Clavicle_01_01;\n\t\t\t\tRRM_CreateProxyLeg(\"FrontLeg\", 0, 0, 0, 1, 2);\n\t\t\t\trotate -r -os -90 0 0 RRM_l_FrontLeg_Parent;\n\t\t\t\tmove -r -os -wd -1 0 0 RRM_l_FrontLeg_Hip;\n\t\t\t\t//HEAD\n\t\t\t\tselect RRM_Spine_Top;\n\t\t\t\tRRM_CreateProxySpline(\"Neck\", 2, 0);\n\t\t\t\trotate -r -90 0 0 RRM_Neck_Parent;\n\t\t\t\tmove -r 0 -4 0 RRM_Neck_Top;\n\t\t\t\tselect RRM_Neck_Top;\n\t\t\t\tRRM_CreateProxyHead(\"Head\", 1, 0);\n\t\t\t\tselect RRM_Head_Top;\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 3, 0, 1);\n\t\t\t\tmove -r -os -wd 0 -1 0 RRM_l_Eye_Parent RRM_r_Eye_Parent;\t\n\t\t\t\tRRM_LeftToRightProxies(3);\n\t\t\t}\n\t\t\telse if ($RRM_TemplateType == 3)\n\t\t\t{//ARACHNID\n\t\t\t\tsetAttr RRM_ROOT.ty 2;\n\t\t\t\t//FRONT LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"FrontLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Parent.translate\", 0.625, 0, 1.1);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_Hip.ry\" 37;\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ground.translate\", 9.45, 0, 11.8);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ankle.translate\",  -1.96, 1.86, -0.1);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Ankle.rotate\", 45, 58.7, 0);\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_FrontLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_FrontLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//MIDFRONT LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"MidFrontLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Parent.translate\", 0.86, 0, 0.36);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_Hip.ry\" 60;\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ground.translate\", 13.706, 0, 7.152);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ankle.translate\", -2.9, 1.8, 0.8);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Ankle.rotate\", 46, 37.6, 0);\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_MidFrontLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_MidFrontLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//MID BACK LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"MidBackLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Parent.translate\", 0.91, 0, -.431);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_Hip.ry\" 99.25;\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ground.translate\", 15.47, 0, -3.2);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ankle.translate\", -3.3, 1.85, 3);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Ankle.rotate\", -5.55, 5.57, -45);\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_MidBackLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_MidBackLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//BACK LEG\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLeg(\"BackLeg\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Parent.translate\", 0.493, 0, -1.112);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Hip.translate\", -1.48, 1, -0.04);\n\t\t\t\tsetAttr \"RRM_l_BackLeg_Hip.ry\" 152.5;\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ground.translate\", 7.25, 0, -14.65);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ground.scale\", 0.275, 0.275, 0.275);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ankle.translate\", -1.49, 1.85, 5.6);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Ankle.rotate\", -57.74, 40.14, -67.9);\n\t\t\t\tsetAttr \"RRM_l_BackLeg_FootLeftTilt.tx\" -0.5;\n\t\t\t\tsetAttr \"RRM_l_BackLeg_FootRightTilt.tx\" 0.5;\n\t\t\t\tsetAttr \"RRM_l_BackLeg_HeelPivot.tz\" 2.5;\n\t\t\t\tsetAttr \"RRM_l_BackLeg_Toe.tz\" -1;\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Knee2.translate\", 0, -1.95, 3.15);\n\t\t\t\tsetAttr (\"RRM_l_BackLeg_Knee1.translate\", 0, 1.6, 3.75);\n\t\t\t\t//ABDOMEN\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Abdomen\", 1, 5, 0, 3, 0);\n\t\t\t\tsetAttr \"RRM_Abdomen_Parent.tz\" -0.73;\n\t\t\t\tsetAttr (\"RRM_Abdomen_Parent.scale\", 0.76, 0.76, 0.76);\n\t\t\t\tsetAttr \"RRM_Abdomen_01_01.tz\" 2.44;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_01.rx\" 26.7;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_02.rx\" -9.45;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_03.rx\" -9.45;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_04.rx\" -9.45;\n\t\t\t\tsetAttr \"RRM_Abdomen_01_05.rx\" -9.45;\n\t\t\t\t//EYES\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.scale\", 0.6, 0.6, 0.6);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.translate\", 0.41, 0.77, 0.84);\n\t\t\t\tsetAttr \"RRM_l_Eye_01.tz\" -.315;\n\t\t\t\t//PEDIPALPS\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Pedipalp\", 1, 6, 0, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_Parent.translate\", 0.72, -.025, 1.27);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_Parent.ry\" 22;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_Parent.scale\", 0.6, 0.6, 0.6);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_01.tz\" -2.864;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_02.translate\", 0, -0.078, -0.026);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_02.rx\" 19;\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_03.ty\" -.53;\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_03.rx\" 31.68;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_04.translate\", 0, -0.205, -0.491);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_04.rx\" 32;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_05.translate\", 0, -0.225, -0.228);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_05.rx\" 20.7;\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_05.sz\" 0.825;\n\t\t\t\tsetAttr (\"RRM_l_Pedipalp_01_06.translate\", 0, -0.06, -0.5);\n\t\t\t\tsetAttr \"RRM_l_Pedipalp_01_06.rx\" 2.5;\n\t\t\t\t//CHELICERAE\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Chelicera\", 1, 3, 0, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_Parent.translate\", 0.33, -0.13, 1.5);\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_Parent.scale\", 0.4, 0.4, 0.4);\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_01.tz\" -2.14;\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_01.rx\" 70;\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_01_02.translate\", 0, -0.188, -0.185);\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_02.rx\" 32.5;\n\t\t\t\tsetAttr (\"RRM_l_Chelicera_01_03.translate\", 0, -0.165, 0.095);\n\t\t\t\tsetAttr \"RRM_l_Chelicera_01_03.rx\" 9;\n\t\t\t\tRRM_LeftToRightProxies(3);\n\t\t\t}\n\t\t\telse if ($RRM_TemplateType == 4)\n\t\t\t{//BIRD\n\t\t\t\tmove -r -os -wd 0 10 -3 RRM_ROOT;\n\t\t\t\trotate -r 90 0 0 RRM_ROOT;\n\t\t\t\tsetAttr \"RRM_ROOT.template_COG_Ctrl\" 0;\n\t\t\t\tsetAttr (\"RRM_COG.translate\", 0, 5, 0);\n\t\t\t\tsetAttr (\"RRM_COG.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr \"RRM_ROOT.template_COG_Ctrl\" 1;\n\t\t\t\t\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\t//LEGS\n\t\t\t\tRRM_CreateProxyLeg(\"Leg\", 0, 0, 0, 1, 2);\n\t\t\t\trotate -r -90 0 0 \"RRM_l_Leg_Parent\";\n\t\t\t\tmove -r -os -wd 0 0.5 1 \"RRM_l_Leg_Knee\";\n\t\t\t\tmove -r -os -wd 0 0.75 0 \"RRM_l_Leg_Ankle\";\n\t\t\t\tmove -r -os -wd 0 0.5 -1.5 \"RRM_l_Leg_Ball\";\n\t\t\t\tmove -r -os -wd 0 0 -2.5 \"RRM_l_Leg_Toe\";\n\t\t\t\t//TOES\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"InnerToe\", 1, 4, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_Parent.translate\", -.45, 0.2, 0.4);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_Parent.rotate\", 0, -25, 0);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_Parent.scale\", 0.6, 0.6, 0.6);\n\t\t\t\tsetAttr (\"RRM_l_InnerToe_01_01.translate\", 0, 0, -3);\n\t\t\t\t\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"MiddleToe\", 1, 5, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_MiddleToe_Parent.translate\", 0, 0.2, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_MiddleToe_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_MiddleToe_01_01.translate\", 0, 0, -3);\n\t\t\t\t\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"OuterToe\", 1, 6, 3, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_Parent.translate\", .55, 0.2, 0.15);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_Parent.rotate\", 0, 25, 0);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_OuterToe_01_01.translate\", 0,0,-3);\n\n\t\t\t\tselect \"RRM_l_Leg_Toe\";\n\t\t\t\tRRM_CreateProxyFKChain(\"HindToe\", 1, 5, 0, 3, 1);\n\t\t\t\tsetAttr (\"RRM_l_HindToe_Parent.translate\", 0, 0.2, -0.5);\n\t\t\t\tsetAttr (\"RRM_l_HindToe_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\tsetAttr (\"RRM_l_HindToe_01_01.translate\", 0, 0, 3);\n\n\t\t\t\t//TAIL\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxyFKChain(\"Tail\", 1, 4, 0, 2, 0);\n\t\t\t\tsetAttr (\"RRM_Tail_Parent.scale\", 0.75, 0.75, 0.75);\n\t\t\t\tsetAttr (\"RRM_Tail_Parent.translate\", 0, 2, 0);\n\t\t\t\t\n\t\t\t\t//SPINE\n\t\t\t\tselect RRM_ROOT;\n\t\t\t\tRRM_CreateProxySpline(\"Spine\", 4, 0);\n\t\t\t\tsetAttr (\"RRM_Spine_Top.translate\", 0, -1, 0); \n\t\t\t\t\n\t\t\t\t//WINGS\n\t\t\t\tselect \"RRM_Spine_Top\";\n\t\t\t\tRRM_CreateProxyArm(\"Wing\", 0, 0, 0, 2, 2);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Parent.translate\", 0, 0, 1.75);\n\n\t\t\t\tsetAttr (\"RRM_l_Wing_Clavicle.translate\", -.85, 0, 0.6);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.translate\", -1.5, 0, -2.5);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.rotate\", 90, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.translate\", -1.5, 0, -2.5);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Shoulder.rotate\", 90, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Elbow1.translate\", 0, 0, 0.1);\n\t\t\t\tsetAttr (\"RRM_l_Wing_Elbow2.translate\", 0.6, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Wing_Wrist.translate\", -1.5, 0, -2.5);\n\t\t\t\t\n\t\t\t\t//DIGITS\n\t\t\t\tselect \"RRM_l_Wing_Elbow2\";\n\t\t\t\tRRM_CreateProxyFKChain(\"Alula\", 1, 2, 1, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Alula_Parent.translate\", 0.5, 0, -0.5);\n\t\t\t\tsetAttr (\"RRM_l_Alula_Parent.rotate\", 90, 0, 0);\n\t\t\t\tsetAttr (\"RRM_l_Alula_Parent.scale\", 0.5, 0.5, 0.5);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_l_Alula_01_01.translate\", -3, 0, 0);\n\t\t\t\t\n\t\t\t\tselect \"RRM_l_Wing_Wrist\";\n\t\t\t\tRRM_CreateProxyFKChain(\"Digit\", 1, 2, 1, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Digit_01_01.translate\", -2.5, 0, 0);\n\t\t\t\t\n\t\t\t\t//NECK\n\t\t\t\tselect \"RRM_Spine_Top\";\n\t\t\t\tRRM_CreateProxySpline(\"Neck\", 6, 0);\n\t\t\t\tsetAttr (\"RRM_Neck_Top.translate\", 0, -5.5, -5.5);\n\t\t\t\tsetAttr (\"RRM_Neck_Top.rotate\", -90, 0, 0);\n\t\t\t\t\n\t\t\t\tsetAttr (\"RRM_Neck_01.translate\", 0, 0.845, 0.563);\n\t\t\t\tsetAttr (\"RRM_Neck_01.rotate\", -20, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_02.translate\", 0, 1.314, 0.77);\n\t\t\t\tsetAttr (\"RRM_Neck_02.rotate\", -57, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_03.translate\", 0, 1.352, 0.582);\n\t\t\t\tsetAttr (\"RRM_Neck_03.rotate\", -90, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_04.translate\", 0, 1.014, 0.376);\n\t\t\t\tsetAttr (\"RRM_Neck_04.rotate\", -100, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_05.translate\", 0, 0.563, 0.207);\n\t\t\t\tsetAttr (\"RRM_Neck_05.rotate\", -101, 0, 0);\n\n\t\t\t\tsetAttr (\"RRM_Neck_06.translate\", 0, 0.225, 0.075);\n\t\t\t\tsetAttr (\"RRM_Neck_06.rotate\", -90, 0, 0);\n\t\t\t\t\n\t\t\t\t//HEAD\n\t\t\t\tselect \"RRM_Neck_Top\";\n\t\t\t\tRRM_CreateProxyHead(\"Head\", 1, 0);\n\t\t\t\tsetAttr (\"RRM_Head_Top.translate\", 0, 2, 0);\n\t\t\t\tsetAttr (\"RRM_Head_Jaw.translate\", 0, 0.5, 0.4);\n\t\t\t\tsetAttr (\"RRM_Head_JawEnd.translate\", 0, 0, 2.5);\n\t\t\t\tsetAttr (\"RRM_Head_JawEnd.rotate\", 90, 0, 0);\n\t\t\t\t\n\t\t\t\tselect \"RRM_Head_Top\";\n\t\t\t\tRRM_CreateProxyLookAt(\"Eye\", 1, 1, 0, 1);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.translate\", 0.2, -0.6, 1);\n\t\t\t\tsetAttr (\"RRM_l_Eye_Parent.scale\", 0.75, 0.75, 0.75);\n\t\t\t\tsetAttr (\"RRM_l_Eye_01.translate\", -1, 0, 0);\n\n\t\t\t\tRRM_LeftToRightProxies(3);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//if ($crntUnit == \"m\")\n\t\t//{\n\t\t//\tsetAttr (\"RRM_MAIN.scale\", 10,10,10);\n\t\t//}\n    \t\n\t\tselect RRM_ROOT RRM_MAIN;\n\t\t$modNodes = `ls -sl`;\n\t\tRRM_ProxyLockNodes($modNodes);\n\t\tselect RRM_ROOT;\n    \t\n\t\t//REVERT UNITS\n\t\tif ($crntUnit != \"cm\")\n\t\t{\n\t\t\t//changeLinearUnit \"centimeter\"\n\t\t}\n\t\tchangeLinearUnit $crntUnit;\n\t}\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\t\n}\n\n//ATTACH TO RIG\nglobal proc RRM_AttachToRig(string $attachMod, string $modName, string $prfx, string $crntSide, string $oppSide, string $attachModCore, int $mirrorMod, int $mirrorCheck)\n{\n\n\tif ($mirrorMod == $mirrorCheck)\n\t{\n\t\tif (`objExists ($attachMod + \".pair\")`)\n\t\t{\n\t\t\tstring $side = `getAttr ($attachMod + \".pair\")`;\n\t\t\tif ($side == $crntSide)\n\t\t\t{\n\t\t\t\tparentConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tscaleConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\t\t\t\t\n\t\t\t\t//ADD ATTACH NODE NAME\n\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $attachModCore;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t\t\t}\n\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $attachModCore;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($side == $oppSide)\n\t\t\t{\n\t\t\t\t//print (\"RRM_\" + $prfx + $modName + \" is opposite\\n\");\n\t\t\t\t$sideCheck = `getAttr ($attachMod + \".opposite\")`;\n\t\t\t\tparentConstraint (\"RRM_\" + $sideCheck) \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tscaleConstraint (\"RRM_\" + $sideCheck) \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\n\t\t\t\t//ADD ATTACH NODE NAME\n\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $sideCheck;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t\t\t}\n\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t\t\t{\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $sideCheck;\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\tscaleConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\t\t\t\n\n\t\t\t//ADD ATTACH NODE NAME\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $attachModCore;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t\t}\n\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $attachModCore;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\t}\n\t\t}\n\t\n\t}\n\telse\n\t{\n\t\tparentConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\tscaleConstraint $attachMod \"RRM_MAIN\" (\"RRM_\" + $prfx + $modName);\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\n\t\t//ADD ATTACH NODE NAME\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\") $attachModCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\");\n\t\t}\n\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux.modType\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\") $attachModCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t}\n\t}\n\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//changeLinearUnit $crntUnit;\t\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////SPLINE////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxySpline2(string $modName, int $mirrorMod, string $prfx, string $oppPrfx, int $splineNum, string $crntUnit)\n{\n\t$i1 = 1;\n\t$i2 = $splineNum;\n\tstring $nPd = \"_0\";\n\tstring $nPdPrev = \"_0\";\n\t\n\twhile ($i1 <= $splineNum)\n\t{\n\t\tif ($i1 >= 10)\n\t\t{$nPd = \"_\";}\n\t\tif ($i1 >= 11)\n\t\t{$nPdPrev = \"_\";}\n\t\n\t\t//SET SPLINE NUM IN PARENT NODE\n\t\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.splineNum\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.splineNum\") $splineNum;\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.splineNum\");\n\t\t//SET SPLINE NUM IN TOP NODE\n\t\tlockNode -lock off (\"RRM_\" + $modName);\n\t\tsetAttr -l false (\"RRM_\" + $modName + \".jointsNum\");\n\t\tsetAttr (\"RRM_\" + $modName + \".jointsNum\") $splineNum;\n\t\tsetAttr -l true (\"RRM_\" + $modName + \".jointsNum\");\n\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + $nPd + $i1);\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\") (\"RRM_\" + $prfx + $modName + $nPd + $i1); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".core\") ($prfx + $modName + $nPd + $i1);\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".core\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".ext\") ($nPd + $i1);\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".ext\");\n\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".opposite\") ($oppPrfx + $modName + $nPd + $i1);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".opposite\");\n\t\t}\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Top\")  (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ParentW0\") $i2;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_TopW1\") $i1;\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + $nPd + $i1 + \".overrideColor\") 29;\n\t\t\n\t\t//CONNECTORS\n\t\tint $prev = ($i1 -1);\n\t\tif ($i1 == 1){\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + $nPd + $i1));\n\t\t}\n\t\telse if ($i1 != $splineNum){\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + $nPdPrev + $prev), (\"RRM_\" + $prfx + $modName + $nPd + $i1));\n\t\t}\n\t\telse{\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + $nPdPrev + $prev), (\"RRM_\" + $prfx + $modName + $nPd + $i1));\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + $nPd + $i1), (\"RRM_\" + $prfx + $modName + \"_Top\"));\n\t\t}\n\t\t\t\n\n\t\t\t\n\t\t$i1++;\n\t\t$i2--;\n\t\t\n\t}\n}\n\t\t\nglobal proc RRM_CreateProxySpline(string $modName, int $splineNum, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\tif (`objExists ($attachMod[0] + (\".opposite\"))`)\n\t\t{\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\t//CREATE JOINT BASE\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\t\tmove -r $posOffset 0 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"spline\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 29;\n\t\t\n\t\t//ADD SPINE NUMBERS TO PARENT\n\t\taddAttr -ln \"splineNum\"  -at long -dv 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\tmove -r 0 7 0 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\tmakeIdentity -apply true -t 1 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.core\") ($prfx + $modName + \"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.core\");\n\t\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.ext\") (\"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Top.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Top.overrideColor\") 29;\n\t\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.opposite\") ($oppPrfx + $modName + \"_Top\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\n\t\t\t//ADD EXTRA ATTRIBUTES\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t}\t\n\t\n\t\t//ADD SPINE NUMBERS TO TOP GROUP\n\t\tif ($i == 0)\n\t\t{\n\t\t\taddAttr -ln \"jointsNum\"  -at long -dv 1 (\"RRM_\" + $modName);\n\t\t}\n\n\t\tRRM_CreateProxySpline2($modName, $mirrorMod, $prfx, $oppPrfx, $splineNum, $crntUnit);\n\t\n\t\t//ADD EXTRA ATTRIBUTES\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Top\")\n\t\t\t(\"RRM_\" + $prfx + $modName + \"_??\");\n\t\t\t\n\t\t\t$RRM_Splines = `ls -sl`;\n\t\t\tstring $crntMod;\n\t\t\tfor ($crntMod in $RRM_Splines)\n\t\t\t{\n\t\t\t\t//PAIR AND TYPE\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t}\n\t\t}\n\t\t\t\n\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_*Grp\");\n\t\tselect -d (\"RRM_\" + $prfx + $modName + \"_ConnectorGrp\");\n\t\t$modGroups = `ls-sl`;\n\t\tstring $selectedModGroup;\n\t\tfor ($selectedModGroup in $modGroups)\n\t\t{\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".tx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".ty\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".tz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".sz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \".v\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.nds\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.ox\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.oy\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.oz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.w0\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($selectedModGroup + \"_pointConstraint1.w1\");\n\t\t}\n\n\t\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t\t{\n\t\t\t//ADD TOP ATTRIBUTE\n\t\t\taddAttr -ln \"top\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"spline\";\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\t\t\t\n\t\t\t//ADD PARENT ATTRIBUTE\n\t\t\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\t\t\t\n\t\t\t//ADD CORE NAME ATTRIBUTE\n\t\t\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\n\n\t\t\tparent (\"RRM_\" + $modName) $attachMod[0];\n\t\t}\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\t\t\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\t\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\t\t\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\t\n\n}\n\nglobal proc RRM_SplinePrompts(string $modName, int $splineNum, int $mirrorMod)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Rig's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldSplineName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"A module already exists with this name. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxySpline($modName, $splineNum, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxySpline($modName, $splineNum, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////ARMS////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyArm2(string $modName, int $upperArmNum, int $lowerArmNum, int $elbowNum, int $elbowJoints, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $multiplier, string $crntUnit)\n{\n\t//SET ARM NUM'S IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\") $upperArmNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\t\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\") $lowerArmNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\t\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.elbowNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.elbowNum\") $elbowJoints;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.elbowNum\");\n\t\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\") $elbowNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\t\n\t\n\t//ELBOW\n\tif ($elbowJoints == 1)\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_ElbowAim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_ElbowAimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_ElbowAimShape\") (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_ElbowAim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\") (\"RRM_\" + $prfx + $modName + \"_Elbow\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\t\t\n\t\tmove -r ($multiplier * 6.45) 0 0 (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.core\") ($prfx + $modName + \"_Elbow\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.ext\") (\"_Elbow\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.overrideColor\") 7;\n\t}\n\telse\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Elbow1\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Elbow1Aim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Elbow1AimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Elbow1AimShape\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow1Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\t\t\n\t\tmove -r ($multiplier * 6.45) 0 0 (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.core\") ($prfx + $modName + \"_Elbow1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow1.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.ext\") (\"_Elbow1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow1.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.overrideColor\") 7;\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tmakeIdentity -apply true -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\") -d 1 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 1 -p 0.5 0 1 -p 0 0 1.5 -p -0.5 0 1 -p -0.25 0 1 -p -0.25 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Elbow2AimShape\");\n\t\trotate -r 0 0 ($multiplier * 90) (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Elbow2AimShape\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow2Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\"); xform -os -piv 0 0 0;\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\");\n        \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.core\") ($prfx + $modName + \"_Elbow2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow2.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.ext\") (\"_Elbow2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Elbow2.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.overrideColor\") 7;\n\t}\n\t\n\t//ARM CONSTRAINTS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t{\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_ElbowGrp_pointConstraint1.offsetZ\") -.0001;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_ElbowGrp\");\n\t\t\n\t\tpointConstraint -skip y -skip z (\"RRM_\" + $prfx + $modName + \"_Elbow\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector -1 0 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector -1 0 0\n\t\t-skip y -skip z (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\t\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Clavicle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Clavicle\"), (\"RRM_\" + $prfx + $modName + \"_Shoulder\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Shoulder\"), (\"RRM_\" + $prfx + $modName + \"_Elbow\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Elbow\"), (\"RRM_\" + $prfx + $modName + \"_Wrist\"));\n\t}\n\telse\n\t{\n\t\t//CONNECT ELBOW 2\n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" -skip x (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp_pointConstraint1.\" + \"RRM_\" + $prfx + $modName + \"_WristW1\") 2;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\");\n    \n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2AimLctr.v\") 0;\n        \n\t\t//CONNECT ELBOW 1\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp_pointConstraint1.offsetZ\") -.0001;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow1Grp\");\n\t\t\n\t\tpointConstraint -skip y -skip z (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 1 0 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector 1 0 0\n\t\t-skip y -skip z (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\");\n\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Clavicle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Clavicle\"), (\"RRM_\" + $prfx + $modName + \"_Shoulder\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Shoulder\"), (\"RRM_\" + $prfx + $modName + \"_Elbow1\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Elbow1\"), (\"RRM_\" + $prfx + $modName + \"_Elbow2\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Elbow2\"), (\"RRM_\" + $prfx + $modName + \"_Wrist\"));\n\t}\t\n\t\n\t//UPPER ARM JOINTS\n\tif ($upperArmNum > 0)\n\t{\n\t\t$shoulderInf = $upperArmNum;\n\t\t$elbowInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $upperArmNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\") ($prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\") (\"_Upper\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .125; \n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\t\t\t\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".template\");\n\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ShoulderW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ElbowW1\") $elbowInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ShoulderW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow1W1\") $elbowInf;\n\t\t\t}\n\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$shoulderInf--;\n\t\t\t$elbowInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\t\t\n\t//LOWER ARM JOINTS\n\tif ($lowerArmNum > 0)                                                         \n\t{\n\t\t$elbowInf = $lowerArmNum;\n\t\t$wristInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $lowerArmNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\") ($prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\") (\"_Lower\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".template\");\n\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_ElbowW0\") $elbowInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_WristW1\") $wristInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_Wrist\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow2W0\") $elbowInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_WristW1\") $wristInf;\n\t\t\t}\n\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$elbowInf--;\n\t\t\t$wristInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\t\n\t//ELBOW JOINTS\n\tif ($elbowJoints == 2)\n\t{\n\t\tif ($elbowNum > 0)\n\t\t{\n\t\t\t$elbow1Inf = $elbowNum;\n\t\t\t$elbow2Inf = 1;\n\t\t\t$crntInt = 1;\n\t\t\twhile ($crntInt <= $elbowNum)\n\t\t\t{\n\t\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\") ($prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\") (\"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\");\n\t\t\t\tif ($mirrorMod == 2)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\");\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\");\n\t\t\t\t}\n\t\t\t\t//SCALE LOCATOR\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\t\tif ($crntUnit == \"m\")\n\t\t\t\t{\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t\t}\n\t\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".template\");\n\t\t\t\t\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow1W0\") $elbow1Inf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Elbow2W1\") $elbow2Inf;\n\t\t\t\t\n\t\t\t\t//LOCK ATTRIBUTES\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ty\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sz\");\t\n\t\t\t\t\n\t\t\t\t$elbow1Inf--;\n\t\t\t\t$elbow2Inf++;\n\t\t\t\t$crntInt++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//LOCK CHANNELS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow.sz\");\n\t}\n\telse\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow1.sz\");\n    \n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Elbow2.sz\");\n\t}\n\n\t//ADD EXTRA ATTRIBUTES\n\tif ($mirrorMod == 2)\n\t{\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Elbow1\") (\"RRM_\" + $prfx + $modName + \"_Elbow2\");\n\t\t}\n\t\t\n\t\t$armMods = `ls -sl`;\n\t\tstring $crntMod;\n\t\tfor ($crntMod in $armMods)\n\t\t{\n\t\t\t//PAIR AND TYPE\n\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t//OPPOSITE NAME\n\t\t\taddAttr -ln \"opposite\" -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Elbow\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.opposite\") ($oppPrfx + $modName + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.opposite\") ($oppPrfx + $modName + \"_Elbow1\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.opposite\") ($oppPrfx + $modName + \"_Elbow2\");\n\t\t}\n\t\t\n\t\tfor ($crntMod in $armMods)\n\t\t{\n\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t}\n\t}\n\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AimLctr.v\")      0;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_ElbowAimLctr.v\") 0;\n}\n\nglobal proc RRM_CreateProxyArm(string $modName, int $upperArmNum, int $lowerArmNum, int $elbowNum, int $elbowJoints, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$i = 0;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t//ARM\n\twhile ($i !=2)\n\t{\t\n\t\tif ($mirrorMod != 2)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t}\n\t\tif ($mirrorMod == 3)\n\t\t{\n\t\t\t$crntSide = \"right\";\n\t\t\t$oppSide = \"left\"; \n\t\t\t$multiplier = -1;\n\t\t}\n\t\t\t\n\t\t\t\n\t\t//ATTACH NODE\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\trotate -r 0 0 ($multiplier * -90) (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"arm\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 7;\n\t\t\n\t\taddAttr -ln \"upperRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"lowerRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"elbowNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"midRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t//TEMPLATE ROLL JOINTS\n\t\taddAttr -ln \"templateRollJoints\"  -at bool -dv 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -e -keyable 1 (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\");\n\n\t\t//CLAVICLE\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Clavicle\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\") (\"RRM_\" + $prfx + $modName + \"_Clavicle\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\");\n\t\tmove -r ($multiplier * 1.25) 0 0 (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ClavicleGrp\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.core\") ($prfx + $modName + \"_Clavicle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Clavicle.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.ext\") (\"_Clavicle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Clavicle.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.overrideColor\") 7;\n\t\t\n\t\t//SHOULDER\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Shoulder\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\") (\"RRM_\" + $prfx + $modName + \"_Shoulder\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\");\t\t\n\t\tmove -r ($multiplier * 2.95) 0 0 (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_ShoulderGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.core\") ($prfx + $modName + \"_Shoulder\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Shoulder.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.ext\") (\"_Shoulder\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Shoulder.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.overrideColor\") 7;\n\n\t\t//WRIST\n\t\tRRM_CreateProxyEndProxy($crntUnit);\t\t\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\trotate -r 0 0 ($multiplier * -90) (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_WristGrp\") (\"RRM_\" + $prfx + $modName + \"_Wrist\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_WristGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_WristGrp\");\t\t\n\t\tmove -r ($multiplier * 9.95) 0 0 (\"RRM_\" + $prfx + $modName + \"_WristGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_WristGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.core\") ($prfx + $modName + \"_Wrist\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Wrist.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.ext\") (\"_Wrist\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Wrist.ext\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.overrideColor\") 7;\n\n\t\tRRM_CreateProxyArm2($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\t//ADD EXTRA ATTRIBUTES\n\t\tif ($mirrorMod == 2)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Clavicle\")\n\t\t\t(\"RRM_\" + $prfx + $modName + \"_Shoulder\") (\"RRM_\" + $prfx + $modName + \"_Wrist\");\n\t\t\t\n\t\t\t$armMods = `ls -sl`;\n\t\t\tstring $crntMod;\n\t\t\tfor ($crntMod in $armMods)\n\t\t\t{\n\t\t\t\t//PAIR AND TYPE\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t\t//OPPOSITE NAME\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t\t}\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.opposite\") ($oppPrfx + $modName + \"_Clavicle\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.opposite\") ($oppPrfx + $modName + \"_Shoulder\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.opposite\") ($oppPrfx + $modName + \"_Wrist\");\n\t\t\t\n\t\t\tfor ($crntMod in $armMods)\n\t\t\t{\n\t\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//ADD LEFT OR RIGHT ATTRIBUTE\n\t\t\taddAttr -ln \"single\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".single\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".single\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".single\");\n\t\t}\n\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 2;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\n\t\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t\t{\t\n\t\t\t//ADD TOP ATTRIBUTE\n\t\t\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"arm\";\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\t\t\t\n\t\t\t//ADD PARENT ATTRIBUTE\n\t\t\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t\t\t//ADD CORE NAME ATTRIBUTE\n\t\t\taddAttr -ln \"core\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\t\t\n\t\t\t//ADD UPPER ARM NUM ATTRIBUTE\n\t\t\taddAttr -ln \"upperArmNum\"  -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".upperArmNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".upperArmNum\") $upperArmNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".upperArmNum\");\n\t\t\t\n\t\t\t//ADD LOWER ARM NUM ATTRIBUTE\n\t\t\taddAttr -ln \"lowerArmNum\"  -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".lowerArmNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".lowerArmNum\") $lowerArmNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".lowerArmNum\");\n\n\t\t\t//ADD ELBOW NUM ATTRIBUTE\n\t\t\taddAttr -ln \"elbowNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".elbowNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".elbowNum\") $elbowNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".elbowNum\");\n\n\t\t\t//ADD UPPER ARM NUM ATTRIBUTE\n\t\t\taddAttr -ln \"elbowJoints\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".elbowJoints\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".elbowJoints\") $elbowJoints;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".elbowJoints\");\n\t\t\t\n\t\t\tparent (\"RRM_\" + $modName) $attachMod[0];\n\t\t}\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t\n\t\tif ($mirrorMod != 2)\n\t\t{\n\t\t\t$i = 2;\n\t\t}\n\t}\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\t\t\n\n}\n\nglobal proc RRM_ArmPrompts(string $modName, int $upperArmNum, int $lowerArmNum, int $elbowNum, int $elbowJoints, int $mirrorMod)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldArmName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyArm($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyArm($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////LEGS////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyLeg2(string $modName, int $upperLegNum, int $lowerLegNum, int $kneeNum, int $kneeJoints, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $posOffset, string $crntUnit)\n{\n\t//SET ARM NUM'S IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\") $upperLegNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.upperRollNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\") $lowerLegNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.lowerRollNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.kneeNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.kneeNum\") $kneeJoints;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.kneeNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\") $kneeNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.midRollNum\");\n\n\t//KNEE\n\tif ($kneeJoints == 1)\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_KneeAim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_KneeAimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_KneeAimShape\") (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_KneeAim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_KneeGrp\") (\"RRM_\" + $prfx + $modName + \"_Knee\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_KneeGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\t\t\n\t\trotate -r 0 -180 90 (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\tmove -r $posOffset -5 0 (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.core\") ($prfx + $modName + \"_Knee\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.ext\") (\"_Knee\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee.overrideColor\") 31;\n\t}\n\telse\n\t{\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Knee1\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Knee1Aim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Knee1AimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Knee1AimShape\") (\"RRM_\" + $prfx + $modName + \"_Knee1\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee1Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\") (\"RRM_\" + $prfx + $modName + \"_Knee1\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\t\t\n\t\trotate -r 0 -180 90 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tmove -r $posOffset -5 0 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\t\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.core\") ($prfx + $modName + \"_Knee1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee1.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.ext\") (\"_Knee1\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee1.ext\");\n\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.overrideColor\") 31;\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tmakeIdentity -apply true -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Knee2Aim\") -d 1 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 1 -p 0.5 0 1 -p 0 0 1.5 -p -0.5 0 1 -p -0.25 0 1 -p -0.25 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Knee2AimShape\");\n\t\tmove -r $posOffset -5 0 (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Knee2Aim\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Knee2AimShape\") (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee2Aim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\") (\"RRM_\" + $prfx + $modName + \"_Knee2\"); xform -os -piv 0 0 0;\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\");\n\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.rotateOrder\") 1;\n        \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.core\") ($prfx + $modName + \"_Knee2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee2.core\");\n    \n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.ext\") (\"_Knee2\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Knee2.ext\");\n        \n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.overrideColor\") 31;\n\t}\n\t\n\t//LEGrp CONSTRAINTS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t{\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_KneeGrp\");\n\t\t\n\t\tpointConstraint -skip x -skip z (\"RRM_\" + $prfx + $modName + \"_Knee\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector 0 1 0\n\t\t-skip x -skip z (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\t\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Hip\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Hip\"), (\"RRM_\" + $prfx + $modName + \"_Knee\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Knee\"), (\"RRM_\" + $prfx + $modName + \"_Ankle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ankle\"), (\"RRM_\" + $prfx + $modName + \"_Ball\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ball\"), (\"RRM_\" + $prfx + $modName + \"_Toe\"));\n\t}\n\telse\n\t{\n\t\t//CONNECT KNEE 2\n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" -skip y (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2Grp_pointConstraint1.\" + \"RRM_\" + $prfx + $modName + \"_AnkleW1\") 2;\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\");\n    \n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee2Grp\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Knee2AimLctr.v\") 0;\n        \n\t\t//CONNECT KNEE 1\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctrGrp\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\torientConstraint (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee1Grp\");\n\t\t\n\t\tpointConstraint -skip x -skip z (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject (\"RRM_\" + $prfx + $modName + \"_AimLctr\") -worldUpVector 0 1 0\n\t\t-skip x -skip z (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr\") (\"RRM_\" + $prfx + $modName + \"_Knee1\");\n\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Hip\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Hip\"), (\"RRM_\" + $prfx + $modName + \"_Knee1\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Knee1\"), (\"RRM_\" + $prfx + $modName + \"_Knee2\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Knee2\"), (\"RRM_\" + $prfx + $modName + \"_Ankle\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ankle\"), (\"RRM_\" + $prfx + $modName + \"_Ball\"));\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Ball\"), (\"RRM_\" + $prfx + $modName + \"_Toe\"));\n\t}\t\n\t\n\t//UPPER LEGrp JOINTS\n\tif ($upperLegNum > 0)\n\t{\n\t\t$shoulderInf = $upperLegNum;\n\t\t$kneeInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $upperLegNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\") ($prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\") (\"_Upper\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Upper\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".template\");\n\t\t\t\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_HipW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_KneeW1\") $kneeInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_HipW0\") $shoulderInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee1W1\") $kneeInf;\n\t\t\t}\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Upper\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$shoulderInf--;\n\t\t\t$kneeInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\n\t//LOWER LEGrp JOINTS\n\tif ($lowerLegNum > 0)                                                         \n\t{\n\t\t$kneeInf = $lowerLegNum;\n\t\t$wristInf = 1;\n\t\t$crntInt = 1;\n\t\twhile ($crntInt <= $lowerLegNum)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\") ($prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\") (\"_Lower\" + $crntInt);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".core\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ext\");\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Lower\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".opposite\");\n\t\t\t}\n\t\t\t//SCALE LOCATOR\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\tif ($crntUnit == \"m\")\n\t\t\t{\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t}\n\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".template\");\n\n\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Knee\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_KneeW0\") $kneeInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_AnkleW1\") $wristInf;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee2W0\") $kneeInf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_AnkleW1\") $wristInf;\n\t\t\t}\n\t\t\t//LOCK ATTRIBUTES\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \".sz\");\t\t\t\n\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ty\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.tz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.ry\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.rz\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sx\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sy\");\n\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Lower\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t$kneeInf--;\n\t\t\t$wristInf++;\n\t\t\t$crntInt++;\n\t\t}\n\t}\n\t\n\t//KNEE JOINTS\n\tif ($kneeJoints == 2)\n\t{\n\t\tif ($kneeNum > 0)\n\t\t{\n\t\t\t$knee1Inf = $kneeNum;\n\t\t\t$knee2Inf = 1;\n\t\t\t$crntInt = 1;\n\t\t\twhile ($crntInt <= $kneeNum)\n\t\t\t{\n\t\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\t\t\tscale -r 0.5 0.5 0.5 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\") ($prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\") (\"_Middle\" + $crntInt);\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".core\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ext\");\n\t\t\t\tif ($mirrorMod == 2)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\") ($crntSide);\n\t\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\") ($oppPrfx + $modName + \"_Middle\" + $crntInt);\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".pair\");\n\t\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".opposite\");\n\t\t\t\t}\n\t\t\t\t//SCALE LOCATOR\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .125;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .125;\n\t\t\t\tif ($crntUnit == \"m\")\n\t\t\t\t{\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleZ\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleX\") .00125;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"DShape.localScaleY\") .00125;\n\t\t\t\t}\n\t\t\t\tconnectAttr (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".template\");\n\t\t\t\t\n\t\t\t\tpointConstraint (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_Knee2\") (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp\");\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee1W0\") $knee1Inf;\n\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp_pointConstraint1.RRM_\" + $prfx + $modName + \"_Knee2W1\") $knee2Inf;\n\t\t\t\t\n\t\t\t\t//LOCK ATTRIBUTES\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \".sz\");\n\t\t\t\t\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ty\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.tz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.ry\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.rz\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sx\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sy\");\n\t\t\t\tsetAttr -lock true -keyable 0 (\"RRM_\" + $prfx + $modName + \"_Middle\" + $crntInt + \"Grp.sz\");\t\t\n\n\t\t\t\t$knee1Inf--;\n\t\t\t\t$knee2Inf++;\n\t\t\t\t$crntInt++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//LOCK CHANNELS\n\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee.sz\");\n\t}\n\telse\n\t{\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee1.sz\");\n    \n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false (\"RRM_\" + $prfx + $modName + \"_Knee2.sz\");\n\t}\n    \n\t//ADD EXTRA ATTRIBUTES\n\tif ($mirrorMod == 2)\n\t{\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $prfx + $modName + \"_Knee1\") (\"RRM_\" + $prfx + $modName + \"_Knee2\");\n\t\t}\n\t\t\n\t\t$legMods = `ls -sl`;\n\t\tstring $crntMod;\n\t\tfor ($crntMod in $legMods)\n\t\t{\n\t\t\t//PAIR AND TYPE\n\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t//OPPOSITE NAME\n\t\t\taddAttr -ln \"opposite\" -dt \"string\"  $crntMod;\n\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Knee\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.opposite\") ($oppPrfx + $modName + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.opposite\") ($oppPrfx + $modName + \"_Knee1\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.opposite\") ($oppPrfx + $modName + \"_Knee2\");\n\t\t}\n\t\t\n\t\tfor ($crntMod in $legMods)\n\t\t{\n\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t}\n\t\t\n\t\t//COLOURS\n\t\tsetAttr ($crntMod + \".overrideEnabled\") 1;\n\t\tsetAttr ($crntMod + \".overrideColor\") 31;\n\t}\n\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AimLctr.v\")      0;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr.v\") 0;\n}\n\nglobal proc RRM_CreateProxyLeg(string $modName, int $upperLegNum, int $lowerLegNum, int $kneeNum, int $kneeJoints, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\tfloat $posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\tfloat $rotOffset = -90;\n\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t$i = 1;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$prfx = \"\";\n\t\t\t$posOffset = 0;\n\t\t\t$rotOffset = 180; \n\t\t}\n\t\t\t\n\t\t//ATTACH NODE\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\trotate -r 0 0 $rotOffset (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"leg\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\t\t\n\t\taddAttr -ln \"upperRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"lowerRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"kneeNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"midRollNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t//TEMPLATE ROLL JOINTS\n\t\taddAttr -ln \"templateRollJoints\"  -at bool -dv 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -e -keyable 1 (\"RRM_\" + $prfx + $modName + \"_Parent.templateRollJoints\");\n\n\t\t//HIP\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_HipAim\") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\t\trotate -r 180 0 -90\t(\"RRM_\" + $prfx + $modName + \"_HipAim\");\n\t\tmakeIdentity -apply true (\"RRM_\" + $prfx + $modName + \"_HipAim\");\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_HipAimShape\");\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_HipAimShape\") (\"RRM_\" + $prfx + $modName + \"_Hip\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_HipAim\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_HipGrp\") (\"RRM_\" + $prfx + $modName + \"_Hip\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_HipGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_HipGrp\");\t\t\n\t\tmove -r $posOffset -1 0 (\"RRM_\" + $prfx + $modName + \"_HipGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_HipGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.core\") ($prfx + $modName + \"_Hip\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Hip.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.ext\") (\"_Hip\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Hip.ext\");\n\n\t\t//ANKLE\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\t\t\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Ankle\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\") (\"RRM_\" + $prfx + $modName + \"_Ankle\"); xform -os -piv 0 0 0; \n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\");\t\t\n\t\tmove -r 0 1.5 0 (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.core\") ($prfx + $modName + \"_Ankle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ankle.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.ext\") (\"_Ankle\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ankle.ext\");\n\n\t\t//FOOT\n\t\t//FOOT GROUND\n\t\tcircle -n (\"RRM_\" + $prfx + $modName + \"_Ground\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 3.25 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_GroundGrp\") (\"RRM_\" + $prfx + $modName + \"_Ground\"); xform -os -piv 0 0 0; \n\t\tscale -r .8 1 1 (\"RRM_\" + $prfx + $modName + \"_GroundGrp\");\n\t\tmakeIdentity -apply true -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_GroundGrp\");\n\t\tmove -r 0 0 2 (\"RRM_\" + $prfx + $modName + \"_Ground.cv[0:7]\");\n\t\t\n\t\tgroup -n (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\") (\"RRM_\" + $prfx + $modName + \"_GroundGrp\"); xform -os -piv 0 0 0; \n\t\t\n\t\taddAttr -ln \"core\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.core\") ($prfx + $modName + \"_Ground\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ground.core\");\n\t\t\n\t\taddAttr -ln \"ext\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.ext\") (\"_Ground\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ground.ext\");\n\t\t\n\t\taddAttr -ln \"clone\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.clone\");\n\n\t\taddAttr -ln \"modName\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.modName\");\n\t\t\n\t\tmove -r 1.3 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[3]\") ;\n\t\tmove -r 0.2 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[2]\") (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[4]\");\n\t\tmove -r -1.3 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[7]\") ;\n\t\tmove -r -0.2 0 0 (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[2]\") (\"RRM_\" + $prfx + $modName + \"_GroundShape.cv[4]\");\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Ball\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Ball\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Ball\");\t\t\n\t\tmove -r 0 0 2.5 (\"RRM_\" + $prfx + $modName + \"_Ball\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Ball\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.core\") ($prfx + $modName + \"_Ball\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ball.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.ext\") (\"_Ball\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Ball.ext\");\n\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Toe\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tmakeIdentity -apply false -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Toe\");\t\t\n\t\tmove -r 0 0 4 (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\trotate -r 90 0 0 (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Toe\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.core\") ($prfx + $modName + \"_Toe\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Toe.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.ext\") (\"_Toe\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Toe.ext\");\n\n\t\t//FOOT CONTROLS\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\") -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_FootRightTiltShape\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_FootRightTiltB\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleZ\") .25;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleX\") .25;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleY\") .25;\n\t\tif ($crntUnit == \"m\")\n\t\t{\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleZ\") .0025;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleX\") .0025;\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape.localScaleY\") .0025;\n\t\t}\n\t\t\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_FootRightTiltBShape\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_FootRightTiltB\");\n\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tmove -r -1 0 2.5 (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\t\n\t\taddAttr -ln \"core\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.core\") ($prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.core\");\n\t\t\n\t\taddAttr -ln \"ext\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.ext\") (\"_FootRightTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.ext\");\n\t\t\n\t\taddAttr -ln \"clone\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.clone\");\n\n\t\taddAttr -ln \"modName\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Ground.modName\");\n\n\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\");\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\");\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_FootLeftTiltShape\");\n\t\tmove -r 2 0 0 (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.core\") ($prfx + $modName + \"_FootLeftTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.core\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.ext\") (\"_FootLeftTilt\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.ext\");\n\n\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_HeelPivot\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\"); \n\t\tselect (\"RRM_\" + $prfx + $modName + \"_HeelPivot\");\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_HeelPivotShape\");\n\t\tmove -r 1 0 -3 (\"RRM_\" + $prfx + $modName + \"_HeelPivot\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_HeelPivot\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_HeelPivot.core\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.core\") ($prfx + $modName + \"_HeelPivot\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_HeelPivot.core\");\n\t\t\n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_HeelPivot.ext\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.ext\") (\"_HeelPivot\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_HeelPivot.ext\");\n\n\t\t//LOCK CHANNELS\n\t\t$footPivots = `ls (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\") (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\") (\"RRM_\" + $prfx + $modName + \"_HeelPivot\")`;\n\t\tstring $crntControl;\n\t\tfor ($crntControl in $footPivots)\n\t\t{\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".ty\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".rx\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".ry\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".rz\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".sx\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".sy\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntControl + \".sz\");\n\t\t}\n\t\t//CONNECT FOOT\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_AnkleGrp\") (\"RRM_\" + $prfx + $modName + \"_Ground\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AnkleGrp.ty\") 0;\n\t\t\n\t\tRRM_CreateProxyLeg2($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $posOffset, $crntUnit);\n\n\t\t//ADD EXTRA ATTRIBUTES, CHANGE COLOURS\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Hip\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_Ankle\") (\"RRM_\" + $prfx + $modName + \"_Ball\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_Toe\") (\"RRM_\" + $prfx + $modName + \"_FootRightTilt\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_FootLeftTilt\") (\"RRM_\" + $prfx + $modName + \"_HeelPivot\")\n\t\t(\"RRM_\" + $prfx + $modName + \"_Ground\") ;\n\n\t\t\t\n\t\t$legMods = `ls -sl`;\n\t\tstring $crntMod;\n\t\tfor ($crntMod in $legMods)\n\t\t{\n\t\t\tif ($mirrorMod == 2)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\"  $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".pair\");\n\t\t\t\tsetAttr -type \"string\" ($crntMod + \".pair\") $crntSide;\n\t\t\t\tsetAttr -l true ($crntMod + \".pair\");\n\t\t\t\t\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" $crntMod;\n\t\t\t\tsetAttr -e-keyable true ($crntMod + \".opposite\");\n\t\t\t}\n\n\t\t\t//COLOURS\n\t\t\tsetAttr ($crntMod + \".overrideEnabled\") 1;\n\t\t\tsetAttr ($crntMod + \".overrideColor\") 31;\n\t\t}\n\t\t\n\t\tif ($mirrorMod == 2)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.opposite\") ($oppPrfx + $modName + \"_Hip\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.opposite\") ($oppPrfx + $modName + \"_Ankle\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.opposite\") ($oppPrfx + $modName + \"_Ball\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.opposite\") ($oppPrfx + $modName + \"_Toe\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.opposite\") ($oppPrfx + $modName + \"_Ground\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.opposite\") ($oppPrfx + $modName + \"_FootRightTilt\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.opposite\") ($oppPrfx + $modName + \"_FootLeftTilt\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.opposite\") ($oppPrfx + $modName + \"_HeelPivot\");\n\t\n\t\t\tfor ($crntMod in $legMods)\n\t\t\t{\n\t\t\t\tsetAttr -l true ($crntMod + \".opposite\");\n\t\t\t}\n\t\t}\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_AimLctr.v\") 0;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_KneeAimLctr.v\") 0;\n\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 2;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\n\t\tpointConstraint -skip y (\"RRM_\" + $prfx + $modName + \"_Hip\") (\"RRM_\" + $prfx + $modName + \"_GroundGrp\");\n\t\tparentConstraint -mo RRM_MAIN (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\");\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tscale 1 1 1 (\"RRM_\" + $prfx + $modName + \"_GroundGrp\") (\"RRM_\" + $prfx + $modName + \"_GroundGrp2\");\n\n\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$rotOffset = 90;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"leg\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\t\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\t\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\n\t//ADD UPPER LEGrp NUM ATTRIBUTE\n\taddAttr -ln \"upperLegNum\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".upperLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".upperLegNum\") $upperLegNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".upperLegNum\");\n\t\n\t//ADD LOWER LEGrp NUM ATTRIBUTE\n\taddAttr -ln \"lowerLegNum\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".lowerLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".lowerLegNum\") $lowerLegNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".lowerLegNum\");\n\n\t//ADD KNEE NUM ATTRIBUTE\n\taddAttr -ln \"kneeNum\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".kneeNum\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeNum\") $kneeNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".kneeNum\");\n\n\t//ADD UPPER LEGrp NUM ATTRIBUTE\n\taddAttr -ln \"kneeJoints\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".kneeJoints\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeJoints\") $kneeJoints;\n\tsetAttr -l true (\"RRM_\" + $modName + \".kneeJoints\");\t\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_LegPrompts(string $modName, int $upperLegNum, int $lowerLegNum, int $kneeNum, int $kneeJoints, int $mirrorMod)\n{\n\tstring $name = `textField -q -text RRM_TextFieldLegName`;\n\tint $nameSize = `size $name`;\n\n\tif ($nameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($name))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($name)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldLegName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this name. Please use a unique name\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyLeg($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyLeg($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////FK CHAINS/////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyFKChain2(string $modName, int $chainsNum, int $jointsNum, int $direction, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $multiplier, string $crntUnit)\n{\n\t//SET FK NUM'S IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.chainNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.chainNum\") $chainsNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.chainNum\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.jointNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.jointNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jointNum\");\n\t\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.direction\") $direction;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\n\t//SET FK NUM'S IN TOP NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $modName + \".chainsNum\");\n\tsetAttr (\"RRM_\" + $modName + \".chainsNum\") $chainsNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".chainsNum\");\n\n\tsetAttr -l false (\"RRM_\" + $modName + \".jointsNum\");\n\tsetAttr (\"RRM_\" + $modName + \".jointsNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".jointsNum\");\n\t\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.direction\") $direction;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.direction\");\n\n\n\t//CREATE ATTACH LOCATION\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[0]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[1]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[2]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[3]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[5]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[10]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[9]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[4]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t-worldUpVector 0 1 0 -worldUpObject (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\")`;\n\tparent (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmakeIdentity -apply false -r 1 (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t$targetLoc = `getAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.translate\")`;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.tx\") ($targetLoc[0] * 3.1304347826087);\n\tparentConstraint -mo (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t//CREATE FIRST NODE\n\tif ($jointsNum != 1)\n\t{\n\t\tRRM_CreateProxyBaseUpProxy($crntUnit);\n\t\trename RRM_BaseUp (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideColor\") 9;\n\t}\n\telse\n\t{\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\trotate -r -os -90 0 0 (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_01_.overrideColor\") 9;\n\t}\n\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Grp\")  (\"RRM_\" + $prfx + $modName + \"_01_\"); xform -os -piv 0 0 0;\n\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_Grp\")`;\n\trotate -r -os 90 0 0 (\"RRM_\" + $prfx + $modName + \"_01_\");\n\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_01_\");\n\tparent (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\trotate -r -os 0 -90 -90 (\"RRM_\" + $prfx + $modName + \"_Grp\") ;\n\tmakeIdentity -apply false -s 1  (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\t\n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.core\") ($prfx + $modName + \"_01_\");\n\t\n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.ext\") (\"_01_\");\n\n\tdelete (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\n\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_01_\"));\n\n\tif ($mirrorMod ==1)\n\t{\n\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01_.pair\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.pair\") $crntSide;\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01_.pair\");\n\t\t\n\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01_\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01_.opposite\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01_.opposite\") ($oppPrfx + $modName + \"_01_\");\n\t}\n    \n\t//CHAINS\n\tint $crntChNum = 2;\n\twhile ($crntChNum <= $chainsNum)\n\t{\n\t\t$previousMod = ($crntChNum -1);\n\t\tstring $namePadding = \"\";\n\t\tif ($crntChNum < 10)\n\t\t{\n\t\t\t$namePadding = \"0\";\n\t\t}\n\t\tstring $namePaddingPrev = \"\";\n\t\tif ($crntChNum < 11)\n\t\t{\n\t\t\t$namePaddingPrev = \"0\";\n\t\t}\n\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\") (\"RRM_\" + $prfx + $modName + \"_\" + $namePaddingPrev + $previousMod + \"_\");\n\t\tmove -r -ls ($multiplier * -0.75) 0 0 (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\");\n\t\t\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.opposite\") ($oppPrfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\");\t\t\t\n\t\t}\n    \n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.core\");\t\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.core\") ($prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\");\n    \n\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.ext\");\t\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_.ext\") (\"_\" + $namePadding + $crntChNum + \"_\");\n\t\t\n\t\t//CONNECTORS\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntChNum + \"_\"));\n\n\t\t$crntChNum++;\n\t}\n\t\n\t//FIX JOINT OFFSET\n\tspaceLocator -n  (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\");\n\t$chainStart = `ls (\"RRM_\" + $prfx + $modName + \"_??_\")`;\n\tdelete `pointConstraint $chainStart (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\")`;\n\tparent $chainStart (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\");\n\tdelete `pointConstraint (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\")`;\n\tparent $chainStart (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tdelete (\"RRM_\" + $prfx + $modName + \"chainCenterLctr\");\n    \n\t//JOINTS\n\tselect -hi (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tselect -d (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tselect -d \"RRM_*Shape\";\n\t$chains = `ls -sl`;\n\tint $crntJntNum = 2;\n    \n\tfor ($crntJnt in $chains)\n\t{\n\t\t$crntJntNum = 2;\n\t\twhile ($crntJntNum <= $jointsNum)\n\t\t{\n\t\t\tstring $namePadding = \"\";\n\t\t\tstring $prevPadding = \"\";\n\t\t\t$prevJntNum = ($crntJntNum - 1);\n\t\t\t//CHECK IF END NODE OR NOT\n\t\t\tif ($crntJntNum < 10)\n\t\t\t{\n\t\t\t\t$namePadding = \"0\";\n\t\t\t}\n\t\t\tif ($crntJntNum <= 10)\n\t\t\t{\n\t\t\t\t$prevPadding = \"0\";\n\t\t\t}\n\t\t\tif ($crntJntNum != $jointsNum)\n\t\t\t{\n\t\t\t\tif ($crntJntNum ==2)\n\t\t\t\t{\n\t\t\t\t\tduplicate -n ($crntJnt + $namePadding + $crntJntNum) $crntJnt;\n\t\t\t\t\tmove -r -ls 0 1 0 ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) $crntJnt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tduplicate -n ($crntJnt + $namePadding + $crntJntNum) ($crntJnt + $prevPadding + $prevJntNum);\n\t\t\t\t\tmove -r -ls 0 1 0 ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) ($crntJnt + $prevPadding + $prevJntNum);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\t\t\trename RRM_End ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\tif ($crntJntNum ==2)\n\t\t\t\t{\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) $crntJnt;\n\t\t\t\t\tdelete `parentConstraint $crntJnt ($crntJnt + $namePadding + $crntJntNum)`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent ($crntJnt + $namePadding + $crntJntNum) ($crntJnt + $prevPadding + $prevJntNum);\n\t\t\t\t\tdelete `parentConstraint ($crntJnt + $prevPadding + $prevJntNum) ($crntJnt + $namePadding + $crntJntNum)`;\n\t\t\t\t}\n\t\t\t\tif ($mirrorMod ==1)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tsetAttr -e-keyable true ($crntJnt + $namePadding + $crntJntNum + \".pair\");\n\t\t\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".pair\") $crntSide;\n\t\t\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".pair\");\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t\t\tsetAttr -e-keyable true ($crntJnt + $namePadding + $crntJntNum + \".opposite\");\n\t\t\t\t}\n\t\t\t\tmove -r -ls  0 1 0 ($crntJnt + $namePadding + $crntJntNum);\n\t\t\t}\n\t\t\t//ATTRIBUTES\n\t\t\t$coreName = `getAttr ($crntJnt + \".core\")`;\n\t\t\tsetAttr -l false ($crntJnt + $namePadding + $crntJntNum + \".core\");\n\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".core\") ($coreName + $namePadding + $crntJntNum);\n\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".core\");\n\n\t\t\t$extName = `getAttr ($crntJnt + \".ext\")`;\n\t\t\tsetAttr -l false ($crntJnt + $namePadding + $crntJntNum + \".ext\");\n\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".ext\") ($extName + $namePadding + $crntJntNum);\n\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".ext\");\n\n\t\t\tif ($mirrorMod == 1)\n\t\t\t{\n\t\t\t\t$oppositeName = `getAttr ($crntJnt + \".opposite\")`;\n\t\t\t\tsetAttr -l false ($crntJnt + $namePadding + $crntJntNum + \".opposite\");\n\t\t\t\tsetAttr -type \"string\" ($crntJnt + $namePadding + $crntJntNum + \".opposite\") ($oppositeName + $namePadding + $crntJntNum);\n\t\t\t\tsetAttr -l true ($crntJnt + $namePadding + $crntJntNum + \".opposite\");\n\t\t\t}\n\t\t\t//CONNECTORS\n\t\t\tif ($crntJntNum == 2)\n\t\t\t{\n\t\t\t\tRRM_ProxyConnectors($modName, $prfx, $crntJnt, ($crntJnt + $namePadding + $crntJntNum));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRRM_ProxyConnectors($modName, $prfx, ($crntJnt + $prevPadding + $prevJntNum), ($crntJnt + $namePadding + $crntJntNum));\n\t\t\t}\n\t\t\t$crntJntNum++;\n\t\t}\n\t}\n    \n\t//RENAME 01 JOINTS\n\t$topJoints = `ls (\"RRM_\" + $prfx + $modName + \"_??_\")`;\n\t$previousJnt = (\"RRM_\" + $prfx + $modName + \"_Parent_\");\n\t$i =0;\n\tfor ($crntJnt in $topJoints)\n\t{\n\t\trename $crntJnt ($crntJnt + \"01\");\n\n\t\t$coreName = `getAttr ($crntJnt + \"01.core\")`;\n\t\tsetAttr -type \"string\" ($crntJnt + \"01.core\") ($coreName + \"01\");\n\t\tsetAttr -l true ($crntJnt + \"01.core\");\n\n\t\t$extName = `getAttr ($crntJnt + \"01.ext\")`;\n\t\tsetAttr -type \"string\" ($crntJnt + \"01.ext\") ($extName + \"01\");\n\t\tsetAttr -l true ($crntJnt + \"01.ext\");\n\t\t\n\t\tif ($mirrorMod == 1)\n\t\t{\n\t\t\t$oppositeName = `getAttr ($crntJnt + \"01.opposite\")`;\n\t\t\tsetAttr -type \"string\" ($crntJnt + \"01.opposite\") ($oppositeName + \"01\");\t\t\n\t\t\tsetAttr -l true ($crntJnt + \"01.opposite\");\n\t\t}\n\t}\n\n\t//FIX UP AND DOWN\n\tif ($direction == 2)\n\t{\n\t\trotate -r 0 -90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t}\n\tif ($direction == 5)\n\t{\n\t\trotate -r 0 90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t}\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Grp\");\n}\n\nglobal proc RRM_CreateProxyFKChain(string $modName, int $chainsNum, int $jointsNum, int $modDirection, int $modDirection2, int $mirrorMod)\n{\n\t//SET UNITS TO CENTIMETERS\n\tstring $crntUnit = `currentUnit -query -linear`;\n\tif ($crntUnit != \"cm\")\n\t{\n\t}\n\tif ($modDirection == 0)\n\t{\n\t\t$modDirection = ($modDirection2 + 3);\n\t}\n\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$rotOffset = 0;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\n\t//FK CHAIN\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppSide = \"\";\n\t\t}\n\t\t\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"fkChain\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\n\t\taddAttr -ln \"chainNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"jointNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\taddAttr -ln \"direction\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\n\t\t//CHECK IF MIRRORED\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName);\n\t\t\t}\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\t\t\t\n\t\t}\n\n\t\tif (!`objExists (\"RRM_\" + $modName + \".chainsNum\")`)\n\t\t{\n\t\t\t//ADD CHAIN NUM ATTRIBUTE\t\n\t\t\taddAttr -ln \"chainsNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".chainsNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".chainsNum\") $chainsNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".chainsNum\");\n\t\t\n\t\t\t//ADD JOINT NUM ATTRIBUTE\t\n\t\t\taddAttr -ln \"jointsNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".jointsNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".jointsNum\") $jointsNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".jointsNum\");\n\t\t}\n\n\t\t//X\n\t\tstring $selectedMod;\n\t\tfloat $xValue = 0;\n\t\trotate -r -90 -90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tif ($crntSide == \"left\")\n\t\t{\n\t\t\tif ($modDirection == 1)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\tif ($xValue < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($modDirection == 4)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\t$xValue = 0;\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\t\n\t\t\t\t\tif ($xValue >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if ($crntSide == \"right\")\n\t\t{\n\t\t\tif ($modDirection == 1)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\tif ($xValue >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif ($modDirection == 4)\n\t\t\t{\n\t\t\t\t//CHECK LOCATION\n\t\t\t\t$xValue = 0;\n\t\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t\t{\n\t\t\t\t\t$modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t\t\t$xValue = ($xValue + $modTX[0]);\n\t\t\t\t\t\n\t\t\t\t\tif ($xValue < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trotate -r 0 180 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Y\n\t\tif ($modDirection == 2)\n\t\t{\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent.rotate\"), -90, 0, 90);\n\t\t}\n\t\tif ($modDirection == 5)\n\t\t{\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent.rotate\"), -90, 0, -90);\n\t\t}\t\t\n\t\t//Z\n\t\tif ($modDirection == 3)\n\t\t{\n\t\t\trotate -r 0 -90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t}\n\t\tif ($modDirection == 6)\n\t\t{\n\t\t\trotate -r 0 90 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t}\n\t\t\n\t\tif (!`objExists ($attachMod[0] + \".pair\")`)\n\t\t{\n\t\t\tif ($mirrorMod == 1)\n\t\t\t{\n\t\t\t\tmove -r ($multiplier * 1) 0 0  (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 9;\n\t\t\n\t\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\n\t\tselect -hi (\"RRM_\" + $prfx + $modName);\n\t\tselect -d (\"RRM_\" + $prfx + $modName);\n\t\tpickWalk -d up;\n\t\tselect -d (\"RRM_\" + $prfx + $modName);\n\t\t$lFingerProxies = `ls -sl`;\n\t\t\n\t\tselect (\"RRM_\" + $prfx + $modName);\n\t\t\n\t\tRRM_CreateProxyFKChain2($modName, $chainsNum, $jointsNum, $modDirection, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\t//PARENT CONNECTOR\n\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t////CONNECT AND LINK SCALE CHANNELS TO AVOID PROXY SCEWING\n\t\t//$fkProxies = `ls -sl -type \"transform\" (\"RRM_\" + $prfx + $modName + \"_??_??\")`;\n\t\t//for ($each in $fkProxies)\n\t\t//{\n\t\t//\tif ($modDirection == 1 || $modDirection == 4)\n\t\t//\t{\n\t\t//\t\tconnectAttr -f ($each + \".scaleX\") ($each + \".scaleY\");\n\t\t//\t\tconnectAttr -f ($each + \".scaleX\") ($each + \".scaleZ\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleY\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleZ\");\n\t\t//\t}\n\t\t//\telse if ($modDirection == 2 || $modDirection == 5)\n\t\t//\t{\n\t\t//\t\tconnectAttr -f ($each + \".scaleY\") ($each + \".scaleX\");\n\t\t//\t\tconnectAttr -f ($each + \".scaleY\") ($each + \".scaleZ\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleX\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleZ\");\n\t\t//\t}\n\t\t//\telse if ($modDirection == 3 || $modDirection == 6)\n\t\t//\t{\n\t\t//\t\tconnectAttr -f ($each + \".scaleZ\") ($each + \".scaleX\");\n\t\t//\t\tconnectAttr -f ($each + \".scaleZ\") ($each + \".scaleY\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleX\");\n\t\t//\t\tsetAttr -lock true -keyable false -channelBox false ($each + \".scaleY\");\n\t\t//\t}\n\t\t//}\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$rotOffset = 180;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"fkChain\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\t\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\n\t//ADD DIRECTION ATTRIBUTE\t\n\taddAttr -ln \"direction\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".direction\");\n\tsetAttr (\"RRM_\" + $modName + \".direction\") $modDirection;\n\tsetAttr -l true (\"RRM_\" + $modName + \".direction\");\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\t\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_Parent\") (\"RRM_r_\" + $modName + \"_Parent\");\n\t\t}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_FKChainPrompts(string $modName, int $chainsNum, int $jointsNum, int $mirrorMod, int $modDirection, int $modDirection2)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldFKChainName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this name. Please use a unique name\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$chainSize = ($chainsNum * $jointsNum * $mirrorMod);\n\t\t\t\t\t\tif ($chainSize <= 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstring $returnVal_Generate2 = `confirmDialog\n\t\t\t\t\t\t\t-title \"Large Number of proxies in module\"\n\t\t\t\t\t\t\t-message \"The FK Chain you are about to create has over 100 proxies. This could take several minutes to generate. Proceed?\\n\"\n\t\t\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t\t\t-icon \"warning\"`;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ($returnVal_Generate2 == \"OK\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$chainSize = ($chainsNum * $jointsNum * $mirrorMod);\n\t\t\t\t\tif ($chainSize <= 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstring $returnVal_Generate2 = `confirmDialog\n\t\t\t\t\t\t-title \"Large Number of proxies in module\"\n\t\t\t\t\t\t-message \"The FK Chain you are about to create has over 100 proxies. This could take several minutes to generate. Proceed?\\n\"\n\t\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t\t-icon \"warning\"`;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ($returnVal_Generate2 == \"OK\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tRRM_CreateProxyFKChain($modName, $chainsNum, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////HEAD///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyHead(string $modName, int $RRM_Jaw, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 1;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\tif (`objExists ($attachMod[0] + (\".opposite\"))`)\n\t\t{\n\t\t\t$posOffset = 0;\n\t\t}\n\t\t\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"head\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\t\t\n\t\taddAttr -ln \"jaw\"  -at bool -dv $RRM_Jaw (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\n\t\t\n\n\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\trename RRM_End (\"RRM_\" + $prfx  + $modName + \"_Top\");\n\t\tmove -r 0 3 0 (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.core\") ($prfx + $modName + \"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.core\");\n\t\t\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.ext\") (\"_Top\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.ext\");\n\t\t\n\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx  + $modName + \"_Top\"));\n\t\t\n\t\tif ($RRM_Jaw == 1)\n\t\t{\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base\t (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmove -r 0 1.5 0.25 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.core\") ($prfx + $modName + \"_Jaw\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.core\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.ext\") (\"_Jaw\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.ext\");\n\t\t\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Jaw\"));\n\t\t\t\n\t\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmove -r 0 1 1.5 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\trotate -r 90 0 0 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_JawEnd\") (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\") ($prfx + $modName + \"_JawEnd\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\");\n\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.ext\") (\"_JawEnd\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.ext\");\n\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Jaw\"), (\"RRM_\" + $prfx + $modName + \"_JawEnd\"));\n\t\t}\n\t\t\n\t\tparent (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t\t//MIRROR ATTRIBUTES\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".pair\");\n\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".opposite\") ($oppPrfx + $modName);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\t\t\n\t\t\tif ($RRM_Jaw == 1)\n\t\t\t{\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Jaw.pair\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.pair\") $crntSide;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.pair\");\n\t\t\t\t\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Jaw.opposite\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.opposite\") ($oppPrfx + $modName + \"_Jaw\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.opposite\");\n        \t\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_JawEnd.pair\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.pair\") $crntSide;\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.pair\");\n\t\t\t\t\n\t\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_JawEnd.opposite\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.opposite\") ($oppPrfx + $modName + \"_JawEnd\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.opposite\");\n\t\t\t}\n\t\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Top.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Top\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.opposite\") ($oppPrfx + $modName + \"_Top\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Top.opposite\");\n\t\t}\n\t\t//OFFSET FROM CENTER IF NOT ATTACHED TO PAIR\t\t\n\t\tif (!`objExists ($attachMod[0] + \".pair\")`)\n\t\t{\n\t\t\tmove -r $posOffset 0 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t}\n\t\t\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\n\t\t//ASSIGN COLOURS\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tif ($RRM_Jaw == 1)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t}\n\t\t$headProxies = `ls -sl`;\n\t\tstring $crntHead;\n\t\tfor ($crntHead in $headProxies)\n\t\t{\n\t\t\tsetAttr ($crntHead + \".overrideEnabled\") 1;\n\t\t\tsetAttr ($crntHead + \".overrideColor\") 4;\n\t\t}\n\t\tselect (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -1;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"head\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\t\n\t//ADD JAW ATTRIBUTE\n\taddAttr -ln \"jaw\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".jaw\");\n\tsetAttr (\"RRM_\" + $modName + \".jaw\") $RRM_Jaw;\n\tsetAttr -l true (\"RRM_\" + $modName + \".jaw\");\t\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_HeadPrompts(string $modName, int $RRM_Jaw, int $mirrorMod)\n{\n\tstring $modName = `textField -q -text RRM_TextFieldHeadName`;\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text RRM_TextFieldHeadName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyHead($modName, $RRM_Jaw, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyHead($modName, $RRM_Jaw, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////LOOK AT///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyLookAt2(string $modName, int $jointsNum, int $mirrorMod, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, int $multiplier, string $crntUnit)\n{\n\t//SET EYE NUM IN PARENT NODE\n\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.eyeNum\");\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.eyeNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.eyeNum\");\n\n\tlockNode -lock off (\"RRM_\" + $modName);\n\n\tsetAttr -l false (\"RRM_\" + $modName + \".eyeNum\");\n\tsetAttr (\"RRM_\" + $modName + \".eyeNum\") $jointsNum;\n\tsetAttr -l true (\"RRM_\" + $modName + \".eyeNum\");\n\t\n\n\t//CREATE ATTACH LOCATION\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[0]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[1]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[2]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentShape.cv[3]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t\n\t$point0 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[5]\")`;\n\t$point1 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[10]\")`;\n\t$point2 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[9]\")`;\n\t$point3 = `xform -q -ws -t (\"RRM_\" + $prfx + $modName + \"_ParentBShape.cv[4]\")`;\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmove -ws (($point0[0] + $point1[0] + $point2[0] + $point3[0])/4)\n\t(($point0[1] + $point1[1] + $point2[1] + $point3[1])/4)\n\t(($point0[2] + $point1[2] + $point2[2] + $point3[2])/4) (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t-worldUpVector 0 1 0 -worldUpObject (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\")`;\n\tparent (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\tmakeIdentity -apply false -r 1 (\"RRM_\" + $prfx + $modName + \"_targetLctr\");\n\t$targetLoc = `getAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.translate\")`;\n\tsetAttr (\"RRM_\" + $prfx + $modName + \"_targetLctr.tx\") ($targetLoc[0] * 1.65);\n\tparentConstraint -mo (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_AimLctr\");\n\t\n\t//CREATE FIRST NODE\n\tRRM_CreateProxyBaseUpProxy($crntUnit);\n\trename RRM_BaseUp (\"RRM_\" + $prfx + $modName + \"_01\");\n\tscale -r  3 3.2 3 (\"RRM_\" + $prfx + $modName + \"_01DShape.cv[1]\") (\"RRM_\" + $prfx + $modName + \"_01EShape.cv[0:2]\")\n\t(\"RRM_\" + $prfx + $modName + \"_01FShape.cv[0:2]\") (\"RRM_\" + $prfx + $modName + \"_01GShape.cv[0:7]\");\n\t\n\tmove -r -os -wd 0 8 0 (\"RRM_\" + $prfx + $modName + \"_01DShape.cv[1]\") (\"RRM_\" + $prfx + $modName + \"_01EShape.cv[0:2]\")\n\t(\"RRM_\" + $prfx + $modName + \"_01FShape.cv[0:2]\") (\"RRM_\" + $prfx + $modName + \"_01GShape.cv[0:7]\");\n\tmove -r 0 1 0 (\"RRM_\" + $prfx + $modName + \"_01\");\n\trotate -r -os 0 0 -90 (\"RRM_\" + $prfx + $modName + \"_01\");\n\tmakeIdentity -apply true -t 1-r 1 (\"RRM_\" + $prfx + $modName + \"_01\");\n    \n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.core\") ($prfx + $modName + \"_01\");\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.core\");\n    \n\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.ext\") (\"_01\");\n\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.ext\");\n\t\n\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_01\"));\n\n\tif ($mirrorMod ==1)\n\t{\n\t\t//MIRROR ATTRIBUTES\n\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01.pair\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.pair\") $crntSide;\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.pair\");\n\t\t\n\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_01\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_01.opposite\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_01.opposite\") ($oppPrfx + $modName + \"_01\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_01.opposite\");\n\t}\n\tgroup -n (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_01\"); xform -os -piv 0 0 0;\n\t\n\tif ($jointsNum > 1)\n\t{\n\t\t//JOINTS\n\t\tint $crntjointNum = 2;\n\t\twhile ($crntjointNum <= $jointsNum)\n\t\t{\n\t\t\t$previousMod = ($crntjointNum -1);\n\t\t\tstring $namePadding = \"\";\n\t\t\tif ($crntjointNum < 10)\n\t\t\t{\n\t\t\t\t$namePadding = \"0\";\n\t\t\t}\n\t\t\tstring $namePaddingPrev = \"\";\n\t\t\tif ($crntjointNum < 11)\n\t\t\t{\n\t\t\t\t$namePaddingPrev = \"0\";\n\t\t\t}\n\t\t\tduplicate -n (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum) (\"RRM_\" + $prfx + $modName + \"_\" + $namePaddingPrev + $previousMod);\n\t\t\tmove -r -ls 0 0 -0.75 (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum);\n\t\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".core\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".core\") ($prfx + $modName + \"_\" + $namePadding + $crntjointNum);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".core\");\n\t\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".ext\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".ext\") (\"_\" + $namePadding + $crntjointNum);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".ext\");\n\t\t\n\t\t\tif ($mirrorMod ==1)\n\t\t\t{\n\t\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".opposite\");\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".opposite\") ($oppPrfx + $modName + \"_\" + $namePadding + $crntjointNum);\t\t\t\n\t\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum + \".opposite\");\n\t\t\t}\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_\" + $namePadding + $crntjointNum));\n\n\t\t\t$crntjointNum++;\n\t\t}\n\t}\n\t//FIX JOINT OFFSET\n\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_CenterLctr\");\n\t$lookAts = `ls (\"RRM_\" + $prfx + $modName + \"_??\")`;\n\tdelete `pointConstraint $lookAts (\"RRM_\" + $prfx + $modName + \"_CenterLctr\")`;\n\tparent $lookAts (\"RRM_\" + $prfx + $modName + \"_CenterLctr\");\n\tdelete `pointConstraint (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_CenterLctr\")`;\n\tparent $lookAts (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_targetLctr\") (\"RRM_\" + $prfx + $modName + \"_Grp\")`;\n\tparent (\"RRM_\" + $prfx + $modName + \"_Grp\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\tmakeIdentity -apply true -t 1 -r 1 (\"RRM_\" + $prfx + $modName + \"_Grp\");\n\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Grp.scale\"), 1, 1, 1);\n\n\tdelete (\"RRM_\" + $prfx + $modName + \"_AimLctr\") (\"RRM_\" + $prfx + $modName + \"_CenterLctr\");\n}\n\n\nglobal proc RRM_CreateProxyLookAt(string $modName, int $jointsNum, int $modDirection, int $modDirection2, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tif ($modDirection == 0)\n\t{\n\t\t$modDirection = ($modDirection2 + 3);\n\t}\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t}\n\t\t\n\t\tRRM_CreateProxyParentProxy($crntUnit);\n\t\trename RRM_Parent (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Parent\"); xform -os -piv 0 0 0;\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.parent\") \"lookAt\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.parent\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.core\") ($prfx + $modName + \"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.core\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.ext\") (\"_Parent\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.ext\");\n\n\t\taddAttr -ln \"eyeNum\"  -at long -dv 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t\t\n\t\t\t//MIRROR ATTRIBUTES\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".pair\");\n\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".opposite\") ($oppPrfx + $modName);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\") ($oppPrfx + $modName + \"_Parent\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.opposite\");\t\t\n\t\t}\n\t\t\t\n\t\tif (!`objExists (\"RRM_\" + $modName + \".eyeNum\")`)\n\t\t{\n\t\t\t//ADD EYE NUM ATTRIBUTE\n\t\t\taddAttr -ln \"eyeNum\" -at long (\"RRM_\" + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".eyeNum\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".eyeNum\") $jointsNum;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".eyeNum\");\n\t\t}\n\n\t\t//X\n\t\tstring $selectedMod;\n\t\tfloat $xValue = 0;\n\t\trotate -r ($multiplier * -90) -90 0 (\"RRM_\" + $prfx + $modName);\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName);\n\t\tif ($modDirection == 1)\n\t\t{\n\t\t\t//CHECK LOCATION\n\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t{\n\t\t\t    $modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t    $xValue = ($xValue + $modTX[0]);\n\t\t\t}\n\t\t\tif ($xValue < 0)\n\t\t\t{\n\t\t\t\trotate -r 0 ($multiplier * 180) 0 (\"RRM_\" + $prfx + $modName);\n\t\t\t}\n\t\t}\n\t\tif ($modDirection == 4)\n\t\t{\n\t\t\t//CHECK LOCATION\n\t\t\t$xValue = 0;\n\t\t\tfor ($selectedMod in $attachMod)\n\t\t\t{\n\t\t\t    $modTX = `xform -q -ws -rp $selectedMod`;\n\t\t\t    $xValue = ($xValue + $modTX[0]);\n\t\t\t}\n\t\t\tif ($xValue >= 0)\n\t\t\t{\n\t\t\t\trotate -r 0 ($multiplier * 180) 0 (\"RRM_\" + $prfx + $modName);\n\t\t\t}\n\t\t}\n\t\t//Y\n\t\tif ($modDirection == 2)\n\t\t{\n\t\t\trotate -r -90 0 ($multiplier * 90) (\"RRM_\" + $prfx + $modName);\n\t\t}\n\t\tif ($modDirection == 5)\n\t\t{\n\t\t\trotate -r 90 0 ($multiplier * -90) (\"RRM_\" + $prfx + $modName);\n\t\t}\t\t\n\t\t//Z\n\t\tif ($modDirection == 3)\n\t\t{\n\t\t\trotate -r 0 ($multiplier * -90) 0 (\"RRM_\" + $prfx + $modName);\n\t\t}\n\t\tif ($modDirection == 6)\n\t\t{\n\t\t\trotate -r 0 ($multiplier * 90) 0 (\"RRM_\" + $prfx + $modName);\n\t\t}\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName);\n\t\t\n\t\t//OFFSET FROM CENTER IF NOT ATTACHED TO PAIR\t\t\n\t\tif (!`objExists ($attachMod[0] + \".pair\")`)\n\t\t{\n\t\t\tif ($mirrorMod == 1)\n\t\t\t{\n\t\t\t\tmove -r ($multiplier * 1) 0 0  (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.overrideColor\") 30;\n\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\t\n\t\tRRM_CreateProxyLookAt2($modName, $jointsNum, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Parent\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"lookAt\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\n\t//ADD DIRECTION ATTRIBUTE\t\n\taddAttr -ln \"direction\" -at long (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".direction\");\n\tsetAttr (\"RRM_\" + $modName + \".direction\") $modDirection;\n\tsetAttr -l true (\"RRM_\" + $modName + \".direction\");\t\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\n\n}\n\nglobal proc RRM_LookAtPrompts(string $modName, int $jointsNum, int $mirrorMod, int $modDirection, int $modDirection2)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text textFieldLookAtModName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyLookAt($modName, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyLookAt($modName, $jointsNum, $modDirection, $modDirection2, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////Auxiliary///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_CreateProxyAuxiliary(string $modName, int $mirrorMod)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\n\t$i = 0;\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif ($mirrorMod == 0)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t}\n\t\t\n\t\t//GET OPPOSITE ATTACHMENT\n\t\t//if ($i == 1)\n\t\t//{\n\t\t//\tif (`objExists ($attachMod[0] + \".opposite\")`)\n\t\t//\t{\n\t\t//\t\t$oppAttach = `getAttr ($attachMod[0] + \".opposite\")`;\n\t\t//\t\t$attachMod[0] = (\"RRM_\" + $oppAttach);\n\t\t//\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t//\t}\n\t\t//}\n\t\t\n\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\tscale -r 1.5 1.5 1.5 RRM_Base;\n\t\tmakeIdentity -apply true -s 1 RRM_Base;\n\t\trename RRM_Base (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tgroup -n (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $prfx + $modName + \"_Aux\"); xform -os -piv 0 0 0;\n\t\t\n\t\taddAttr -ln \"modType\" -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.modType\") \"auxiliary\";\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.modType\");\n\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.core\") ($prfx + $modName + \"_Aux\");\n\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.core\");\n\n\t\taddAttr -ln \"attachNode\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\");\n\t\t\n\t\t//CREATE COLOURED AXES CURVES\n\t\tcurve  -n (\"RRM_\" + $prfx + $modName + \"_Aux_X\") -d 1 -p 0 0 0 -p 1 0 0 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Aux_XShape\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_XShape.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_XShape.overrideColor\") 13;\n\t\t\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Aux_Y\") -d 1 -p 0 0 0 -p 0 1 0 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Aux_YShape\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_YShape.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_YShape.overrideColor\") 14;\n\t\t\n\t\tcurve -n (\"RRM_\" + $prfx + $modName + \"_Aux_Z\") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape.overrideColor\") 6;\n\t\t\n\t\tparent -r -s (\"RRM_\" + $prfx + $modName + \"_Aux_XShape\") (\"RRM_\" + $prfx + $modName + \"_Aux_YShape\") (\"RRM_\" + $prfx + $modName + \"_Aux_ZShape\")(\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Aux_X\") (\"RRM_\" + $prfx + $modName + \"_Aux_Y\") (\"RRM_\" + $prfx + $modName + \"_Aux_Z\");\n\n\n\t\t//ADD PINNED ATTRIBUTE\n\t\taddAttr -ln \"pinned\"  -at bool (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\") 0;\n\t\tsetAttr -lock true (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\t\n\t\t//ADD CONNECTOR VIZ ATTRIBUTE\n\t\taddAttr -ln \"connectors\"  -at bool (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.connectors\");\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.connectors\") 1;\n\n\t\tif ($mirrorMod ==1)\n\t\t{\n\t\t\tif (!`objExists (\"RRM_\" + $modName)`)\n\t\t\t{\n\t\t\t\tgroup -n (\"RRM_\" + $modName) (\"RRM_\" + $prfx + $modName); xform -os -piv 0 0 0;\n\t\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $modName);\n\t\t\t\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".pair\");\n\t\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".pair\");\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparent  (\"RRM_\" + $prfx + $modName) (\"RRM_\" + $modName); xform -os -piv 0 0 0;\n\t\t\t}\n\t\t\t\n\t\t\t//MIRROR ATTRIBUTES\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".pair\");\n\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName);\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \".opposite\") ($oppPrfx + $modName);\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \".opposite\");\n\t\t\t\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.pair\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.pair\") $crntSide;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.pair\");\n\t\t\t\n\t\t\taddAttr -ln \"opposite\"  -dt \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\tsetAttr -e-keyable true (\"RRM_\" + $prfx + $modName + \"_Aux.opposite\");\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.opposite\") ($oppPrfx + $modName + \"_Aux\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Aux.opposite\");\t\t\n\t\t}\n\t\t\n\t\t//ATTACH TO RIG\n\t\tint $mirrorCheck = 1;\n\t\tRRM_AttachToRig($attachMod[0], $modName, $prfx, $crntSide, $oppSide, $attachModCore, $mirrorMod, $mirrorCheck);\n\t\t\n\t\t\n\t\t//makeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.overrideEnabled\") 1;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.overrideColor\") 24;\n\t\t\n\t\t//RRM_CreateProxyLookAt2($modName, $jointsNum, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\n\t\n\t\t//PARENT CONNECTOR\n\t\tRRM_ProxyConnectors($modName, $prfx, $attachMod[0], (\"RRM_\" + $prfx + $modName + \"_Aux\"));\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\n\t//ADD TOP ATTRIBUTE\n\taddAttr -ln \"top\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".top\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".top\") \"auxiliary\";\n\tsetAttr -l true (\"RRM_\" + $modName + \".top\");\n\n\t//ADD PARENT ATTRIBUTE\n\t$parentCore = `getAttr ($attachMod[0] + \".core\")`;\n\taddAttr -ln \"parent\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".parent\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".parent\") $parentCore;\n\tsetAttr -l true (\"RRM_\" + $modName + \".parent\");\n\n\t//ADD CORE NAME ATTRIBUTE\n\taddAttr -ln \"core\"  -dt \"string\"  (\"RRM_\" + $modName);\n\tsetAttr -e-keyable true (\"RRM_\" + $modName + \".core\");\n\tsetAttr -type \"string\" (\"RRM_\" + $modName + \".core\") $modName;\n\tsetAttr -l true (\"RRM_\" + $modName + \".core\");\n\n\tparent (\"RRM_\" + $modName) $attachMod[0];\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t}\n\t}\n\n\t//SET LIMITS OF HIERARCHY\n\tselect -hi (\"RRM_\" + $modName);\n\t$xforms = `ls-sl -type \"transform\"`;\n\tRRM_ProxyLimits($xforms);\n\n\tselect -hi (\"RRM_\" + $modName);\n\t$modNodes = `ls -sl`;\n\tRRM_ProxyLockNodes($modNodes);\n\n\tselect -cl;\n\t//if (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t//\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\t//if (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t//\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\t//else if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t//\t{select (\"RRM_\" + $modName + \"_Parent\");}\n\t\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Aux\")`)\n\t{\n\t\tmove -r 1 0 0 (\"RRM_l_\" + $modName + \"_Aux\");\n\t\tmove -r -1 0 0 (\"RRM_r_\" + $modName + \"_Aux\");\n\t\tselect (\"RRM_l_\" + $modName + \"_Aux\") (\"RRM_r_\" + $modName + \"_Aux\");\n\t}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Aux\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Aux\");}\n\n\n}\n\nglobal proc RRM_AuxiliaryPrompts(string $modName, int $mirrorMod)\n{\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the module Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid modName must begin with a letter.\\n    The rest of the modName may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique modName.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $modName = `textField -q -text textFieldAuxiliaryModName`;\n\t\n\t\tif (`objExists (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"Name is Not Unique\"\n\t\t\t\t-message \"Module already exists with this modName. Please use a unique modName\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$attachMod = `ls -sl`;\n\t\t\tstring $attachModCore;\n\t\t\t$attachModNum = `size $attachMod`;\n\t\t\tif ($attachModNum == 0)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"No Attachment Selected\"\n\t\t\t\t\t\t-message \"Please select a module node to attach your spline to.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t\t\t}\n\t\t\telse if (!`objExists ($attachMod[0]+ \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to the selected object.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if (`objExists ($attachMod[0]+ \".noAttach\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t-message \"You cannot attach to a Parent node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ($attachModNum > 1)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Multiple Attachments Selected\"\n\t\t\t\t\t-message \"You can only attach to one object. Attach to first selected module?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tRRM_CreateProxyAuxiliary($modName, $mirrorMod);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($attachMod[0] == \"RRM_MAIN\")\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"Invalid Attach Node\"\n\t\t\t\t\t\t-message \"You cannot attach modules to RRM_MAIN.\\n\"\n\t\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_CreateProxyAuxiliary($modName, $mirrorMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n//OVERRIDE COLOUR\nglobal proc RRM_ProxyOverrideColor(int $colorVal)\n{\n\t$selection = `ls -sl -type \"transform\"`;\n\tfor ($each in $selection)\n\t{\n\t\t//MAKE SURE EACH IN SELECTION IS A VALID PROXY\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t$modName = `getAttr ($each + \".modName\")`;\n\t\t\t$modNodes = `ls -type \"transform\" (\"RRM_*\" + $modName + \"*\")`;\n\t\t\t//MAKE SURE NODE IS PART OF THE SELECTED MODULE\n\t\t\tfor ($each2 in $modNodes)\n\t\t\t{\n\t\t\t\t//VALIDATE EACH IS PART OF THE MODULE OF THE INITIAL SELECTED BRANCH\n\t\t\t\tif (`objExists ($each2 + \".modName\")`)\n\t\t\t\t{\n\t\t\t\t\t$checkModName = `getAttr ($each2 + \".modName\")`;\n\t\t\t\t\tif ($checkModName == $modName)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CHECK IF IT IS RESET\n\t\t\t\t\t\tif ($colorVal == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstring $modType =`getAttr (\"RRM_\" + $checkModName + \".top\")`;\n\t\t\t\t\t\t\t//print ($modType + \"\\n\");\n\t\t\t\t\t\t\tif ($modType == \"spline\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 29;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"arm\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 7;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"leg\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 31;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"fkChain\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 9;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"head\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ($modType == \"lookAt\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") 30;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsetAttr ($each2 + \".overrideColor\") $colorVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tselect $selection;\n}\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////RENAME MODULE/////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n//RENAME MODULE\t\nglobal proc RRM_Rename(string $name, string $selection, int $call)\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\t\n\tstring $modName;\n\tstring $modType;\n\tstring $attachNode;\n\tstring $side;\n\tstring $ext;\n\t\n\tstring $eachModName;\n\t\n\tif ($call == 0)\n\t{\n\t\t$modName = `getAttr ($selection + \".modName\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $modName + \".top\")`;\n\t\t$attachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\t}\n\telse\n\t{\n\t\t$modName = `getAttr (\"RRM_\" + $selection + \".core\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $selection + \".top\")`;\n\t\t//ORIGINAL MODULE'S ATTACH NODE\n\t\t$sourceAttachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\n\t\t//GET ATTACH NODE'S CLONED ATTRIBUTE\n\t\tstring $cloneName = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\tif (`gmatch $cloneName \"\"`)\n\t\t{//ATTACH NODE IS NOT A CLONE\n\t\t\t$attachNode = ($sourceAttachNode);\n\t\t}\n\t\telse\n\t\t{//ATTACH NODE IS A CLONE\n\t\t\t$attachNode = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\t}\n\t}\n\tstring $clonedParentNodes[];\t\n\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $prfxReset = \"l_\";\n\tif (!`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$mirrorMod = 0;\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t}\n\tint $firstTimeThrough;\n\n\t//CHECK IF SPLINE\n\tif (`gmatch $modType \"spline\"`)\n\t{\n\t\tRRM_Clone_Spline($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"arm\"`)\n\t{//CHECK IF ARM\n\t\tRRM_Clone_Arm($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"leg\"`)\n\t{//CHECK IF LEG\n\t\tRRM_Clone_Leg($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"fkChain\"`)\n\t{//CHECK IF FKCHAIN\n\t\tRRM_Clone_FkChain($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"head\"`)\n\t{//CHECK IF HEAD\n\t\tRRM_Clone_Head($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"lookAt\"`)\n\t{//CHECK IF LOOKAT\n\t\tRRM_Clone_LookAt($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"auxiliary\"`)\n\t{//CHECK IF AUXILIARY\n\t\tRRM_Clone_Auxiliary($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\t\t\n\tif ($call <= 1)\n\t{\n\t\t//CHECK TO SEE IF IT IS NOT AN AUXILIARY\n\t\t//print (\"name is \" + $name + \"\\n\");\n\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")` && !`objExists (\"RRM_l_\" + $name + \"_Aux\")`)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Parent\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Parent\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Aux\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Aux\");\n\t\t\t}\n\t\t}\t\t\t\n\t}\n\t\n\t//FIND CHILDREN MODULES AND ATTACH TO RENAMED DUPLICATE\n\tselect -hi (\"RRM_\" + $modName);\n\tselect -d (\"RRM_\" + $modName);\n\t//print (\"ModName is \" + $modName + \"\\n\");\n\t$hierarchy = `ls -sl -type \"transform\"`;\n\t//print \"Top Nodes are \";\n\t//print $hierarchy;\n\t//print \"\\n\";\n\tstring $parentNodes[];\n\tstring $prfx = \"\";\n\tint $childModCount = 0;\n\tfor ($each in $hierarchy)\n\t{\n\t\tif (`objExists ($each + \".parent\")` && !`objExists ($each + \".top\")`)\n\t\t{//VERIFY IT IS A PARENT\n\t\t\t$attachNode = `getAttr ($each + \".attachNode\")`;\n\t\t\tif (`gmatch ($attachNode + \"*\") ($modName + \"*\")`)\n\t\t\t\t{//MAKE SURE IT IS A PARENT NODE ATTACHED TO THE RENAMED MODULE\n\t\t\t\t$eachModName = `getAttr ($each + \".modName\")`;\n\t\t\t\t//print (\"modName is \" + $modName + \"\\n\");\n\t\t\t\t//print (\"eachModName is \" + $eachModName + \"\\n\");\n\t\t\t\tif (!`gmatch $modName $eachModName`)\n\t\t\t\t\t{//MAKE SURE IT IS NOT A PARENT NODE OF THE RENAMED MODULE\n\t\t\t\t\tselect $parentNodes $each;\n\t\t\t\t\t//print (\"each is \" + $each + \"\\n\");\n\t\t\t\t\t$parentNodes = `ls -sl`;\n\t\t\t\t\tstring $attachNode = `getAttr ($each + \".attachNode\")`;\n\t\t\t\t\tif (`objExists (\"RRM_\" + $attachNode + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = `getAttr (\"RRM_\" + $attachNode + \".pair\")`;\n\t\t\t\t\t\tif (`gmatch $prfx \"left\"`)\n\t\t\t\t\t\t\t{$prfx = \"l_\";}\n\t\t\t\t\t\telse if (`gmatch $prfx \"right\"`)\n\t\t\t\t\t\t\t{$prfx = \"r_\";}\n\t\t\t\t\t}\n\t\t\t\t\tstring $attachNode_Ext = `getAttr (\"RRM_\" + $attachNode + \".ext\")`;\n\t\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $name + $attachNode_Ext)`)\n\t\t\t\t\t{//ONLY ATTACH IF IT IS A DIRECT CHILD MODULE OF THE RENAMED MODULE\n\t\t\t\t\t\tselect (\"RRM_\" + $prfx + $name + $attachNode_Ext);\n\t\t\t\t\t\tselect $each;\n\t\t\t\t\t\tRRM_AttachToNewModule((\"RRM_\" + $prfx + $name + $attachNode_Ext));\n\t\t\t\t\t}\n\t\t\t\t\t$childModCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//print \"Parent Nodes are \";\n\t//print $parentNodes;\n\t//print \"\\n\";\n\n\t//DELETE ORIGINAL MODULE\n\tselect $selection;\n\tRRM_DeleteBranchPrompts;\n\t\n\t\n}\n\nglobal proc RRM_RenamePrompts(string $name)\n{\n\tstring $selection[] = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tstring $coreCheck;\n\tif (`objExists ($selection[0] + \".core\")`)\n\t{\n\t\t$coreCheck = `getAttr ($selection[0] + \".core\")`;\n\t}\n\t\n\t$nameCheck = `size $name`;\n\tif ($selectionSize == 0)\n\t{//CHECK THAT SOMETHING IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Nothing Selected\"\n\t\t\t-message \"You must select a node of the desired module to rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if ($selectionSize > 1)\n\t{//CHECK THAT ONLY ONE OBJECT IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Only One Module May Be Cloned At A Time\"\n\t\t\t-message \"You must select only one node of a desired module to rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (!`objExists ($selection[0] + \".core\")`)\n\t{//CHECK TO MAKE SURE OBJECT IS A VALID MODULE\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message \"You must select one node of a desired module to rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\t\n\telse if (`gmatch $coreCheck \"MAIN\"` || `gmatch $coreCheck \"ROOT\"`)\n\t{//CHECK TO MAKE SURE OBJECT IS NOT MAIN OR ROOT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message \"You cannot rename the MAIN or ROOT modules.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\n\telse if ($nameCheck == \"0\")\n\t{//CHECK TO MAKE SURE THE USER HAS INPUT A NAME\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the rename.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($name))\n\t{//CHECK TO MAKE SURE A VALID NAME HAS BEEN USED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists (\"RRM_\" + $name)`)\n\t{//CHECK TO MAKE SURE NAME DOES NOT CONFLICT WITH EXISTING OBJECT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tprint \"renaming...\\n\";\n\t\tstring $parentNullName = \"\";\n\t\tRRM_Rename($name, $selection[0], 0);\n\t//\n\t//\t//RESET CLONE ATTRIBUTES FOR FUTURE NAMES\n\t//\tselect -hi RRM_MAIN;\n\t//\tselect -d RRM_MAIN;\n\t//\t$nodes = `ls -sl -type \"nurbsCurve\"`;\n\t//\tpickWalk -d up;\n\t//\t$nodes = `ls -sl`;\n\t//\tstring $each;\n\t//\tfor ($each in $nodes)\n\t//\t{\n\t//\t\tif (`objExists ($each + \".rename\")`)\n\t//\t\t{\n\t//\t\t\tsetAttr -type \"string\" ($each + \".rename\") \"\";\n\t//\t\t}\n\t//\t}\n\t//}\n\t//select $selection;\n\t//if (`objExists \"RRM_Clone_Lctr.topCloneNode\"`)\n\t//{\n\t//\t$topNode[0] = `getAttr \"RRM_Clone_Lctr.topCloneNode\"`;\n\t//\tif (`objExists ($topNode[0] + \".opposite\")`)\n\t//\t{\n\t//\t\t$opposite = `getAttr ($topNode[0] + \".opposite\")`;\n\t//\t\t$topNode[1] = (\"RRM_\" + $opposite);\n\t//\t}\n\t//\tdelete \"RRM_Clone_Lctr\";\n\t//\tselect $topNode;\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////CLONE MODULE/////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n//CLONE SPLINE\nglobal proc RRM_Clone_Spline(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $splineNum = `getAttr (\"RRM_\" + $modName + \".jointsNum\")`;\n\tint $i = 0;\n\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.rotate\")`;\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.clone\") ($prfx + $name + \"_Top\");\n\n\t\t//WHILE LOOP\n\t\tint $i2 = 1;\n\t\twhile ($i2 <= $splineNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i2 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//TRANSFORMS LOCATOR\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr\");\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".rotate\")`;\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".clone\") ($prfx + $name + $nPd + $i2);\n\t\t\t\n\t\t\t$i2++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\n\t//GENERATE NEW SPLINE\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxySpline($name, $splineNum, $mirrorMod);\n\t\n\t$clonedParentNodes = `ls -sl`;\n\t\n\t\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\t\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\t\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\t\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\")`;\t\t\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\")`;\t\t\n\t\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\t\n\t\t$i3 = 1;\n\t\twhile ($i3 <= $splineNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i3 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.rotate\")`;\t\t\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr\");\n\t\t\t$i3++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\n\nglobal proc RRM_Clone_Arm(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $upperArmNum = `getAttr (\"RRM_\" + $modName + \".upperArmNum\")`;\n\tint $lowerArmNum = `getAttr (\"RRM_\" + $modName + \".lowerArmNum\")`;\n\tint $elbowNum    = `getAttr (\"RRM_\" + $modName + \".elbowNum\")`;\n\tint $elbowJoints = `getAttr (\"RRM_\" + $modName + \".elbowJoints\")`;\n\t$mirrorMod       = 2;\n\t$prfx            = \"l_\";\n\t$prfxReset       = \"l_\";\n\t\n\tif (`objExists (\"RRM_\" + $modName + \".single\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t\t$checkSide = `getAttr (\"RRM_\" + $modName + \".single\")`;\n\t\tif ($checkSide == \"left\")\n\t\t{\n\t\t\t$mirrorMod = 1;\n\t\t}\n\t\telse if ($checkSide == \"right\")\n\t\t{\n\t\t\t$mirrorMod = 3;\n\t\t}\n\t}\n\tint $i = 1;\n\n\tstring $clonedParentNodes[];\t\n\t\n\twhile ($prfx != \"end\")\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr\");\n\t\t$clavPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.translate\")`;\n\t\t$clavRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.rotate\")`;\n\t\t$clavScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.translate\"), $clavPos[0], $clavPos[1], $clavPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.rotate\"), $clavRot[0], $clavRot[1], $clavRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.scale\"), $clavScale[0], $clavScale[1], $clavScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Clavicle.clone\") ($prfx + $name + \"_Clavicle\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr\");\n\t\t$shldrPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.translate\")`;\n\t\t$shldrRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.rotate\")`;\n\t\t$shldrScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.translate\"), $shldrPos[0], $shldrPos[1], $shldrPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.rotate\"), $shldrRot[0], $shldrRot[1], $shldrRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.scale\"), $shldrScale[0], $shldrScale[1], $shldrScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Shoulder.clone\") ($prfx + $name + \"_Shoulder\");\n\t\t\n\t\tif ($elbowJoints == 1)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr\");\n\t\t\t$elbowPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.translate\")`;\n\t\t\t$elbowRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.rotate\")`;\n\t\t\t$elbowScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.translate\"), $elbowPos[0], $elbowPos[1], $elbowPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.rotate\"), $elbowRot[0], $elbowRot[1], $elbowRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.scale\"), $elbowScale[0], $elbowScale[1], $elbowScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow.clone\") ($prfx + $name + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr\");\n\t\t\t$elbow1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.translate\")`;\n\t\t\t$elbow1Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.rotate\")`;\n\t\t\t$elbow1Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.translate\"), $elbow1Pos[0], $elbow1Pos[1], $elbow1Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.rotate\"), $elbow1Rot[0], $elbow1Rot[1], $elbow1Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.scale\"), $elbow1Scale[0], $elbow1Scale[1], $elbow1Scale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow1.clone\") ($prfx + $name + \"_Elbow1\");\n\t\t\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr\");\n\t\t\t$elbow2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.translate\")`;\n\t\t\t$elbow2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.rotate\")`;\n\t\t\t$elbow2Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.translate\"), $elbow2Pos[0], $elbow2Pos[1], $elbow2Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.rotate\"), $elbow2Rot[0], $elbow2Rot[1], $elbow2Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.scale\"), $elbow2Scale[0], $elbow2Scale[1], $elbow2Scale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Elbow2.clone\") ($prfx + $name + \"_Elbow2\");\n\t\t}\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr\");\n\t\t$wristPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.translate\")`;\n\t\t$wristRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.rotate\")`;\n\t\t$wristScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.translate\"), $wristPos[0], $wristPos[1], $wristPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.rotate\"), $wristRot[0], $wristRot[1], $wristRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.scale\"), $wristScale[0], $wristScale[1], $wristScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Wrist.clone\") ($prfx + $name + \"_Wrist\");\t\t\t\n\n\t\tif ($prfx == \"l_\")\n\t\t{//SWITCH TO RIGHT\n\t\t\t$prfx = \"r_\";\n\t\t}\n\t\telse if ($prfx == \"r_\"|| $prfx == \"\")\n\t\t{//SWITCH TO END\n\t\t\t$prfx = \"end\";\n\t\t}\n\t}\n\t\n\t//GENERATE NEW ARM(S)\n\tselect (\"RRM_\" + $attachNode);\n\t//RRM_CreateProxySpline($name, $splineNum, $mirrorMod);\n\tRRM_CreateProxyArm($name, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod);\n\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$prfx = $prfxReset;\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\t$clavPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.translate\")`;\n\t\t$clavRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.rotate\")`;\t\t\n\t\t$clavScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Clavicle.translate\"), $clavPos[0], $clavPos[1], $clavPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Clavicle.rotate\"), $clavRot[0], $clavRot[1], $clavRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Clavicle.scale\"), $clavScale[0], $clavScale[1], $clavScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Clavicle_Lctr\");\n\n\t\t$shldrPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.translate\")`;\n\t\t$shldrRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.rotate\")`;\t\t\n\t\t$shldrScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Shoulder.translate\"), $shldrPos[0], $shldrPos[1], $shldrPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Shoulder.rotate\"), $shldrRot[0], $shldrRot[1], $shldrRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Shoulder.scale\"), $shldrScale[0], $shldrScale[1], $shldrScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Shoulder_Lctr\");\n\n\t\t\t\n\t\tif ($elbowJoints == 1)\n\t\t{\n\t\t\t$elbowPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.translate\")`;\n\t\t\t$elbowRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.rotate\")`;\t\t\n\t\t\t$elbowScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr.scale\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Elbow.translate\"), $elbowPos[0], $elbowPos[1], $elbowPos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow_Lctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elbow1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr.translate\")`;\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Elbow1.translate\"), $elbow1Pos[0], $elbow1Pos[1], $elbow1Pos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow1_Lctr\");\n\n\t\t\t$elbow2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.translate\")`;\n\t\t\t$elbow2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr.rotate\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Elbow2.translate\"), $elbow2Pos[0], $elbow2Pos[1], $elbow2Pos[2]);\n\t\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_Elbow2.rotateX\") $elbow2Rot[0];\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Elbow2_Lctr\");\n\t\t}\n\n\t\t$wristPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.translate\")`;\n\t\t$wristRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.rotate\")`;\t\t\n\t\t$wristScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Wrist.translate\"), $wristPos[0], $wristPos[1], $wristPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Wrist.rotate\"), $wristRot[0], $wristRot[1], $wristRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Wrist.scale\"), $wristScale[0], $wristScale[1], $wristScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Wrist_Lctr\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\n\nglobal proc RRM_Clone_Leg(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $upperLegNum = `getAttr (\"RRM_\" + $modName + \".upperLegNum\")`;\n\tint $lowerLegNum = `getAttr (\"RRM_\" + $modName + \".lowerLegNum\")`;\n\tint $kneeNum    = `getAttr (\"RRM_\" + $modName + \".kneeNum\")`;\n\tint $kneeJoints = `getAttr (\"RRM_\" + $modName + \".kneeJoints\")`;\n\t$mirrorMod       = 2;\n\t$prfx            = \"l_\";\n\t$prfxReset       = \"l_\";\n\t\n\tif (`objExists (\"RRM_\" + $modName + \".single\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t\t$checkSide = `getAttr (\"RRM_\" + $modName + \".single\")`;\n\t\tif ($checkSide == \"left\")\n\t\t{\n\t\t\t$mirrorMod = 1;\n\t\t}\n\t\telse if ($checkSide == \"right\")\n\t\t{\n\t\t\t$mirrorMod = 3;\n\t\t}\n\t}\n\tint $i = 1;\n\n\tstring $clonedParentNodes[];\t\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr\");\n\t\t$hipPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip.translate\")`;\n\t\t$hipRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip.rotate\")`;\n\t\t$hipScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.translate\"), $hipPos[0], $hipPos[1], $hipPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.rotate\"), $hipRot[0], $hipRot[1], $hipRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.scale\"), $hipScale[0], $hipScale[1], $hipScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Hip.clone\") ($prfx + $name + \"_Hip\");\n\t\t\t\n\t\tif ($kneeJoints == 1)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr\");\n\t\t\t$kneePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee.translate\")`;\n\t\t\t$kneeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee.rotate\")`;\n\t\t\t$kneeScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.translate\"), $kneePos[0], $kneePos[1], $kneePos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.rotate\"), $kneeRot[0], $kneeRot[1], $kneeRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.scale\"), $kneeScale[0], $kneeScale[1], $kneeScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee.clone\") ($prfx + $name + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr\");\n\t\t\t$knee1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.translate\")`;\n\t\t\t$knee1Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.rotate\")`;\n\t\t\t$knee1Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.translate\"), $knee1Pos[0], $knee1Pos[1], $knee1Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.rotate\"), $knee1Rot[0], $knee1Rot[1], $knee1Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.scale\"), $knee1Scale[0], $knee1Scale[1], $knee1Scale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee1.clone\") ($prfx + $name + \"_Knee1\");\n\t\t\t\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr\");\n\t\t\t$knee2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.translate\")`;\n\t\t\t$knee2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.rotate\")`;\n\t\t\t$knee2Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.translate\"), $knee2Pos[0], $knee2Pos[1], $knee2Pos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.rotate\"), $knee2Rot[0], $knee2Rot[1], $knee2Rot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.scale\"), $knee2Scale[0], $knee2Scale[1], $knee2Scale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Knee2.clone\") ($prfx + $name + \"_Knee2\");\n\t\t}\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr\");\n\t\t$anklePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle.translate\")`;\n\t\t$ankleRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle.rotate\")`;\n\t\t$ankleScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.translate\"), $anklePos[0], $anklePos[1], $anklePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.rotate\"), $ankleRot[0], $ankleRot[1], $ankleRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.scale\"), $ankleScale[0], $ankleScale[1], $ankleScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ankle.clone\") ($prfx + $name + \"_Ankle\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr\");\n\t\t$ballPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball.translate\")`;\n\t\t$ballRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball.rotate\")`;\n\t\t$ballScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.translate\"), $ballPos[0], $ballPos[1], $ballPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.rotate\"), $ballRot[0], $ballRot[1], $ballRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.scale\"), $ballScale[0], $ballScale[1], $ballScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ball.clone\") ($prfx + $name + \"_Ball\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr\");\n\t\t$toePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe.translate\")`;\n\t\t$toeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe.rotate\")`;\n\t\t$toeScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.translate\"), $toePos[0], $toePos[1], $toePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.rotate\"), $toeRot[0], $toeRot[1], $toeRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.scale\"), $toeScale[0], $toeScale[1], $toeScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Toe.clone\") ($prfx + $name + \"_Toe\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr\");\n\t\t$heelPivPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr.tx\") $heelPivPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr.tz\") $heelPivPos[2];\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_HeelPivot.clone\") ($prfx + $name + \"_HeelPivot\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr\");\n\t\t$lTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr.tx\") $lTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr.tz\") $lTiltPos[2];\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt.clone\") ($prfx + $name + \"_FootLeftTilt\");\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr\");\n\t\t$rTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr.tx\") $rTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr.tz\") $rTiltPos[2];\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_FootRightTilt.clone\") ($prfx + $name + \"_FootRightTilt\");\n\t\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr\");\n\t\t$grndPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground.translate\")`;\n\t\t$grndRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground.rotate\")`;\n\t\t$grndScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.translate\"), $grndPos[0], $grndPos[1], $grndPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.rotate\"), $grndRot[0], $grndRot[1], $grndRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.scale\"), $grndScale[0], $grndScale[1], $grndScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Ground.clone\") ($prfx + $name + \"_Ground\");\n\t\t\n\t\t\n\t\tif ($prfx == \"l_\")\n\t\t{//SWITCH TO RIGHT\n\t\t\t$prfx = \"r_\";\n\t\t}\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW LEG(S)\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyLeg($name, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod);\n\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$prfx = $prfxReset;\n\t$i = 1;\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\t$hipPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.translate\")`;\n\t\t$hipRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.rotate\")`;\t\t\n\t\t$hipScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Hip.translate\"), $hipPos[0], $hipPos[1], $hipPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Hip.rotate\"), $hipRot[0], $hipRot[1], $hipRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Hip.scale\"), $hipScale[0], $hipScale[1], $hipScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Hip_Lctr\");\n\n\t\t\t\n\t\tif ($kneeJoints == 1)\n\t\t{\n\t\t\t$kneePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.translate\")`;\n\t\t\t$kneeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr.rotate\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Knee.translate\"), $kneePos[0], $kneePos[1], $kneePos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee_Lctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$knee1Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.translate\")`;\n\t\t\t$knee1Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr.rotate\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Knee1.translate\"), $knee1Pos[0], $knee1Pos[1], $knee1Pos[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee1_Lctr\");\n\n\t\t\t$knee2Pos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.translate\")`;\n\t\t\t$knee2Rot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.rotate\")`;\t\t\n\t\t\t$knee2Scale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr.scale\")`;\t\t\n\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Knee2.translate\"), $knee2Pos[0], $knee2Pos[1], $knee2Pos[2]);\n\t\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_Knee2.rotateY\") $knee2Rot[1];\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Knee2_Lctr\");\n\t\t}\n\n\t\t$anklePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.translate\")`;\n\t\t$ankleRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.rotate\")`;\t\t\n\t\t$ankleScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ankle.translate\"), $anklePos[0], $anklePos[1], $anklePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ankle.rotate\"), $ankleRot[0], $ankleRot[1], $ankleRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ankle.scale\"), $ankleScale[0], $ankleScale[1], $ankleScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Ankle_Lctr\");\n\n\n\t\t$ballPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.translate\")`;\n\t\t$ballRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.rotate\")`;\t\t\n\t\t$ballScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ball.translate\"), $ballPos[0], $ballPos[1], $ballPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ball.rotate\"), $ballRot[0], $ballRot[1], $ballRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ball.scale\"), $ballScale[0], $ballScale[1], $ballScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Ball_Lctr\");\n\n\t\t$toePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.translate\")`;\n\t\t$toeRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.rotate\")`;\t\t\n\t\t$toeScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Toe.translate\"), $toePos[0], $toePos[1], $toePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Toe.rotate\"), $toeRot[0], $toeRot[1], $toeRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Toe.scale\"), $toeScale[0], $toeScale[1], $toeScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Toe_Lctr\");\n\n\n\t\t$heelPivPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_HeelPivot.tx\") $heelPivPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_HeelPivot.tz\") $heelPivPos[2];\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_HeelPivot_Lctr\");\n\n\n\t\t$lTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootLeftTilt.tx\") $lTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootLeftTilt.tz\") $lTiltPos[2];\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_FootLeftTilt_Lctr\");\n\n\n\t\t$rTiltPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr.translate\")`;\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootRightTilt.tx\") $rTiltPos[0];\n\t\tsetAttr (\"RRM_\" + $prfx + $name + \"_FootRightTilt.tz\") $rTiltPos[2];\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_FootRightTilt_Lctr\");\n\n\n\t\t$anklePos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.translate\")`;\n\t\t$ankleRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.rotate\")`;\t\t\n\t\t$ankleScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ground.translate\"), $anklePos[0], $anklePos[1], $anklePos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ground.rotate\"), $ankleRot[0], $ankleRot[1], $ankleRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Ground.scale\"), $ankleScale[0], $ankleScale[1], $ankleScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Ground_Lctr\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_FkChain(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $chainsNum = `getAttr (\"RRM_\" + $modName + \".chainsNum\")`;\n\tint $jointsNum = `getAttr (\"RRM_\" + $modName + \".jointsNum\")`;\n\tint $direction = `getAttr (\"RRM_\" + $modName + \".direction\")`;\n\tint $i = 0;\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\n\t\t//WHILE LOOP FOR CHAINS\n\t\tint $chainLoop = 1;\n\t\twhile ($chainLoop <= $chainsNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($chainLoop >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t$jointLoop = 1;\n\t\t\t//WHILE LOOP FOR JOINTS\n\t\t\twhile ($jointLoop <= $jointsNum)\n\t\t\t{\t\t\t\t\n\t\t\t\tstring $jPad = \"_0\";\n\t\t\t\tif ($chainLoop >= 10)\n\t\t\t\t{\n\t\t\t\t\tstring $jPad = \"_\";\n\t\t\t\t}\n\t\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr\");\n\t\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".translate\")`;\n\t\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".rotate\")`;\n\t\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".scale\")`;\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t\t//CLONE ATT\n\t\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \".clone\") ($prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop);\n\t\t\t\t$jointLoop++;\t\t\n\t\t\t}\n\t\t\t$chainLoop++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW FK CHAIN\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyFKChain($name, $chainsNum, $jointsNum, $direction, $direction, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t\n\t\t//WHILE LOOP FOR CHAINS\n\t\tint $chainLoop = 1;\n\t\twhile ($chainLoop <= $chainsNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($chainLoop >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t$jointLoop = 1;\n\t\t\t//WHILE LOOP FOR JOINTS\n\t\t\twhile ($jointLoop <= $jointsNum)\n\t\t\t{\t\t\t\n\t\t\t\tstring $jPad = \"_0\";\n\t\t\t\tif ($chainLoop >= 10)\n\t\t\t\t{\n\t\t\t\t\tstring $jPad = \"_\";\n\t\t\t\t}\n\t\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.translate\")`;\n\t\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.rotate\")`;\t\t\n\t\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr.scale\")`;\t\t\n\t\t\t\t\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $chainLoop + $jPad + $jointLoop + \".translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $chainLoop + $jPad + $jointLoop + \".rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $chainLoop + $jPad + $jointLoop + \".scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t\tdelete (\"RRM_\" + $prfx + $modName + $nPd + $chainLoop + $jPad + $jointLoop + \"_Lctr\");\n\t\t\t\t$jointLoop++;\n\t\t\t}\n\t\t\t$chainLoop++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_Head(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\t//GET NUMBER OF JOINTS\n\tint $jaw = `getAttr (\"RRM_\" + $modName + \".jaw\")`;\n\tint $i = 0;\n\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\t\t\n\t\tif ($jaw == 1)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr\");\n\t\t\t$jawPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw.translate\")`;\n\t\t\t$jawRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw.rotate\")`;\n\t\t\t$jawScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.translate\"), $jawPos[0], $jawPos[1], $jawPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.rotate\"), $jawRot[0], $jawRot[1], $jawRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.scale\"), $jawScale[0], $jawScale[1], $jawScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.clone\") ($prfx + $name + \"_Jaw\");\n\t\t\t\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr\");\n\t\t\t$jawEndPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd.translate\")`;\n\t\t\t$jawEndRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd.rotate\")`;\n\t\t\t$jawEndScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd.scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.translate\"), $jawEndPos[0], $jawEndPos[1], $jawEndPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.rotate\"), $jawEndRot[0], $jawEndRot[1], $jawEndRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.scale\"), $jawEndScale[0], $jawEndScale[1], $jawEndScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.clone\") ($prfx + $name + \"_JawEnd\");\n\t\t}\n\t\t\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.rotate\")`;\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Top.clone\") ($prfx + $name + \"_Top\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW HEAD\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyHead($name, $jaw, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\tif ($jaw == 1)\n\t\t{\n\t\t\t$jawPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.translate\")`;\n\t\t\t$jawRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.rotate\")`;\t\t\n\t\t\t$jawScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Jaw.translate\"), $jawPos[0], $jawPos[1], $jawPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Jaw.rotate\"), $jawRot[0], $jawRot[1], $jawRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Jaw.scale\"), $jawScale[0], $jawScale[1], $jawScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Jaw_Lctr\");\n\t\t\t\n\t\t\t$jawEndPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.translate\")`;\n\t\t\t$jawEndRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.rotate\")`;\t\t\n\t\t\t$jawEndScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_JawEnd.translate\"), $jawEndPos[0], $jawEndPos[1], $jawEndPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_JawEnd.rotate\"), $jawEndRot[0], $jawEndRot[1], $jawEndRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_JawEnd.scale\"), $jawEndScale[0], $jawEndScale[1], $jawEndScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + \"_JawEnd_Lctr\");\n\t\t}\n\n\t\t$topPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.translate\")`;\n\t\t$topRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.rotate\")`;\t\t\n\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Top_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.translate\"), $topPos[0], $topPos[1], $topPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.rotate\"), $topRot[0], $topRot[1], $topRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Top.scale\"), $topScale[0], $topScale[1], $topScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Top_Lctr\");\n\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_LookAt(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{//CHECK IF LOOKAT\n\t//GET NUMBER OF JOINTS\n\tint $eyeNum = `getAttr (\"RRM_\" + $modName + \".eyeNum\")`;\n\tint $direction = `getAttr (\"RRM_\" + $modName + \".direction\")`;\n\tint $i = 0;\n\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CREATE LOCATORS FOR LOCATIONS\n\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.rotate\")`;\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.scale\")`;\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Parent.clone\") ($prfx + $name + \"_Parent\");\n\n\t\t//WHILE LOOP\n\t\tint $i2 = 1;\n\t\twhile ($i2 <= $eyeNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i2 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//TRANSFORMS LOCATOR\n\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr\");\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".rotate\")`;\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".scale\")`;\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $modName + $nPd + $i2 + \"_Lctr.scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\t//CLONE ATT\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + $nPd + $i2 + \".clone\") (\"RRM_\" + $prfx + $modName + $nPd + $i2);\n\t\t\t$i2++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t\n\t//GENERATE NEW LOOK AT\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyLookAt($name, $eyeNum, $direction, $direction, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\n\t\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//GET LOCATOR TRANSFORMS\n\n\t\t//MOVE NODES TO LOCATORS\n\t\t$parentPos   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.translate\")`;\n\t\t$parentRot   = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.rotate\")`;\t\t\n\t\t$parentScale = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr.scale\")`;\t\t\n\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.translate\"), $parentPos[0], $parentPos[1], $parentPos[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.rotate\"), $parentRot[0], $parentRot[1], $parentRot[2]);\n\t\tsetAttr ((\"RRM_\" + $prfx + $name + \"_Parent.scale\"), $parentScale[0], $parentScale[1], $parentScale[2]);\n\t\tdelete (\"RRM_\" + $prfx + $modName + \"_Parent_Lctr\");\n\n\t\t$i3 = 1;\n\t\twhile ($i3 <= $eyeNum)\n\t\t{\n\t\t\tstring $nPd = \"_0\";\n\t\t\tif ($i3 >= 10)\n\t\t\t{\n\t\t\t\tstring $nPd = \"_\";\n\t\t\t}\n\t\t\t//MOVE PROXY TO LOCATOR\n\t\t\t$eachPos   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.translate\")`;\n\t\t\t$eachRot   = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.rotate\")`;\t\t\n\t\t\t$eachScale = `getAttr (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr.scale\")`;\t\t\n\t\t\t\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".translate\"), $eachPos[0], $eachPos[1], $eachPos[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".rotate\"), $eachRot[0], $eachRot[1], $eachRot[2]);\n\t\t\tsetAttr ((\"RRM_\" + $prfx + $name + $nPd + $i3 + \".scale\"), $eachScale[0], $eachScale[1], $eachScale[2]);\n\t\t\tdelete (\"RRM_\" + $prfx + $modName + $nPd + $i3 + \"_Lctr\");\n\t\t\t$i3++;\n\t\t}\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\nglobal proc RRM_Clone_Auxiliary(string $name, string $modName, string $attachNode, int $mirrorMod, string $prfx, string $prfxReset)\n{\n\tint $i = 0;\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\t//CLONE ATT\n\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Aux.clone\") ($prfx + $name + \"_Aux\");\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\n\t//GENERATE NEW AUXILIARY\n\tselect (\"RRM_\" + $attachNode);\n\tRRM_CreateProxyAuxiliary($name, $mirrorMod);\n\t$clonedParentNodes = `ls -sl`;\n\t//RESET VARIABLES\n\t$i = 0;\n\t$prfx = $prfxReset;\n\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_Aux\") (\"RRM_\" + $prfx + $name + \"_Aux\")`;\n\t\tdelete `scaleConstraint (\"RRM_\" + $prfx + $modName + \"_Aux\") (\"RRM_\" + $prfx + $name + \"_Aux\")`;\n\t\t$prfx = \"r_\";\n\t\t$i++;\n\t}\n\t//SELECT NEW MODULE NODES\n\tselect $clonedParentNodes;\n}\n\n\t\nglobal proc RRM_Clone(string $name, string $selection, string $attachNode, int $call)\n{\n\tstring $modName;\n\tstring $modType;\n\tstring $side;\n\tstring $ext;\n\t\n\tif ($call == 0)\n\t{\n\t\t$modName = `getAttr ($selection + \".modName\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $modName + \".top\")`;\n\t\t$attachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\t}\n\telse\n\t{\n\t\t$modName = `getAttr (\"RRM_\" + $selection + \".core\")`;\n\t\t$modType = `getAttr (\"RRM_\" + $selection + \".top\")`;\n\t\t//ORIGINAL MODULE'S ATTACH NODE\n\t\t$sourceAttachNode = `getAttr (\"RRM_\" + $modName + \".parent\")`;\n\n\t\t//GET ATTACH NODE'S CLONED ATTRIBUTE\n\t\tstring $cloneName = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\tif (`gmatch $cloneName \"\"`)\n\t\t{//ATTACH NODE IS NOT A CLONE\n\t\t\t$attachNode = ($sourceAttachNode);\n\t\t}\n\t\telse\n\t\t{//ATTACH NODE IS A CLONE\n\t\t\t$attachNode = `getAttr (\"RRM_\" + $sourceAttachNode + \".clone\")`;\n\t\t}\n\t}\n\tstring $clonedParentNodes[];\t\n\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $prfxReset = \"l_\";\n\tif (!`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$mirrorMod = 0;\n\t\t$prfx = \"\";\n\t\t$prfxReset = \"\";\n\t}\n\tint $firstTimeThrough;\n\n\t\t\n\t//CHECK IF SPLINE\n\tif (`gmatch $modType \"spline\"`)\n\t{\n\t\tRRM_Clone_Spline($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"arm\"`)\n\t{//CHECK IF ARM\n\t\tRRM_Clone_Arm($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"leg\"`)\n\t{//CHECK IF LEG\n\t\tRRM_Clone_Leg($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"fkChain\"`)\n\t{//CHECK IF FKCHAIN\n\t\tRRM_Clone_FkChain($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"head\"`)\n\t{//CHECK IF HEAD\n\t\tRRM_Clone_Head($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"lookAt\"`)\n\t{//CHECK IF LOOKAT\n\t\tRRM_Clone_LookAt($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\telse if (`gmatch $modType \"auxiliary\"`)\n\t{//CHECK IF AUXILIARY\n\t\tRRM_Clone_Auxiliary($name, $modName, $attachNode, $mirrorMod, $prfx, $prfxReset);\n\t}\n\t\t\n\tif ($call <= 1)\n\t{\n\t\t//CHECK TO SEE IF IT IS NOT AN AUXILIARY\n\t\t//print (\"name is \" + $name + \"\\n\");\n\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")` && !`objExists (\"RRM_l_\" + $name + \"_Aux\")`)\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Parent\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Parent\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Parent\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n (\"RRM_Clone_Lctr\");\n\t\t\taddAttr -ln \"topCloneNode\"  -dt \"string\" \"RRM_Clone_Lctr\";\n\t\t\tsetAttr -e-keyable true \"RRM_Clone_Lctr.topCloneNode\";\n\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_\" + $name + \"_Aux\");\n\t\t\tif (!`objExists (\"RRM_\" + $name + \"_Aux\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" \"RRM_Clone_Lctr.topCloneNode\" (\"RRM_l_\" + $name + \"_Aux\");\n\t\t\t}\n\t\t}\t\t\t\n\t}\n}\n\nglobal proc RRM_CheckCloneFields(int $cloneCheck[], string $textFields[], string $cloneSource[], string $cloneParent[])\n{\n\tint $i;\n\tstring $each;\n\tfor ($each in $textFields)\n\t{\n\t\t$name = `textField -q -text $each`;\n\t\t$nameSize = `size $name`;\n\t\tif (`objExists (\"RRM_\" + $name)`)\n\t\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Already Exists\"\n\t\t\t-message (\"A module named \\\"\" + $name + \"\\\" already exists. You need to use a unique name.\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t\t\terror \"PLEASE PROVIDE UNIQUE NAMES FOR ALL CLONED MODULES.\";\n\t\t}\n\t\telse if ($nameSize == 0)\n\t\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Missing Name\"\n\t\t\t-message \"You need to provide a name for each module.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t\terror \"PLEASE PROVIDE UNIQUE NAMES FOR ALL CLONED MODULES.\";\n\t\t}\n\t\t$i++;\n\t}\n\t$i = 0;\n\tfor ($each in $textFields)\n\t{\n\t\t$name = `textField -q -text $each`;\n\t\tRRM_Clone($name, $cloneSource[$i], $cloneParent[$i], ($i + 1));\n\t\t$i++;\n\t}\n}\n\nglobal proc RRM_CloneHierarchyUI()\n{\n\t$name = `textField -q -text textFieldCloneName`;\n\tstring $selection[] = `ls -sl`;\n\tstring $modName = `getAttr ($selection[0] + \".modName\")`;\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl`;\n\tstring $topModules[];\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".top\")`)\n\t\t{\n\t\t\t$topModules = `ls $topModules $each`;\n\t\t}\n\t}\n\t//GET DIALOG'S FORMLAYOUT\n\tstring $form = `setParent -q`;\n\t\n\tformLayout -e -width 300 $form;\n\tstring $instructions = `text -l \"Rename Branches\"`;\n\tstring $original = `text -l \"SOURCE NAME:\"`;\n\tstring $clone = `text -l \"CLONE NAME:\"`;\n\tformLayout -edit\n\t\t-attachForm\t\t\t\t$instructions \t\"top\" 5\n\t\t-attachForm\t\t\t\t$instructions \t\"left\" 90\n\t\t\n\t\t-attachForm\t\t\t\t$original \t\"top\" 30\n\t\t-attachForm\t\t\t\t$original \t\"left\" 4\n\t\t\n\t\t-attachForm\t\t\t\t$clone \t\"top\" 30\n\t\t-attachForm\t\t\t\t$clone \t\"right\" 75\n\t$form;\n\tint $i;\n\tstring $checkBoxes[];\n\tglobal int $cloneCheck[];\n\tglobal string $cloneTextFields[];\n\tglobal string $cloneSource[];\n\tglobal string $cloneParent[];\n\tint $spacer = 10;\n\tint $top = 50;\n\tstring $eachBranch;\n\tfor ($eachBranch in $topModules)\n\t{\n\t\t//GET CORE NAME\n\t\t$coreName = `getAttr ($eachBranch + \".core\")`;\n\t\t\n\t\t//GET PLACE IN HIERARCHY\n\t\t$left = 20;\n\t\tstring $parentModule = $eachBranch;\n\t\twhile (!`gmatch $parentModule (\"RRM_\" + $modName)`)\n\t\t{\n\t\t\t$parentNode = `getAttr ($parentModule + \".parent\")`;\n\t\t\t$parentModule = `getAttr (\"RRM_\" + $parentNode + \".modName\")`;\n\t\t\t$parentModule = (\"RRM_\" + $parentModule); \n\t\t\t$left = ($left + 16);\n\t\t}\n\t\t\t\n\t\tstring $checkBox = `checkBox -en 0 -vis 0 -v 0 -l \"\" (\"checkBox_\" + $eachBranch)`;\n\t\tstring $label = `text -l (\"-\" + $coreName)`;\n\t\tstring $textField = `textField -w 150 (\"textField\" + $eachBranch)`;\n\t\t\n\t\tformLayout -edit\n\t\t\t-attachForm\t\t\t$checkBox\t\t\"top\" $top\n\t\t\t-attachForm\t\t\t$checkBox\t\t\"left\" 4\n\n\t\t\t-attachForm\t\t\t$label\t\t\t\"top\" $top\n\t\t\t-attachForm\t\t\t$label\t\t\t\"left\" $left\n\t\t\t\n\t\t\t-attachForm\t\t\t$textField\t\t\"top\" $top\n\t\t\t-attachForm\t\t\t$textField\t\t\"right\" 5\n\t\t$form;\n\t\t\n\t\t$top = ($top + 20);\n\t\t$cloneCheck[$i] = `checkBox -q -v $checkBox`;\n\t\t$cloneTextFields[$i] =  $textField;\n\t\t$cloneSource[$i] = $coreName;\n\t\tstring $cloneParent[];\n\t\tif (`objExists (\"RRM_\" + $coreName + \".parent\")`)\n\t\t{\n\t\t\t$cloneParent[$i] = `getAttr (\"RRM_\" + $coreName + \".parent\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$cloneParent[$i] = `getAttr (\"RRM_\" + $coreName + \".attachNode\")`;\n\t\t}\n\t\t$i++;\n\t}\n\tstring $button_OK = `button -w 144 -label \"OK\" -c \"RRM_CheckCloneFields($cloneCheck, $cloneTextFields, $cloneSource, $cloneParent);layoutDialog -dismiss \\\"OK\\\";\" Clone_Button`;\n\tstring $button_Cancel = `button -w 144 -label \"Cancel\" -c \"layoutDialog -dismiss \\\"Cancel\\\"\"`;\n\tformLayout -edit\n\t\t-attachForm\t\t\t$button_OK\t\t\"top\" ($top + 10)\n\t\t-attachForm\t\t\t$button_OK\t\t\"left\" 4\n\t\t\n\t\t-attachForm\t\t\t$button_Cancel\t\"top\" ($top + 10)\n\t\t-attachForm\t\t\t$button_Cancel\t\"right\" 4\n\t$form;\n\t\n\ttextField -e -text $name $cloneTextFields[0]; \n}\n\nglobal proc RRM_ClonePrompts(string $name, int $branchClone, int $clone)\n{\n\tstring $selection[] = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tstring $coreCheck;\n\tif (`objExists ($selection[0] + \".core\")`)\n\t{\n\t\t$coreCheck = `getAttr ($selection[0] + \".core\")`;\n\t}\n\t\n\tstring $dupeType = \"clone\";\n\tif ($clone == 0)\n\t{\n\t\t$dupeType = \"rename\";\n\t}\n\t\n\t$nameCheck = `size $name`;\n\tif ($selectionSize == 0)\n\t{//CHECK THAT SOMETHING IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Nothing Selected\"\n\t\t\t-message (\"You must select a node of the desired module to \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if ($selectionSize > 1)\n\t{//CHECK THAT ONLY ONE OBJECT IS SELECTED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Only One Module May Be Cloned At A Time\"\n\t\t\t-message (\"You must select only one node of a desired module to \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (!`objExists ($selection[0] + \".core\")`)\n\t{//CHECK TO MAKE SURE OBJECT IS A VALID MODULE\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message (\"You must select one node of a desired module to \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\telse if (`gmatch $coreCheck \"MAIN\"` || `gmatch $coreCheck \"ROOT\"`)\n\t{//CHECK TO MAKE SURE OBJECT IS NOT MAIN OR ROOT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Not a Valid Node\"\n\t\t\t-message (\"You cannot \" + $dupeType + \" the MAIN or ROOT modules.\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\t\t\n\t}\n\telse if ($nameCheck == \"0\")\n\t{//CHECK TO MAKE SURE THE USER HAS INPUT A NAME\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message (\"You must enter a name for the \" + $dupeType + \".\\n\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (! RRM_CheckName($name))\n\t{//CHECK TO MAKE SURE A VALID NAME HAS BEEN USED\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists (\"RRM_\" + $name)`)\n\t{//CHECK TO MAKE SURE NAME DOES NOT CONFLICT WITH EXISTING OBJECT\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Module's Name is not Unique\"\n\t\t\t-message \"A module already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tstring $parentNullName = \"\";\n\t\tif ($branchClone == 0)\n\t\t{//ONLY CLONE LOADED MODULE\n\t\t\tif ($clone == 1)\n\t\t\t{\n\t\t\t\tprint \"cloning...\\n\";\n\t\t\t\tRRM_Clone($name, $selection[0], $parentNullName, 0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint \"renaming...\\n\";\n\t\t\t\tRRM_Rename($name, $selection[0], 0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{//CLONE BRANCHES\n\t\t\tstring $topmodules[];\n\t\t\t$modName = `getAttr ($selection[0] + \".modName\")`;\n\t\t\tselect -hi (\"RRM_\" + $modName);\n\t\t\t$nodes = `ls -sl -type \"nurbsCurve\"`;\n\t\t\tpickWalk -d up;\n\t\t\t$nodes = `ls -sl`;\n\t\t\tstring $each;\n\t\t\tfor ($each in $nodes)\n\t\t\t{\n\t\t\t\tif (`objExists ($each + \".top\")`)\n\t\t\t\t{\n\t\t\t\t\t$topmodules = `ls $topmodules $each`;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$moduleNum = `size $topmodules`;\n\t\t\tif ($moduleNum == 1)\n\t\t\t{\n\t\t\t\tif ($clone = 1) \n\t\t\t\t{\n\t\t\t\t\tRRM_Clone($name, $selection[0], $parentNullName, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRRM_Rename($name, $selection[0], 0);\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t\tif ($branchClone == 1 && $moduleNum > 1)\n\t\t\t{\n\t\t\t\tselect $selection[0];\n\t\t\t\tlayoutDialog -ui \"RRM_CloneHierarchyUI()\";\n\t\t\t}\n\t\t}\n\t\t//RESET CLONE ATTRIBUTES FOR FUTURE CLONES\n\t\tselect -hi RRM_MAIN;\n\t\tselect -d RRM_MAIN;\n\t\t$nodes = `ls -sl -type \"nurbsCurve\"`;\n\t\tpickWalk -d up;\n\t\t$nodes = `ls -sl`;\n\t\tstring $each;\n\t\tfor ($each in $nodes)\n\t\t{\n\t\t\tif (`objExists ($each + \".clone\")`)\n\t\t\t{\n\t\t\t\tsetAttr -type \"string\" ($each + \".clone\") \"\";\n\t\t\t}\n\t\t}\n\t}\n\tselect -cl;\n\tint $selectionInt = 0;\n\twhile ($selectionInt <= $selectionSize)\n\t{\n\t\tif (`objExists $selection[$selectionInt]`)\n\t\t{\n\t\t\tselect -add $selection[$selectionInt];\n\t\t}\n\t\t$selectionInt++;\n\t}\n\tif (`objExists \"RRM_Clone_Lctr.topCloneNode\"`)\n\t{\n\t\t$topNode[0] = `getAttr \"RRM_Clone_Lctr.topCloneNode\"`;\n\t\tif (`objExists ($topNode[0] + \".opposite\")`)\n\t\t{\n\t\t\t$opposite = `getAttr ($topNode[0] + \".opposite\")`;\n\t\t\t$topNode[1] = (\"RRM_\" + $opposite);\n\t\t}\n\t\tdelete \"RRM_Clone_Lctr\";\n\t\tselect $topNode;\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////DELETE BRANCH/////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_DeleteBranch(string $eachMod)\n{\n\n\n\t//UNLOCK NODES\t\n\tselect -hi RRM_MAIN;\n\t$rigHierarchy = `ls -sl`;\n\tlockNode -lock off $rigHierarchy;\n\n\tstring $crntNode;\n\tint $crntInt = 0;\n\tselect $eachMod;\n\t$eachNode = `ls $eachMod`;\n\t\n\twhile ((!`objExists ($eachNode[0] + \".top\")`) && ($crntInt < 101))\n\t{\n\t\tpickWalk -d up;\n\t\t$eachNode = `ls -sl`;\n\t\t//$eachNode = $whileNode[0];\n\t\t$crntInt++;\n\t}\n\tif (`objExists ($eachNode[0] + \".top\")`)\n\t{\n\t\tdelete $eachNode;\n\t\t$crntInt = 100;\n\t}\n\t\n\t//LOCK NODES\n\tselect -hi RRM_MAIN;\n\t$rigHierarchy2 = `ls -sl`;\n\tlockNode $rigHierarchy2;\n\tselect -d;\n\n\n}\n\t\t\t\nglobal proc RRM_DeleteBranchPrompts()\n{\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\tstring $eachMod;\n\tif ($attachModNum == 0)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t-title \"No Module Selected\"\n\t\t\t\t-message \"Please select a module node of a branch to delete.\\n\"\n\t\t\t\t-button \"OK\"\n\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\tfor ($eachMod in $attachMod)\n\t\t{\n\t\t\tprint ($eachMod + \"\\n\");\n\t\t\tif (`objExists $eachMod` && !`objExists ($eachMod + \".core\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Invalid Branch Node\"\n\t\t\t\t\t-message \"You cannot delete the selected node.\\n\"\n\t\t\t\t\t\t-button \"OK\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"OK\"\n\t\t\t\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t\telse if ((`gmatch $eachMod \"RRM_ROOT\"`) || (`gmatch $eachMod \"RRM_MAIN\"`))\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"Proxy Rig Deletion\"\n\t\t\t\t\t-message \"This will delete your entire proxy rig!\\nAre you sure you wisth to proceed?\\n\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"critical\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tselect -hi RRM_MAIN;\n\t\t\t\t\t$rigHierarchy = `ls -sl`;\n\t\t\t\t\tlockNode -lock off $rigHierarchy;\n\t\t\t\t\tdelete RRM_MAIN;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (`objExists $eachMod`)\n\t\t\t\t{\n\t\t\t\t\tRRM_DeleteBranch($eachMod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nglobal proc modLocalAxesToggleAll()\n{\n\t$crnt = `ls -sl`;\n\tstring $proxies[];\n\tselect -hi RRM_MAIN;\n\t$hierarchy = `ls -sl`;\n\tstring $crntProxy;\n\tfor ($crntProxy in $hierarchy)\n\t{\n\t    if (`objExists ($crntProxy + \".core\")`)\n\t    {\n\t    \t$LocalAxisDisplay = `getAttr ($crntProxy + \".displayLocalAxis\")`;\n\t    \tif ($LocalAxisDisplay == 0)\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 1;\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 0;\n\t    \t}\n\t    }\n\t}\n\tselect $crnt;\n}\n\nglobal proc RRM_LocalAxesToggleSelected()\n{\n\t$crnt = `ls -sl`;\n\t$hierarchy = `ls -sl`;\n\tstring $crntProxy;\n\tfor ($crntProxy in $crnt)\n\t{\n\t    if (`objExists ($crntProxy + \".core\")`)\n\t    {\n\t    \t$LocalAxisDisplay = `getAttr ($crntProxy + \".displayLocalAxis\")`;\n\t    \tif ($LocalAxisDisplay == 0)\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 1;\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\tsetAttr ($crntProxy + \".displayLocalAxis\") 0;\n\t    \t}\n\t    }\n\t}\n}\n\nglobal proc RRM_LoadNewModuleAttachNode()\n{\n\t$crnt = `ls -sl`;\n\t$crntSize = `size $crnt`;\n\tif ($crntSize == 1)\n\t{\n\t\tif (`objExists ($crnt[0] + \".core\")`)\n\t\t{\n\t\t\t$checkMain = `getAttr ($crnt[0] + \".core\")`;\n\t\t\tif (($checkMain != \"MAIN\") && (!`objExists ($crnt[0] + \".parent\")`))\n\t\t\t{\n\t\t\t\ttextFieldButtonGrp -e -text $crnt RRM_LoadNewModuleAttachNodeTextField;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twarning \"CANNOT ASSIGN THE MAIN CONTROL OR PARENT NODES AS THE NEW ATTACH NODE\";\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"PLEASE SELECT A VALID PROXY NODE TO LOAD\";\n\t\t}\n\t}\n\telse if ($crntSize == 0)\n\t{\n\t\twarning \"PLEASE SELECT A PROXY NODE TO LOAD\";\n\t}\n\telse\n\t{\n\t\twarning \"PLEASE SELECT ONLY ONE NODE. MIRRORED PARENTS WILL AUTOMATICALLY BE CONNECTED PROPERLY\";\n\t}\n}\n\nglobal proc RRM_AttachToNewModule(string $modAttachName)\n{\n\t//$modAttachName = `textFieldButtonGrp -q -text RRM_LoadNewModuleAttachNodeTextField`;\n\n\t$checkMain = `getAttr ($modAttachName + \".core\")`;\n\tif ((!`objExists $checkMain`) && ($checkMain != \"MAIN\") && (!`objExists ($checkMain + \".parent\")`))\n\t{\n\t\t$parentModules = `ls -sl`;\n\t\tpickWalk -d up;\n\t\t$moduleGroups = `ls -sl`;\n\t\tselect -hi $moduleGroups;\n\t\t$parentModulesHierarchy = `ls -sl`;\n\t\tstring $eachModule;\n\t\tfor ($eachModule in $parentModulesHierarchy)\n\t\t{\n\t\t\tif ($modAttachName == $eachModule)\n\t\t\t{\n\t\t\t\tselect $parentModules;\n\t\t\t\terror \"YOU CANNOT ATTACH PARENT NODES TO ONE OF THEIR CHILDREN\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tstring $eachModule;\n\t\tfor ($eachModule in $parentModules)\n\t\t{\n\t\t\t$modType = \t`getAttr ($eachModule + \".parent\")`;\n\t\t\t\n\t\t\tif (`objExists ($eachModule + \".parent\")` || $modType == \"auxiliary\")\n\t\t\t{\n\t\t\t\tselect $eachModule;\n\t\t\t\tpickWalk -d up;\n\t\t\t\t$modParent = `ls -sl`;\n\t\t\t\tselect $modParent[0];\n\t\t\t\tif (`objExists ($eachModule + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($modAttachName + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$moduleSideCheck = `getAttr ($eachModule + \".pair\")`; \n\t\t\t\t\t\tif ($moduleSideCheck == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$eachModule = `getAttr ($eachModule + \".opposite\")`;\n\t\t\t\t\t\t\t$eachModule = (\"RRM_\" + $eachModule);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$modAttachSideCheck = `getAttr ($modAttachName + \".pair\")`;\n\t\t\t\t\t\tif ($modAttachSideCheck == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$modAttachName = `getAttr ($modAttachName + \".opposite\")`;\n\t\t\t\t\t\t\t$modAttachName = (\"RRM_\" + $modAttachName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t}\n\t\t\t\t$modAbsoluteParent = `ls -sl`;\n\t\t\t\t\n\t\t\t\t//DELETE CONSTRAINTS\n\t\t\t\tlockNode -lock off ($modParent[0] + \"_parentConstraint1\") ($modParent[0] + \"_scaleConstraint1\") $eachModule $modAbsoluteParent;\n\t\t\t\tdelete ($modParent[0] + \"_parentConstraint1\") ($modParent[0] + \"_scaleConstraint1\");\n    \t\n\t\t\t\t//PARENT IF NOT ALREADY PARENTED\n\t\t\t\tstring $parent[] = `listRelatives -parent $modAbsoluteParent[0]`;\n\t\t\t\tif (!`gmatch $parent[0] $modAttachName`)\n\t\t\t\t{\n\t\t\t\t\tparent $modAbsoluteParent[0] $modAttachName;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//DELETE OLD CONNECTOR AND CREATE NEW ONE\n\t\t\t\t$attachCore = `getAttr ($eachModule + \".attachNode\")`;\n\t\t\t\tselect -hi (\"RRM_\" + $attachCore + \"_\" + $eachModule + \"Ctrl\") (\"RRM_\" + $attachCore + \"_\" + $eachModule + \"_AimLctr\");\n\t\t\t\t$connectorHi = `ls -sl`;\n\t\t\t\tlockNode -lock off $connectorHi ;\n\t\t\t\tdelete $connectorHi;\n\t\t\t\t\n\t\t\t\t$modName = `getAttr ($eachModule + \".modName\")`;\n\t\t\t\t$prfx = \"\";\n\t\t\t\tif (`objExists ($eachModule + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\t$sideCheck = `getAttr ($eachModule + \".pair\")`;\n\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = \"l_\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = \"r_\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRRM_ProxyConnectors($modName, $prfx, $modAttachName, $eachModule);\n\n\t\t\t\t//MAKE NEW CONSTRAINTS\n\t\t\t\tparentConstraint -mo $modAttachName \"RRM_MAIN\" $modParent[0];\n\t\t\t\tscaleConstraint  -mo $modAttachName \"RRM_MAIN\" $modParent[0];\n\t\t\t\tsetAttr ($modParent[0] + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\tsetAttr ($modParent[0] + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\t\t\t\t\n\t\t\t\t//CHANGE ATTACH NODE ATTRIBUTE IN PARENT NODE\n\t\t\t\t$modAttachCore = `getAttr ($modAttachName + \".core\")`;\n\t\t\t\tsetAttr -l false ($eachModule + \".attachNode\");\n\t\t\t\tsetAttr -type \"string\" ($eachModule + \".attachNode\") $modAttachCore;\n\t\t\t\tsetAttr -l true ($eachModule + \".attachNode\");\n\t\t\t\t\n\t\t\t\t//CHANGE PARENT ATTRIBUTE IN TOP NODE\n\t\t\t\tsetAttr -l false ($modAbsoluteParent[0] + \".parent\");\n\t\t\t\tsetAttr -type \"string\" ($modAbsoluteParent[0] + \".parent\") $modAttachCore;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//CHECK TO SEE IF MIRRORED////////////////////////////////////////////////////////////\n\t\t\t\tif (`objExists ($eachModule + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\t$mirrorModule = `getAttr ($eachModule + \".opposite\")`;\n\t\t\t\t\t$mirrorModule = (\"RRM_\" + $mirrorModule); \n\t\t\t\t\t//\n\t\t\t\t\t////CHECK FOR MIRROR NODE\n\t\t\t\t\t$mirrorModAttachName = $modAttachName;\n\t\t\t\t\t$mirrorModAttachName = $mirrorModAttachName;\n\t\t\t\t\t\n\n\t\t\t\t\t$mirrorModuleSideCheck = `getAttr ($eachModule + \".pair\")`; \n\t\t\t\t\tif ($mirrorModuleSideCheck == \"left\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$mirrorModule = `getAttr ($eachModule + \".opposite\")`;\n\t\t\t\t\t\t$mirrorModule = (\"RRM_\" + $mirrorModule);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (`objExists ($modAttachName + \".pair\")`)\n\t\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\t\t$mirrorModAttachSideCheck = `getAttr ($modAttachName + \".pair\")`;\n\t\t\t\t\t\tif ($mirrorModAttachSideCheck == \"left\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$mirrorModAttachName = `getAttr ($modAttachName + \".opposite\")`;\n\t\t\t\t\t\t\t$mirrorModAttachName = (\"RRM_\" + $mirrorModAttachName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tselect $mirrorModule;\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$mirrorModParent = `ls -sl`;\n\t\t\t\t\t\n\t\t\t\t\t//DELETE CONSTRAINTS\n\t\t\t\t\tlockNode -lock off ($mirrorModParent[0] + \"_parentConstraint1\") ($mirrorModParent[0] + \"_scaleConstraint1\") $mirrorModule;\n\t\t\t\t\tdelete ($mirrorModParent[0] + \"_parentConstraint1\") ($mirrorModParent[0] + \"_scaleConstraint1\");\n    \t\n\t\t\t\t\t//DELETE OLD CONNECTOR AND CREATE NEW ONE\n\t\t\t\t\t$attachCore = `getAttr ($mirrorModule + \".attachNode\")`;\n\t\t\t\t\tselect -hi (\"RRM_\" + $attachCore + \"_\" + $mirrorModule + \"Ctrl\") (\"RRM_\" + $attachCore + \"_\" + $mirrorModule + \"_AimLctr\");\n\t\t\t\t\t$connectorHi = `ls -sl`;\n\t\t\t\t\tlockNode -lock off $connectorHi ;\n\t\t\t\t\tdelete $connectorHi;\n\t\t\t\t\t\n\t\t\t\t\t$modName = `getAttr ($mirrorModule + \".modName\")`;\n\t\t\t\t\t$prfx = \"\";\n\t\t\t\t\tif (`objExists ($mirrorModule + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sideCheck = `getAttr ($mirrorModule + \".pair\")`;\n\t\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$prfx = \"l_\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$prfx = \"r_\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tRRM_ProxyConnectors($modName, $prfx, $modAttachName, $mirrorModule);\n\t\t\t\t\t\n\t\t\t\t\t//MAKE NEW CONSTRAINTS\n\t\t\t\t\tif (`objExists $mirrorModAttachName`)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($mirrorModAttachName) \"RRM_MAIN\" $mirrorModParent[0];\n\t\t\t\t\t\tscaleConstraint  -mo ($mirrorModAttachName) \"RRM_MAIN\" $mirrorModParent[0];\n\t\t\t\t\t\tsetAttr ($mirrorModParent[0] + \"_parentConstraint1.RRM_MAINW1\") 0;\n\t\t\t\t\t\tsetAttr ($mirrorModParent[0] + \"_scaleConstraint1.RRM_MAINW1\") 0;\n\n\t\t\t\t\t\t//CHANGE ATTACH NODE ATTRIBUTE IN PARENT NODE\n\t\t\t\t\t\t$mirrorModAttachCore = `getAttr ($mirrorModAttachName + \".core\")`;\n\t\t\t\t\t\tsetAttr -l false ($mirrorModule + \".attachNode\");\n\t\t\t\t\t\tsetAttr -type \"string\" ($mirrorModule + \".attachNode\") $mirrorModAttachCore;\n\t\t\t\t\t\tsetAttr -l true ($mirrorModule + \".attachNode\");\n\t\t\t\t\t}\n\t\t\t\t\tlockNode -lock on ($mirrorModParent[0] + \"_parentConstraint1\") ($mirrorModParent[0] + \"_scaleConstraint1\") $mirrorModule;\n\t\t\t\t}\n\t\t\t\tlockNode -lock on ($modParent[0] + \"_parentConstraint1\") ($modParent[0] + \"_scaleConstraint1\") $eachModule $modAbsoluteParent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint (\"\\\"\" + $eachModule + \"\\\" IS NOT A PARENT MODULE... SKIPPING\\n\");\n\t\t\t}\n\t\t}\n\t\tselect $parentModules;\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////RESET///////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_ResetProxies(int $RRM_ResetSelection)\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $crntProxy;\n\tstring $topMods[];\n\n\tif ($RRM_ResetSelection == 2)\n\t{\n\t\tif ($proxySize > 0)\n\t\t{\n\t\t\tselect $proxies;\n\t\t\tfor ($crntProxy in $proxies)\n\t\t\t{\n\t\t\t\tif (!`objExists ($crntProxy + \".parent\")`)\n\t\t\t\t{\n\t\t\t\t\tstring $crntProxy2;\n\t\t\t\t\t$crntInt = 0;\n\t\t\t\t\twhile ((!`objExists ($crntProxy2 + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t\t{\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$crntTopMod = `ls -sl`;\n\t\t\t\t\t\t\t$topMods = `ls $topMods $crntTopMod`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$crntProxy2 = $parentCheck[0];\n\t\t\t\t\t\t$crntInt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$topMods = `ls -type \"transform\" $crntProxy $topMods`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -hi $topMods;\n\t\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t\tstring $crntProxy3;\n\t\t\tfor ($crntProxy3 in $hierarchy)\n\t\t\t{\n\t\t\t    if (`objExists ($crntProxy3 + \".core\")`)\n\t\t\t    {\n\t\t\t        $proxies = `ls $proxies $crntProxy3`;\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t}\n\telse if ($RRM_ResetSelection == 3)\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\tstring $crntProxy;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t}\n\t\n\tstring $crntProxy;\n\tfor ($crntProxy in $proxies)\n\t{\n\t\tif (!`gmatch $crntProxy \"RRM_ROOT\"` && !`objExists ($crntProxy + \".parent\")`)\n\t\t{\n\t\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\n\t\t\n\t\t\tif ($lockTX == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".tx\") 0;\n\t\t\t}\n\t\t\tif ($lockTY == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".ty\") 0;\n\t\t\t}\n\t\t\tif ($lockTZ == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".tz\") 0;\n\t\t\t}\n\t\t\tif ($lockRX == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".rx\") 0;\n\t\t\t}\n\t\t\t\n\t\t\tif ($lockRY == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".ry\") 0;\n\t\t\t}\n\t\t\tif ($lockRZ == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".rz\") 0;\n\t\t\t}\n\t\t\t\n\t\t\tif ($lockSX == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".sx\") 1;\n\t\t\t}\n\t\t\tif ($lockSY == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".sy\") 1;\n\t\t\t}\n\t\t\tif ($lockSZ == 0)\n\t\t\t{\n\t\t\t\tsetAttr ($crntProxy + \".sz\") 1;\n\t\t\t}\n\t\t\tselect $originalSelection;\n\t\t}\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////RIGHT TO LEFT///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_RightToLeftProxies(int $RRM_ResetSelection)\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $crntProxy;\n\tstring $topMods[];\n\t\n\tif ($RRM_ResetSelection == 2)\n\t{\n\t\tif ($proxySize > 0)\n\t\t{\n\t\t\tselect $proxies;\n\t\t\tfor ($crntProxy in $proxies)\n\t\t\t{\n\t\t\t\tif (!`objExists ($crntProxy + \".parent\")`)\n\t\t\t\t{\n\t\t\t\t\tstring $crntProxy2;\n\t\t\t\t\t$crntInt = 0;\n\t\t\t\t\twhile ((!`objExists ($crntProxy2 + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t\t{\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$crntTopMod = `ls -sl`;\n\t\t\t\t\t\t\t$topMods = `ls $topMods $crntTopMod`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$crntProxy2 = $parentCheck[0];\n\t\t\t\t\t\t$crntInt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$topMods = `ls $crntProxy $topMods`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -hi $topMods;\n\t\t\t$hierarchy = `ls -sl`;\n\t\t\tstring $crntProxy3;\n\t\t\tfor ($crntProxy3 in $hierarchy)\n\t\t\t{\n\t\t\t    if (`objExists ($crntProxy3 + \".core\")`)\n\t\t\t    {\n\t\t\t        $proxies = `ls $proxies $crntProxy3`;\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t}\n\telse if ($RRM_ResetSelection == 3)\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl`;\n\t\tstring $crntProxy;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t}\n\t\n\tstring $crntProxy;\n\tfor ($crntProxy in $proxies)\n\t{\n\t\tif (`objExists ($crntProxy + \".opposite\")`)\n\t\t{\n\t\t\tstring $side = `getAttr ($crntProxy + \".pair\")`;\n\t\t\tif ($side == \"left\"|| $side == \"right\")\n\t\t\t{\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\t\t\t\tif ($side == \"left\")\n\t\t\t\t{\n\t\t\t\t\t$crntProxy = (\"RRM_\" + $opp);\n\t\t\t\t}\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\t\t\t\t\n\t\t\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\n\t\t\t\t\n\n\t\t\t\tif ($lockTX == 0)\n\t\t\t\t{\n\t\t\t\t\t$tx = `getAttr ($crntProxy + \".tx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tx\") ($tx * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockTY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ty = `getAttr ($crntProxy + \".ty\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ty\") ($ty * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockTZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$tz = `getAttr ($crntProxy + \".tz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tz\") ($tz * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRX == 0)\n\t\t\t\t{\n\t\t\t\t\t$rx = `getAttr ($crntProxy + \".rx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rx\") ($rx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ry = `getAttr ($crntProxy + \".ry\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ry\") ($ry * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockRZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$rz = `getAttr ($crntProxy + \".rz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rz\") ($rz * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockSX == 0)\n\t\t\t\t{\n\t\t\t\t\t$sx = `getAttr ($crntProxy + \".sx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sx\") ($sx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSY == 0)\n\t\t\t\t{\n\t\t\t\t\t$sy = `getAttr ($crntProxy + \".sy\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sy\") ($sy * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$sz = `getAttr ($crntProxy + \".sz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sz\") ($sz * 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tselect $originalSelection;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////LEFT TO RIGHT///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_LeftToRightProxies(int $RRM_ResetSelection)\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $topMods[];\n\t\n\tif ($RRM_ResetSelection == 2)\n\t{//BRANCH RESET\n\t\tif ($proxySize > 0)\n\t\t{//CHECK THAT SOMETHING IS SELECTED\n\t\t\tselect $proxies;\n\t\t\tfor ($crntProxy in $proxies)\n\t\t\t{\n\t\t\t\tif (!`objExists ($crntProxy + \".parent\")`)\n\t\t\t\t{\n\t\t\t\t\tstring $crntProxy2;\n\t\t\t\t\t$crntInt = 0;\n\t\t\t\t\twhile ((!`objExists ($crntProxy2 + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t\t{\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$crntTopMod = `ls -sl`;\n\t\t\t\t\t\t\t$topMods = `ls $topMods $crntTopMod`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$crntProxy2 = $parentCheck[0];\n\t\t\t\t\t\t$crntInt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$topMods = `ls $crntProxy $topMods`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -hi $topMods;\n\t\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t\tstring $crntProxy3;\n\t\t\tfor ($crntProxy3 in $hierarchy)\n\t\t\t{\n\t\t\t\t$template = `getAttr ($crntProxy3 + \".template\")`;\n\t\t    \tif ((`objExists ($crntProxy3 + \".core\")`) && ($template == 0))\n\t\t    \t{\n\t\t    \t    $proxies = `ls $proxies $crntProxy3`;\n\t\t    \t}\n\t\t\t}\n\t\t}\n\t}\n\telse if ($RRM_ResetSelection == 3)\n\t{//ALL RESET\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t\t$template = `getAttr ($crntProxy + \".template\")`;\n\t\t    if ((`objExists ($crntProxy + \".core\")`) && ($template == 0))\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t}\n\t\n\tfor ($crntProxy in $proxies)\n\t{\n\t\tif (`objExists ($crntProxy + \".opposite\")`)\n\t\t{\n\t\t\tstring $side = `getAttr ($crntProxy + \".pair\")`;\n\t\t\tif ($side == \"left\"|| $side == \"right\")\n\t\t\t{\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\t\t\t\tif ($side == \"right\")\n\t\t\t\t{\n\t\t\t\t\t$crntProxy = (\"RRM_\" + $opp);\n\t\t\t\t}\n\t\t\t\tstring $opp = `getAttr ($crntProxy + \".opposite\")`;\n\n\t\t\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\n\t\t\t\t\t\t\t\t\n\t\t\t\tif ($lockTX == 0)\n\t\t\t\t{\n\t\t\t\t\t$tx = `getAttr ($crntProxy + \".tx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tx\") ($tx * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockTY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ty = `getAttr ($crntProxy + \".ty\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ty\") ($ty * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockTZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$tz = `getAttr ($crntProxy + \".tz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".tz\") ($tz * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRX == 0)\n\t\t\t\t{\n\t\t\t\t\t$rx = `getAttr ($crntProxy + \".rx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rx\") ($rx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockRY == 0)\n\t\t\t\t{\n\t\t\t\t\t$ry = `getAttr ($crntProxy + \".ry\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".ry\") ($ry * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockRZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$rz = `getAttr ($crntProxy + \".rz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".rz\") ($rz * -1);\n\t\t\t\t}\n\t\t\t\tif ($lockSX == 0)\n\t\t\t\t{\n\t\t\t\t\t$sx = `getAttr ($crntProxy + \".sx\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sx\") ($sx * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSY == 0)\n\t\t\t\t{\n\t\t\t\t\t$sy = `getAttr ($crntProxy + \".sy\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sy\") ($sy * 1);\n\t\t\t\t}\n\t\t\t\tif ($lockSZ == 0)\n\t\t\t\t{\n\t\t\t\t\t$sz = `getAttr ($crntProxy + \".sz\")`;\n\t\t\t\t\tsetAttr (\"RRM_\" + $opp + \".sz\") ($sz * 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tselect $originalSelection;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////PINNING///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_PinProxies(int $on, int $off)\n{\n\t$selected = `ls -sl`;\n\t$selectedSize = `size $selected`;\n\tstring $parentModules[];\n\tint $parentModSize;\n\tstring $prfx = \"\";\n\tstring $rootCheck;\n\tselect $selected;\n\t//CHECK THAT SOMETHING IS SELECTED\n\tif ($selectedSize > 0)\n\t{\n\t\t//CHECK IF VALID MODULE\n\t\tstring $each;\n\t\tfor ($each in $selected)\n\t\t{\n\t\t\tif (`objExists ($each + \".modName\")`)\n\t\t\t{\n\t\t\t\t//CHECK IF PAIR, GET PREFIX IF TRUE\n\t\t\t\tif (`objExists ($each + \".pair\")`)\n\t\t\t\t{\n\t\t\t\t\t$sideCheck = `getAttr ($each + \".pair\")`;\n\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t\t{$prfx = \"l_\";}\n\t\t\t\t\telse if ($sideCheck == \"right\")\n\t\t\t\t\t\t{$prfx = \"r_\";}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$prfx = \"\";\n\t\t\t\t}\n\t\t\t\t$modName = `getAttr ($each + \".modName\")`;\n\t\t\t\t//CHECK IF ROOT\n\t\t\t\t$rootCheck = `getAttr ($each + \".core\")`;\n\t\t\t\t{\n\t\t\t\t\tif ($rootCheck == \"ROOT\")\n\t\t\t\t\t{\n\t\t\t\t\t\twarning \"YOU CANNOT PIN THE ROOT PROXY.\";\n\t\t\t\t\t}\n\t\t\t\t\telse if ($rootCheck == \"MAIN\")\n\t\t\t\t\t{\n\t\t\t\t\t\twarning \"YOU CANNOT PIN THE MAIN PROXY.\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$parentModules = `ls (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"*_Aux\") $parentModules`;\n\t\t\t\t\t\t$parentModSize = `size $parentModules`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($parentModSize > 0)\n\t\t{\n\t\t\t//GET WORLD SPACE AND SCALE\n\t\t\tstring $each2;\n\t\t\tstring $mirroredTopNode;\n\t\t\t$topNodeScale = <<1,1,1>>;\n\t\t\tfor ($each2 in $parentModules)\n\t\t\t{\n\t\t\t\t$pinCheck = `getAttr ($each2 + \".pinned\")`;\n\t\t\t\tif ($pinCheck != $on)\n\t\t\t\t{\n\t\t\t\t\t//CHECK IF PAIR, GET PREFIX IF TRUE\n\t\t\t\t\tif (`objExists ($each2 + \".pair\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sideCheck = `getAttr ($each2 + \".pair\")`;\n\t\t\t\t\t\tif ($sideCheck == \"left\")\n\t\t\t\t\t\t\t{$prfx = \"l_\";}\n\t\t\t\t\t\telse if ($sideCheck == \"right\")\n\t\t\t\t\t\t\t{$prfx = \"r_\";}\n\t\t\t\t\t\t//GET TOP NODE'S SCALE\n\t\t\t\t\t\t$mirroredTopNode = `getAttr ($each2 + \".modName\")`;\n\t\t\t\t\t\t$topNodeScale = `getAttr (\"RRM_\" + $mirroredTopNode + \".scale\")`;\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\t$prfx = \"\";\n\t\t\t\t\t\t$topNodeScale = <<1,1,1>>;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t$modLoc = `xform -q -ws -rp $each2`;\n\t\t\t\t\t$modRot = `xform -q -ws -ro $each2`;\n\t\t\t\t\t\n\t\t\t\t\t//GET SCALE\n\t\t\t\t\tspaceLocator -n ($each + \"_ScaleLctr\");\n\t\t\t\t\tparent ($each + \"_ScaleLctr\") RRM_MAIN;\n\t\t\t\t\tscaleConstraint $each2 ($each + \"_ScaleLctr\");\n\t\t\t\t\t$modScale = `getAttr ($each + \"_ScaleLctr.scale\")`;\n\t\t\t\t\tdelete ($each + \"_ScaleLctr\");\n\t\t\t\t\t\n\t\t\t\t\t$modName  = `getAttr ($each2 + \".modName\")`;\n\t\t\t\t\t$topScale = `getAttr (\"RRM_\" + $prfx + $modName + \".scale\")`;\n\t\t\t\t\t\n\t\t\t\t\t$scaleRatio[0] = ($modScale[0] * $topScale[0] * $topNodeScale.x);\n\t\t\t\t\t$scaleRatio[1] = ($modScale[1] * $topScale[1] * $topNodeScale.y);\n\t\t\t\t\t$scaleRatio[2] = ($modScale[2] * $topScale[2] * $topNodeScale.z);\n\t\t\t\t\t\n\t\t\t\t\t//ATTACH NODE\n\t\t\t\t\tstring $attachNode;\n\t\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$attachNode = `getAttr (\"RRM_\" + $prfx + $modName + \"_Parent.attachNode\")`;\n\t\t\t\t\t}\n\t\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$attachNode = `getAttr (\"RRM_\" + $prfx + $modName + \"_Aux.attachNode\")`;\n\t\t\t\t\t}\n\n\t\t\t\t\t//SET CONSTRAINT WEIGHTS\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_\" + $attachNode + \"W0\") $off;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_parentConstraint1.RRM_MAINW1\") $on;\t\t\t\t\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_\" + $attachNode + \"W0\") $off;\n\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_scaleConstraint1.RRM_MAINW1\") $on;\n\t\t\t\t\t\n\t\t\t\t\t//SET SCALE VALUES\n\t\t\t\t\tsetAttr (($each2 + \".scale\"), $scaleRatio[0], $scaleRatio[1], $scaleRatio[2]);\n\t\t\t\t\t//SET ROTATE\n\t\t\t\t\trotate -ws -a $modRot[0] $modRot[1] $modRot[2] $each2;\n\t\t\t\t\t//SET SCALE\n\t\t\t\t\tmove -ws $modLoc[0] $modLoc[1] $modLoc[2] $each2;\n\t\t\t\t\t\n\t\t\t\t\t////CHANGE COLOUR OF CONNECTOR\n\t\t\t\t\t//setAttr (\"RRM_\" + $attachNode + \"_RRM_\" + $prfx + $modName + \"_ParentCtrl.overrideColor\") (6 + (7 * $on));\n\n\t\t\t\t\t\n\t\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CHANGE COLOUR OF CONNECTOR\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $attachNode + \"_RRM_\" + $prfx + $modName + \"_ParentCtrl.overrideColor\") (6 + (7 * $on));\n\n\t\t\t\t\t\t//SET PIN CHANNEL\n\t\t\t\t\t\tlockNode -lock 0 (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t\tsetAttr -lock 0 (\"RRM_\" + $prfx + $modName + \"_Parent.pinned\");\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.pinned\") $on;\n\t\t\t\t\t\tsetAttr -lock 1 (\"RRM_\" + $prfx + $modName + \"_Parent.pinned\");\n\t\t\t\t\t\tlockNode (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (`objExists (\"RRM_\" + $prfx + $modName + \"_Aux\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CHANGE COLOUR OF CONNECTOR\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $attachNode + \"_RRM_\" + $prfx + $modName + \"_AuxCtrl.overrideColor\") (6 + (7 * $on));\n\n\t\t\t\t\t\t//SET PIN CHANNEL\n\t\t\t\t\t\tlockNode -lock 0 (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\t\t\t\tsetAttr -lock 0 (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\t\t\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\") $on;\n\t\t\t\t\t\tsetAttr -lock 1 (\"RRM_\" + $prfx + $modName + \"_Aux.pinned\");\n\t\t\t\t\t\tlockNode (\"RRM_\" + $prfx + $modName + \"_Aux\");\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"NO VALID MODULES WERE SELECTED\";\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"NOTHING SELECTED\";\n\t}\n\tselect $selected;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////TRANSFER TRANSFORMS///////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_TransferModTransforms2()\n{\n\t//CHECK WHETHER TO INCLUDE PARENT NODE\n\t$parentCheck = `checkBox -q -v RRM_TransferParent`;\n\t\n\t$sourceAndDestination = `ls -sl`;\n\t$sourceParent[0] = $sourceAndDestination[0];\n\t$destinationParent[0] = $sourceAndDestination[1];\n\t\n\tselect -hi $sourceParent[0];\n\tselect -d \"*Shape\" \"*Constraint1\";\n\tif ($parentCheck == 0)\n\t{\n\t\tselect -d $sourceParent[0];\n\t}\n\t$sourceHierarchy = `ls -sl`;\n\t$sourceSize = `size $sourceHierarchy`;\n\t\n\tselect -hi $destinationParent[0];\n\tselect -d \"*Shape\" \"*Constraint1\";\n\tselect -d \"*Shape\" \"*Constraint1\";\n\tif ($parentCheck == 0)\n\t{\n\t\tselect -d $destinationParent[0];\n\t}\n\t$destinationHierarchy = `ls -sl`;\n\t$destinationSize = `size $destinationHierarchy`;\n\t\t\n\tif (($sourceSize > 0) && ($destinationSize > 0))\n\t{\n\t\tint $crntHierarchyMod = 0;\n\t\twhile (($crntHierarchyMod < $sourceSize) && ($crntHierarchyMod < $destinationSize))\n\t\t{\n\t\t\t$sourceT = `getAttr ($sourceHierarchy[$crntHierarchyMod] + \".translate\")`;\n\t\t\t$sourceR = `getAttr ($sourceHierarchy[$crntHierarchyMod] + \".rotate\")`;\n\t\t\t$sourceS = `getAttr ($sourceHierarchy[$crntHierarchyMod] + \".scale\")`;\n\t\t\t\n\t\t\t$lockTX = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".tx\")`;\n\t\t\t$lockTY = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".ty\")`;\n\t\t\t$lockTZ = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".tz\")`;\n\t\t\t$lockRX = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".rx\")`;\n\t\t\t$lockRY = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".ry\")`;\n\t\t\t$lockRZ = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".rz\")`;\n\t\t\t$lockSX = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".sx\")`;\n\t\t\t$lockSY = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".sy\")`;\n\t\t\t$lockSZ = `getAttr -lock ($destinationHierarchy[$crntHierarchyMod] + \".sz\")`;\n          \t\t\n\t\t\tif ($lockTX == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".tx\") $sourceT[0];}\n\t\t\tif ($lockTY == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".ty\") $sourceT[1];}\n\t\t\tif ($lockTZ == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".tz\") $sourceT[2];}\n\t\t\t\n\t\t\tif ($lockRX == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".rx\") $sourceR[0];}\n\t\t\tif ($lockRY == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".ry\") $sourceR[1];}\n\t\t\tif ($lockRZ == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".rz\") $sourceR[2];}\n          \t\t\n\t\t\tif ($lockSX == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".sx\") $sourceS[0];}\n\t\t\tif ($lockSY == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".sy\") $sourceS[1];}\n\t\t\tif ($lockSZ == 0)\n\t\t\t{setAttr ($destinationHierarchy[$crntHierarchyMod] + \".sz\") $sourceS[2];}\n\t\t\t$crntHierarchyMod++;\n\t\t}\n\t}\n}\nglobal proc RRM_TransferModTransforms()\n{\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t$sourceParent = `ls -sl`;\n\t$destinationParent = `ls -sl`;\n\t$proxySize = `size $proxies`;\n\tstring $crntProxy;\n\t\n\tint $RRM_TransferSelectionButton = `radioButtonGrp -q -select RRM_TransferSelectionButton`;\n\n\tif ($proxySize == 2)\n\t{\n\t\t//SELECTED\n\t\tif ($RRM_TransferSelectionButton == 1)\n\t\t{\n\t\t\t$sourceT = `getAttr ($proxies[0] + \".translate\")`;\n\t\t\t$sourceR = `getAttr ($proxies[0] + \".rotate\")`;\n\t\t\t$sourceS = `getAttr ($proxies[0] + \".scale\")`;\n\t\t\t\n\t\t\t$lockTX = `getAttr -lock ($proxies[1] + \".tx\")`;\n\t\t\t$lockTY = `getAttr -lock ($proxies[1] + \".ty\")`;\n\t\t\t$lockTZ = `getAttr -lock ($proxies[1] + \".tz\")`;\n\t\t\t$lockRX = `getAttr -lock ($proxies[1] + \".rx\")`;\n\t\t\t$lockRY = `getAttr -lock ($proxies[1] + \".ry\")`;\n\t\t\t$lockRZ = `getAttr -lock ($proxies[1] + \".rz\")`;\n\t\t\t$lockSX = `getAttr -lock ($proxies[1] + \".sx\")`;\n\t\t\t$lockSY = `getAttr -lock ($proxies[1] + \".sy\")`;\n\t\t\t$lockSZ = `getAttr -lock ($proxies[1] + \".sz\")`;\n\n\t\t\tif ($lockTX == 0)\n\t\t\t{setAttr ($proxies[1] + \".tx\") $sourceT[0];}\n\t\t\tif ($lockTY == 0)\n\t\t\t{setAttr ($proxies[1] + \".ty\") $sourceT[1];}\n\t\t\tif ($lockTZ == 0)\n\t\t\t{setAttr ($proxies[1] + \".tz\") $sourceT[2];}\n\t\t\t\n\t\t\tif ($lockRX == 0)\n\t\t\t{setAttr ($proxies[1] + \".rx\") $sourceR[0];}\n\t\t\tif ($lockRY == 0)\n\t\t\t{setAttr ($proxies[1] + \".ry\") $sourceR[1];}\n\t\t\tif ($lockRZ == 0)\n\t\t\t{setAttr ($proxies[1] + \".rz\") $sourceR[2];}\n\n\t\t\tif ($lockSX == 0)\n\t\t\t{setAttr ($proxies[1] + \".sx\") $sourceS[0];}\n\t\t\tif ($lockSY == 0)\n\t\t\t{setAttr ($proxies[1] + \".sy\") $sourceS[1];}\n\t\t\tif ($lockSZ == 0)\n\t\t\t{setAttr ($proxies[1] + \".sz\") $sourceS[2];}\n\t\t}\n\t\t\n\t\t//BRANCH\n\t\telse if ($RRM_TransferSelectionButton == 2)\n\t\t{\n\t\t\t$sourceProxy = $proxies[0];\n\t\t\t$destinationProxy = $proxies[1];\n\t\t\t\n\t\t\t//GET SOURCE PARENT\n\t\t\tselect $sourceProxy;\n\t\t\tif (!`objExists ($sourceProxy + \".parent\")`)\n\t\t\t{\n\t\t\t\tstring $crntProxy;\n\t\t\t\t$crntInt = 0;\n\t\t\t\twhile ((!`objExists ($crntProxy + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t{\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sourceParent = `ls -sl`;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$crntProxy = $parentCheck[0];\n\t\t\t\t\t$crntInt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sourceParent = `ls -sl`;\n\t\t\t}\n\t\t\t\n\t\t\t//GET DESTINATION PARENT\n\t\t\tselect $destinationProxy;\n\t\t\tif (!`objExists ($destinationProxy + \".parent\")`)\n\t\t\t{\n\t\t\t\tstring $crntProxy;\n\t\t\t\t$crntInt = 0;\n\t\t\t\twhile ((!`objExists ($crntProxy + \".parent\")`) && ($crntInt < 103))\n\t\t\t\t{\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$parentCheck = `ls -sl`;\n\t\t\t\t\tif (`objExists ($parentCheck[0] + \".parent\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\t$destinationParent = `ls -sl`;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$crntProxy = $parentCheck[0];\n\t\t\t\t\t$crntInt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$destinationParent = `ls -sl`;\n\t\t\t}\n\t\t\t$sourceModType = `getAttr ($sourceParent[0] + \".parent\")`;\n\t\t\t$destinationModType = `getAttr ($destinationParent[0] + \".parent\")`;\n\t\t\t\n\t\t\t//CHECK TO SEE IF THEY ARE THE SAME TYPE OF MODULE\n\t\t\tif ($sourceModType == $destinationModType)\n\t\t\t{\n\t\t\t\tselect -hi $sourceParent[0];\n\t\t\t\tselect -d \"*Shape\" \"*Constraint1\";\n\t\t\t\t$sourceHierarchy = `ls -sl`;\n\t\t\t\t$sourceSize = `size $sourceHierarchy`;\n\t\t\t\t\n\t\t\t\tselect -hi $destinationParent[0];\n\t\t\t\tselect -d \"*Shape\" \"*Constraint1\";\n\t\t\t\t$destinationHierarchy = `ls -sl`;\n\t\t\t\t$destinationSize = `size $destinationHierarchy`;\n\n\t\t\t\t//CHECK TO SEE IF SOURCE AND DESTINATION HAVE SAME NUMBER OF NODES\t\t\t\t\n\t\t\t\tif ($sourceSize == $destinationSize)\n\t\t\t\t{\n\t\t\t\t\tselect $sourceParent[0] $destinationParent[0];\n\t\t\t\t\tRRM_TransferModTransforms2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t\t-title \"The Source And Destination Branches Have A Different Number Of Nodes.\"\n\t\t\t\t\t\t-message \"The results may not transfer properly.\\nProceed?\"\n\t\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t\t-icon \"question\"`;\n\t\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t\t{\n\t\t\t\t\t\tselect $sourceParent[0] $destinationParent[0];\n\t\t\t\t\t\tRRM_TransferModTransforms2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t\t\t-title \"The Modules Are Not Of The Same Type.\"\n\t\t\t\t\t-message \"The results may not transfer properly.\\nProceed?\"\n\t\t\t\t\t-button \"OK\" -button \"Cancel\"\n\t\t\t\t\t-defaultButton \"OK\"\n\t\t\t\t\t-cancelButton \"Cancel\"\n\t\t\t\t\t-icon \"question\"`;\n\t\t\t\tif ($returnVal_Generate == \"OK\") \n\t\t\t\t{\n\t\t\t\t\tselect $sourceParent[0] $destinationParent[0];\n\t\t\t\t\tRRM_TransferModTransforms2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Wrong Number Of Objects Seleted\"\n\t\t\t-message \"Select ONE target node followed by ONE destination node that you want to match to.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\tselect $originalSelection;\n}\n\n//SAVE/LOAD PROXY TRANSFORMS//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_WritePathProxyTransforms()\n{\n\tif (`objExists \"RRM_MAIN\"` && `objExists \"RRM_ROOT\"`)\n\t{\n\t\tstring $mayaFolder;\n\t\n\t\tfileBrowserDialog -mode 1\n\t\t-fileCommand ( \"RRM_SaveProxyTransforms \\\"\" + $mayaFolder + \"\\\"\" )\n\t\t-actionName \"Save\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No Modular Proxy Rig Exists\"\n\t\t\t-message \"You must first create a modular proxy rig that you wish to save the transforms from.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}   \t\n}\n\n\nglobal proc RRM_SaveProxyTransforms(string $mayaFolder, string $result, string $type)\n{\n\tprint (\"\\nSAVING TO: \"+ $result + \"\\n\");\n\t$fileID = `fopen $result \"w\"`;\n\t\t\n\t$originalSelection = `ls -sl`;\n\t$proxies = `ls -sl`;\n\t\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl`;\n\t\tstring $crntProxy;\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t\n\tfor ($crntProxy in $proxies)\n\t{\n\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\t\n\t\t\n\t\tfprint $fileID (\"if (`objExists \" + $crntProxy + \"`) {\");\n\t\t\n\t\tif ($lockTX == 0)\n\t\t{\n\t\t\t$crntTX = `getAttr ($crntProxy + \".tx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tx \"+ $crntTX +\"; \");\n\t\t}\n\t\tif ($lockTY == 0)\n\t\t{\n\t\t\t$crntTY = `getAttr ($crntProxy + \".ty\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ty \"+ $crntTY +\"; \");\n\t\t}\n\t\tif ($lockTZ == 0)\n\t\t{\n\t\t\t$crntTZ = `getAttr ($crntProxy + \".tz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tz \"+ $crntTZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockRX == 0)\n\t\t{\n\t\t\t$crntRX = `getAttr ($crntProxy + \".rx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rx \"+ $crntRX +\"; \");\n\t\t}\n\t\tif ($lockRY == 0)\n\t\t{\n\t\t\t$crntRY = `getAttr ($crntProxy + \".ry\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ry \"+ $crntRY +\"; \");\n\t\t}\n\t\tif ($lockRZ == 0)\n\t\t{\n\t\t\t$crntRZ = `getAttr ($crntProxy + \".rz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rz \"+ $crntRZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockSX == 0)\n\t\t{\n\t\t\t$crntSX = `getAttr ($crntProxy + \".sx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sx \"+ $crntSX +\"; \");\n\t\t}\n\t\tif ($lockSY == 0)\n\t\t{\n\t\t\t$crntSY = `getAttr ($crntProxy + \".sy\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sy \"+ $crntSY +\"; \");\n\t\t}\n\t\tif ($lockSZ == 0)\n\t\t{\n\t\t\t$crntSZ = `getAttr ($crntProxy + \".sz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sz \"+ $crntSZ +\"; \");\n\t\t}\n\t\tfprint $fileID \"}\\n\";\n\n\t}\n\tfclose $fileID;\n\tselect $originalSelection;\t\t\n}\n\n\nglobal proc RRM_ReadPathProxyTransform()\n{\n \tstring $mayaFolder2;\n\tif (`objExists \"RRM_MAIN\"` && `objExists \"RRM_ROOT\"`)\n\t{\n\t\tfileBrowserDialog -mode 0\n\t\t-fileCommand ( \"RRM_LoadModProxyTransforms \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t\t-actionName \"Load\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No Modular Proxy Rig Exists\"\n\t\t\t-message \"You must first create a modular proxy rig that you wish to load the transforms to.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n}\n\nglobal proc RRM_LoadModProxyTransforms(string $mayaFolder2, string $result2, string $type2)\n{\n\t//FILE PATH\n\tprint (\"LOADING POSE FROM \"+$result2+\"...\\n\");\n\t//OPEN FILE FOR READING\n\t$fileID = `fopen $result2 \"r\"`;\n\t//GET FIRST LINE\n\tstring $nextLine = `fgetline $fileID`;\n\t//LOOP\n\twhile (size($nextLine) > 0)\n\t{\n\t\teval ($nextLine);\n\t\tprint ($nextLine);\n\t\t$nextLine = `fgetline $fileID`;\n\t}\n\t//RETURN ARRAY\n\tfclose $fileID;\n}\n\n//SAVE/LOAD PROXY SETUP///////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_WritePathProxySetup()\n{\n\tstring $mayaFolder;\n\tif (`objExists \"RRM_MAIN\"` && `objExists \"RRM_ROOT\"`)\n\t{\n\t\tfileBrowserDialog -mode 1\n\t\t-fileCommand ( \"RRM_SaveProxySetup \\\"\" + $mayaFolder + \"\\\"\" )\n\t\t-actionName \"Save\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No Modular Proxy Rig Exists\"\n\t\t\t-message \"You must first create a modular proxy rig that you wish to save to a setup file.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}    \n}\n\n\nglobal proc RRM_SaveProxySetup(string $mayaFolder, string $result, string $type)\n{\n\tprint (\"\\nSAVING TO: \"+ $result + \"\\n\");\n\t$fileID = `fopen $result \"w\"`;\n\t\t\n\t$originalSelection = `ls -sl`;\n\tstring $proxies[];\n\tstring $modules[];\n\t\n\t\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl`;\n\t\t\n\t\t//FIND MODULE NODES\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".core\")`)\n\t\t    {\n\t\t        $proxies = `ls $proxies $crntProxy`;\n\t\t    }\n\t\t}\n\t\t\n\t\t//FIND PROXIES\n\t\tfor ($crntProxy in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntProxy + \".top\")`)\n\t\t    {\n\t\t        $modules = `ls $modules $crntProxy`;\n\t\t    }\n\t\t}\n\t\t\n\t\t//CREATE MAIN AND ROOT PROXIES\n\t\tfprint $fileID \"RRM_CreateProxyMainProxy(0);\\n\";\n\t\t\n\t\t//CREATE MODULES\n\t\tfor ($each in $modules)\n\t\t{\n\t\t\t//CHECK TYPE OF MODULE, MOD NAME, ATTACH NODE\n\t\t\tstring $modType = `getAttr ($each + \".top\")`;\n\t\t\tstring $modName = `getAttr ($each + \".core\")`;\n\t\t\tstring $attachNode = `getAttr ($each + \".parent\")`;\n\t\t\t$attachNode = (\"RRM_\" + $attachNode);\n\t\t\tint $mirror = 0;\n\t\t\tint $single;\n\t\t\tif (`objExists ($each + \".pair\")`)\n\t\t\t{\n\t\t\t\t$mirror = 1;\n\t\t\t\tif ($modType == \"arm\"||$modType == \"leg\")\n\t\t\t\t{\n\t\t\t\t\t$mirror = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($modType == \"arm\")\n\t\t\t{\n\t\t\t\tstring $single = `getAttr ($each + \".single\")`;\n\t\t\t\tif ($single == \"left\")\n\t\t\t\t{\n\t\t\t\t\t$mirror = 1;\n\t\t\t\t}\n\t\t\t\tif ($single == \"right\")\n\t\t\t\t{\n\t\t\t\t\t$mirror = 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($modType == \"leg\")\n\t\t\t{\n\t\t\t\t$mirror = 1;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//DEFINE CUSTOM ATTRIBUTES OF EACH MODULE\n\t\t\t//SPLINE\n\t\t\tint $splineNum;\n\t\t\t//ARM/LEG\n\t\t\tint $upperNum;\n\t\t\tint $lowerNum;\n\t\t\tint $elbowNum;\n\t\t\tint $elbowJoints;\n\t\t\tint $kneeNum;\n\t\t\tint $kneeJoints;\n\t\t\t//FK CHAIN\n\t\t\tint $chainNum;\n\t\t\tint $jointNum;\n\t\t\tint $direction;\n\t\t\t//HEAD\n\t\t\tint $jaw;\n\t\t\t//LOOKAT\n\t\t\tint $eyeNum;\n\n\t\t\t//SELECT\n\t\t\tfprint $fileID (\"select \" + $attachNode + \";\\n\");\n\t\t\t\n\t\t\tif ($modType == \"spline\")\n\t\t\t{\n\t\t\t\t$splineNum = `getAttr ($each + \".jointsNum\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxySpline(\\\"\" + $modName + \"\\\",\" + $splineNum + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"arm\")\n\t\t\t{\n\t\t\t\t$upperNum = `getAttr ($each + \".upperArmNum\")`;\n\t\t\t\t$lowerNum = `getAttr ($each + \".lowerArmNum\")`;\n\t\t\t\t$elbowNum = `getAttr ($each + \".elbowNum\")`;\n\t\t\t\t$elbowJoints = `getAttr ($each + \".elbowJoints\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyArm(\\\"\" + $modName + \"\\\",\" + $upperNum + \",\" + $lowerNum + \",\" + $elbowNum + \",\" + $elbowJoints + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"leg\")\n\t\t\t{\n\t\t\t\t$upperNum = `getAttr ($each + \".upperLegNum\")`;\n\t\t\t\t$lowerNum = `getAttr ($each + \".lowerLegNum\")`;\n\t\t\t\t$kneeNum = `getAttr ($each + \".kneeNum\")`;\n\t\t\t\t$kneeJoints = `getAttr ($each + \".kneeJoints\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyLeg(\\\"\" + $modName + \"\\\",\" + $upperNum + \",\" + $lowerNum + \",\" + $kneeNum + \",\" + $kneeJoints + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"fkChain\")\n\t\t\t{\n\t\t\t\t$chainNum = `getAttr ($each + \".chainsNum\")`;\n\t\t\t\t$jointNum = `getAttr ($each + \".jointsNum\")`;\n\t\t\t\t$direction = `getAttr ($each + \".direction\")`;\n\t\t\t\t$direction2 = `getAttr ($each + \".direction\")`;\n\t\t\t\tif ($direction > 3)\n\t\t\t\t{\n\t\t\t\t\t$direction2 = ($direction2 - 3);\n\t\t\t\t\t$direction = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$direction2 = 0;\n\t\t\t\t}\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyFKChain(\\\"\" + $modName + \"\\\",\" + $chainNum + \",\" + $jointNum + \",\" + $direction + \",\" + $direction2 + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"head\")\n\t\t\t{\n\t\t\t\t$jaw = `getAttr ($each + \".jaw\")`;\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyHead(\\\"\" + $modName + \"\\\",\" + $jaw + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"lookAt\")\n\t\t\t{\n\t\t\t\t$eyeNum = `getAttr ($each + \".eyeNum\")`;\n\t\t\t\t$direction = `getAttr ($each + \".direction\")`;\n\t\t\t\t$direction2 = `getAttr ($each + \".direction\")`;\n\t\t\t\tif ($direction > 3)\n\t\t\t\t{\n\t\t\t\t\t$direction2 = ($direction2 - 3);\n\t\t\t\t\t$direction = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$direction2 = 0;\n\t\t\t\t}\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyLookAt(\\\"\" + $modName + \"\\\",\" + $eyeNum + \",\" + $direction + \",\" + $direction2 + \",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t\tif ($modType == \"auxiliary\")\n\t\t\t{\n\t\t\t\t//$eyeNum = `getAttr ($each + \".eyeNum\")`;\n\t\t\t\t//$direction = `getAttr ($each + \".direction\")`;\n\t\t\t\t//$direction2 = `getAttr ($each + \".direction\")`;\n\t\t\t\t//if ($direction > 3)\n\t\t\t\t//{\n\t\t\t\t//\t$direction2 = ($direction2 - 3);\n\t\t\t\t//\t$direction = 0;\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t//\t$direction2 = 0;\n\t\t\t\t//}\n\t\t\t\tfprint $fileID (\"RRM_CreateProxyAuxiliary(\\\"\" + $modName + \"\\\",\" + $mirror + \");\\n\");\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\t\n\t\n\tfor ($crntProxy in $proxies)\n\t{\n\t\t$lockTX = `getAttr -lock ($crntProxy + \".tx\")`;\n\t\t$lockTY = `getAttr -lock ($crntProxy + \".ty\")`;\n\t\t$lockTZ = `getAttr -lock ($crntProxy + \".tz\")`;\n\t\t$lockRX = `getAttr -lock ($crntProxy + \".rx\")`;\n\t\t$lockRY = `getAttr -lock ($crntProxy + \".ry\")`;\n\t\t$lockRZ = `getAttr -lock ($crntProxy + \".rz\")`;\n\t\t$lockSX = `getAttr -lock ($crntProxy + \".sx\")`;\n\t\t$lockSY = `getAttr -lock ($crntProxy + \".sy\")`;\n\t\t$lockSZ = `getAttr -lock ($crntProxy + \".sz\")`;\t\t\n\t\t\n\t\tfprint $fileID (\"if (`objExists \" + $crntProxy + \"`) {\");\n\t\t\n\t\tif ($lockTX == 0)\n\t\t{\n\t\t\t$crntTX = `getAttr ($crntProxy + \".tx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tx \"+ $crntTX +\"; \");\n\t\t}\n\t\tif ($lockTY == 0)\n\t\t{\n\t\t\t$crntTY = `getAttr ($crntProxy + \".ty\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ty \"+ $crntTY +\"; \");\n\t\t}\n\t\tif ($lockTZ == 0)\n\t\t{\n\t\t\t$crntTZ = `getAttr ($crntProxy + \".tz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".tz \"+ $crntTZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockRX == 0)\n\t\t{\n\t\t\t$crntRX = `getAttr ($crntProxy + \".rx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rx \"+ $crntRX +\"; \");\n\t\t}\n\t\tif ($lockRY == 0)\n\t\t{\n\t\t\t$crntRY = `getAttr ($crntProxy + \".ry\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".ry \"+ $crntRY +\"; \");\n\t\t}\n\t\tif ($lockRZ == 0)\n\t\t{\n\t\t\t$crntRZ = `getAttr ($crntProxy + \".rz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".rz \"+ $crntRZ +\"; \");\n\t\t}\t\t\n\n\t\tif ($lockSX == 0)\n\t\t{\n\t\t\t$crntSX = `getAttr ($crntProxy + \".sx\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sx \"+ $crntSX +\"; \");\n\t\t}\n\t\tif ($lockSY == 0)\n\t\t{\n\t\t\t$crntSY = `getAttr ($crntProxy + \".sy\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sy \"+ $crntSY +\"; \");\n\t\t}\n\t\tif ($lockSZ == 0)\n\t\t{\n\t\t\t$crntSZ = `getAttr ($crntProxy + \".sz\")`;\n\t\t\tfprint $fileID (\"setAttr \" + $crntProxy + \".sz \"+ $crntSZ +\"; \");\n\t\t}\n\t\tfprint $fileID \"}\\n\";\n\n\t}\n\tfclose $fileID;\n\tselect $originalSelection;\t\t\n}\n\n\nglobal proc RRM_ReadPathProxySetup()\n{\n\tstring $mayaFolder2;\n\tif (!`objExists \"RRM_MAIN\"` || !`objExists \"RRM_ROOT\"`)\n\t{\n\t\tfileBrowserDialog -mode 0\n\t\t-fileCommand ( \"RRM_LoadModProxySetup \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t\t-actionName \"Load\";\n    }\n    else\n \t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Proxy Rig Already Exists\"\n\t\t\t-message \"You must first delete the existing proxy rig to load a new one. Do you wish to delete the proxy rig and then load a proxy?.\\n\"\n\t\t\t-button \"Yes\"\n\t\t\t-button \"Cancel\"\n\t\t\t-defaultButton \"Cancel\"\n\t\t\t-cancelButton \"Cancel\"\n\t\t\t-icon \"critical\"`;\n\t\t\t\n\t\t\tif ($returnVal_Generate == \"Yes\")\n\t\t\t{\n\t\t\t\tRRM_DeleteProxyRig;\n\t\t\t\tfileBrowserDialog -mode 0\n\t\t\t\t-fileCommand ( \"RRM_LoadModProxySetup \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t\t\t\t-actionName \"Load\";\n\t\t\t}\n\t}   \n}\n\nglobal proc RRM_LoadModProxySetup(string $mayaFolder2, string $result2, string $type2)\n{\n\t//FILE PATH\n\tprint (\"LOADING POSE FROM \"+$result2+\"...\\n\");\n\t//OPEN FILE FOR READING\n\t$fileID = `fopen $result2 \"r\"`;\n\t//GET FIRST LINE\n\tstring $nextLine = `fgetline $fileID`;\n\t//LOOP\n\twhile (size($nextLine) > 0)\n\t{\n\t\teval ($nextLine);\n\t\tprint ($nextLine);\n\t\t$nextLine = `fgetline $fileID`;\n\t}\n\t//RETURN ARRAY\n\tfclose $fileID;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE FINAL RIG//////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_ColorControls()\n{\n\t//LEFT\n\t//MAIN BLUE IS 6\n\t//SECONDARY BLUE IS 18\n\t\n\t//RIGHT\n\t//MAIN RED IS 13\n\t//SECONDARY RED IS 21\n\t\n\t//CENTER\n\t//MAIN GREEN IS 14\n\t//SECONDARY GREEN IS 27\n\t\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\tselect -hi ($modName + \"_MAINCtrl\");\n\t\n\t$xforms= `ls -sl -type \"nurbsCurve\"`;\n\tselect $xforms;\n\t$controls = `ls -sl`;\n\tstring $crnt;\n\tfor ($crnt in $controls)\n\t{\n\t\tselect $crnt;\n\t\tpickWalk -d up;\n\t\t$crntParent = `ls -sl`;\n\t\tstring $parentNode = $crntParent[0];\n\t\t\n\t\tif (`objExists ($parentNode + \".modRigName\")`)\n\t\t{\n\t\t\tif (!`objExists ($parentNode + \".leftControl\")` && !`objExists ($parentNode + \".rightControl\")`)\n\t\t\t{\n\t\t\t\tif (!`gmatch $parentNode ($modName + \"_*Curve*Ctrl\")`)\n\t\t\t\t{//MAIN NON-MIRRORED CONTROLS\n\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 14;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{//MAIN NON-MIRRORED CURVE CONTROLS\n\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 27;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{//MIRRORED CONTROLS\n\t\t\t\tif (`objExists ($parentNode + \".rightControl\")`)\n\t\t\t\t{//RIGHT CONTROLS\n\t\t\t\t\tif (!`gmatch $parentNode ($modName + \"_*Curve*Ctrl\")`)\n\t\t\t\t\t{//MAIN NON-MIRRORED CONTROLS\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 6;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 18;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if (`objExists ($parentNode + \".leftControl\")`)\n\t\t\t\t{//LEFT CONTROLS\n\t\t\t\t\tif (!`gmatch $parentNode ($modName + \"_*Curve*Ctrl\")`)\n\t\t\t\t\t{//MAIN NON-MIRRORED CONTROLS\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 13;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideEnabled\") 1;\n\t\t\t\t\t\tsetAttr ($crnt + \".overrideColor\") 21;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//ADD CORE NAME\nglobal proc RRM_CoreName(string $modControls[])\n{\n\tfor ($crntModControl in $modControls)\n\t{\n\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t}\n}\n\n//ADD CONTROL NAME\nglobal proc RRM_ControlName(string $modControls[])\n{\n\tfor ($crntModControl in $modControls)\n\t{\n\t\tspaceLocator -n (\"TempNamePlaceHolder_\" + $crntModControl);\n\t\tgroup -n (\"TempNamePlaceHolder_Grp\") (\"TempNamePlaceHolder_\" + $crntModControl);\n\t\t$modRigName = `getAttr ($crntModControl + \".modRigName\")`;\n\t\t\n\t\tselect (\"TempNamePlaceHolder_\" + $crntModControl);\n\t\tsearchReplaceNames (\"TempNamePlaceHolder_\" + $modRigName + \"_\") \"_\" \"selected\";\n\t\tselect (\"TempNamePlaceHolder_Grp\");\n\t\tpickWalk -d down;\n\t\t$controlName = `ls -sl`;\n\t\t\n\t\taddAttr -ln \"modControlName\" -dt \"string\" $crntModControl;\n\t\tsetAttr -e-keyable true ($crntModControl + \".modControlName\");\n\t\tsetAttr -type \"string\" ($crntModControl + \".modControlName\") $controlName[0];\n\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".modControlName\");\n\t\t\n\t\tdelete (\"TempNamePlaceHolder_Grp\");\n\t}\n}\n\n//SET UP ORIENTATION TO PARENT NODE\nglobal proc RRM_ParentOrient(string $modCore, string $modName, string $modAttachNode, string $parentOrient)\n{\n\tif ($modAttachNode != \"ROOT\")\n\t{\n\t\taddAttr -ln \"parentOrient\" -at double -min 0 -max 1 -dv 1 $parentOrient;\n\t\tsetAttr -e-keyable true ($parentOrient + \".parentOrient\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_orientConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW1\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW1\");\n\t}\n\telse\n\t{\n\t\taddAttr -ln \"ROOT_Parent\"  -at \"enum\" -en \"ROOT:ROOTSecondary:\"  $parentOrient;\n\t\tsetAttr -e-keyable true ($parentOrient + \".ROOT_Parent\");\n\t\taddAttr -ln \"parentOrient\" -at double  -min 0 -max 1 -dv 1 $parentOrient;\n\t\tsetAttr -e-keyable true ( $parentOrient + \".parentOrient\");\t\t\n        \n\t\t//CREATE NODES FOR BLENDING BETWEEN THE TWO ROOT CHOICES AND MAIN CONTROL\n\t\t\n\t\t//MODULE GROUP\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ParentMD\");\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_ParentReverse\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ParentMD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ParentReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_ParentReverse.outputX\") ($modCore + \"_ParentMD.input2Y\");\n\t\tsetAttr ($modCore + \"_ParentMD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_ParentMD.input1Y\") 1;\n\t\t\n\t\t//SECOND MULTIPLY DIVIDE TO ZERO OUT BOTH ROOT CHOICES WHEN PARENT ORIENT SET TO ZERO\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Parent2MD\");\n\t\tconnectAttr -force ($modCore + \"_ParentMD.outputX\") ($modCore + \"_Parent2MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_ParentMD.outputY\") ($modCore + \"_Parent2MD.input1Y\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_Parent2MD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_Parent2MD.input2Y\");\n\t\t\n\t\t//CONNECT MULTIPLY/DIVIDE TO ORIENT CONSTRAINT\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputY\") ($modCore + \"_orientConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputX\") ($modCore + \"_orientConstraint1.\" + $modName + \"_ROOTJntW2\");\n\t\t\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputY\") ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -force ($modCore + \"_Parent2MD.outputX\") ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTJntW0\");\n\t\t\t\t\n\t\t//MODULE SCALEG\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ScaleGrp_ParentMD\");\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_ScaleGrp_ParentReverse\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_ParentMD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_ParentReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_ParentReverse.outputX\") ($modCore + \"_ScaleGrp_ParentMD.input2Y\");\n\t\tsetAttr ($modCore + \"_ScaleGrp_ParentMD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_ScaleGrp_ParentMD.input1Y\") 1;\n\t\t\n\t\t//SECOND MULTIPLY DIVIDE TO ZERO OUT BOTH ROOT CHOICES WHEN PARENT ORIENT SET TO ZERO\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ScaleGrp_Parent2MD\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_ParentMD.outputX\") ($modCore + \"_ScaleGrp_Parent2MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_ParentMD.outputY\") ($modCore + \"_ScaleGrp_Parent2MD.input1Y\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ScaleGrp_Parent2MD.input2X\");\n\t\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ScaleGrp_Parent2MD.input2Y\");\n\t\t\n\t\t//CONNECT MULTIPLY/DIVIDE TO ORIENT CONSTRAINT\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_Parent2MD.outputY\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_Parent2MD.outputX\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modName + \"_ROOTJntW2\");\n\t    \n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_parentConstraint1.\" + $modName + \"_ROOTJntW0\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_ScaleGrp_Parent2Reverse\");\n\t\tconnectAttr -force ($parentOrient + \".ROOT_Parent\") ($modCore + \"_ScaleGrp_Parent2Reverse.inputX\");\n\n\t\tconnectAttr -force ($modCore + \"_ScaleGrp_Parent2Reverse.outputX\") ($modCore + \"_ScaleGrp_parentConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\t\n\t\t//CHECK IF LEG, AND CHANGE TO ROOT Secondary\n\t\tif (`objExists ($modCore + \"_FootIKCtrl\")`)\n\t\t{\n\t\t\tsetAttr ($parentOrient + \".ROOT_Parent\") 1;\n\t\t}\n\t}\n\t//MODULE\n\tshadingNode -asUtility reverse -n ($modCore + \"_ParentOrientReverse\");\n\tconnectAttr -force ($parentOrient + \".parentOrient\") ($modCore + \"_ParentOrientReverse.inputX\");\n\tconnectAttr -force ($modCore + \"_ParentOrientReverse.outputX\") ($modCore + \"_orientConstraint1.\" + $modCore + \"_OffsetLctrW0\");\n\tconnectAttr -force ($modCore + \"_ParentOrientReverse.outputX\") ($modCore + \"_ScaleGrp_orientConstraint1.\" + $modCore + \"_OffsetLctrW0\");\n\tif (`objExists ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTLocLctrW2\")`)\n\t{\n\t\tconnectAttr -force ($modCore + \"_ParentOrientReverse.outputX\") ($modCore + \"_pointConstraint1.\" + $modName + \"_ROOTLocLctrW2\");\n\t}\t\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE ROOT MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigRoot()\n{\n\n\t\n\t\t\n\t//GET NAME\n\t $modName = `textField -q -text RRM_TextFieldCharName`;\n\t \t\n\n\t//CREATE TOP GROUP\n\tselect -cl;\n\tgroup -em -n $modName;\n\t//CREATE MAIN CONTROLLER///////////////////////////////////////////////////////////////\n\tcircle -n ($modName + \"_MAINCtrl\") -nr 0 1 0 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\tcurve -n ($modName + \"_Arrow1\") -d 1 -p 3 0 8 -p 3 0 9 -p 5 0 9 -p 0 0 12 -p -5 0 9 -p -3 0 9 -p -3 0 8 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;\n\tpickWalk -d down;\n\trename ($modName + \"_Arrow1Shape\");\n\tcircle -n ($modName + \"_Outer1\") -nr 0 1 0 -sw 48.9 -r 8.545 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\trotate -r 0 110.55 0 ($modName + \"_Outer1\");\n\tduplicate -rr ($modName + \"_Arrow1\") ($modName + \"_Outer1\");\n\trotate -r 0 90 0 ($modName + \"_Arrow2\") ($modName + \"_Outer2\");\n\tduplicate -rr ($modName + \"_Arrow1\") ($modName + \"_Outer1\");\n\trotate -r 0 180 0 ($modName + \"_Arrow3\") ($modName + \"_Outer3\");\n\tduplicate -rr ($modName + \"_Arrow1\") ($modName + \"_Outer1\");\n\trotate -r 0 270 0 ($modName + \"_Arrow4\") ($modName + \"_Outer4\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_MAINCtrl\") ($modName + \"_Arrow1\") ($modName + \"_Outer1\") ($modName + \"_Arrow2\") ($modName + \"_Outer2\") ($modName + \"_Arrow3\") ($modName + \"_Outer3\") ($modName + \"_Arrow4\") ($modName + \"_Outer4\") ;\n\tparent -r -s ($modName + \"_Arrow1Shape\") ($modName + \"_Outer1Shape\") ($modName + \"_Arrow2Shape\") ($modName + \"_Outer2Shape\") ($modName + \"_Arrow3Shape\") ($modName + \"_Outer3Shape\") ($modName + \"_Arrow4Shape\") ($modName + \"_Outer4Shape\") ($modName + \"_MAINCtrl\");\n\tdelete ($modName + \"_Arrow1\") ($modName + \"_Outer1\") ($modName + \"_Arrow2\") ($modName + \"_Outer2\") ($modName + \"_Arrow3\") ($modName + \"_Outer3\") ($modName + \"_Arrow4\") ($modName + \"_Outer4\") ;\n\tmove -r 0 0 2 ($modName + \"_Arrow1Shape.cv[3]\") ;\n\t\n\t//ADD RRM TO THE MAIN CONTROL\n\tcurve -n ($modName + \"R1_OuterCurve\") -d 3 -p -0.407227 0 -0.429492 -p -0.263487 0 -0.429492 -p 0.0239912 0 -0.432182 -p 0.153059 0 -0.418734 -p 0.253227 0 -0.330969 -p 0.296535 0 -0.194139 -p 0.237588 0 -0.0195534 -p 0.0868775 0 0.0315034 -p 0.040764 0 0.0378381 -p 0.0375 0 0.0386719 -p 0.0382526 0 0.0396925 -p 0.0951021 0 0.0649485 -p 0.176419 0 0.152211 -p 0.284981 0 0.330214 -p 0.348426 0 0.427287 -p 0.349805 0 0.429492 -p 0.345946 0 0.429492 -p 0.276161 0 0.429492 -p 0.209868 0 0.429492 -p 0.206836 0 0.429492 -p 0.205116 0 0.426765 -p 0.154922 0 0.348158 -p 0.10053 0 0.260202 -p 0.0030441 0 0.11572 -p -0.0459097 0 0.0714475 -p -0.0972157 0 0.0491625 -p -0.149125 0 0.0478205 -p -0.274914 0 0.0480469 -p -0.288614 0 0.0480469 -p -0.293555 0 0.0480469 -p -0.293555 0 0.0510741 -p -0.293555 0 0.125268 -p -0.293493 0 0.202405 -p -0.293493 0 0.398616 -p -0.293555 0 0.428465 -p -0.293555 0 0.429492 -p -0.294535 0 0.429492 -p -0.328353 0 0.429492 -p -0.378561 0 0.429492 -p -0.405499 0 0.429492 -p -0.407227 0 0.429492 -p -0.407227 0 0.428253 -p -0.407227 0 0.405684 -p -0.407227 0 0.328387 -p -0.407227 0 -0.0915302 -p -0.407227 0 -0.429492 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 43 -k 43 ;\n\tpickWalk -d down;\n\trename ($modName + \"R1_OuterCurveShape\");\n\tcurve -n ($modName + \"R1_InnerCurve\") -d 3 -p -0.293555 0 -0.33457 -p -0.257406 0 -0.33457 -p -0.0889505 0 -0.333847 -p 0.0486942 0 -0.336975 -p 0.14017 0 -0.292901 -p 0.171323 0 -0.194613 -p 0.146198 0 -0.11598 -p 0.0827139 0 -0.0601229 -p -0.0184461 0 -0.0494054 -p -0.159798 0 -0.0503906 -p -0.290636 0 -0.0503906 -p -0.293555 0 -0.0503906 -p -0.293555 0 -0.0540591 -p -0.293555 0 -0.119074 -p -0.293555 0 -0.33457 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 12 -k 12 ;\n\tpickWalk -d down;\n\trename ($modName + \"R1_InnerCurveShape\");\n\tcurve -n ($modName + \"M_Curve\") -d 1 -p 0.454102 0 0.429492 -p 0.454102 0 -0.429492 -p 0.625195 0 -0.429492 -p 0.869531 0 0.305859 -p 1.120898 0 -0.429492 -p 1.273828 0 -0.429492 -p 1.273828 0 0.429492 -p 1.164258 0 0.429492 -p 1.164258 0 -0.289453 -p 0.914648 0 0.429492 -p 0.812109 0 0.429492 -p 0.563672 0 -0.301758 -p 0.563672 0 0.429492 -p 0.454102 0 0.429492 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 ;\n\tpickWalk -d down;\n\trename ($modName + \"M_CurveShape\");\n\tduplicate -n ($modName + \"R2_OuterCurve\") ($modName + \"R1_OuterCurve\");\n\tduplicate -n ($modName + \"R2_InnerCurve\") ($modName + \"R1_InnerCurve\");\n\tmove -r -os -wd -1.5 0 0 ($modName + \"R2_InnerCurve\") ($modName + \"R2_OuterCurve\");\n\t\n\tscale -r 1.75 1.75 1.75 ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\tmove -r -ws 0 0 10.4 ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\n\tselect ($modName + \"R1_OuterCurveShape\") ($modName + \"R1_InnerCurveShape\") ($modName + \"R2_OuterCurveShape\") ($modName + \"R2_InnerCurveShape\") ($modName + \"M_CurveShape\");\n\t$RRM_Curves = `ls -sl -type \"nurbsCurve\"`;\n\tfor ($each in $RRM_Curves)\n\t{\n\t\t//rename $each ($modName + \"RRM_CurveShape\" + $num);\n\t\tparent -r -s $each ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($each + \".overrideEnabled\") 1;\n\t\tsetAttr ($each + \".overrideColor\") 14;\n\t}\n\tdelete ($modName + \"R1_OuterCurve\") ($modName + \"R1_InnerCurve\") ($modName + \"R2_OuterCurve\") ($modName + \"R2_InnerCurve\") ($modName + \"M_Curve\");\n\n\t$mainScale = `getAttr RRM_MAIN.scale`;\n\tsetAttr (($modName + \"_MAINCtrl.scale\"), $mainScale[0], $mainScale[1], $mainScale[2]);\n\tmakeIdentity -apply true -s 1 ($modName + \"_MAINCtrl\");\n\t\n\taddAttr -ln \"masterScale\"  -at double  ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.masterScale\");\n\tsetAttr ($modName + \"_MAINCtrl.masterScale\") $mainScale[1];\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_MAINCtrl.masterScale\");\n\t\n\taddAttr -ln \"COG_Ctrl_visibility\"  -at bool ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.COG_Ctrl_visibility\");\n\t\n\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\tsetAttr -l 1 -k 0 ($modName + \"_MAINCtrl.v\");\n\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modName + \"_MAINCtrl.scaleX\");\n\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modName + \"_MAINCtrl.scaleZ\"); \n\tsetAttr -l 1 -k 0 ($modName + \"_MAINCtrl.scaleX\");\n\tsetAttr -l 1 -k 0 ($modName + \"_MAINCtrl.scaleZ\");\n\t\n\n\t//GET ROOT POSITION\n\t$rootPos = `xform -q -ws -rp RRM_ROOT`;\n\tselect -cl;\n\tjoint -n ($modName + \"_ROOTJnt\");\n\tmove -a $rootPos[0] $rootPos[1] $rootPos[2] ($modName + \"_ROOTJnt\");\n\n\t//PARENT CONTROL\n\tcircle -n ($modName + \"_ROOTParentCtrl\") -c 0 0 0 -nr 0 1 0 -sw 315 -r 1.2 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\trotate -r 0 -157.5 0 ($modName + \"_ROOTParentCtrl\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_ROOTParentCtrl\");\n    curve -n ($modName + \"_ROOTParentCtrl1\") -d 1 -p 0.459248 0 1.108679 -p 0.459248 0 1.232295 -p 0 0 1.454964 -p -0.459248 0 1.232295 -p -0.459248 0 1.108679 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\tpickWalk -d down;\n\trename ($modName + \"_ROOTParentCtrl1Shape\");\t\n\tparent -r -s ($modName + \"_ROOTParentCtrl1Shape\") ($modName + \"_ROOTParentCtrl1Shape\") ($modName + \"_ROOTParentCtrl\");\n\tdelete ($modName + \"_ROOTParentCtrl1\");\n\tscale -r 1.25 1.25 1.25 ($modName + \"_ROOTParentCtrl\");\n\tmakeIdentity -apply true -s 1 ($modName + \"_ROOTParentCtrl\");\n\n\t//CREATE COG_Ctrl CONTROL//////////////////////////////////////////////////////\n\tcircle -n ($modName + \"_OuterCOG_Ctrl1\") -r 12 -nr 0 1 0 -sw 18;\n\tcircle -n ($modName + \"_InnerCOG_Ctrl1\") -r 11 -nr 0 1 0 -sw 18;\n\trotate -r -os 0 -18 0 ($modName + \"_InnerCOG_Ctrl1\");\n\tcurve -n ($modName + \"_LeftConnectorCOG_Ctrl1\") -d 1 -p 0 0 -12 -p 0 0 -11 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename ($modName + \"_LeftConnectorCOG_Ctrl1Shape\");\n\tduplicate -n ($modName + \"_RightConnectorCOG_Ctrl1\") ($modName + \"_LeftConnectorCOG_Ctrl1\");\n\trotate  -r -os 0 -18 0 ($modName + \"_LeftConnectorCOG_Ctrl1\");\n\t\n\tselect ($modName + \"_OuterCOG_Ctrl1\") ($modName + \"_InnerCOG_Ctrl1\") ($modName + \"_LeftConnectorCOG_Ctrl1\") ($modName + \"_RightConnectorCOG_Ctrl1\");\n\t\n\tduplicate -rr; rotate -r 0 36 0; for ($i=1; $i<9; ++$i) duplicate -rr -st;\n\tselect ($modName + \"_*COG_Ctrl?\") ($modName + \"_*COG_Ctrl??\");\n\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\tselect -d ($modName + \"_OuterCOG_Ctrl1\");\n\t$transforms = `ls -sl`;\n\tpickWalk -d down;\n\t$shapes = `ls -sl`;\n\tparent -r -s $shapes ($modName + \"_OuterCOG_Ctrl1\");\n\tdelete $transforms;\n\trename ($modName + \"_OuterCOG_Ctrl1\") ($modName + \"_COG_Ctrl\");\n\t\n\tscale -r .7 .7 .7 ($modName + \"_COG_Ctrl\");\n\trotate -r 0 -9 0 ($modName + \"_COG_Ctrl\");\n\tmakeIdentity -apply true -r 1 -s 1 ($modName + \"_COG_Ctrl\");\n\tdelete `scaleConstraint RRM_COG ($modName + \"_COG_Ctrl\")`;\n\tmakeIdentity -apply true -s 1 ($modName + \"_COG_Ctrl\");\n\n\tgroup -n ($modName + \"_COG_CtrlGrp\") ($modName + \"_COG_Ctrl\");\n\tdelete `parentConstraint RRM_COG ($modName + \"_COG_CtrlGrp\")`;\n\n\tparent ($modName + \"_COG_CtrlGrp\") ($modName + \"_MAINCtrl\");\n\t\n\tconnectAttr -f ($modName + \"_MAINCtrl.COG_Ctrl_visibility\") ($modName + \"_COG_CtrlGrp.v\");\n\t\n\t\n\t//ADD CORE NAME\n\taddAttr -ln \"isCOG_Ctrl\"  -dt \"string\" ($modName + \"_COG_Ctrl\");\n\tsetAttr -e-keyable true ($modName + \"_COG_Ctrl.isCOG_Ctrl\");\n\tsetAttr -e-lock true ($modName + \"_COG_Ctrl.isCOG_Ctrl\");\n\t\n\tsetAttr ($modName + \"_COG_Ctrl.overrideEnabled\") 1;\n\tsetAttr ($modName + \"_COG_Ctrl.overrideColor\") 19;\n\t\n\n\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.sx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.sy\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.sz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_Ctrl.v\");\n\t\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.tx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.ty\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.tz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.rx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.ry\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.rz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.sx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.sy\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.sz\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_COG_CtrlGrp.v\");\t\n\n\t\n\t//CREATE ROOT CONTROL//////////////////////////////////////////////////////\n\tcircle -n ($modName + \"_ROOTCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1.15 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\tcircle -n ($modName + \"_ROOTCtrl1\") -c 0 0 0 -nr 0 1 0 -sw 315 -r 1.2 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\trotate -r 0 -157.5 0 ($modName + \"_ROOTCtrl1\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_ROOTCtrl1\");\n    curve -n ($modName + \"_ROOTCtrl2\") -d 1 -p 0.459248 0 1.108679 -p 0.459248 0 1.232295 -p 0 0 1.454964 -p -0.459248 0 1.232295 -p -0.459248 0 1.108679 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\tpickWalk -d down;\n\trename ($modName + \"_ROOTCtrl2Shape\");\t\n\tparent -r -s ($modName + \"_ROOTCtrl1Shape\") ($modName + \"_ROOTCtrl2Shape\") ($modName + \"_ROOTCtrl\");\n\tdelete ($modName + \"_ROOTCtrl1\") ($modName + \"_ROOTCtrl2\");\n\t\n\t//SECONDARY CONTROL\n\tcircle -n ($modName + \"_ROOTSecondaryCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.8 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\tcurve -n ($modName + \"_ROOTSecondaryCtrl2\") -d 1 -p 0.448913 0 0.659205 -p 0.457839 0 0.707653 -p 0.43562 0 0.726309 -p 0.389727 0 0.761461 -p 0.317127 0 0.807243 -p 0.242199 0 0.852344 -p 0.165051 0 0.890957 -p 0.0916126 0 0.922558 -p 0.0354615 0 0.944185 -p 0 0 0.956437 -p 0 0 0.800148 -p 0 0 0.956437 -p -0.0354615 0 0.944185 -p -0.0916126 0 0.922558 -p -0.165051 0 0.890957 -p -0.242199 0 0.852344 -p -0.317127 0 0.807243 -p -0.389727 0 0.761461 -p -0.43562 0 0.726309 -p -0.457839 0 0.707653 -p -0.448913 0 0.659205 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 ;\n\tpickWalk -d down;\n\trename ($modName + \"_ROOTSecondaryCtrl2Shape\");\n\tcurve -n ($modName + \"_ROOTSecondaryCtrl3\") -d 1 -p 0.793238 0 -0.0839132 -p 0.715647 0 0 -p 0.793238 0 0.0839132 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;            \n\trename ($modName + \"_ROOTSecondaryCtrl3Shape\");\n    duplicate -rr; rotate -r 0 90 0; for ($i=1; $i<2; ++$i) duplicate -rr -st;\n    makeIdentity -apply true -r 1 ($modName + \"_ROOTSecondaryCtrl4\") ($modName + \"_ROOTSecondaryCtrl5\");\n\tparent -r -s ($modName + \"_ROOTSecondaryCtrl2Shape\")  ($modName + \"_ROOTSecondaryCtrl3Shape\") ($modName + \"_ROOTSecondaryCtrl4Shape\") ($modName + \"_ROOTSecondaryCtrl5Shape\") ($modName + \"_ROOTSecondaryCtrl\");\n\tdelete ($modName + \"_ROOTSecondaryCtrl2\") ($modName + \"_ROOTSecondaryCtrl3\") ($modName + \"_ROOTSecondaryCtrl4\") ($modName + \"_ROOTSecondaryCtrl5\");\t\n\t\n\tmove -r 0 0.03 0 ($modName + \"_ROOTSecondaryCtrl.scalePivot\") ($modName + \"_ROOTSecondaryCtrl.rotatePivot\");\n\tparent ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTCtrl\");\n\tdelete `pointConstraint ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\")`;\n\tmakeIdentity -apply true ($modName + \"_ROOTSecondaryCtrl\");\n\t\n\tgroup -n ($modName + \"_ROOTCtrlGrp\") ($modName + \"_ROOTCtrl\"); xform -os -piv 0 0 0;\n\tparentConstraint ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\tparent ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\") RRM_ROOT;\n\tsetAttr (($modName + \"_ROOTParentCtrl.scale\"), 4, 4, 4);\n\tsetAttr (($modName + \"_ROOTCtrlGrp.scale\"), 4, 4, 4);\n\tparent -w ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\tmakeIdentity -apply true -s 1 ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\tscaleConstraint ($modName + \"_ROOTParentCtrl\") ($modName + \"_ROOTCtrlGrp\");\n\n\tgroup -n ($modName + \"_ROOTParentCtrlGrp\") ($modName + \"_ROOTParentCtrl\"); xform -os -piv 0 0 0;\n\tdelete `parentConstraint RRM_ROOT ($modName + \"_ROOTParentCtrlGrp\")`;\n\tmakeIdentity -apply true -t 1 ($modName + \"_ROOTParentCtrlGrp\");\n\tdelete -ch ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTParentCtrl\");\n\tparentConstraint ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTJnt\");\n\t//scaleConstraint ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTJnt\");\n\tparentConstraint -mo ($modName + \"_COG_Ctrl\") ($modName + \"_ROOTParentCtrlGrp\");\n\tconnectAttr -f ($modName + \"_ROOTSecondaryCtrl.scale\") ($modName + \"_ROOTJnt.scale\");\n\t\n\t//ADD VISIBILITY CONTROL FOR PARENT CONTROL\n\taddAttr -ln \"parentControl\"  -at bool ($modName + \"_ROOTCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTCtrl.parentControl\");\n\tconnectAttr -f ($modName + \"_ROOTCtrl.parentControl\") ($modName + \"_ROOTParentCtrl.v\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_ROOTParentCtrl.v\");\n\tsetAttr ($modName + \"_ROOTCtrl.parentControl\") 0;\n\t\n\tgroup -n ($modName + \"_ROOTGrp\") ($modName + \"_ROOTParentCtrlGrp\"); xform -os -piv 0 0 0;\n\tparent ($modName + \"_ROOTCtrlGrp\") ($modName + \"_ROOTParentCtrlGrp\");\n\tparent ($modName + \"_ROOTGrp\") ($modName + \"_MAINCtrl\");\n\tparent ($modName + \"_ROOTJnt\") ($modName + \"_ROOTCtrlGrp\");\n\n\tparent ($modName + \"_MAINCtrl\") $modName;\n\n\t//ADD CORE NAME\n\t$modControls = `ls ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTParentCtrl\")`;\n\tRRM_CoreName($modControls);\n\tfor ($crntModControl in $modControls)\n\t{\n\t\taddAttr -ln \"isROOT\"  -dt \"string\" $crntModControl;\n\t\tsetAttr -e-keyable true ($crntModControl + \".isROOT\");\n\t\tsetAttr -type \"string\" ($crntModControl + \".isROOT\") $crntModControl;\n\t\tsetAttr -e-lock true ($crntModControl + \".isROOT\");\n\t\t\n\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_ROOTCtrl\");\n\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t}\n\n\taddAttr -ln \"isMain\"  -dt \"string\" ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.isMain\");\n\tsetAttr -type \"string\" ($modName + \"_MAINCtrl.isMain\") \"isMain\";\n\tsetAttr -e-lock true ($modName + \"_MAINCtrl.isMain\");\n\n\t//ADD VERSION NUMBER\n\taddAttr -ln \"versionNumber\"  -dt \"string\" ($modName + \"_MAINCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_MAINCtrl.versionNumber\");\n\tsetAttr -type \"string\" ($modName + \"_MAINCtrl.versionNumber\") \"1.4.4\";\n\tsetAttr -e-lock true ($modName + \"_MAINCtrl.versionNumber\");\n\n\n\taddAttr -ln \"isROOTCtrl\"  -dt \"string\" ($modName + \"_ROOTCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTCtrl.isROOTCtrl\");\n\tsetAttr -e-lock true ($modName + \"_ROOTCtrl.isROOTCtrl\");\n\n\taddAttr -ln \"isROOTGrp\"  -dt \"string\" ($modName + \"_ROOTGrp\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTGrp.isROOTGrp\");\n\tsetAttr -e-lock true ($modName + \"_ROOTGrp.isROOTGrp\");\n\t\n\t//CREATE LOCATOR FOR TURNING OFF CONSTRAINTS\n\tspaceLocator -n ($modName + \"_ROOTLocLctr\");\n\tdelete `pointConstraint ($modName + \"_ROOTJnt\") ($modName + \"_ROOTLocLctr\")`;\n\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTLocLctr\");\n\tparent ($modName + \"_ROOTLocLctr\") ($modName + \"_ROOTGrp\");\n\tsetAttr ($modName + \"_ROOTLocLctr.v\") 0;\n\t\n\t\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\t\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////GENERATE SPLINE MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_SplineFKControl()\n{\n\tcircle -n \"splineFKCtrl\" -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\t\n\tscale -r  -0.333 1 1 splineFKCtrl.cv[3] splineFKCtrl.cv[7];\n\tmove -r 0 0 -0.35 splineFKCtrl.cv[0] splineFKCtrl.cv[2];\n\tdelete -ch splineFKCtrl;\n}\n\nglobal proc RRM_GenerateRigSpline(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 2;\n\t$multiplier = 1;\n\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 1;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 2)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"spline\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t$splineProxies = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$splineSize = (`size $splineProxies` + 1);\n\t\t\n\t\taddAttr -ln \"splineJoints\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.splineJoints\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.splineJoints\") $splineSize;\n\t\tsetAttr -l true ($modCore + \"Grp.splineJoints\");\t\n\t\n\t\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tdelete `orientConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint -mo ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tdelete `orientConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\n\t\t//ORIENTATION AND LENGTH LOCATORS\n\t\tspaceLocator -n ($modCore + \"_OrientLctr\");\n\t\tparent ($modCore + \"_OrientLctr\") ($modCore + \"Grp\");\t\n\t\tspaceLocator -n  ($modCore + \"_OrientLengthLctr\");\n\t\tparent ($modCore + \"_OrientLengthLctr\") ($modCore + \"_OrientLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_OrientLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 0 1\n\t\t-worldUpType \"objectrotation\"  -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Parent\")\n\t\t(\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_OrientLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_OrientLengthLctr\");\n\t\t$getSplineLength = `getAttr ($modCore + \"_OrientLengthLctr.ty\")`;\n\t\n\t\t//FK CONTROLS\n\t\t$splineProxies = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$splineSize = `size $splineProxies`;\n\t\tint $crntNum = 1;\n\t\twhile ($crntNum <= $splineSize)\n\t\t{\n\t\t\t$nPd = \"_0\";\n\t\t\tif ($crntNum >= 10)\n\t\t\t{$nPd = \"_\";}\n\t\t\t$prvNPad = \"_0\";\n\t\t\tif ($crntNum > 10)\n\t\t\t{$prvNPad = \"_\";}\t\t\n\t\t\tint $testNum = $crntNum;\n\t\t\n\t\t\tRRM_SplineFKControl;\n\t\t\trename \"splineFKCtrl\" ($modCore + $nPd + $crntNum + \"FKCtrl\");\n\t\t\tgroup -n ($modCore + $nPd + $crntNum + \"FKCtrlGrp\") ($modCore + $nPd + $crntNum + \"FKCtrl\"); xform -os -piv 0 0 0;\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPd + $crntNum) ($modCore + $nPd + $crntNum + \"FKCtrlGrp\")`;\n\t\t\n\t\t\t$parentNodeLoc = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Parent\")`;\n\t\t\t$topNodeLoc = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Top\")`; \n\t\t\t$scale = ((($getSplineLength + $getSplineLength / $splineSize))/3);\n\t\t\tscale -r $scale $scale $scale ($modCore + $nPd + $crntNum + \"FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPd + $crntNum + \"FKCtrlGrp\");\n\t\t\t\n\t\t\tparent ($modCore + $nPd + $crntNum + \"FKCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\tif ($crntNum == 1)\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\tsetAttr ($modCore + $nPd + $crntNum + \"FKCFlipLctr.v\") 0;\n\t\t\t\tparent ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_ScaleGrp\");\n\t\n\t\t\t\tdelete `orientConstraint ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tdelete `pointConstraint  ($modCore) ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore) ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\torientConstraint -mo ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\tparentConstraint -mo ($modCore) ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\t\n\t\t\t\t//PARENT ORIENT\n\t\t\t\taddAttr -ln \"orient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + $nPd + $testNum + \"FKCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + $nPd + $testNum + \"FKCtrl.orient\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + $nPd + $crntNum + \"FKCFlipLctrW0\");\n\t\t\t\t\n\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPd + $testNum + \"FKParentOrientReverse\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKParentOrientReverse.inputX\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKParentOrientReverse.outputX\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + \"_OffsetLctrW1\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\tsetAttr ($modCore + $nPd + $crntNum + \"FKCFlipLctr.v\") 0;\n\t\t\t\tparent ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t\n\t\t\t\tdelete `orientConstraint ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tdelete `pointConstraint  ($modCore + $prvNPad + ($crntNum - 1) + \"FKCtrl\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\")`;\n\t\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + $prvNPad + ($crntNum - 1) + \"FKCtrl\") ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\torientConstraint -mo ($modCore + $nPd + $crntNum + \"FKCFlipLctr\") ($modCore + \"_OffsetLctr\") ($modCore + $nPd + $testNum + \"FKCtrlGrp\");\n\t\t\t\tparentConstraint -mo ($modCore + $prvNPad + ($crntNum - 1) + \"FKCtrl\") ($modCore + $nPd + $crntNum + \"FKCFlipLctr\");\n\t\t\t\t\n\t\t\t\t//PARENT ORIENT\n\t\t\t\taddAttr -ln \"orient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + $nPd + $testNum + \"FKCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + $nPd + $testNum + \"FKCtrl.orient\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + $nPd + $crntNum + \"FKCFlipLctrW0\");\n\t\t\t\t\n\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPd + $testNum + \"FKParentOrientReverse\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKCtrl.orient\") ($modCore + $nPd + $testNum + \"FKParentOrientReverse.inputX\");\n\t\t\t\tconnectAttr -force ($modCore + $nPd + $testNum + \"FKParentOrientReverse.outputX\") ($modCore + $nPd + $testNum + \"FKCtrlGrp_orientConstraint1.\" + $modCore + \"_OffsetLctrW1\");\t\n\t\t\t}\n\t\t\t$crntNum++;\n\t\t}\n\t\t\n\t\t//IK SPLINE CONTROLS\n\t\tcurve -n ($modCore + \"_TopIKCtrl\") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0\n\t\t-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0\n\t\t-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0\t\n\t\t-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9\n\t\t-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22\n\t\t-k 23 -k 24 ;\n\t\trotate 90 0 0 ($modCore + \"_TopIKCtrl\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_TopIKCtrlShape\");\n\t\tdelete -ch;\n\t\tsetAttr ($modCore + \"_TopIKCtrl.sx\") ((($getSplineLength + $getSplineLength / $splineSize))/14);\n\t\tsetAttr ($modCore + \"_TopIKCtrl.sy\") ((($getSplineLength + $getSplineLength / $splineSize))/14);\n\t\tsetAttr ($modCore + \"_TopIKCtrl.sz\") ((($getSplineLength + $getSplineLength / $splineSize))/14);\n\t\tselect ($modCore + \"_TopIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_TopIKCtrl\");\n\t\tgroup -n ($modCore + \"_TopIKCtrlGrp\"); xform -os -piv 0 0 0;\n\t\t\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_TopIKCtrlGrp\")`;\n\t\t//rotate -r 0 0 90 ($modCore + \"_TopIKCtrlGrp\");\n\t\t\n\t\tcurve -n ($modCore + \"_MidIKCtrl\") -d 1 -p 0 0 2.5 -p -1.5 0 1 -p -3 0 1 -p -3 0 -1 -p 3 0 -1 -p 3 0 1 -p 1.5 0 1 -p 0 0 2.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_MidIKCtrlShape\");\n\t\tgroup -n ($modCore + \"_MidIKCtrlGrp\") ($modCore + \"_MidIKCtrl\"); xform -os -piv 0 0 0;\n\t\tspaceLocator -n ($modCore + \"_MidIKCtrlLctr\");\n\t\tspaceLocator -n ($modCore + \"_MidIKCtrlWSLctr\");\n\t\tgroup -n ($modCore + \"_MidIKCtrlLctrGrp\") ($modCore + \"_MidIKCtrlLctr\"); xform -os -piv 0 0 0;\n\t\t\n\t\tparent ($modCore + \"_TopIKCtrlGrp\") ($modCore + \"_MidIKCtrlGrp\") ($modCore + \"_MidIKCtrlLctrGrp\") ($modCore + \"_MidIKCtrlWSLctr\") ($modCore);\n\t\t\n\t\t//HIDE LOCATORS\n\t\tsetAttr ($modCore + \"_MidIKCtrlLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_MidIKCtrlWSLctr.v\") 0;\n\t\t\n\t\t\n\t\t\n\t\t//LOCATOR TO PREVENT FLIPPING OF IK CONTROL\n\t\tspaceLocator -n ($modCore + \"_TopIKCtrl_FlipLctr1\");\n\t\tdelete `orientConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopIKCtrl_FlipLctr1\")`;\n\t\tparentConstraint -mo ($modCore + \"_OffsetLctr\") ($modCore + \"_TopIKCtrl_FlipLctr1\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_TopIKCtrl_FlipLctr2\");\n\t\tdelete `orientConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopIKCtrl_FlipLctr2\")`;\n\t\tsetAttr ($modCore + \"_TopIKCtrl_FlipLctr1.v\") 0;\n\t\tsetAttr ($modCore + \"_TopIKCtrl_FlipLctr2.v\") 0;\n\t\tparent ($modCore + \"_TopIKCtrl_FlipLctr1\") ($modCore + \"_TopIKCtrl_FlipLctr2\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t//CONSTRAIN TO FK CONTROLS\n\t\t//NUMBER OF SPLINE JOINTS\n\t\t$spineDums = `ls (\"RRM\" + \"_\" + $oppPrfx + $core + \"_??\") (\"RRM\" + \"_\" + $oppPrfx + $core + \"_Top\")`;\n\t\t$spineNum = `size $spineDums`;\n\t\t\n\t\t//GET SECOND FROM TOP\n\t\tint $splineNumTop = ($spineNum - 1);\n\t\t$nPd = \"_0\";\n\t\tif ($splineNumTop >=10)\n\t\t\t{$nPd = \"_\";}\n\t\t\t\n\t\t//GET HALF WAY POINT FOR MID IKCtrlGrp TO ATTACH TO. IF UNEVEN NUMBER, NEED TWO TARGETS\n\t\tint $midSpline = ($spineNum/2);\n\t\tint $midSpline2 = ($midSpline + 1);\n\t\t$nPdMid = \"_0\";\n\t\t$nPdMid2 = \"_0\";\n\t\tif ($midSpline >=10)\n\t\t{$nPdMid = \"_\";}\n\t\tif ($midSpline2 >=10)\n\t\t{$nPdMid2 = \"_\";}\n\t\t\n\t\t//CONSTRAIN MID IKC ASSETS TO THE CENTER\n\t\tif ($spineNum % 2 == 0)\n\t\t{\n\t\t\tparentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp\");\n\t\t\tdelete `parentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + \"_MidIKCtrlWSLctr\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + $nPdMid2 + $midSpline2 + \"FKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp\");\n\t\t\tsetAttr ($modCore + \"_MidIKCtrlLctrGrp_parentConstraint1.interpType\") 2;\n\t\t\tdelete `parentConstraint ($modCore + $nPdMid + $midSpline + \"FKCtrl\") ($modCore + $nPdMid2 + $midSpline2 + \"FKCtrl\") ($modCore + \"_MidIKCtrlWSLctr\")`;\n\t\t}\n\t\t\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_MidIKCtrlWSLctr\");\n\t\tparentConstraint -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_MidIKCtrlLctr\") ($modCore + \"_MidIKCtrlWSLctr\")($modCore + \"_MidIKCtrlGrp\");\n\t\torientConstraint ($modCore + \"_MidIKCtrlLctr\") ($modCore + \"_MidIKCtrlWSLctr\")($modCore + \"_MidIKCtrlGrp\");\n\t\t\n\t\t//PARENT ORIENT/TRANSLATE MID IKCG\n\t\taddAttr -ln \"midTranslate\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.midTranslate\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midTranslate\") ($modCore + \"_MidIKCtrlGrp_parentConstraint1.\" + $modCore + \"_MidIKCtrlLctrW0\");\n\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_MidIKCParentTranslateReverse\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midTranslate\") ($modCore + \"_MidIKCParentTranslateReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCParentTranslateReverse.outputX\") ($modCore + \"_MidIKCtrlGrp_parentConstraint1.\" + $modCore + \"_MidIKCtrlWSLctrW1\");\n\n\n\t\taddAttr -ln \"midOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.midOrient\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midOrient\") ($modCore + \"_MidIKCtrlGrp_orientConstraint1.\" + $modCore + \"_MidIKCtrlLctrW0\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_MidIKCParentOrientReverse\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.midOrient\") ($modCore + \"_MidIKCParentOrientReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCParentOrientReverse.outputX\") ($modCore + \"_MidIKCtrlGrp_orientConstraint1.\" + $modCore + \"_MidIKCtrlWSLctrW1\");\n\n\t\t\n\t\t//TOP IKC\n\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_MAINCtrl\") ($modCore + $nPd + $splineNumTop + \"FKCtrl\") ($modCore + \"_TopIKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + $nPd + $splineNumTop + \"FKCtrl\") ($modCore + \"_TopIKCtrl_FlipLctr2\");\n\t\torientConstraint -mo ($modCore + \"_TopIKCtrl_FlipLctr1\") ($modCore + \"_TopIKCtrl_FlipLctr2\") ($modCore + \"_TopIKCtrlGrp\");\n\t\t\t\n\t\t//PARENT ORIENT/TRANSLATE TOP IKCG\n\t\taddAttr -ln \"topTranslate\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.topTranslate\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topTranslate\") ($modCore + \"_TopIKCtrlGrp_parentConstraint1.\" + $modCore + $nPd + $splineNumTop + \"FKCtrlW1\");\n\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_TopIKCParentTranslateReverse\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topTranslate\") ($modCore + \"_TopIKCParentTranslateReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCParentTranslateReverse.outputX\") ($modCore + \"_TopIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\n\n\t\taddAttr -ln \"topOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.topOrient\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topOrient\") ($modCore + \"_TopIKCtrlGrp_orientConstraint1.\" + $modCore + \"_TopIKCtrl_FlipLctr2W1\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_TopIKCParentOrientReverse\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.topOrient\") ($modCore + \"_TopIKCParentOrientReverse.inputX\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCParentOrientReverse.outputX\") ($modCore + \"_TopIKCtrlGrp_orientConstraint1.\" + $modCore + \"_TopIKCtrl_FlipLctr1W0\");\n\n\t\t//////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//////////////////////////////////////////RIBBON SPLINE////////////////////////////////////////\n\t\t//////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//GET SPLINE LENGTH\n\t\tspaceLocator -n ($modCore + \"_StartLctr\");\n\t\tparent ($modCore + \"_StartLctr\") ($modCore + \"Grp\");\n\t\tspaceLocator -n  ($modCore + \"_EndLctr\");\n\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\tpointConstraint ($modCore) ($modCore + \"_StartLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 1 0 -worldUpType \"none\"\n\t\t($modCore + \"_TopIKCtrl\") ($modCore + \"_StartLctr\");\n\t\tpointConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_EndLctr\");\n\t\t\n\t\t//SPLINE START POSITION\n\t\tnurbsPlane -n ($modCore + \"_ribbon\") -p 0 0 0 -ax 0 0 1 -w 1 -lr 3 -d 3 -u 1 -v ($splineSize) -ch 1;\n\t\trebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 2 -kcp 0 -kc 0 -su 1 -du 1 -sv 2 -dv 3 -tol 0.01 -fr 0  -dir 0 ($modCore + \"_ribbon\");\n\t\tdelete -ch ($modCore + \"_ribbon\");\n\t\tparent ($modCore + \"_ribbon\") ($modCore + \"Grp\");\n\t\t\n\t\t\n\t\t//RIBBON BLENDSHAPE\n\t\tduplicate -rr -n ($modCore + \"_ribbonBlend\") ($modCore + \"_ribbon\");\n\t\tselect ($modCore + \"_ribbonBlend.cv[1][*]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_ribbonBlend_lCluster\");\n\t\tmove  0 0 0 ($modCore + \"_ribbonBlend_lCluster.scalePivot\") ($modCore + \"_ribbonBlend_lCluster.rotatePivot\") ;\n\t\tselect ($modCore + \"_ribbonBlend.cv[0][*]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_ribbonBlend_rCluster\");\n\t\tmove 0 0 0 ($modCore + \"_ribbonBlend_rCluster.scalePivot\") ($modCore + \"_ribbonBlend_rCluster.rotatePivot\") ;\n\t\t\n\t\tselect ($modCore + \"_ribbonBlend\") ($modCore + \"_ribbon\") ;\n\t\tblendShape -n ($modCore + \"_ribbonBlendShape\") -tc 0;\n\t\tsetAttr ($modCore + \"_ribbonBlendShape1.\" + $modName + \"_\" + $prfx + $core + \"_ribbonBlend\") 1;\n\t\t\n\t\tgroup -n ($modCore + \"_ribbonBlend_lClusterGrp\") ($modCore + \"_ribbonBlend_lCluster\");xform -os -piv 0 0 0;\n\t\tgroup -n ($modCore + \"_ribbonBlend_rClusterGrp\") ($modCore + \"_ribbonBlend_rCluster\");xform -os -piv 0 0 0;\n\t\tparent ($modCore + \"_ribbonBlend_lClusterGrp\") ($modCore + \"_ribbonBlend_rClusterGrp\") ($modCore + \"Grp\");\n\t\t\n\t\t//CHECK FOR NUCLEUS\n\t\tint $nucleusCheck;\n\t\tif (`objExists \"nucleus1\"`)\n\t\t{\n\t\t\t$nucleusCheck = 1;\n\t\t}\n\n\t\t//ORIENT RIBBON\n\t\t//HAIR\n\t\tselect ($modCore + \"_ribbon\");\n\t\tcreateHair 1 ($splineSize) 10 0 0 0 0 5 0 2 1 1;\n\n\t\t\n\t\t//DELETE NUCLEUS IF IT WAS JUST CREATED\n\t\t$hairSystemShape = `ls -sl`;\n\t\t$nucleus = `listConnections -type \"nucleus\"`;\n\t\t$nucleusSize = `size $nucleus`;\n\t\tif ($nucleusCheck == 0 && $nucleusSize > 0)\n\t\t{\n\t\t\tdelete $nucleus;\n\t\t}\n\t\t\n\t\tselect $hairSystemShape;\n\t\tpickWalk -d up;\n\t\tstring $hairSystem[] =`ls -sl`;\n\t\t\n\t\tdelete $hairSystem[0] ($hairSystem[0] + \"OutputCurves\");\n\t\tselect ($hairSystem[0] + \"Follicles\");\n\t\trename ($hairSystem[0] + \"Follicles\") ($modCore + \"_hairSystemFollicles\");\n\t\tparent ($modCore + \"_hairSystemFollicles\") ($modCore + \"Grp\");\n\t\n\t\tselect -hi ($modCore + \"_hairSystemFollicles\");\n\t\tselect -d  ($modCore + \"_hairSystemFollicles\");\n\t\t$follicles = `ls -sl`;\n\t\tfloat $folliclesNum = `size $follicles`;\n\t\t$folliclesNum = $folliclesNum/3;\n\t\tint $hierarchySize = 2;\n\t\tselect ($modCore + \"_hairSystemFollicles\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_01F\");\n\t\twhile ($hierarchySize <= $folliclesNum)\n\t\t{\n\t\t\tpickWalk -d right;\n\t\t\t$previous = `ls -sl`;\n\t\t\tif ($hierarchySize < 10)\n\t\t\t{\n\t\t\t\tstring $crntValue = $hierarchySize;\n\t\t\t\trename ($modCore + \"_0\" + $crntValue + \"F\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring $crntValue = $hierarchySize;\n\t\t\t\trename ($modCore + \"_\" + $crntValue + \"F\");\n\t\t\t}\n\t\t\t$hierarchySize++;\n\t\t}\n\t\t\n\t\tselect ($modCore + \"_??F\");\n\t\tpickWalk -d down;\n\t\tpickWalk -d right;\n\t\tdelete;\n\t\t\n\t\tselect -cl;\n\t\t\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//LOCATORS FOR POSITIONS\n\t\n\t\t//JOINT LOCATIONS\n\t\t$ParentPos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Parent\")`;\n\t\t$spineTopPos = `xform -q -ws -rp ($modCore + \"_TopIKCtrl\")`;\n\t\t\n\t\t$splineProxies = `ls -type \"transform\" (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$splineSize = `size $splineProxies`;\n\t\t\n\t\t$vertebrae = ($splineSize + 1);\n\t\n\t\t\n\t\t////INVERTED GROUP FOR HIP ROTATION\n\t\t//group -em -n ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\");\n\t\t//delete `pointConstraint ($modCore) ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\")`;\n\t\t//\n\t\t//parent ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\") ($modCore + \"_ScaleGrp\");\n\t\t//makeIdentity -apply true -t 0 ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + $core + \"_InvGrp\");\n\t\t\n\t\t//PATHS\n\t\tcurve -n ($modCore + \"_SplineBtm\") -d 1 -p $ParentPos[0] $ParentPos[1] $ParentPos[2] -p $spineTopPos[0] $spineTopPos[1] $spineTopPos[2];\n\t\trebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($vertebrae - 2) -d 3 -tol 0 ($modCore + \"_SplineBtm\");\n\t\n\t\tint $i = 1;\n\t\tfor ($each in $splineProxies)\n\t\t{\n\t\t\t$splinePos = `xform -q -ws -rp $each`;\n\t\t\tmove -ws $splinePos[0] $splinePos[1] $splinePos[2] ($modCore + \"_SplineBtm.cv[\" + $i + \"]\");\n\t\t\t$i++;\n\t\t}\n\n\t\tselect ($modCore + \"_SplineBtm\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_SplineBtmShape\");\n\t\t\n\t\tfloat $vertebraeFloat = $vertebrae;\n\t\t\n\t\t//CUT CURVE IN HALF\n\t\tdetachCurve -ch 0 -cos on -rpo 1 -n ($modCore + \"_SplineTop\") ($modCore + \"_SplineBtm.u[0.5]\");\n\t\trename ($modCore + \"_SplineTop1\") ($modCore + \"_SplineTop\");\n\t\t\n\t\trebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 0 -kt 0 -s 1 -d 3 -tol 0.000328084 ($modCore + \"_SplineBtm\");\n\t\trebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 0 -kt 0 -s 1 -d 3 -tol 0.000328084 ($modCore + \"_SplineTop\");\n\t\t\n\t\tparent ($modCore + \"_SplineTop\") ($modCore + \"_SplineBtm\") ($modCore + \"Grp\");\n\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_SplineTop\");\n\t\tsetAttr -e-keyable true ($modCore + \"_SplineTop.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_SplineTop.nonControl\");\n\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_SplineBtm\");\n\t\tsetAttr -e-keyable true ($modCore + \"_SplineBtm.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_SplineBtm.nonControl\");\n\n\t\t//ATTACH LOCATORS TO PATHS\n\t\t$i = 1;\n\t\tstring $nPd = \"_0\"; \n\t\tfor ($each in $splineProxies)\n\t\t{\n\t\t\tif ($i >= 10)\n\t\t\t{\n\t\t\t\t$nPd = \"_\";\n\t\t\t}\n\t\t\tspaceLocator -n ($modCore + $nPd + $i + \"CurveLctr\");\n\t\t\tgroup -n ($modCore + $nPd + $i + \"CurveLctrGrp\");\n\t\t\tif ($i <= (($splineSize + 1)/2))\n\t\t\t{\n\t\t\t\tpathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow true -followAxis x -upAxis z\n\t\t\t\t-worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + $nPd + $i + \"F\") -inverseUp false -inverseFront false -bank false\n\t\t\t\t($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineBtm\");\n\t\t\t\t//pathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow false ($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineBtm\");\n\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $nPd + $i + \"Lctr_MP\");\n\t\t\t\tfloat $uValue = ((float)$i/(((float)$splineSize + (float)1)/(float)2));\n\t\t\t\tif ($uValue == 1)\n\t\t\t\t{\n\t\t\t\t\t$uValue = 0.99999;\n\t\t\t\t}\n\t\t\t\tsetAttr ($modCore + $nPd + $i + \"Lctr_MP.uValue\") $uValue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow true -followAxis x -upAxis z\n\t\t\t\t-worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + $nPd + $i + \"F\") -inverseUp false -inverseFront false -bank false\n\t\t\t\t($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineTop\");\n\t\t\t\t//pathAnimation -n ($modCore + $nPd + $i + \"Lctr_MP\") -fractionMode true -follow false ($modCore + $nPd + $i + \"CurveLctrGrp\") ($modCore + \"_SplineTop\");\n\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $nPd + $i + \"Lctr_MP\");\n\t\t\t\tfloat $uValue = (((float)$i - (((float)$splineSize + (float)1)/(float)2))/(((float)$splineSize + (float)1)/(float)2));\n\t\t\t\tif ($uValue == 1)\n\t\t\t\t{\n\t\t\t\t\t$uValue = 0.99999;\n\t\t\t\t}\n\t\t\t\tsetAttr ($modCore + $nPd + $i + \"Lctr_MP.uValue\") $uValue;\n\t\t\t}\n\t\t\tdelete `parentConstraint  ($modCore + $nPd + $i + \"FKCtrl\") ($modCore + $nPd + $i + \"CurveLctr\")`;\n\t\t\t$i++;\n\t\t}\n\n\t\t$curveLctrGrp = `ls ($modCore + \"_??CurveLctrGrp\")`;\n\t\tparent $curveLctrGrp ($modCore + \"Grp\");\n\t\t//CONNECT TO MAINCtrl SCALE\n\t\tfor ($each in $curveLctrGrp)\n\t\t{\n\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($each + \".scale\");\n\t\t}\n\t\t\n\t\t//GET POSITIONS\n\t\t$modAttachNodePos = `xform -q -ws -rp ($modCore)`;\n\t\t$spineTopJPos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Top\")`;\n\t\t$SpineCenter = `xform -q -ws -t ($modCore + \"_SplineTop.cv[0]\")`;\n\t\t\n\t\t//CREATE CLUSTERS SPLINE SPLINE\n\t\tselect ($modCore + \"_SplineBtm.cv[0:1]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineBtm_BtmClstr\");\n\t\tgroup -n ($modCore + \"_SplineBtm_ClusterGrp\") ($modCore + \"_SplineBtm_BtmClstr\");\n\t\txform -os -piv $modAttachNodePos[0] $modAttachNodePos[1] $modAttachNodePos[2];\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_SplineBtm_ClusterGrp\");\n\t\t\n\t\tselect ($modCore + \"_SplineBtm.cv[2:3]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineBtm_TopClstr\");\n\t\n\t\tselect ($modCore + \"_SplineTop.cv[0:1]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineTop_BtmClstr\");\n\t\t\n\t\tgroup -n ($modCore + \"_SplineMid_ClusterGrp\") ($modCore + \"_SplineBtm_TopClstr\")($modCore + \"_SplineTop_BtmClstr\");\n\t\txform -os -piv $SpineCenter[0] $SpineCenter[1] $SpineCenter[2];\n\t\tparentConstraint -mo ($modCore + \"_MidIKCtrl\") ($modCore + \"_SplineMid_ClusterGrp\");\n\t\t\n\t\tselect ($modCore + \"_SplineTop.cv[2:3]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_SplineTop_TopClstr\");\n\t\tgroup -n ($modCore + \"_SplineTop_ClusterGrp\") ($modCore + \"_SplineTop_TopClstr\");\n\t\txform -os -piv $spineTopJPos[0] $spineTopJPos[1] $spineTopJPos[2];\n\t\tparentConstraint -mo ($modCore + \"_TopIKCtrl\") ($modCore + \"_SplineTop_ClusterGrp\");\n\t\t\t\t\t\t\t\t\t\t\t \n\t\tparent ($modCore + \"_SplineTop_ClusterGrp\") ($modCore + \"_SplineMid_ClusterGrp\") ($modCore + \"_SplineBtm_ClusterGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//TOP AND BOTTOM JOINTS\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_TopJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopJnt\")`;\n\t\trotate -r -os 0 0 90 ($modCore + \"_TopJnt\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_TopJnt\");\n\t\tparentConstraint -mo ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopJnt\");\n\t\t//CONNECT SCALE\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.scaleX\") ($modCore + \"_TopJnt.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.scaleY\") ($modCore + \"_TopJnt.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.scaleZ\") ($modCore + \"_TopJnt.scaleZ\");\n\t\t\t\n\t\tparent ($modCore + \"_TopJnt\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_TopJntIK\") -p 0 2 0 ;\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_Btm01JntIK\") -p 0 -2 0 ;\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_MidJntIK\") -p 0 0 0 ;\n\t\t\n\t\tstring $selectedList[] = `ls ($modCore + \"_TopJntIK\") ($modCore + \"_Btm01JntIK\") ($modCore + \"_MidJntIK\")`;\n\t\t\n\t\tstring $crntObject;\n\t\t\n\t\tfor ($crntObject in $selectedList)\t\t\n\t\t{\n\t\t\tsetAttr ($crntObject + \".radius\") .5;\n\t\t}\n\t\t\n\t\t//GROUP AND SCALE\n\t\tgroup -n ($modCore + \"_ribbonSpineGrp\") ($modCore + \"_ribbon\");\n\t\tparent ($modCore + \"_Btm01JntIK\") ($modCore + \"_MidJntIK\") ($modCore + \"_TopJntIK\") ($modCore + \"_ScaleGrp\");\n\t\t\n\t\t$splineLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\tsetAttr (($modCore + \"_ribbonSpineGrp.scale\"), ($splineLength[1] / 4), ($splineLength[1] / 4), ($splineLength[1] / 4));\n\t\t\n\t\t\n\t\t//CONNECT TO RIG\n\t\tdelete `parentConstraint ($modCore + \"_OrientLctr\") ($modCore + \"_ribbonSpineGrp\")`;\n\t\tdelete `pointConstraint ($modCore + \"_OrientLctr\") ($modCore + \"_OrientLengthLctr\") ($modCore + \"_ribbonSpineGrp\")`;\n\t\n\t\tparentConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_TopJntIK\") ;\n\t\t\n\t\tparentConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_MidJntIK\") ;\n\t\t\n\t\tparentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_Btm01JntIK\") ;\n\t\t\n\t\tselect ($modCore + \"_ribbon\") ($modCore + \"_TopJntIK\") ($modCore + \"_Btm01JntIK\") ($modCore + \"_MidJntIK\");\n\n\t\t//DETERMINE VERSION NUMBER\n\t\t$versionNum = `getApplicationVersionAsFloat`;\n\t\tif ($versionNum >= 2013)\n\t\t{\n\t\t\tskinCluster -n ($modCore + \"_ribbonSkinClstr\")  -bindMethod 1 -toSelectedBones -nw 1 -mi 3 -dr 4 -rui 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tskinCluster -n ($modCore + \"_ribbonSkinClstr\") -toSelectedBones -ignoreHierarchy -mi 3 -dr 1 -rui 1;\n\t\t}\n\t\t//rename ribbonSkinClstr ($modCore + \"_ribbonSkinClstr\");\n\t\t\n\t\t//GENERATE JOINTS\n\t\tstring $splineJoints[];\n\t\tint $crntNum = 0;\n\t\tfloat $splineLoc[];\n\t\tfor ($crntProxy in $splineProxies)\n\t\t{\n\t\t\t$crntNum++;\n\t\t\t$numPadding = \"_0\";\n\t\t\tif ($crntNum >= 10)\n\t\t\t{$numPadding = \"_\";}\n\t\t\tcurve -d 1 -p -4 0 0 -p 4 0 0 -k 0 -k 1 -n ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $numPadding + $crntNum + \"CurveCtrlShape\");\n\t\t\tcircle -c 5 0 0 -nr 0 1 0 -n ($modCore + $numPadding + $crntNum + \"CurveCtrl2\");\n\t\t\tcircle -c -5 0 0 -nr 0 1 0 -n ($modCore + $numPadding + $crntNum + \"CurveCtrl3\");\n\t\t\tselect ($modCore + $numPadding + $crntNum + \"CurveCtrl2\") ($modCore + $numPadding + $crntNum + \"CurveCtrl3\");\n\t\t\tpickWalk -d down;\n\t\t\tselect -add ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\t\t\tparent -r -s;\n\t\t\tdelete ($modCore + $numPadding + $crntNum + \"CurveCtrl2\") ($modCore + $numPadding + $crntNum + \"CurveCtrl3\");\n\t\t\tsetAttr (($modCore + $numPadding + $crntNum + \"CurveCtrl.scale\"), ($getSplineLength*.06),($getSplineLength*.06),($getSplineLength*.06));\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\t\t\t\t\n\t\t\tgroup -n ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\") ($modCore + $numPadding + $crntNum + \"CurveCtrl\");\n\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $numPadding + $crntNum)  ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\")`;\n\t\t\tpointConstraint -mo ($modCore + $numPadding + $crntNum + \"CurveLctr\") ($modCore + $numPadding + $crntNum + \"FKCtrl\") ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\");\n\t\t\torientConstraint -mo ($modCore + $numPadding + $crntNum + \"F\") ($modCore + $numPadding + $crntNum + \"CurveLctr\");\n\t\t\torientConstraint ($modCore + $numPadding + $crntNum + \"CurveLctr\") ($modCore + $numPadding + $crntNum + \"FKCtrl\") ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\");\n\t\t\tsetAttr ($modCore + $numPadding + $crntNum + \"CurveLctr_orientConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp_orientConstraint1.interpType\") 2;\n\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + $numPadding + $crntNum + \"Jnt\");\n\n\t\t\tparent ($modCore + $numPadding + $crntNum + \"CurveCtrlGrp\") ($modCore + $numPadding + $crntNum + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\n\t\t\tdelete `parentConstraint ($modCore + $numPadding + $crntNum + \"CurveCtrl\") ($modCore + $numPadding + $crntNum + \"Jnt\")`;\n\t\t\trotate -r -os 0 0 90 ($modCore + $numPadding + $crntNum + \"Jnt\");\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + $numPadding + $crntNum + \"Jnt\");\n\t\t\tparentConstraint -mo ($modCore + $numPadding + $crntNum + \"CurveCtrl\") ($modCore + $numPadding + $crntNum + \"Jnt\");\n\t\t\t$splineJoints = `ls ($modCore + $numPadding + $crntNum + \"Jnt\")`;\n\t\t}\t\n\n\t\t//SPLINE FOLLOW FK\n\t\taddAttr -ln \"followFKCtrl\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.followFKCtrl\");\n\t\t\n\t\t//SELECT FKC\n\t\t$spineGrp = `ls ($modCore + \"_??CurveCtrlGrp\")`;\n\t\tstring $nPd = \"0\";\n\t\t$i = 1;\n\t\tfor ($each in $spineGrp)\n\t\t{\n\t\t\tif ($i >= 10)\n\t\t\t{\n\t\t\t\t$nPd = \"\";\n\t\t\t}\n\t\t\tsetAttr ($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 0;\n\t\t\tsetAttr ($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 0;\n\t    \n\t\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_TopIKCtrl.followFKCtrl\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\");\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_TopIKCtrl.followFKCtrl\") 1;\n\t\t\tsetAttr ($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\") 0;\n\t\t\tsetAttr ($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 1;\n\t\t\tsetAttr ($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\") 0;\n\t\t\tsetAttr ($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\") 1;\n\t    \n\t\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_TopIKCtrl.followFKCtrl\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_pointConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"CurveLctrW0\")\n\t\t\t($each + \"_orientConstraint1.\" + $modCore + \"_\" + $nPd + $i + \"FKCtrlW1\");\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_TopIKCtrl.followFKCtrl\") 0;\n\t\t\t\n\t\t\t$i++;\n\t\t}\n\t\t\n\t\t//CREATE CURVE FOR SPLINE LENGTH\n\t\t$Parent_Pos = `xform -q -ws -t (\"RRM_\" + $prfx + $core + \"_Parent\")`;\n\t\t$spineMidJntIK_Pos = `xform -q -ws -t ($modCore + \"_MidJntIK\")`;\n\t\t$spineTop_Pos = `xform -q -ws -t ($modCore + \"_TopJntIK\")`;\n\t\t\n\t\tcurve -n ($modCore + \"_LengthCurve\") -d 3\n\t\t-p $Parent_Pos[0] $Parent_Pos[1] $Parent_Pos[2]\n\t\t-p (( $spineMidJntIK_Pos[0] - $Parent_Pos[0]) /3.4 + $Parent_Pos[0])\n\t\t(( $spineMidJntIK_Pos[1] - $Parent_Pos[1]) /3.4 + $Parent_Pos[1])\n\t\t(( $spineMidJntIK_Pos[2] - $Parent_Pos[2]) /3.4 + $Parent_Pos[2])\n\t\t\n\t\t-p (( $spineMidJntIK_Pos[0] - $Parent_Pos[0]) /1.35 + $Parent_Pos[0])\n\t\t(( $spineMidJntIK_Pos[1] - $Parent_Pos[1]) /1.35 + $Parent_Pos[1])\n\t\t(( $spineMidJntIK_Pos[2] - $Parent_Pos[2]) /1.35 + $Parent_Pos[2])\n\t\t\n\t\t-p (($spineTop_Pos[0] - $spineMidJntIK_Pos[0]) /3.7 + $spineMidJntIK_Pos[0])\n\t\t(($spineTop_Pos[1] - $spineMidJntIK_Pos[1]) /3.7 + $spineMidJntIK_Pos[1])\n\t\t(($spineTop_Pos[2] - $spineMidJntIK_Pos[2]) /3.7 + $spineMidJntIK_Pos[2])\n\t\t\n\t\t-p (($spineTop_Pos[0] - $spineMidJntIK_Pos[0]) /1.4 + $spineMidJntIK_Pos[0])\n\t\t(($spineTop_Pos[1] - $spineMidJntIK_Pos[1]) /1.4 + $spineMidJntIK_Pos[1])\n\t\t(($spineTop_Pos[2] - $spineMidJntIK_Pos[2]) /1.4 + $spineMidJntIK_Pos[2])\n\t\t-p $spineTop_Pos[0] $spineTop_Pos[1] $spineTop_Pos[2]\n\t\t-k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 3 -k 3;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_LengthCtrlShape\");\n\t\tselect ($modCore + \"_LengthCurve\");\n\t\tarclen -ch 1;\n\t\tstring $curveInfoNode[] = `listConnections -t curveInfo -d 1 -s 0 ($modCore + \"_LengthCtrlShape\")`;\n\t\trename $curveInfoNode[0] ($modCore + \"_LengthInfo\");\t\n\t\t\n\t\tparent ($modCore + \"_LengthCurve\") ($modCore + \"Grp\");\n\t\n\t\t\n\t\t//ATTACH CURVE TO RIG\n\t\tselect ($modCore + \"_LengthCurve.cv[0:1]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_LengthClstr01\");\n\t\t\n\t\tselect ($modCore + \"_LengthCurve.cv[2:3]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_LengthClstr02\");\n\t\t\n\t\tselect ($modCore + \"_LengthCurve.cv[4:5]\") ;\n\t\tnewCluster \" -envelope 1\";\n\t\trename ($modCore + \"_LengthClstr03\");\n\t\t\n\t\tconnectAttr -f ($modName + \"_\" + $modAttachNode + \"Jnt.matrix\") ($modCore + \"_LengthClstr01Shape.weightedNode\");\n\t\tsetAttr ($modCore + \"_LengthClstr01Cluster.relative\") 0;\n\t\tparent ($modCore + \"_LengthClstr01\") ($modCore + \"_ScaleGrp\");\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_LengthClstr01\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_MidIKCtrl.matrix\") ($modCore + \"_LengthClstr02Shape.weightedNode\");\n\t\tsetAttr ($modCore + \"_LengthClstr02Cluster.relative\") 0;\n\t\tparent ($modCore + \"_LengthClstr02\") ($modCore + \"_MidIKCtrl\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.matrix\") ($modCore + \"_LengthClstr03Shape.weightedNode\");\n\t\tsetAttr ($modCore + \"_LengthClstr03Cluster.relative\") 0;\n\t\tparent ($modCore + \"_LengthClstr03\") ($modCore + \"_TopIKCtrl\");\n\t\t\n\t\t//SCALE\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HierarchyCompensate_MD\");\n\t\tsetAttr ($modCore + \"_HierarchyCompensate_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_LengthInfo.arcLength\") ($modCore + \"_HierarchyCompensate_MD.input1X\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modCore + \"_HierarchyCompensate_MD.input2X\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LengthRatio_MD\");\n\t\tconnectAttr -f ($modCore + \"_HierarchyCompensate_MD.outputX\") ($modCore + \"_LengthRatio_MD.input1X\");\n\t\tsetAttr ($modCore + \"_LengthRatio_MD.operation\") 2;\n\t\t\n\t\tfloat $SpineLengthValue = `getAttr ($modCore + \"_LengthInfo.arcLength\")`;\n\t\tsetAttr ($modCore + \"_LengthRatio_MD.input2X\") $SpineLengthValue;\n\t\t\n\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + \"_TopJntIK.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + \"_MidJntIK.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + \"_Btm01JntIK.scaleY\");\n\t\t\n\t\t//INVERSE SCALE\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LengthRatioInverse_MD\");\n\t\tconnectAttr -f ($modCore + \"_HierarchyCompensate_MD.outputX\") ($modCore + \"_LengthRatioInverse_MD.input2X\");\n\t\tsetAttr ($modCore + \"_LengthRatioInverse_MD.operation\") 2;\n\t\t\n\t\tsetAttr ($modCore + \"_LengthRatioInverse_MD.input1X\") $SpineLengthValue;\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_LengthRatioInverse_Blnd\");\n\t\tsetAttr ($modCore + \"_LengthRatioInverse_Blnd.color2\") -type double3 1 1 1 ;\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_MD.outputX\") ($modCore + \"_LengthRatioInverse_Blnd.color1R\");\n\t\n\t\t$spineJnt = `ls ($modCore + \"_??Jnt\")`;\n\t\tint $i= 0;\n\t\tfor ($crntJnt in $spineJnt)\n\t\t{\n\t\t\t$i++;\n\t\t\tstring $numPad = \"_0\";\n\t\t\tif ($i >= 10)\n\t\t\t{\n\t\t\t\t$numPad = \"_\";\n\t\t\t}\n\t\t\t//CONNECT MICRO CONTROL TO SCALE\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD\");\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl.scaleX\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input2Y\");\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl.scaleY\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input2X\");\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl.scaleZ\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input2Z\");\n\t\t\n\t\t\tconnectAttr -f ($modCore + \"_LengthRatio_MD.outputX\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input1X\");\n\t\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input1Y\");\n\t\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.input1Z\");\n\n\t\t\tconnectAttr -f ($modCore + $numPad + $i + \"CurveCtrl_Scale_MD.output\") ($crntJnt + \".scale\");\n\t\t}\n\t\t\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_TopJntIK.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_TopJntIK.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_MidJntIK.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_MidJntIK.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_Btm01JntIK.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + \"_Btm01JntIK.scaleZ\");\n\t\t\n\t\t//ADD ATTRIBUTES TO TOPIKC\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_TopIKCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\t\t\n\t\t//AUTO VOLUME\n\t\taddAttr -ln \"autoVolume\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.autoVolume\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.autoVolume\") ($modCore + \"_LengthRatioInverse_Blnd.blender\");\n\t\tsetAttr ($modCore + \"_TopIKCtrl.autoVolume\") 1;\n\t\n\t\t//SPLINE CURVE\n\t\taddAttr -ln \"splineCurve\"  -at double  -min 0.001 -max 5 -dv 1 ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_TopIKCtrl.splineCurve\");\n\t\t\n\t\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//RIBBON SPLINE\n\t\t\n\t\t//CREATE LOCATORS FOR TX\n\t\tspaceLocator -n ($modCore + \"_BtmTX_Lctr\") -p 0 0 0;\n\t\tparent ($modCore + \"_BtmTX_Lctr\") ($modCore + \"_ScaleGrp\");\n\t\tpointConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_BtmTX_Lctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_TopTX_Lctr\") -p 0 0 0;\n\t\tparent ($modCore + \"_TopTX_Lctr\") ($modCore + \"_TopIKCtrl\");\n\t\tpointConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_TopTX_Lctr\");\n\t\t\n\t\t//SET DRIVEN KEY\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\");\n\t\tsetAttr ($modCore + \"_MidIKCtrl.translateX\") -4;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\") .8;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\") 1.2;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\");\n\t\tsetAttr ($modCore + \"_MidIKCtrl.translateX\") 4;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\") 1.2;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\") .8;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_MidIKCtrl.translateX\") ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\");\n\t\tsetAttr ($modCore + \"_MidIKCtrl.translateX\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lClusterGrp.scaleY\") 1;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rClusterGrp.scaleY\") 1;\n\t\t\n\t\tselectKey -k ($modCore + \"_ribbonBlend_lClusterGrp_scaleY\") ($modCore + \"_ribbonBlend_rClusterGrp_scaleY\") ;\n\t\tkeyTangent -itt spline -ott spline ;\n\t\t\n\t\t//ATTACH NODE LOCATOR WITH ZEROED VALUES\n\t\tspaceLocator -n ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr\");\n\t\tgroup -n ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\");\n\t\tdelete `pointConstraint ($modCore) ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\")`;\n\t\tdelete `aimConstraint -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_MidIKCtrl\")\n\t\t($modCore + \"_TopIKCtrl\") ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\")`;\n\t\tparent ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\tmakeIdentity -apply true -t 1 -r 0 -s 1 ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_LctrGrp\");\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr\");\n\t\t\n\t\n\t\t//CONNECT SPLINE IK MIDDLE TO TOP AND BOTTOM SPLINE IK\n\t\tshadingNode -n ($modCore + \"_SplineMid_Blnd\") -asUtility blendColors;\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.translate\") ($modCore + \"_SplineMid_Blnd.color1\");\n\t\tconnectAttr -f ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr.translate\") ($modCore + \"_SplineMid_Blnd.color2\");\n\t\t//connectAttr -f ($modCore + \"_SplineMid_Blnd.output\") ($modCore + \"_MidIKCtrlLctr.translate\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_SplineMid_Rot_Mid\");\n\t\tconnectAttr -force ($modCore + \"_TopIKCtrl.rotate\") ($modCore + \"_SplineMid_Rot_Mid.input1\");\n\t\tsetAttr ($modCore + \"_SplineMid_Rot_Mid.operation\") 2;\n\t\tsetAttr ($modCore + \"_SplineMid_Rot_Mid.input2Y\") 2;\n\t\tconnectAttr -force ($modCore + \"_SplineMid_Rot_Mid.outputY\") ($modCore + \"_MidIKCtrlLctr.rotateY\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_MidSplineAimLctr\");\n\t\tspaceLocator -n ($modCore + \"_MidSplineTargetLctr\");\n\t\tgroup -n ($modCore + \"_MidSplineLctrGrp\") ($modCore + \"_MidSplineAimLctr\") ($modCore + \"_MidSplineTargetLctr\");\n\t\tparent ($modCore + \"_MidSplineLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\tdelete `pointConstraint ($modCore) ($modCore + \"_MidSplineLctrGrp\")`;\n\t\tdelete `aimConstraint -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_MidIKCtrl\")\n\t\t($modCore + \"_TopIKCtrl\") ($modCore + \"_MidSplineLctrGrp\")`;\n\t\tdelete `pointConstraint ($modCore + \"_TopIKCtrl\") ($modCore + \"_MidSplineTargetLctr\")`;\n\t\t//select \"pCube1\";\n\t\t\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_MidSplineAimLctr\") ($modCore + \"_MidSplineTargetLctr\");\n\n\t\tconnectAttr -f ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr.translate\") ($modCore + \"_MidSplineAimLctr.translate\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.translate\") ($modCore + \"_MidSplineTargetLctr.translate\");\n\t\t\n\t\taimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType \"none\" -skip y ($modCore + \"_MidSplineTargetLctr\") ($modCore + \"_MidSplineAimLctr\");\n\t\tconnectAttr -f ($modCore + \"_MidSplineAimLctr.rotateX\") ($modCore + \"_MidIKCtrlLctr.rotateX\");\n\t\tconnectAttr -f ($modCore + \"_MidSplineAimLctr.rotateZ\") ($modCore + \"_MidIKCtrlLctr.rotateZ\");\n\t\t//CREATE ATTRIBUTES FOR IK/FK MIDIKCtrlGrp INFLUENCE\n\t\taddAttr -ln \"topIKInfPos\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.topIKInfPos\");\n\t\taddAttr -ln \"topIKInfRot\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MidIKCtrl.topIKInfRot\");\n\t\t\n\t\t//CREATE LOCATOR FOR IK/FK MIDIKCtrlGrp INFLUENCE\n\t\tspaceLocator -n ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\tgroup -n ($modCore + \"_MidIKCtrlLctrGrp_InfLctrGrp\");\n\t\tdelete `parentConstraint ($modCore + \"_MidIKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp_InfLctrGrp\")`;\n\t\tparent ($modCore + \"_MidIKCtrlLctrGrp_InfLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\tmakeIdentity -apply true -t 1 ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_TopIKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\taimConstraint -offset 0 0 0 -weight 1 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"none\" -skip y ($modCore + \"_TopIKCtrl\") ($modCore + \"_MidIKCtrlLctrGrp_InfLctr\");\n\t\tsetAttr ($modCore + \"_MidIKCtrlLctrGrp_InfLctr.v\") 0;\n\t\t\n\t\t//ROTATE BLEND\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend\");\n\t\tconnectAttr -force ($modCore + \"_MidSplineAimLctr.rotate\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.color2\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_InfLctr.rotate\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.color1\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.topIKInfRot\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.blender\");\n\t\t\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.outputR\") ($modCore + \"_MidIKCtrlLctr.rotateX\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_Inf_Rot_Blend.outputB\") ($modCore + \"_MidIKCtrlLctr.rotateZ\");\n\t\t\n\t\t//TRANSLATE BLEND\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend\");\n\t\tconnectAttr -force ($modCore + \"_SplineMid_Blnd.output\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.color2\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_InfLctr.translate\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.color1\");\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrl.topIKInfPos\") ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.blender\");\n\t\t\n\t\tconnectAttr -force ($modCore + \"_MidIKCtrlLctrGrp_Inf_Trn_Blend.output\") ($modCore + \"_MidIKCtrlLctr.translate\");\n\t\n\t\t//SPLINE LENGTH\n\t\taddAttr -ln \"splineLength\"  -at double ($modCore + \"_MidIKCtrl\");\n\t\tsetAttr -e-channelBox true ($modCore + \"_MidIKCtrl.splineLength\");\n\t\taddAttr -ln \"splineLength\"  -at double ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-channelBox true ($modCore + \"_TopIKCtrl.splineLength\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Length_MD\");\n\t\tsetAttr ($modCore + \"_Length_MD.operation\") 2;\n\t\t$splineLength[0] = `getAttr ($modCore + \"_LengthInfo.arcLength\")`;\n\t\tsetAttr ($modCore + \"_Length_MD.input2X\") $splineLength[0];\n\t\tconnectAttr -f ($modCore + \"_LengthInfo.arcLength\") ($modCore + \"_Length_MD.input1X\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LengthComp_MD\");\n\t\tsetAttr ($modCore + \"_LengthComp_MD.operation\") 2;\n\t\tconnectAttr -force ($modCore + \"_Length_MD.outputX\") ($modCore + \"_LengthComp_MD.input1X\");\n\t\tconnectAttr -force ($modName + \"_MAINCtrl.scaleY\") ($modCore + \"_LengthComp_MD.input2X\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_LengthComp_MD.outputX\") ($modCore + \"_MidIKCtrl.splineLength\");\n\t\tconnectAttr -f ($modCore + \"_LengthComp_MD.outputX\") ($modCore + \"_TopIKCtrl.splineLength\");\n\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Spline_Blnd\");\n\t\tconnectAttr -f ($modCore + \"_LengthComp_MD.outputX\") ($modCore + \"_Spline_Blnd.color1R\");\n\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.splineCurve\") ($modCore + \"_Spline_Blnd.color2R\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_Spline_Blnd.outputR\") ($modCore + \"_SplineBtm_ClusterGrp.sy\");\n\t\tconnectAttr -f ($modCore + \"_Spline_Blnd.outputR\") ($modCore + \"_SplineMid_ClusterGrp.sy\");\n\t\tconnectAttr -f ($modCore + \"_Spline_Blnd.outputR\") ($modCore + \"_SplineTop_ClusterGrp.sy\");\n\t\t\n\t\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\t\n\t\t//VISIBILITY\n\t\t$SpineCurveLctrs = `ls ($modCore + \"_??CurveLctr\")`;\n\t\tfor ($crntLctr in $SpineCurveLctrs)\n\t\t{\n\t\t\tsetAttr ($crntLctr + \".v\") 0;\n\t\t}\n\t\t\n\t\n\t\t//SPLINE MICROS\n\t\taddAttr -ln \"splineMicro\"  -at bool  ($modCore + \"_TopIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_TopIKCtrl.splineMicro\");\n\t\t\n\t\t$splineCurveCtrlGrp = `ls ($modCore + \"_??CurveCtrlGrp\")`;\n\t\tfor ($crntCtrlGrp in $splineCurveCtrlGrp)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_TopIKCtrl.splineMicro\") ($crntCtrlGrp + \".v\");\n\t\t}\n\t\n\t\tsetAttr ($modCore + \"_StartLctr.v\") 0;\n\t\tsetAttr ($modName + \"_\" + $modAttachNode + \"_\" + $prfx + \"Jnt_\" + $core + \"_Lctr.v\") 0;\n\t\n\t\tsetAttr ($modCore + \"_SplineBtm_BtmClstr.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineBtm_TopClstr.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineTop_BtmClstr.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineTop_TopClstr.v\") 0;\n\t\n\t\tsetAttr ($modCore + \"_LengthClstr01.v\") 0;\n\t\tsetAttr ($modCore + \"_LengthClstr02.v\") 0;\n\t\tsetAttr ($modCore + \"_LengthClstr03.v\") 0;\n\t\n\t\n\t\tsetAttr ($modCore + \"_ribbon.v\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend.v\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend_rCluster.v\") 0;\n\t\tsetAttr ($modCore + \"_ribbonBlend_lCluster.v\") 0;\n\t\tsetAttr ($modCore + \"_BtmTX_Lctr.v\") 0;\n\t\tsetAttr ($modCore + \"_TopTX_Lctr.v\") 0;\n\t\tsetAttr ($modCore + \"_Btm01JntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_MidJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_TopJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_LengthCurve.template\") 1;\n\t\tsetAttr ($modCore + \"_SplineTop.v\") 0;\n\t\tsetAttr ($modCore + \"_SplineBtm.v\") 0;\n\t\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_LengthCurve\");\n\t\tsetAttr -e-keyable true ($modCore + \"_LengthCurve.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_LengthCurve.nonControl\");\n\t\t\n\t\t$spineF = `ls ($modCore + \"_??F\")`;\n\t\tfor ($crntF in $spineF)\n\t\t{\n\t\t\tsetAttr ($crntF + \".v\") 0;\n\t\t}\n\t\t\n\t\tsetAttr ($modCore + \"_MidSplineTargetLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_MidSplineAimLctr.v\") 0;\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_TopIKCtrl.v\");\n\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_MidIKCtrl.v\");\n\t\t\n\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\tif (!`objExists ($crntModControl + \".modCoreName\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t\t\t}\n\t\t\t//ADD MODULE TYPE\n\t\t\tif (!`objExists ($crntModControl + \".moduleType\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"spline\";\n\t\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t\t}\n\t\t}\n\t\t\n\t\t//CLEAN UP\n\t\tdelete ($modCore + \"_OrientLctr\");\n\t\t\n\t\tselect -cl;\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n///////////////////////////////    TOON LIMB    ///////////////////////////////\n//////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_ToonLimbs(string $limbType, string $prfx, string $oppPrfx, string $crntSide, string $oppSide, string $modCore, string $modOppCore, int $multiplier, int $inverseFront, string $modAttachNode, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$core = `getAttr ($topNode + \".core\")`;\n\n\tfloat $elbow1Loc[];\n\tfloat $elbow2Loc[];\t\n\tstring $elbow1 = \"_Elbow\";\n\tstring $elbow2 = \"_Elbow\";\n\tstring $elbowType = \"elbow\";\n\tstring $shoulder = \"_Shoulder\";\n\tstring $clavicle = \"_Clavicle\";\n\tstring $parentNode = \"_ClavicleJnt\";\n\tstring $wrist = \"_Wrist\";\n\tstring $wristDummy = \"_WristJDummy\";\n\tstring $FKCtrlGrp = \"FKCtrlGrp2\";\n\tint $segInteger = 1;\n\tfloat $limbLength;\n\n\tif ($limbType == \"leg\")\n\t{\n\t\t$elbow1 = \"_Knee\";\n\t\t$elbow2 = \"_Knee\";\n\t\t$elbowType = \"knee\";\n\t\t$shoulder = \"_Hip\";\n\t\t$clavicle = (\"_\" + $modAttachNode);\n\t\t$parentNode = \"_HipFKCtrlGrp\";\n\t\t$wrist = \"_Ankle\";\n\t\t$wristDummy = \"_AnkleJnt\";\n\t\t$FKCtrlGrp = \"FKCtrlGrp\";\n\t\tselect (\"RRM_\" + $prfx + $core + \"_Hip\") (\"RRM_\" + $prfx + $core + \"_Ankle\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Knee\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Knee1\") (\"RRM_\" + $prfx + $core + \"_Knee1\");\n\t\t}\n\t\t//SET MULTIPLIER TO NOT MIRROR\n\t\t$multiplier = 1;\n\t}\n\telse\n\t{\n\t\tselect (\"RRM_\" + $prfx + $core + \"_Shoulder\") (\"RRM_\" + $prfx + $core + \"_Wrist\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Elbow\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $prfx + $core + \"_Elbow1\") (\"RRM_\" + $prfx + $core + \"_Elbow1\");\n\t\t}\n\t}\n\t$segments = `ls -sl`;\n\t$segSize = `size $segments`;\n\t\t\n\tfloat $middleLimbLength;\n\n\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")` && !`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t{\n\t\t$elbow1Loc = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t$elbow2Loc = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t$upperLimbLength = `getAttr ($modCore + $elbow1 + \"Jnt.translateX\")`;\n\t\t$lowerLimbLength = `getAttr ($modCore + $wristDummy + \".translateX\")`;\n\t\t$limbLength = (($upperLimbLength + $lowerLimbLength)/2);\n\t}\n\telse\n\t{\n\t\t$elbow1 = \"_Elbow1\";\n\t\t$elbow2 = \"_Elbow2\";\n\t\tif ($limbType == \"leg\")\n\t\t{\n\t\t\t$elbow1 = \"_Knee1\";\n\t\t\t$elbow2 = \"_Knee2\";\n\t\t}\t\t\t\n\t\t$elbow1Loc = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t$elbow2Loc = `xform -q -ws -rp ($modCore + $elbow2 + \"Jnt\")`;\n\t\t$upperLimbLength = `getAttr ($modCore + $elbow1 + \"Jnt.translateX\")`;\n\t\t$middleLimbLength = `getAttr ($modCore + $elbow2 + \"Jnt.translateX\")`;\n\t\t$lowerLimbLength = `getAttr ($modCore + $wristDummy + \".translateX\")`;\n\t\t//$limbLength = ($upperLimbLength + $middleLimbLength + $lowerLimbLength);\n\t\t$limbLength = (($upperLimbLength + $lowerLimbLength)/2);\n\t}\n\t\n\t//ADD CURVE ATTRIBUTES TO IK FK SWITCH\n\taddAttr -ln ($elbowType + \"Curve\")  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $elbowType + \"Curve\");\n\t\n\taddAttr -ln \"curve\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.curve\");\n\t\n\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Curve_MD1\");\n\tconnectAttr -force ($modCore + \"_SwitchCtrl.curve\") ($modCore + \"_Curve_MD1.input1X\");\n\tsetAttr ($modCore + \"_Curve_MD1.input2X\") 2;\n\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Curve_MD2\");\n\tconnectAttr -force ($modCore + \"_Curve_MD1.outputX\") ($modCore + \"_Curve_MD2.input1X\");\n\tconnectAttr -force ($modCore + $shoulder + \"FKCtrl.scaleX\") ($modCore + \"_Curve_MD2.input2X\");\n\t\n\t//ADD VISIBILITY ATTRIBUTES FOR CURVE CONTROLLERS\n\taddAttr -ln ($limbType + \"Twist\")  -at bool  -min 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $limbType + \"Twist\");\n\n\taddAttr -ln ($limbType + \"CurveMacro\")  -at bool  -min 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\");\n\t\n\taddAttr -ln ($limbType + \"CurveMicro\")  -at bool  -min 0 ($modCore + \"_SwitchCtrl\");\n\tsetAttr -e-keyable true ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMicro\");\n\t\n\t\n\t//GROUP FOR NODES\n\tgroup -em -n ($modCore + \"_curveNodesGrp\");\n\tparent ($modCore + \"_curveNodesGrp\") ($modCore + \"_ScaleGrp\");\n\tgroup -em -n ($modCore + \"_extraCurveNodesGrp\");\n\tsetAttr ($modCore + \"_extraCurveNodesGrp.inheritsTransform\") 0; \n\tparent ($modCore + \"_extraCurveNodesGrp\") ($modName + \"_MAINCtrl\");\n\t\n\t\n\twhile ($segInteger < $segSize || $segInteger <= 3)\n\t{\n\t\t//UPPER\n\t\t$seg = \"_Upper\";\n\t\t//$segStart = \"_Shoulder\";\n\t\t$segStart = $shoulder;\n\t\t$segEnd = $elbow1;\n\t\t$startPos = `xform -q -ws -rp ($modCore + $segStart + \"Jnt\")`;\n\t\t$endPos = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\tstring $segParentStartOrient = ($modCore + $clavicle + \"Jnt\");\n\t\tif ($limbType == \"leg\")\n\t\t{\n\t\t\t$segParentStartOrient = $modAttachNode;\n\t\t}\n\t\tstring $segEndOrient = ($modCore + $elbow1 + \"Jnt\");\n\t\t\n\t\tstring $topSegPosAttach = ($modCore + $shoulder + \"Jnt\");\n\t\tstring $topSegRotAttach = ($modCore + $parentNode);\n\t\tstring $btmSegPosAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\tstring $btmSegRotAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\tstring $ikSplineUpObject2 = ($modCore + $shoulder + \"Jnt\");\n\t\tstring $segStartUpOrientControl = ($modCore + $seg + \"_TwistCtrl\");\n\t\tstring $segEndUpOrientControl = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\n\t\tif ($segInteger == 2)\n\t\t{//LOWER\n\t\t\t$seg = \"_Lower\";\n\t\t\t$segStart = $elbow2;\n\t\t\t$segEnd = $wrist;\n\t\t\t$startPos = `xform -q -ws -rp ($modCore + $elbow2 + \"Jnt\")`;\n\t\t\t$endPos = `xform -q -ws -rp ($modCore + $wrist + \"Jnt\")`;\n\t\t\t$segParentStartOrient = ($modCore + $elbow2 + \"Jnt\");\n\t\t\t$segEndOrient = ($modCore + $wrist + \"Jnt\");\n\n\t\t\t$topSegPosAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$topSegRotAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$btmSegPosAttach = ($modCore + $wrist + \"Jnt\");\n\t\t\t$btmSegRotAttach = ($modCore + $wrist + \"Jnt\");\n\t\t\t$ikSplineUpObject2 = ($modCore + $wrist + \"JntGrp1\");\n\t\t\tif ($limbType == \"leg\")\n\t\t\t{\n\t\t\t\t$ikSplineUpObject2 = ($modCore + $wrist + \"Jnt\");\n\t\t\t}\n\t\t\t$segStartUpOrientControl = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t//$segEndUpOrientControl = ($modCore + $wrist + \"Jnt\");\n\t\t\t$segEndUpOrientControl = ($modCore + $seg + \"_TwistCtrl\");\n\t\t}\n\t\telse if ($segInteger == 3)\n\t\t{//MIDDLE\n\t\t\t$seg = \"_Middle\";\n\t\t\t$segStart = $elbow1;\n\t\t\t$segEnd = $elbow2;\n\t\t\t$startPos = `xform -q -ws -rp ($modCore + $elbow1 + \"Jnt\")`;\n\t\t\t$endPos = `xform -q -ws -rp ($modCore + $elbow2 + \"Jnt\")`;\n\t\t\t$segParentStartOrient = ($modCore + $elbow1 + \"Jnt\");\n\t\t\t$segEndOrient = ($modCore + $elbow2 + \"Jnt\");\n\n\t\t\t$topSegPosAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\t$topSegRotAttach = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\t$btmSegPosAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$btmSegRotAttach = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$ikSplineUpObject2 = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t\t$segStartUpOrientControl = ($modCore + $elbow1 + \"CurveCtrl\");\n\t\t\t$segEndUpOrientControl = ($modCore + $elbow2 + \"CurveCtrl\");\n\t\t}\n\t\t\n\t\tfloat $segLength;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tif ($segInteger != 2)\n\t\t\t{\n\t\t\t\t$segLength = `getAttr ($modCore + $segEnd + \"Jnt.tx\")`;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$segLength = `getAttr ($modCore + $wristDummy + \".tx\")`;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elbow1TX = `getAttr ($modCore + $elbow1 + \"Jnt.tx\")`;\n\t\t\t$elbow2TX = `getAttr ($modCore + $elbow2 + \"Jnt.tx\")`;\n\t\t\t$segLength = (($elbow1TX + $elbow2TX)*.667);\n\t\t}\n\n\t\t// SEGMENTS CHECK\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + $seg + \"1\")`)\n\t\t{\n\t\t\t//CREATE MAIN SPLINE CURVES FOR CONTROL GROUP ATTACHMENT\n\t\t\tcurve -n ($modCore + $seg + \"CurveAttach\") -d 1 -p $startPos[0] $startPos[1] $startPos[2]\n\t\t\t-p $endPos[0] $endPos[1] $endPos[2] -k 0 -k 1;\n\t\t\tdelete -ch ($modCore + $seg + \"CurveAttach\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveShape\");\n\t\n\t\t\trebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($modCore + $seg + \"CurveAttach\");\n\t\t\t\t\n\t\t\t//CREATE GUIDE SPLINE CURVES FOR MACRO CONTROL ATTACHMENT\n\t\t\tcurve -n ($modCore + $seg + \"CurveGuide\") -d 1 -p $startPos[0] $startPos[1] $startPos[2]\n\t\t\t-p $endPos[0] $endPos[1] $endPos[2] -k 0 -k 1 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveGuideShape\");\n\t\t\t\n\t\t\trebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($modCore + $seg + \"CurveGuide\");\n\t\t\tdelete -ch ($modCore + $seg + \"CurveAttach\") ($modCore + $seg + \"CurveGuide\");\n\t\t\t\n\t\t\tparent ($modCore + $seg + \"CurveAttach\") ($modCore + $seg + \"CurveGuide\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"CurveAttach.template\") 1;\n\t\t\tsetAttr ($modCore + $seg + \"CurveGuide.v\") 0;\n\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ty\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.v\");\n\t\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.tx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.ty\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.tz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveGuide.v\");\n\n\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $seg + \"CurveGuide\");\n\t\t\tsetAttr -e-keyable true ($modCore + $seg + \"CurveGuide.nonControl\");\n\t\t\tsetAttr -lock true ($modCore + $seg + \"CurveGuide.nonControl\");\n\n\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $seg + \"CurveAttach\");\n\t\t\tsetAttr -e-keyable true ($modCore + $seg + \"CurveAttach.nonControl\");\n\t\t\tsetAttr -lock true ($modCore + $seg + \"CurveAttach.nonControl\");\n\n\t\t\t//HIDE SHOULDER AND ELBOW JOINTS SO THEY DON'T GET CONFUSED WITH THE TOON JOINTS\n\t\t\t//DETERMINE VERSION NUMBER\n\t\t\t$versionNum = `getApplicationVersionAsFloat`;\n\t\t\tif ($versionNum >= 2011)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + $segStart + \"Jnt.drawStyle\") 2;\n\t\t\t\tif ($segInteger != 2)\n\t\t\t\t{\n\t\t\t\t\tsetAttr ($modCore + $segEnd + \"Jnt.drawStyle\") 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + $segStart + \"Jnt.visibility\") 0;\n\t\t\t\tif ($segInteger != 2)\n\t\t\t\t{\n\t\t\t\t\tsetAttr ($modCore + $segEnd + \"Jnt.visibility\") 0;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tcurve -n ($modCore + $seg + \"CurveCtrl\") -d 1 -p 0 0.4 0.4 -p 0 0.4 -0.4 -p 0 -0.4 -0.4 -p 0 -0.4 0.4 -p 0 0.4 0.4 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t\tsetAttr ($modCore + $seg + \"CurveCtrl.rotateOrder\") 1;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveCtrlShape\");\n\t\t\t\n\t\t\tsetAttr (($modCore + $seg + \"CurveCtrl.scale\"), ($limbLength*.75), ($limbLength*.75), ($limbLength*.75));\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $seg + \"CurveCtrl\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\") ($modCore + $seg + \"CurveCtrl.v\");\n\t\t\t\n\t\t\tgroup -n ($modCore + $seg + \"CurveCtrlGrp\") ($modCore + $seg + \"CurveCtrl\");\n\t\t\tsetAttr ($modCore + $seg + \"CurveCtrlGrp.rotateOrder\") 1;\n\t\t\tpathAnimation -n ($modCore + $seg + \"Guide_MP\") -fractionMode true -followAxis x -upAxis y -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 1 0 -inverseFront $inverseFront -worldUpObject ($modCore + $segStart + \"Jnt\") ($modCore + $seg + \"CurveCtrlGrp\") ($modCore + $seg + \"CurveGuide\");\n\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $seg + \"Guide_MP\");\n\t\t\tsetAttr ($modCore + $seg + \"Guide_MP.uValue\") .5;\n\t\t\t\n\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $seg + \"CurveCtrlGrp.scale\");\n\t\t\tparent ($modCore + $seg + \"CurveCtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveCtrl.v\");\n\n\t\n\t\t\t\n\t\t\tif (($segInteger == 1) || ($segInteger == 3 && !`objExists ($modCore + $segEnd + \"CurveCtrl\")`))\n\t\t\t{//ELBOW1 CONTROL\n\t\t\t\tcurve -n ($modCore + $segEnd + \"CurveCtrl\") -d 1 -p 0 0.4 0.4 -p 0 0.4 -0.4 -p 0 -0.4 -0.4 -p 0 -0.4 0.4 -p 0 0.4 0.4 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t\t\tsetAttr ($modCore + $segEnd + \"CurveCtrl.rotateOrder\") 1;\n\t\t\t\tpickWalk -d down;\n\t\t\t\trename ($modCore + $segEnd + \"CurveCtrlShape\");\n\t\t\t\tsetAttr (($modCore + $segEnd + \"CurveCtrl.scale\"), ($limbLength/1), ($limbLength/1), ($limbLength/1));\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $segEnd + \"CurveCtrl\");\n\t\n\t\t\t\tgroup -n ($modCore + $segEnd + \"CurveCtrlGrp\") ($modCore + $segEnd + \"CurveCtrl\");\n\t\t\t\tparent ($modCore + $segEnd + \"CurveCtrlGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\tpointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"CurveCtrlGrp\");\n\t\t\t\tdelete `orientConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"CurveCtrlGrp\")`;\n\t\t\t\torientConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"CurveCtrlGrp\");\n\t\t\t\tsetAttr ($modCore + $segEnd + \"CurveCtrlGrp_orientConstraint1.interpType\") 2;\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $segEnd + \"CurveCtrlGrp.scale\");\n\t\t\t\tparent ($modCore + $segEnd + \"CurveCtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $elbowType + \"Curve\") ($modCore + $segEnd + \"CurveCtrlGrp_orientConstraint1.\" + $modCore + $segStart + \"JntW0\");\n\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\") ($modCore + $segEnd + \"CurveCtrl.v\");\t\t\t\t\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.sx\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.sy\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.sz\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segEnd + \"CurveCtrl.v\");\n\t\t\t}//ELBOW1 CONTROL\n\t\t\t\n\t\t\tif (($segInteger == 2 && $elbow2 == \"_Elbow2\") || ($segInteger != 1 && !`objExists ($modCore + $segStart + \"CurveCtrl\")`))\n\t\t\t{//ELBOW2 CONTROL\n\t\t\t\tcurve -n ($modCore + $segStart + \"CurveCtrl\") -d 1 -p 0 0.4 0.4 -p 0 0.4 -0.4 -p 0 -0.4 -0.4 -p 0 -0.4 0.4 -p 0 0.4 0.4 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t\t\tsetAttr ($modCore + $segStart + \"CurveCtrl.rotateOrder\") 1;\n\t\t\t\tpickWalk -d down;\n\t\t\t\trename ($modCore + $segStart + \"CurveCtrlShape\");\n\t\t\t\tsetAttr (($modCore + $segStart + \"CurveCtrl.scale\"), ($limbLength/1), ($limbLength/1), ($limbLength/1));\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $segStart + \"CurveCtrl\");\n\t\n\t\t\t\tgroup -n ($modCore + $segStart + \"CurveCtrlGrp\") ($modCore + $segStart + \"CurveCtrl\");\n\t\t\t\tparent ($modCore + $segStart + \"CurveCtrlGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\tpointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"CurveCtrlGrp\");\n\t\t\t\tdelete `orientConstraint ($modCore + $elbow1 + \"Jnt\") ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"CurveCtrlGrp\")`;\n\t\t\t\torientConstraint -mo ($modCore + $elbow1 + \"Jnt\") ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"CurveCtrlGrp\");\n\t\t\t\tsetAttr ($modCore + $segStart + \"CurveCtrlGrp_orientConstraint1.interpType\") 2;\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $segStart + \"CurveCtrlGrp.scale\");\n\t\t\t\tparent ($modCore + $segStart + \"CurveCtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $elbowType + \"Curve\") ($modCore + $segStart + \"CurveCtrlGrp_orientConstraint1.\" + $modCore + $elbow1 + \"JntW0\");\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMacro\") ($modCore + $segStart + \"CurveCtrl.v\");\t\t\t\t\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.sx\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.sy\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.sz\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $segStart + \"CurveCtrl.v\");\n\t\t\t}//ELBOW2 CONTROL\n\t\t\t\t\n\t\t\t//CURVE CLUSTERS\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[0:1]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"TopClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"TopClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + \"TopClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"TopClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"TopClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"TopClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"TopClstr\") ($modCore + $seg + \"TopClstrGrp\");\n\t\n\t\t\tpointConstraint -mo  $topSegPosAttach ($modCore + $seg + \"TopClstrGrp\");\n\t\t\torientConstraint -mo $topSegRotAttach ($modCore + $seg + \"TopClstrGrp\");\n\t\t\t\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[3:4]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"BtmClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"BtmClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"BtmClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"BtmClstr\") ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\t\t\n\t\t\tdelete `orientConstraint $segEndOrient ($modCore + $seg + \"BtmClstrGrp\")`;\n\n\t\t\tpointConstraint -mo  $btmSegPosAttach ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\torientConstraint -mo $btmSegRotAttach ($modCore + $seg + \"BtmClstrGrp\");\n\t\t\t\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[2]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"MidClstr\");\n\t\t\t\n\t\t\tparentConstraint ($modCore + $seg + \"CurveCtrl\") ($modCore + $seg + \"MidClstr\");\n\t\t\tparent ($modCore + $seg + \"MidClstr\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"MidClstr.v\") 0;\n\t\n\t\t\t//GUIDE CURVE CLUSTERS\n\t\t\tselect ($modCore + $seg + \"CurveGuide.cv[0:1]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"TopGuideClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segStart + \"FKCtrl\") ($modCore + $seg + \"TopGuideClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"TopGuideClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"TopGuideClstr\") ($modCore + $seg + \"TopGuideClstrGrp\"); \n\t\t\t\n\t\t\tpointConstraint -mo  $topSegPosAttach ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\t\torientConstraint -mo $topSegRotAttach ($modCore + $seg + \"TopGuideClstrGrp\");\n\t\n\t\t\tselect ($modCore + $seg + \"CurveGuide.cv[2:3]\") ;\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"BtmGuideClstr\");\n\t\t\tgroup -em -n ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"BtmGuideClstrGrp\")`;\n\t\t\tparent ($modCore + $seg + \"BtmGuideClstrGrp\") ($modCore + $segStart + \"Jnt\");\n\t\t\tmakeIdentity -apply false -r 1 ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\tparent -w ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\tparent ($modCore + $seg + \"BtmGuideClstr\") ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\n\t\t\tdelete `orientConstraint $segEndOrient ($modCore + $seg + \"BtmGuideClstrGrp\")`;\n\t\t\t\n\t\t\tpointConstraint -mo  $btmSegPosAttach ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\t\torientConstraint -mo $btmSegRotAttach ($modCore + $seg + \"BtmGuideClstrGrp\");\n\t\n\t\t\t//CONNECT SCALE TO OF THE CLUSTER GROUPS TO CURVE ATTRIBUTE TO MAKE THE ARM CURVES STRAIGHT\t\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"TopClstrGrp.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"BtmClstrGrp.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"TopGuideClstrGrp.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Curve_MD2.outputX\") ($modCore + $seg + \"BtmGuideClstrGrp.scaleX\");\n\t\t\t\n\t\t\t//PARENT CLUSTERS\n\t\t\tparent ($modCore + $seg + \"TopClstrGrp\") ($modCore + $seg + \"BtmClstrGrp\")\n\t\t\t($modCore + $seg + \"TopGuideClstrGrp\") ($modCore + $seg + \"BtmGuideClstrGrp\")\n\t\t\t($modCore + \"_curveNodesGrp\");\n\t\t\t\n\t\t\t//HIDE CLUSTERS\n\t\t\tsetAttr ($modCore + $seg + \"TopClstrGrp.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"BtmClstrGrp.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"TopGuideClstrGrp.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"BtmGuideClstrGrp.v\") 0;\n\t\t\t\n\t\t\t\n\t\t\t//CREATE NON-FLIP JOINT CHAIN\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + $seg + $segStart + \"_NoRollJoint\");\n\t\t\tsetAttr ($modCore + $seg + $segStart + \"_NoRollJoint.v\") 0;\n\t\t\tgroup -n ($modCore + $seg + $segStart + \"_NoRollJointGrp\"); \n\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_NoRollJointGrp\")`;\n\t\t\tif ($prfx == \"r_\")\n\t\t\t{\n\t\t\t\trotate -r 0 180 0 ($modCore + $seg + $segStart + \"_NoRollJointGrp\");\n\t\t\t}\n\t\t\tparentConstraint -mo $segParentStartOrient ($modCore + $seg + $segStart + \"_NoRollJointGrp\");\n\t\t\tpointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_NoRollJoint\");\n\t\t\tselect -cl;\n\t\t\t\n\t\t\tjoint -n ($modCore + $seg + $segEnd + \"_NoRollJoint\") -p $endPos[0] $endPos[1] $endPos[2];\n\t\t\tparent ($modCore + $seg + $segEnd + \"_NoRollJoint\") ($modCore + $seg + $segStart + \"_NoRollJoint\");\n\t\t\tsetAttr (($modCore + $seg + $segEnd + \"_NoRollJoint.jointOrient\"), 0, 0, 0);\n\t\t\t$segNoFlipLength = `getAttr ($modCore + $seg + $segEnd + \"_NoRollJoint.translateX\")`;\n\t\t\t\n\t\t\t//CREATE IK RP HANDLE\n\t\t\tselect ($modCore + $seg + $segStart + \"_NoRollJoint.rotatePivot\") ($modCore + $seg + $segEnd + \"_NoRollJoint.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + $seg + $segStart + \"NoRollIKHandle\") -sol ikRPsolver;\n\t\t\tsetAttr (($modCore + $seg + $segStart + \"NoRollIKHandle.poleVector\"), 0, 0, 0);\n\t\t\tparentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + $segStart + \"NoRollIKHandle\");\n\t\t\t\n\t\t\tparent ($modCore + $seg + $segStart + \"_NoRollJointGrp\") ($modCore + $seg + $segStart + \"NoRollIKHandle\") ($modCore + \"_curveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + $segStart + \"NoRollIKHandle.v\") 0;\n\n\t\t\t//CREATE TWIST JOINT CHAIN\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistStartJoint.v\") 0;\n\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistStartJoint\")`;\n\t\t\tif ($prfx == \"r_\" && $limbType == \"arm\")\n\t\t\t{\n\t\t\t\trotate -r -os 0 180 0 ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\t}\n\t\t\tpointConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\tselect -cl;\n\t\t\t\n\t\t\tjoint -n ($modCore + $seg + $segStart + \"_TwistEndJoint\") -p $endPos[0] $endPos[1] $endPos[2];\n\t\t\tparent ($modCore + $seg + $segStart + \"_TwistEndJoint\") ($modCore + $seg + $segStart + \"_TwistStartJoint\");\n\t\t\tsetAttr (($modCore + $seg + $segStart + \"_TwistEndJoint.jointOrient\"), 0, 0, 0);\n\t\t\t$segNoFlipLength = `getAttr ($modCore + $seg + $segStart + \"_TwistEndJoint.translateX\")`;\n\t\t\t\n\t\t\tgroup -em -n ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\tdelete `pointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistJointsGrp\")`;\n\t\t\tmakeIdentity -apply true -t 1 ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\tparentConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\tparent ($modCore + $seg + $segStart + \"_TwistStartJoint\") ($modCore + $seg + $segStart + \"_TwistJointsGrp\");\n\t\t\t\n\t\t\tparent ($modCore + $seg + $segStart + \"_TwistJointsGrp\") ($modCore + \"_curveNodesGrp\");\n\t\n\t\n\t\t\t//////////////////////////////////////////////////////////////////////////////\n\t\t\t////////////////////////////CREATE ARM ROLL JOINTS////////////////////////////////\n\t\t\t//////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t\t$rollProxies = `ls (\"RRM_\" + $prfx + $core + $seg + \"?\")`;\n\t\t\t$sizeRollProxies = `size $rollProxies`;\n\t\t\tint $rpNum = 1;\n\t\t\tfor ($eachRP in $rollProxies)\n\t\t\t{//CREATE TWIST JOINTS\n\t\t\t\t$rpNumRev = (($sizeRollProxies + 1) - $rpNum);\n\t\t\t\t\n\t\t\t\t//EXTRA TWIST JOINTS\n\t\t\t\tfloat $rpNumFloat = $rpNum;\n\t\t\t\tfloat $sizeRollProxiesFloat = $sizeRollProxies;\n\t\t\t\t\n\t\t\t\tduplicate -n ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum) ($modCore + $seg + $segStart + \"_TwistEndJoint\");\n\t\t\t\tfloat $noFlipSpacing = ($segNoFlipLength /($sizeRollProxiesFloat + 1));\n\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum + \".translateX\") $noFlipSpacing;\n\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistEndJoint\") ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum);\n\t\t\t\t\n\t\t\t\tif ($rpNum == $sizeRollProxies)\n\t\t\t\t{\n\t\t\t\t\t//ADD TWIST\n\t\t\t\t\t//CREATE TWIST CONTROLS\n\t\t\t\t\tif ($segInteger == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcircle -n ($modCore + $seg + \"_TwistCtrl\") -c 0 0 0 -nr 0 1 0 -sw 45 -r 0.8 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\t\t\t\t\trotate -r 0 -22.5 0 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segStart + \"_WedgeCtrl\") -d 1 -p -0.306147 0 -0.739104 -p 0 0 -0.432436 -p 0.306147 0 -0.739104 -k 0 -k 1 -k 2 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segStart + \"_WedgeCtrlShape\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segStart + \"_lineCtrl\") -d 1 -p 0 0 -0.432436 -p 0 0 0 -k 0 -k 1 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segStart + \"_lineCtrlShape\");\n\t\t\t\t\t\tparent -r -s ($modCore + $seg + $segStart + \"_WedgeCtrlShape\") ($modCore + $seg + $segStart + \"_lineCtrlShape\") ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tdelete ($modCore + $seg + $segStart + \"_WedgeCtrl\") ($modCore + $seg + $segStart + \"_lineCtrl\");\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.rotate\"), 0, -90, (90*$multiplier));\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.scale\"), ($limbLength/2), ($limbLength/2), ($limbLength/2));\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"Twist\") ($modCore + $seg + \"_TwistCtrl.v\");\t\t\t\t\n\t\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\t\t\t\t\t\tgroup -n ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + \"_TwistCtrl\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\tgroup -n ($modCore + $seg + $segStart + \"_TwistGrp\") ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + $segEnd + \"_TwistLctr\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\tsetAttr ($modCore + $seg + $segEnd + \"_TwistLctr.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistGrp\")`;\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $shoulder + $FKCtrlGrp) ($modCore + $seg + $segStart + \"_TwistGrp\");\n\t\t\t\t\t\t//parent ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp2);\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $seg + $segStart + \"_NoRollJoint\") ($modCore + $seg + \"_TwistCtrlGrp\");\n\t\t\t\t\t\tparentConstraint $ikSplineUpObject2 ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.ty\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tz\");\n\t\t\t\t\t\t//setAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.ry\");\n\t\t\t\t\t\t//setAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.rz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sy\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.v\");\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if ($segInteger == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tcircle -n ($modCore + $seg + \"_TwistCtrl\") -c 0 0 0 -nr 0 1 0 -sw 45 -r 0.8 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\t\t\t\t\trotate -r 0 -22.5 0 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segEnd + \"_WedgeCtrl\") -d 1 -p -0.306147 0 -0.739104 -p 0 0 -0.432436 -p 0.306147 0 -0.739104 -k 0 -k 1 -k 2 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segEnd + \"_WedgeCtrlShape\");\n\t\t\t\t\t\tcurve -n ($modCore + $seg + $segEnd + \"_lineCtrl\") -d 1 -p 0 0 -0.432436 -p 0 0 0 -k 0 -k 1 ;\n\t\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t\trename ($modCore + $seg + $segEnd + \"_lineCtrlShape\");\n\t\t\t\t\t\tparent -r -s ($modCore + $seg + $segEnd + \"_WedgeCtrlShape\") ($modCore + $seg + $segEnd + \"_lineCtrlShape\") ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tdelete ($modCore + $seg + $segEnd + \"_WedgeCtrl\") ($modCore + $seg + $segEnd + \"_lineCtrl\");\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.rotate\"), 0, -90, (90*$multiplier));\n\t\t\t\t\t\tsetAttr (($modCore + $seg + \"_TwistCtrl.scale\"), ($limbLength/2.5), ($limbLength/2.5), ($limbLength/2.5));\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + $seg + \"_TwistCtrl\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"Twist\") ($modCore + $seg + \"_TwistCtrl.v\");\t\t\t\t\n\t\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\t\t\t\t\t\tgroup -n ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + \"_TwistCtrl\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\tgroup -n ($modCore + $seg + $segEnd + \"_TwistGrp\") ($modCore + $seg + \"_TwistCtrlGrp\") ($modCore + $seg + $segEnd + \"_TwistLctr\"); xform -os -piv 0 0 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tparent ($modCore + $seg + $segEnd + \"_TwistGrp\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\tsetAttr ($modCore + $seg + $segEnd + \"_TwistLctr.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + $segEnd + \"_TwistGrp\")`;\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + $segEnd + \"_TwistGrp\");\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"_TwistCtrlGrp\");\n\t\t\t\t\t\t//parentConstraint -mo ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\") ($modCore + $seg + \"_TwistCtrlGrp\");\n\t\t\t\t\t\tparentConstraint $ikSplineUpObject2 ($modCore + $seg + $segEnd + \"_TwistLctr\");\n\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.ty\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.tz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sx\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sy\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.sz\");\n\t\t\t\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + $seg + \"_TwistCtrl.v\");\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\");\n\t\t\t\t\tspaceLocator -n ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\");\n\t\t\t\t\tparentConstraint $segStartUpOrientControl ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\");\n\t\t\t\t\tparentConstraint $segEndUpOrientControl ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\");\n\t\t\t\t\t\n\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\") ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr\") ($modCore + \"Grp\");\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr.v\") 0;\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr.v\") 0;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//SPLINE SETUP/////\n\t\t\t\t\t//CREATE ONE EXTRA JOINT TO BETTER DISTRIBUTE THE ROLL\n\t\t\t\t\tduplicate -n ($modCore + $seg + $segStart + \"_TwistJointExtraJoint\") ($modCore + $seg + $segStart + \"_TwistEndJoint\");\n\t\t\t\t\tfloat $noFlipSpacing = ($segNoFlipLength /(($sizeRollProxiesFloat + 1)*2));\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistJointExtraJoint\" + \".translateX\") $noFlipSpacing;\n\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistEndJoint\") ($modCore + $seg + $segStart + \"_TwistJointExtraJoint\");\n\t\t\t\t\t\n\t\t\t\t\t//SPLINE IK\n\t\t\t\t\tselect ($modCore + $seg + $segStart + \"_TwistStartJoint.rotatePivot\") ($modCore + $seg + $segStart + \"_TwistEndJoint.rotatePivot\") ;\n\t\t\t\t\tikHandle -n ($modCore + $seg + $segStart + \"_TwistSplineIKHandle\") -sol ikSplineSolver;\n\t\t\t\t\t$splineIKCurve = `listConnections -s 1 -d 0 -type \"nurbsCurve\" ($modCore + $seg + $segStart + \"_TwistSplineIKHandle\")`;\n\t\t\t\t\trename $splineIKCurve ($modCore + $seg + $segStart + \"_TwistSplineIKCurve\");\n\t\t\t\t\tparentConstraint -mo ($modCore + $segStart + \"Jnt\") ($modCore + $seg + $segStart + \"_TwistSplineIKCurve\");\n\t\t\t\t\t\n\t\t\t\t\tparent ($modCore + $seg + $segStart + \"_TwistSplineIKHandle\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.v\") 0;\n\t\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dTwistControlEnable\") 1;\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dWorldUpType\")  4;\n\t\n\t\t\t\t\tconnectAttr -f ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr.xformMatrix\") ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dWorldUpMatrix\");\n\t\t\t\t\tconnectAttr -f ($modCore + $seg + $segStart + \"_TwistSplineIK_Up2Lctr.xformMatrix\") ($modCore + $seg + $segStart + \"_TwistSplineIKHandle.dWorldUpMatrixEnd\");\n\n\t\t\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $seg + $segStart + \"_TwistSplineIKCurve\");\n\t\t\t\t\tsetAttr -e-keyable true ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.nonControl\");\n\t\t\t\t\tsetAttr -lock true ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.nonControl\");\n\n\t\t\t\t\tsetAttr ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.v\") 0;\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.tx\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.ty\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.tz\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.rx\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.ry\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.rz\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.sx\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.sy\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.sz\");\n\t\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + $segStart + \"_TwistSplineIKCurve.v\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t//INDIVIDUAL ARM JOINTS AND CONTROLS\n\t\t\t\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\t\tcircle -n ($modCore + $seg + \"_Curve\" + $rpNum + \"Cb\") -c 0 0 2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\t\t\tcircle -n ($modCore + $seg + \"_Curve\" + $rpNum + \"Cc\") -c 0 0 -2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\t\t\tcurve -n  ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\") -d 1 -p 0 0 -2 -p 0 0 2 -k 0 -k 1 ;\n\t\t\t\tpickWalk -d down;\n\t\t\t\trename ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlShape\");\n\t\n\t\t\t\tparent -r -s ($modCore + $seg + \"_Curve\" + $rpNum + \"CbShape\") ($modCore + $seg + \"_Curve\" + $rpNum + \"CcShape\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tdelete ($modCore + $seg + \"_Curve\" + $rpNum + \"Cb\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Cc\");\n\t\t\t\t\n\t\t\t\tsetAttr ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl.rotateOrder\") 1;\n\t\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.\" + $limbType + \"CurveMicro\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl.v\");\n\t\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl.v\");\n\t\t\t\t\n\t\n\t\t\t\tscale -r ($segLength/6) ($segLength/6) ($segLength/6) ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tdelete -ch ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\t\t\n\t\t\t\tgroup -n ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\t\t\tsetAttr ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp.rotateOrder\") 1;\n\t\t\t\t\n\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp.scale\");\n\t\t\t\tparent ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\");\n\t\t\t\tparentConstraint ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\");\n\t\t\t\tscaleConstraint  ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_BlndScale.outputR\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt.scaleX\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt.scaleY\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt.scaleZ\");\n\t\t\t\tparent ($modCore + $seg + \"_Curve\" + $rpNum + \"Jnt\") ($modCore + \"_curveNodesGrp\");\n\t\n\t\t\t\t//ATTACH TO PATH\n\t\t\t\tfloat $segDivider = ($sizeRollProxies + 1);\n\t\t\t\tfloat $percentage = ($rpNumFloat/$segDivider);\n\t\n\t\t\t\t//NO FLIP JOINTS UP\n\t\t\t\tpathAnimation -n ($modCore + $seg + \"\" + $rpNum + \"_MP\") -fractionMode true -followAxis x -upAxis y-worldUpType \"objectrotation\"\n\t\t\t\t-worldUpVector 0 1 0 -inverseFront $inverseFront -worldUpObject ($modCore + $seg + $segStart + \"_TwistJoint\" + $rpNum) ($modCore + $seg + \"_Curve\" + $rpNum + \"CtrlGrp\") ($modCore + $seg + \"CurveAttach\");\n\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $seg + \"\" + $rpNum + \"_MP\");\n\t\t\t\tsetAttr ($modCore + $seg + \"\" + $rpNum + \"_MP.uValue\") $percentage;\n\t\t\t\t\n\t\t\t\t//MOVE CURVE AND JOINT TO THE PROXY\n\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $seg + $rpNum) ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\")`;\n\t\t\t\tmakeIdentity -apply true -t 1 ($modCore + $seg + \"_Curve\" + $rpNum + \"Ctrl\");\n\t\n\t\t\t\tselect -cl;\n\t\t\t\t$rpNum++;\n\t\t\t}//CREATE TWIST JOINTS\n\t\t\t\n\t\t\t//CREATE TOP CURVE JOINT\n\t\t\tif (!`objExists ($modCore + $segStart + \"_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\tdelete `parentConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"_CurveJnt\")`;\n\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\tif ($segInteger == 1)\n\t\t\t\t{\n\t\t\t\t\t//TARGET LOCATOR\n\t\t\t\t\tspaceLocator -n ($modCore + $segStart + \"_CurveJnt_AimLctr\");\n\t\t\t\t\tgroup -n ($modCore + $segStart + \"_CurveJnt_AimLctrGrp\");\n\t\t\t\t\tpathAnimation -n ($modCore + $segStart + \"_CurveJnt_AimLctr_MP\") -fractionMode true -followAxis x -upAxis y-worldUpType \"objectrotation\"\n\t\t\t\t\t-worldUpVector 0 1 0 -inverseFront $inverseFront -worldUpObject ($modCore + $seg + $segStart + \"_NoRollJoint\") ($modCore + $segStart + \"_CurveJnt_AimLctrGrp\") ($modCore + $seg + \"CurveAttach\");\n\t\t\t\t\tcutKey -cl -t \":\" -f \":\" -at \"u\" ($modCore + $segStart + \"_CurveJnt_AimLctr_MP\");\n\t\t\t\t\tsetAttr ($modCore + $segStart + \"_CurveJnt_AimLctr_MP.uValue\") 0.002;\n\t\t\t\t\t\n\t\t\t\t\tparent ($modCore + $segStart + \"_CurveJnt_AimLctrGrp\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\tsetAttr ($modCore + $segStart + \"_CurveJnt_AimLctrGrp.v\") 0;\n\t\t\t\t\t\n\t\t\t\t\tpointConstraint ($modCore + $segStart + \"Jnt\") ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t\t\t\t\t-worldUpVector 0 1 0 -worldUpObject ($modCore + $seg + $segStart + \"_TwistSplineIK_Up1Lctr\") ($modCore + $segStart + \"_CurveJnt_AimLctr\") ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_BlndScale.outputR\") ($modCore + $segStart + \"_CurveJnt.scaleX\");\n\t\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segStart + \"_CurveJnt.scaleY\");\n\t\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segStart + \"_CurveJnt.scaleZ\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparentConstraint ($modCore + $segStart + \"CurveCtrl\") ($modCore + $segStart + \"_CurveJnt\");\n\t\t\t\t}\n\t\t\t\tparent ($modCore + $segStart + \"_CurveJnt\") ($modCore + \"_curveNodesGrp\");\n\t\t\t}\n\t\t\t//CREATE BOTTOM CURVE JOINT\n\t\t\tif (($segInteger != 2) && (!`objExists ($modCore + $segEnd + \"_CurveJnt\")`))\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\tdelete `parentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"_CurveJnt\")`;\n\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\tif ($segInteger == 1)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tparentConstraint ($modCore + $segEnd + \"CurveCtrl\") ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparentConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $segEnd + \"_CurveJnt\");\n\t\t\t\t}\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_BlndScale.outputR\") ($modCore + $segEnd + \"_CurveJnt.scaleX\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segEnd + \"_CurveJnt.scaleY\");\n\t\t\t\tconnectAttr -f ($modCore + $segStart + \"JntIKFK_AutoBlnd.outputR\") ($modCore + $segEnd + \"_CurveJnt.scaleZ\");\n\t\t\t\tparent ($modCore + $segEnd + \"_CurveJnt\") ($modCore + \"_curveNodesGrp\");\n\t\t\t}\n\t    }//CREATE JOINTS AND CONTROLS FOR EACH PROXY\n\t    else\n\t    {//CREATE CONNECTOR LINES ONLY\n\t\t\t//CREATE GUIDE SPLINE CURVES FOR MACRO CONTROL ATTACHMENT\n\t\t\tcurve -n ($modCore + $seg + \"CurveAttach\") -d 1 -p $startPos[0] $startPos[1] $startPos[2]\n\t\t\t-p $endPos[0] $endPos[1] $endPos[2] -k 0 -k 1 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + $seg + \"CurveAttachShape\");\n\t\t\tdelete -ch ($modCore + $seg + \"CurveAttach\");\n\t\t\t\n\t\t\t//CREATE CLUSTERS FOR EACH END\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[0]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"TopGuideClstr\");\n\t\t\t\n\t\t\tpointConstraint  ($modCore + $segStart + \"Jnt\") ($modCore + $seg + \"TopGuideClstr\");\n\t\t\t\n\t\t\tselect ($modCore + $seg + \"CurveAttach.cv[1]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + $seg + \"BtmGuideClstr\");\n\t\t\t\t\t\t\n\t\t\tpointConstraint ($modCore + $segEnd + \"Jnt\") ($modCore + $seg + \"BtmGuideClstr\");\n\n\t\t\tparent ($modCore + $seg + \"CurveAttach\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"CurveAttach.template\") 1;\n\t\t\t\n\t\t\tparent ($modCore + $seg + \"TopGuideClstr\") ($modCore + $seg + \"BtmGuideClstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\tsetAttr ($modCore + $seg + \"TopGuideClstr.v\") 0;\n\t\t\tsetAttr ($modCore + $seg + \"BtmGuideClstr.v\") 0;\n\t\t\t\t\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ty\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.tz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.ry\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.rz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sx\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sy\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.sz\");\n\t\t\tsetAttr -lock 1 -keyable 0 -channelBox 0 ($modCore + $seg + \"CurveAttach.v\");\n\t    }\n\t\t$segInteger ++;\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE ARM MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_GenerateRigArm(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$core = `getAttr ($topNode + \".core\")`;\n\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tint $inverseFront = 0;\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$i = 0;\n\n\t//ARM\n\twhile ($i !=2)\n\t{\n\t\tif (!`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\t$prfx = \"\";\n\t\t\t$oppPrfx = \"\";\n\t\t\tselect $topNode;\n\t\t\t\n\t\t\t$crntSide = `getAttr ($topNode + \".single\")`;\n\t\t\tif ($crntSide == \"right\")\n\t\t\t{\n\t\t\t\t$multiplier = -1;\n\t\t\t\t$inverseFront = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\t\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"arm\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFICtrl ATTRIBUTES\n\t\t//UPPER ROLL JOINTS\n\t\tint $sizeUpperCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$UpperCJnt = `ls ($modCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperCJnt = `size $UpperCJnt`;\n\t\t}\n\t\taddAttr -ln \"upperRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.upperRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.upperRoll\") $sizeUpperCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.upperRoll\");\n\t\t\n\t\tint $sizeLowerCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$LowerCJnt = `ls ($modCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeLowerCJnt = `size $LowerCJnt`;\n\t\t}\n\t\taddAttr -ln \"lowerRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.lowerRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.lowerRoll\") $sizeLowerCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.lowerRoll\");\n\t\n\t\n\t\taddAttr -ln \"elbowNum\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.elbowNum\") ;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.elbowNum\") \"1\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.elbowNum\") \"2\";\n\t\t}\t\t\n\t\tsetAttr -l true ($modCore + \"Grp.elbowNum\");\n\t\t\n\t\n\t\tint $sizeMiddleCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$MiddleCJnt = `ls ($modCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCJnt = `size $MiddleCJnt`;\n\t\t}\n\t\taddAttr -ln \"midRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.midRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.midRoll\") $sizeMiddleCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.midRoll\");\n\t\t\n\t\t\n\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Clavicle\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Clavicle\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\n\t\t\n\t\t//CONTROLS\n\t\t\n\t\t//SCALE\n\t\tfloat $ArmLength;\n\t\tfloat $elbowLength[];\n\t\tfloat $elbow1Length[];\n\t\tfloat $elbow2Length[];\n\t\tfloat $WristLength[];\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_EndLctr\")`;\n\t\t\t$elbowLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_EndLctr\")`;\n\t\t\t$WristLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t$ArmLength = (($elbowLength[0] + $WristLength[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_EndLctr\")`;\n\t\t\t$elbow1Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_EndLctr\")`;\n\t\t\t$elbow2Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_EndLctr\")`;\n\t\t\t$WristLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\n\t\t\t$ArmLength = (($elbow1Length[0] + $elbow2Length[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\t\n\n\t\t//CLAVICLE CONTROL\n\t\tcircle -n ($modCore + \"_ClavicleCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tdelete -ch ($modCore + \"_ClavicleCtrl\");\n\t\tsetAttr ($modCore + \"_ClavicleCtrl.rotateOrder\") 1;\n\t\tmove -r ($multiplier * 1.35) 2 0 ($modCore + \"_ClavicleCtrl.cv[3]\") ($modCore + \"_ClavicleCtrl.cv[7]\") ;\n\t\tmove -r ($multiplier * 0.5) 1.25 0 ($modCore + \"_ClavicleCtrl.cv[2]\") ($modCore + \"_ClavicleCtrl.cv[4]\") ($modCore + \"_ClavicleCtrl.cv[0]\") ($modCore + \"_ClavicleCtrl.cv[6]\") ;\n\t\tgroup -n ($modCore + \"_ClavicleCtrlGrp\") ($modCore + \"_ClavicleCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_ClavicleCtrlGrp.rotateOrder\") 1;\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Clavicle\") ($modCore + \"_ClavicleCtrlGrp\")`;\n\t\t\n\t\tsetAttr (($modCore + \"_ClavicleCtrlGrp.scale\"), (($ArmLength/2) * 0.4), (($ArmLength/2) * 1), (($ArmLength/2) * 1.25));\n\t\t\n\t\tmakeIdentity -apply true -t 0 -s 1 ($modCore + \"_ClavicleCtrlGrp\");\n\t\t\n\t\t//SHOULDER FK CONTROL\n\t\tcircle -n ($modCore + \"_ShoulderFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tdelete -ch ($modCore + \"_ShoulderFKCtrl\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.rotateOrder\") 1;\n\t\tgroup -n ($modCore + \"_ShoulderFKCtrlGrp\") ($modCore + \"_ShoulderFKCtrl\");\n\t\tgroup -n ($modCore + \"_ShoulderFKCtrlGrp2\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_ShoulderFKCtrlGrp2\")`;\n\t\tfloat $upVector = 1;\n\t\tfloat $elbowLocCheck;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\t$elbowLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Elbow.translateZ\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elbowLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Elbow1.translateZ\")`;\n\t\t}\n\t\tif ($elbowLocCheck > 0.0001)\n\t\t{\n\t\t\t$upVector = -1;\n\t\t}\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_ShoulderFKCtrlGrp2\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_ShoulderFKCtrlGrp2\")`;\n\t\t}\n\t\t\n\t\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\t\n\t\tsetAttr (($modCore + \"_ShoulderFKCtrl.scale\"), ($ArmLength/2), ($ArmLength/2), ($ArmLength/2));\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_ShoulderFKCtrlGrp2\");\n\t\t\t\n\t\t//ELBOW FK CONTROL\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_ElbowFKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\tparent -w ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_ElbowFKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_ElbowFKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_ElbowFKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_Elbow1FKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\tparent -w ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow1FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_Elbow1FKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 $upVector 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_Elbow1FKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\t\n\t\t\tduplicate -n ($modCore + \"_Elbow2FKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\tparent -w ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow2FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_Elbow2FKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\t}\n\n\t\t//WRIST FK CONTROL\n\t\tduplicate -n ($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\tparent -w ($modCore + \"_WristFKCtrlGrp\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_WristFKCtrlGrp\")`;\n\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_WristFKCtrlGrp\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_WristFKCtrlGrp\");\n\t\tselect ($modCore + \"_WristFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_WristFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_WristFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_WristFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_WristFKCtrl\");\n\t\n\t\n\t\t//////////////////////JOINTS//////////////////////\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_ClavicleJnt\");\n\t\tsetAttr ($modCore + \"_ClavicleJnt.rotateOrder\") 1;\n\t\tdelete `parentConstraint ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ClavicleJnt\")`;\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_ShoulderJnt\");\n\t\tsetAttr ($modCore + \"_ShoulderJnt.rotateOrder\") 1;\n\t\tdelete `parentConstraint ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJnt\")`;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_ElbowJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ElbowJnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJnt\")`;\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJDummy\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJDummy\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_ClavicleJnt\") ($modCore + \"_ShoulderJnt\")\n\t\t\t($modCore + \"_ElbowJnt\") ($modCore + \"_WristJnt\") ($modCore + \"_WristJDummy\");\n\t\t\t\n\t\t\tparent ($modCore + \"_ShoulderJnt\") ($modCore + \"_ClavicleJnt\");\n\t\t\tparent ($modCore + \"_ElbowJnt\")  ($modCore + \"_ShoulderJnt\");\n\t\t\tparent ($modCore + \"_WristJnt\") ($modCore + \"_ElbowJnt\");\n\t\t\tparent ($modCore + \"_WristJDummy\") ($modCore + \"_ElbowJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Elbow1Jnt\");\n\t\t\tsetAttr ($modCore + \"_Elbow1Jnt.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow1Jnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Elbow2Jnt\");\n\t\t\tsetAttr ($modCore + \"_Elbow2Jnt.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_Elbow2Jnt\")`;\n\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJnt\")`;\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_WristJDummy\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJDummy\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_ClavicleJnt\") ($modCore + \"_ShoulderJnt\")\n\t\t\t($modCore + \"_Elbow1Jnt\") ($modCore + \"_Elbow2Jnt\") ($modCore + \"_WristJnt\") ($modCore + \"_WristJDummy\");\n\t\n\t\t\tparent ($modCore + \"_ShoulderJnt\") ($modCore + \"_ClavicleJnt\");\n\t\t\tparent ($modCore + \"_Elbow1Jnt\")  ($modCore + \"_ShoulderJnt\");\n\t\t\tparent ($modCore + \"_Elbow2Jnt\") ($modCore + \"_Elbow1Jnt\"); \n\t\t\tparent ($modCore + \"_WristJnt\") ($modCore + \"_Elbow2Jnt\");\n\t\t\tparent ($modCore + \"_WristJDummy\") ($modCore + \"_Elbow2Jnt\");\n\t\t}\n\t\t//HIDE WRIST DUMMY \n\t\tsetAttr ($modCore + \"_WristJDummy.v\") 0;\n\t\t//ELBOW ORIENTATION\n\t\tif (`objExists ($modCore + \"_ElbowJnt\")`)\n\t\t{\n\t\t\tif ($elbowLocCheck > 0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_ElbowJnt.preferredAngleY\") ($multiplier * 60);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_ElbowJnt.preferredAngleY\") ($multiplier * -60);\n\t\t\t}\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp1\");\n\t\t\tpointConstraint ($modCore + \"_WristJDummy\") ($modCore + \"_WristJntGrp1\");\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp1\")`;\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp2\") ;\n\t\t\tdelete `pointConstraint ($modCore + \"_ElbowJnt\") ($modCore + \"_WristJntGrp2\")`;\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp2\")`;\t\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowJnt\") ($modCore + \"_WristJntGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($elbowLocCheck > 0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Elbow1Jnt.preferredAngleY\") ($multiplier * 30);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Elbow1Jnt.preferredAngleY\") ($multiplier * -30);\n\t\t\t}\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp1\");\n\t\t\tpointConstraint ($modCore + \"_WristJDummy\") ($modCore + \"_WristJntGrp1\");\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp1\")`;\n\t\t\tgroup -em -n ($modCore + \"_WristJntGrp2\") ;\n\t\t\tdelete `pointConstraint ($modCore + \"_Elbow2Jnt\") ($modCore + \"_WristJntGrp2\")`;\n\t\t\tdelete `orientConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp2\")`;\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2Jnt\") ($modCore + \"_WristJntGrp2\");\n\t\t}\n\t\tparent ($modCore + \"_WristJntGrp1\") ($modCore + \"_WristJntGrp2\");\n\t\tparent ($modCore + \"_WristJnt\") ($modCore + \"_WristJntGrp1\");\t\n\t\n\t\t\n\t\t\n\t\t////////////////////IK/FK JOINTS////////////////////////////////////\t\n\t\t//ARM FK\n\t\tduplicate -n ($modCore + \"_ShoulderJntFK\") ($modCore + \"_ShoulderJnt\");\n\t\tselect ($modCore + \"_ShoulderJntFK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_ElbowJntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntFK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Elbow1JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow2JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntFK\");\n\t\t}\n\t\t\n\t\t//ARM IK\n\t\tduplicate -n ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderJnt\");\n\t\tselect ($modCore + \"_ShoulderJntIK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_ElbowJntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntIK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Elbow1JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Elbow2JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_WristJntIK\");\n\t\t}\t\n\t\n\t\t//DETACH FK ARM JOINTS FOR SCALE COMPENSATION\n\t\n\t\tparent -w ($modCore + \"_WristJntFK\");\n\t\tgroup -n ($modCore + \"_WristJntFKGrp1\") ($modCore + \"_WristJntFK\");\n\t\tgroup -n ($modCore + \"_WristJntFKGrp2\") ($modCore + \"_WristJntFKGrp1\");\n\t\t$WristLocation = `xform -q -ws -t ($modCore + \"_WristJnt\")`;\n\t\tmove $WristLocation[0] $WristLocation[1] $WristLocation[2] ($modCore + \"_WristJntFKGrp2.scalePivot\") ($modCore + \"_WristJntFKGrp2.rotatePivot\") ;\n\t\tpointConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJntFKGrp1\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowJntFK\") ($modCore + \"_WristJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2JntFK\") ($modCore + \"_WristJntFKGrp2\");\n\t\t}\n\t\t\t\n\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_ShoulderJnt\")`;\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparent -w ($modCore + \"_ElbowJntFK\") ($modCore + \"_WristJntFK\");\n\t\t\tgroup -n ($modCore + \"_ElbowJntFKGrp1\") ($modCore + \"_ElbowJntFK\");\n\t\t\tgroup -n ($modCore + \"_ElbowJntFKGrp2\") ($modCore + \"_ElbowJntFKGrp1\");\n\t\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_ElbowJnt\")`;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_ElbowJntFKGrp1.scalePivot\") ($modCore + \"_ElbowJntFKGrp1.rotatePivot\") ;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_ElbowJntFKGrp2.scalePivot\") ($modCore + \"_ElbowJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ElbowJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderJntFK\") ($modCore + \"_ElbowJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent -w ($modCore + \"_Elbow1JntFK\") ($modCore + \"_Elbow2JntFK\") ($modCore + \"_WristJntFK\");\n\t\t\t\n\t\t\tgroup -n ($modCore + \"_Elbow1JntFKGrp1\") ($modCore + \"_Elbow1JntFK\");\n\t\t\tgroup -n ($modCore + \"_Elbow1JntFKGrp2\") ($modCore + \"_Elbow1JntFKGrp1\");\n\t\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_Elbow1Jnt\")`;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_Elbow1JntFKGrp2.scalePivot\") ($modCore + \"_Elbow1JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow1JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderJntFK\") ($modCore + \"_Elbow1JntFKGrp2\");\n\t\n\t\t\tgroup -n ($modCore + \"_Elbow2JntFKGrp1\") ($modCore + \"_Elbow2JntFK\");\n\t\t\tgroup -n ($modCore + \"_Elbow2JntFKGrp2\") ($modCore + \"_Elbow2JntFKGrp1\");\n\t\t\t$elbowLocation = `xform -q -ws -t ($modCore + \"_Elbow2Jnt\")`;\n\t\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_Elbow1JntFKGrp2.scalePivot\") ($modCore + \"_Elbow1JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_Elbow2JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1JntFK\") ($modCore + \"_Elbow2JntFKGrp2\");\n\t\t}\n\t\n\t\t//IK CONTROLS///////////////////////////////////////////////////////////////\t\t\n\t\tcircle -n ($modCore + \"_WristIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 180 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\tcircle -n ($modCore + \"_WristIKCtrl2\") -c 0 0 0 -nr 0 1 0 -sw 180 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\trotate -r 0 0 -90 ($modCore + \"_WristIKCtrl2\");\n\t\tcircle -n ($modCore + \"_WristIKCtrl3\") -c 0 0 0 -nr 0 1 0 -sw 90 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\t\trotate -r 90 0 0 ($modCore + \"_WristIKCtrl3\");\n\t\tcurve -n ($modCore + \"_WristIKCtrl4\") -d 1 -p 0 0 1 -p 0 0 -1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename \t($modCore + \"_WristIKCtrl4Shape\");\n\t\tcurve -n ($modCore + \"_WristIKCtrl5\") -d 1 -p 0 1 0 -p 0 0 0 -p -1 0 0 -k 0 -k 1 -k 2 ;\n\t\tpickWalk -d down;\n\t\trename \t($modCore + \"_WristIKCtrl5Shape\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_WristIKCtrl2\") ($modCore + \"_WristIKCtrl3\") ($modCore + \"_WristIKCtrl4\") ($modCore + \"_WristIKCtrl5\");\n\t\tparent -r -s  ($modCore + \"_WristIKCtrl2Shape\") ($modCore + \"_WristIKCtrl3Shape\") ($modCore + \"_WristIKCtrl4Shape\") ($modCore + \"_WristIKCtrl5Shape\") ($modCore + \"_WristIKCtrl\");\n\t\tdelete ($modCore + \"_WristIKCtrl2\") ($modCore + \"_WristIKCtrl3\") ($modCore + \"_WristIKCtrl4\") ($modCore + \"_WristIKCtrl5\");\n\t\tif ($crntSide == \"left\")\n\t\t{\n\t\t\trotate -r -ws 0 180 0 ($modCore + \"_WristIKCtrl\");\n\t\t}\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_WristIKCtrl\"); \n\t\t\n\t\t//SCALE CONTROL\n\t\tspaceLocator -n ($modCore + \"_armLengthAimLctr\");\n\t\tspaceLocator -n ($modCore + \"_armLengthTargetLctr\");\n\t\tparent ($modCore + \"_armLengthTargetLctr\") ($modCore + \"_armLengthAimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_armLengthAimLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_armLengthAimLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_armLengthTargetLctr\");\n\t\t$armLength = `getAttr ($modCore + \"_armLengthTargetLctr.tx\")`;\n\t\tscale -r ($armLength/4) ($armLength/4) ($armLength/4) ($modCore + \"_WristIKCtrl\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_WristIKCtrl\");\n\t\tdelete -ch ($modCore + \"_WristIKCtrl\");\n\t\tdelete ($modCore + \"_armLengthAimLctr\");\n\t\t\n\t\tgroup -n ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_WristIKCtrl\"); xform -os -piv 0 0 0;\n\t\tdelete `parentConstraint ($modCore + \"_WristJnt\") ($modCore + \"_WristIKCtrlGrp\")`;\n\t\t\n\t\n\t\t//ELBOW IK CONTROL\n\t\tcurve -n ($modCore + \"_ElbowIKCtrl\") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0\n\t\t-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0\n\t\t-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0\t\n\t\t-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9\n\t\t-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22\n\t\t-k 23 -k 24 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ElbowIKCtrlShape\");\n\t\t\n\t\tmove -r 0 0 0.95 ($modCore + \"_ElbowIKCtrl.cv[12]\")  ($modCore + \"_ElbowIKCtrl.cv[0]\") ($modCore + \"_ElbowIKCtrl.cv[24]\") ($modCore + \"_ElbowIKCtrl.cv[18]\") ($modCore + \"_ElbowIKCtrl.cv[6]\") ;\n\t\tmove -r 0 0 -0.65 ($modCore + \"_ElbowIKCtrl.cv[3]\") ($modCore + \"_ElbowIKCtrl.cv[9]\") ($modCore + \"_ElbowIKCtrl.cv[15]\") ($modCore + \"_ElbowIKCtrl.cv[21]\") ;\n\t\tgroup -n ($modCore + \"_ElbowIKCtrlGrp\") ($modCore + \"_ElbowIKCtrl\");\n\t\t\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow\") ($modCore + \"_ElbowIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_ElbowIKCtrl.scale\"), ($ArmLength / 14), ($ArmLength / 14), ($ArmLength / 14));\n\t\t\tsetAttr ($modCore + \"_ElbowIKCtrl.tz\") ($ArmLength * -2);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Elbow1\") ($modCore + \"_ElbowIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_ElbowIKCtrl.scale\"), ($ArmLength / 14), ($ArmLength / 14), ($ArmLength / 14));\n\t\t\tsetAttr ($modCore + \"_ElbowIKCtrl.tz\") ($ArmLength * -2);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\t\n\t\t//LOWER ARM CONTROL\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tcurve -n ($modCore + \"_LowerArmIKCtrl\") -d 1 -p -1 0 4 -p -4 0 4 -p -3 0 5 -p -2 0 6 -p -1 0 7 -p 0 0 8 -p 1 0 7 -p 2 0 6 -p 3 0 5 -p 4 0 4 -p 1 0 4 -p 1 0 3 -p 1 0 2 -p 1 0 1 -p 1 0 0 -p 1 0 -1 -p 1 0 -2 -p 1 0 -3 -p 1 0 -4 -p 4 0 -4 -p 3 0 -5 -p 2 0 -6 -p 1 0 -7 -p 0 0 -8 -p -1 0 -7 -p -2 0 -6 -p -3 0 -5 -p -4 0 -4 -p -1 0 -4 -p -1 0 -3 -p -1 0 -2 -p -1 0 -1 -p -1 0 0 -p -1 0 1 -p -1 0 2 -p -1 0 3 -p -1 0 4 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_LowerArmIKCtrlShape\");\n\t\t\tnonLinear -type bend -lowBound -1 -highBound 1 -curvature 0.6;\n\t\t\t$bend = `ls -sl`;\n\t\t\trename $bend ($modCore + \"_LowerArmIKCBend\");\n\t\t\trotate -a -os -90 0 -90 ($modCore + \"_LowerArmIKCBend\");\n\t\n\t\t\tdelete -ch ($modCore + \"_LowerArmIKCtrl\");\n\t\t\trotate 0 0 90 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tsetAttr (($modCore + \"_LowerArmIKCtrl.scale\"), ($ArmLength/14), ($ArmLength/14), ($ArmLength/14));\n\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\n\t\t\tgroup -n ($modCore + \"_LowerArmIKCtrlGrp\") ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tgroup -n ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_LowerArmIKCtrlGrp\");\n\t\t\tparent ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_ScaleGrp\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCtrlGrp.rotateOrder\") 1;\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCtrlGrp2.rotateOrder\") 1;\n\t\n\t\t\tspaceLocator -n ($modCore + \"_lowerArmIKLctr\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_lowerArmIKLctr\")`;\n\t\t\tparent ($modCore + \"_lowerArmIKLctr\") ($modCore + \"_ShoulderFKCtrl\");\n\t\t\tsetAttr ($modCore + \"_lowerArmIKLctr.v\") 0;\n\t\t\t\n\t\t\tdelete `pointConstraint ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKCtrlGrp2\")`;\n\t\t\t//ALIGN GROUP\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * -1) 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow2\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_LowerArmIKCtrlGrp2\")`;\n\t\t\t//AIM CONSTRAIN GROUP WITH OFFSET\n\t\t\taimConstraint -offset 0 0 0 -aimVector ($multiplier * -1) 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_WristIKCtrl\")\n\t\t\t($modCore + \"_lowerArmIKLctr\") ($modCore + \"_LowerArmIKCtrlGrp2\");\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector ($multiplier * -1) 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Elbow2\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_LowerArmIKCtrlGrp\")`;\n\t\t\tpointConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKCtrlGrp2\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Elbow2\") ($modCore + \"_LowerArmIKCtrl\")`;\n\t\t\t$WristPos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Wrist\")`;\n\t\t\tmove -a $WristPos[0] $WristPos[1] $WristPos[2] ($modCore + \"_LowerArmIKCtrl.scalePivot\") ($modCore + \"_LowerArmIKCtrl.rotatePivot\") ;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\t\n\t\t\t//ADD ORIENTATION ATTRIBUTE FOR LOWER LEGrp IKCtrl ORIENTATION\n\t\t\tspaceLocator -n ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\");\n\t\t\tdelete `parentConstraint ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\");\n\t\t\t\n\t\t\torientConstraint -mo ($modCore + \"_LowerArmIKCtrlGrp2\") ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\") ($modCore + \"_LowerArmIKCtrlGrp\");\n\t\t\tparent ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset\") ($modCore + \"_WristIKCtrl\");\n\t\t\t\n\t\t\taddAttr -ln \"autoOrient\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerArmIKCtrl.autoOrient\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerArmIKCtrl.autoOrient\") ($modCore + \"_LowerArmIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerArmIKCtrlGrp2W0\");\n\t\t\t\n\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_LowerArmIKCtrl_Reverse\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerArmIKCtrl.autoOrient\") ($modCore + \"_LowerArmIKCtrl_Reverse.inputX\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerArmIKCtrl_Reverse.outputX\") ($modCore + \"_LowerArmIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerArmIKCtrlGrp2_LctrOffsetW1\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCtrlGrp2_LctrOffset.v\") 0;\n\t\t\t\n\t\t\tspaceLocator -n ($modCore + \"_LowerElbowIKOffsetLctr\");\n\t\t\tdelete `pointConstraint ($modCore + \"_Elbow2Jnt\") ($modCore + \"_LowerElbowIKOffsetLctr\")`;\n\t\t\t\n\t\t}\n\t\n\t\t//ELBOW AIM LOCATORS\n\t\tspaceLocator -n ($modCore + \"_ElbowIKCtrl_TargetLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKCtrl_ShoulderLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKCtrl_WristLctr\");\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Shoulder\") ($modCore + \"_ElbowIKCtrl_ShoulderLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ElbowIKCtrl_ShoulderLctr\");\n\t\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Wrist\") ($modCore + \"_ElbowIKCtrl_WristLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_WristIKCtrl\")  ($modCore + \"_ElbowIKCtrl_WristLctr\");\n\t\t\n\t\tparent ($modCore + \"_ElbowIKCtrl_ShoulderLctr\") ($modCore + \"_ElbowIKCtrl_WristLctr\") ($modCore + \"_ScaleGrp\");\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl_ShoulderLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl_WristLctr.v\") 0;\n\t\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\t\n\t\t\tdelete `pointConstraint ($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKCtrl_TargetLctr\")`;\n\t\t\tpointConstraint -mo ($modCore + \"_ElbowIKCtrl_ShoulderLctr\") ($modCore + \"_ElbowIKCtrl_WristLctr\") ($modCore + \"_ElbowIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_ElbowIKCtrl_TargetLctr\") ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_ElbowIKCtrl_ShoulderLctr\") ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ElbowIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_ElbowIKCtrl_TargetLctr\") ($modCore + \"_ElbowIKCtrl\");\n\t\t}\n\t\n\t\n\t\t//IK SCALE\n\t\t\n\t\t//CREATE DUMMY WRIST JOINT\n\t\tselect ($modCore + \"_WristJntIK\");\n\t\tduplicate -n ($modCore + \"_WristJntIKDummy\");\n\t\tparent -w;\n\t\tgroup -n ($modCore + \"_WristJntIKDummyGrp1\");\n\t\tgroup -n ($modCore + \"_WristJntIKDummyGrp2\");\n\t\t\n\t\tmove $elbowLocation[0] $elbowLocation[1] $elbowLocation[2] ($modCore + \"_WristJntIKDummyGrp2.scalePivot\") ($modCore + \"_WristJntIKDummyGrp2.rotatePivot\") ;\n\t\tpointConstraint ($modCore + \"_WristJntIK\") ($modCore + \"_WristJntIKDummyGrp1\");\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristJntIKDummy\");\n\t\tsetAttr ($modCore + \"_WristJntIKDummy_parentConstraint1.interpType\") 2;\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowJntIK\") ($modCore + \"_WristJntIKDummyGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2JntIK\") ($modCore + \"_WristJntIKDummyGrp2\");\n\t\t}\n\t\t\n\t\t//NODES\n\t\tspaceLocator -n ($modCore + \"_ArmLengthOriginLctr\");\n\t\tpointConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_ArmLengthEndLctr\");\n\t\tparent ($modCore + \"_ArmLengthEndLctr\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_WristIKCtrl\") ($modCore + \"_ArmLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_WristIKCtrl\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_LowerArmIKCLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKCLctr.v\") 0;\n\t\t\tdelete `parentConstraint ($modCore + \"_Elbow2Jnt\") ($modCore + \"_LowerArmIKCLctr\")`;\n\t\t\tparent  ($modCore + \"_LowerArmIKCLctr\") ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tpointConstraint ($modCore + \"_LowerArmIKCLctr\") ($modCore + \"_ArmLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ArmLengthOriginLctr\");\n\t\t}\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ArmLength_MD\");\n\t\tsetAttr ($modCore + \"_ArmLength_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_ArmLengthEndLctr.translateX\") ($modCore + \"_ArmLength_MD.input1X\");\n\t\tsetAttr ($modCore + \"_ArmLength_MD.input2X\") ($ArmLength*2);\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_ArmLength_Condition\");\n\t\tconnectAttr -f ($modCore + \"_ArmLength_MD.outputX\") ($modCore + \"_ArmLength_Condition.firstTerm\");\n\t\tsetAttr ($modCore + \"_ArmLength_Condition.secondTerm\") 1;\n\t\tsetAttr ($modCore + \"_ArmLength_Condition.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_ArmLength_MD.outputX\") ($modCore + \"_ArmLength_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ArmLength_Blnd\");\n\t\tconnectAttr -f ($modCore + \"_ArmLength_Condition.outColorR\") ($modCore + \"_ArmLength_Blnd.color1R\");\n\t\tsetAttr ($modCore + \"_ArmLength_Blnd.color2\") -type double3 1 0 1 ;\n\t\t\n\t\t//ADD STRETCH TO IK WRIST CONTROL\n\t\taddAttr -ln \"stretch\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\n\t\t//ARM IK LOCK\n\t\t\n\t\t//ARM IK LOCK LOCATORS\n\t\tspaceLocator -n ($modCore + \"_ShoulderIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_WristIKLockLctr\");\n\t\tparent ($modCore + \"_ElbowIKLockLctr\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\tparent ($modCore + \"_WristIKLockLctr\") ($modCore + \"_ElbowIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKLockLctr\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_WristIKCtrl\") ($modCore + \"_ElbowIKLockLctr\");\n\t\t\tpointConstraint ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristIKLockLctr\");\n\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowIKLockLctr.translateX\") ($modCore + \"_ShoulderLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.input2X\") $elbowLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_elbowLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_WristIKLockLctr.translateX\") ($modCore + \"_elbowLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.input2X\") $WristLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderLockLength_MD.outputX\") ($modCore + \"_ShoulderLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_ShoulderLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_elbowLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_elbowLockLength_MD.outputX\") ($modCore + \"_elbowLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_elbowLock_Blnd.color2R\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ShoulderIKLockLctr\");\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_LowerArmIKCtrl\") ($modCore + \"_LowerElbowIKOffsetLctr\");\n\t\t\t\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_ElbowIKLockLctr\");\n\t\t\tpointConstraint ($modCore + \"_LowerElbowIKOffsetLctr\") ($modCore + \"_WristIKLockLctr\");\n\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowIKLockLctr.translateX\") ($modCore + \"_ShoulderLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_ShoulderLockLength_MD.input2X\") $elbow1Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_elbowLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_WristIKLockLctr.translateX\") ($modCore + \"_elbowLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_elbowLockLength_MD.input2X\") $elbow2Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderLockLength_MD.outputX\") ($modCore + \"_ShoulderLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_ShoulderLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_elbowLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_elbowLockLength_MD.outputX\") ($modCore + \"_elbowLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmLength_Blnd.outputR\") ($modCore + \"_elbowLock_Blnd.color2R\");\n\t\t\t\n\t\t\t//AUTO STRETCH ON LOWER ARM IK CONTROL\n\t\t\taddAttr -ln \"lowerScale\" -at double -min 0.01 -dv 1 ($modCore + \"_LowerArmIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerArmIKCtrl.lowerScale\");\n\t\t\t\n\t\t\t//GET ARM LENGTH\n\t\t\t\n\t\t\t$elbow1Length2 = `getAttr ($modCore + \"_Elbow1Jnt.tx\")`;\n\t\t\t$elbow2Length2 = `getAttr ($modCore + \"_Elbow2Jnt.tx\")`;\n\t\t\t$WristLength2 = `getAttr ($modCore + \"_WristJDummy.tx\")`;\n\t\t\t$FullArmLength = ($elbow1Length2 + $elbow2Length2 + $WristLength2);\n\t\t\t\n\t\t\t//ARM LENGTH LOCATORS\n\t\t\tspaceLocator -n ($modCore + \"_FullArmLengthAimLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_FullArmLengthEndLctr\");\n\t\t\tparent ($modCore + \"_FullArmLengthEndLctr\") ($modCore + \"_FullArmLengthAimLctr\");\n\t\t\tparent ($modCore + \"_FullArmLengthAimLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\tpointConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_FullArmLengthAimLctr\");\n\t\t\tpointConstraint ($modCore + \"_WristIKCtrl\")   ($modCore + \"_FullArmLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_WristIKCtrl\") ($modCore + \"_FullArmLengthAimLctr\");\n\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullArmLength_MD\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_MD.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLengthEndLctr.translateX\") ($modCore + \"_FullArmLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_MD.input2X\") $FullArmLength;\n\t\t\t\n\t\t\tshadingNode -asUtility condition -n ($modCore + \"_FullArmLength_Condition\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_MD.outputX\") ($modCore + \"_FullArmLength_Condition.firstTerm\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_Condition.secondTerm\") 1;\n\t\t\tsetAttr ($modCore + \"_FullArmLength_Condition.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_MD.outputX\") ($modCore + \"_FullArmLength_Condition.colorIfTrueR\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_FullArmLength_Blnd\");\n\t\t\tconnectAttr -force ($modCore + \"_WristIKCtrl.stretch\") ($modCore + \"_FullArmLength_Blnd.blender\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_Condition.outColorR\") ($modCore + \"_FullArmLength_Blnd.color1R\");\n\t\t\tsetAttr ($modCore + \"_FullArmLength_Blnd.color2R\") 1;\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_FullArmLengthAimLctr.v\") 0;\n\n\t\t\t\n\t\t\t//MULTIPLY STRETCH WITH LOWER SCALE\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullArmLength2_MD\");\n\t\t\tconnectAttr -force ($modCore + \"_LowerArmIKCtrl.lowerScale\") ($modCore + \"_FullArmLength2_MD.input1X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength_Blnd.outputR\") ($modCore + \"_FullArmLength2_MD.input2X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength2_MD.outputX\") ($modCore + \"_LowerArmIKCtrl.scaleX\");\n\t\t\tconnectAttr -force ($modCore + \"_FullArmLength2_MD.outputX\") ($modCore + \"_Elbow2JntIK.scaleX\");\n\t\t}\n\t\t\n\t\n\t\t//ADD STRETCH TO IK WRIST CONTROL\n\t\tsetAttr -e-k true ($modCore + \"_WristIKCtrl.stretch\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.stretch\") ($modCore + \"_ArmLength_Blnd.blender\");\n\t\t\n\t\t//ADD ELBOW LOCK TO IK WRIST CONTROL\n\t\taddAttr -ln \"elbowLock\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_WristIKCtrl.elbowLock\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.elbowLock\") ($modCore + \"_ShoulderLock_Blnd.blender\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.elbowLock\") ($modCore + \"_elbowLock_Blnd.blender\");\n\t\t\n\t\t//ADD ARM SCALE\n\t\taddAttr -ln \"armScale\"  -at double  -min 0.01 -dv 1 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_WristIKCtrl.armScale\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_ShoulderLock_Blnd.outputR\") ($modCore + \"_ShoulderScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_WristIKCtrl.armScale\") ($modCore + \"_ShoulderScale_MD.input2X\");\n\t\tconnectAttr -force ($modCore + \"_ShoulderScale_MD.outputX\") ($modCore + \"_ShoulderJntIK.scaleX\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ElbowScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_elbowLock_Blnd.outputR\") ($modCore + \"_ElbowScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_WristIKCtrl.armScale\") ($modCore + \"_ElbowScale_MD.input2X\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_ElbowScale_MD.outputX\") ($modCore + \"_ElbowJntIK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_ElbowScale_MD.outputX\") ($modCore + \"_Elbow1JntIK.scaleX\");\n\t\t}\n\t\t\n\t\n\t\t//////////////////////////////////HAND IKFK SWITCH CONTROL///////////////////////////////////////////\n\t\tcurve -n ($modCore + \"_SwitchCtrl\") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2\n\t\t-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2\n\t\t-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10\n\t\t-k 11 -k 12 -k 13 -k 14 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_SwitchCtrlShape\");\n\t\tpickWalk -d up;\n\t\t\n\t\tmove -r -os -wd 0 0 -8 ($modCore + \"_SwitchCtrl\");\n\t\tgroup -n ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_SwitchCtrl\"); xform -os -piv 0 0 0;\n\t\tscale -r 0.2 0.2 0.2 ($modCore + \"_SwitchCtrlGrp\");\n\t\tmakeIdentity -apply true -t 0 -r 1 -s 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tdelete `pointConstraint ($modCore + \"_WristJnt\") ($modCore + \"_SwitchCtrlGrp\")`;\n\t\tparent ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_WristIKCtrlGrp\");\n\t\tmakeIdentity -apply false -r 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tparent -w ($modCore + \"_SwitchCtrlGrp\");\n\t\t\n\t\tsetAttr (($modCore + \"_SwitchCtrlGrp.scale\"), ($ArmLength / 3.5), ($ArmLength / 3.5), ($ArmLength / 3.5));\n\t\t\n\t\taddAttr -ln \"switchIkFk\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.switchIkFk\");\n\t\taddAttr -ln \"autoVolume\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.autoVolume\");\n\t\tsetAttr ($modCore + \"_SwitchCtrl.autoVolume\") 1;\n\t\t\n\t\txform -cp ($modCore + \"_SwitchCtrl\");\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_WristJnt\") ($modCore + \"_SwitchCtrlGrp\");\n\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_SwitchCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \t\n\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t\n\t\t////////////////////////////////////SIDE////////////////////////////////////\n\t\t//ARM\n\t\tparentConstraint -mo ($modCore + \"_ScaleGrp\") ($modCore + \"_ClavicleCtrlGrp\");\n\t\t\n\t\t//FK\n\t\tparentConstraint -mo ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ClavicleJnt\");\n\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_ClavicleCtrl\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z\n\t\t($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ClavicleCtrl\") ($modName + \"_MAINCtrl\") ($modCore + \"_ShoulderFKCtrlGrp2\");\n\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//SHOULDER ORIENT\n\t\taddAttr -ln \"shoulderOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_ShoulderFKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_ShoulderFKCtrl.shoulderOrient\");\n\t\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") 0;\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_MAINCtrlW2\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") 1;\n\t\t\n\t\t//CHEST & CLAVICLE INFLUENCE\n\t\taddAttr -ln \"clavicleInfluence\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_ShoulderFKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderFK_Inf_MD\");\n\t\tconnectAttr -force ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") ($modCore + \"_ShoulderFK_Inf_MD.input1Y\");\n\t\tsetAttr ($modCore + \"_ShoulderFK_Inf_MD.input1X\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") ($modCore + \"_ShoulderFK_Inf_MD.input1X\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") 1;\n\t\tsetAttr ($modCore + \"_ShoulderFK_Inf_MD.input1X\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") ($modCore + \"_ShoulderFK_Inf_MD.input1X\");\n\t\tsetAttr ($modCore + \"_ShoulderFKCtrl.clavicleInfluence\") 0;\n\t\t\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFK_Inf_MD.input2X\");\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFKCtrl.shoulderOrient\") ($modCore + \"_ShoulderFK_Inf_MD.input2Y\");\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFK_Inf_MD.outputX\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tconnectAttr -force  ($modCore + \"_ShoulderFK_Inf_MD.outputY\") ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1.\" + $modCore + \"_ClavicleCtrlW1\");\n\t\t\n\t\tselectKey -k -f 0 -f 1 ($modCore + \"_ShoulderFKCtrlGrp2_parentConstraint1_\" + $modName + \"_MAINCtrlW2\") ;\n\t\tselectKey -add -k -f 0 -f 1 ($modCore + \"_ShoulderFK_Inf_MD_input1X\") ;\n\t\tkeyTangent -itt spline -ott spline ;\n\n\t\tparentConstraint -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJntFK\");\n\t\tpointConstraint  -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJnt\");\n\t\tpointConstraint  -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ShoulderJntIK\");\n\t\n\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_ShoulderJntFK.scaleX\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ElbowFKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ElbowJntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_WristFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_ElbowFKCtrl.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow1FKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow1JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_Elbow2FKCtrlGrp\");\n\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_Elbow2JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_WristFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow1FKCtrl.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow2FKCtrl.scaleX\");\n\t\t}\t\t\n\t\t\t\n\t\tparentConstraint -mo ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristJntFK\");\n\t\tsetAttr ($modCore + \"_WristJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//CONNECT SCALE TO FK CONTROLS\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_ElbowJntFK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow1JntFK.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_ShoulderFKCtrl.scaleX\") ($modCore + \"_Elbow2JntFK.scaleX\");\n\t\t}\n\t\n\t\t//select pCube1;\n\t\t//IK\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\t\n\t\t\tselect ($modCore + \"_ShoulderJntIK.rotatePivot\") ($modCore + \"_WristJntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_ArmIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_ArmIKHandle\") ($modCore + \"_WristIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect ($modCore + \"_Elbow2JntIK.rotatePivot\") ($modCore + \"_WristJntIK.rotatePivot\");\n\t\t\tikHandle -n ($modCore + \"_LowerArmIKHandle\") -sol ikSCsolver;\n\t\t\tparentConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_LowerArmIKHandle\");\n\t\t\tsetAttr ($modCore + \"_LowerArmIKHandle.v\") 0;\n\t\n\t\t\tselect ($modCore + \"_ShoulderJntIK.rotatePivot\") ($modCore + \"_Elbow2JntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_ArmIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_ArmIKHandle\") ($modCore + \"_LowerArmIKCtrl\");\n\t\t\t\n\t\t}\n\t\tpoleVectorConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ArmIKHandle\") ;\n\t\t//select pCube1;\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristJntIK\");\n\t\tsetAttr ($modCore + \"_WristJntIK_parentConstraint1.interpType\") 2;\n\t\n\t\t//CHECK POLE VECTOR\n\t\tif (`objExists ($modCore + \"_Elbow1Jnt\")`)\n\t\t{\n\t\t\t$lSelectionOrient = `getAttr ($modCore + \"_ShoulderJntIK.rotate\")`;\n\t\t\tif ($lSelectionOrient[0] > 90 || $lSelectionOrient[0] < -90 || $lSelectionOrient[2] > 90 || $lSelectionOrient[2] < -90)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_ArmIKHandle.twist\") 180;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\n\t\t//CONNECT IK AND FK JOINTS TO ORIGINALS\n\t\t//SHOULDER\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderJntIKFK_BlndScale\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntFK.scale\") ($modCore + \"_ShoulderJntIKFK_BlndScale.color1\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIK.scale\") ($modCore + \"_ShoulderJntIKFK_BlndScale.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ShoulderJntIKFK_BlndScale.blender\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ShoulderVolume_MD\");\n\t\tsetAttr ($modCore + \"_ShoulderVolume_MD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_ShoulderVolume_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_BlndScale.outputR\") ($modCore + \"_ShoulderVolume_MD.input2X\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ShoulderJntIKFK_AutoBlnd\");\n\t\tsetAttr ($modCore + \"_ShoulderJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\tconnectAttr -f ($modCore + \"_ShoulderVolume_MD.outputX\") ($modCore + \"_ShoulderJntIKFK_AutoBlnd.color1R\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ShoulderJnt.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ShoulderJnt.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_ShoulderJntIKFK_AutoBlnd.blender\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n  ($modCore + \"_ShoulderJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntFK.rotate\") ($modCore + \"_ShoulderJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIK.rotate\") ($modCore + \"_ShoulderJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ShoulderJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_BlndScale.outputR\") ($modCore + \"_ShoulderJnt.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_ShoulderJntIKFK_BlndRotate.output\") ($modCore + \"_ShoulderJnt.rotate\");\n\t\t\n\t\t\n\t\t//ELBOW\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ElbowJntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntFK.scale\") ($modCore + \"_ElbowJntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIK.scale\") ($modCore + \"_ElbowJntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ElbowJntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_ElbowVolume_MD\");\n\t\t\tsetAttr ($modCore + \"_ElbowVolume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_ElbowVolume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_BlndScale.outputR\") ($modCore + \"_ElbowVolume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ElbowJntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_ElbowJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_ElbowVolume_MD.outputX\") ($modCore + \"_ElbowJntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ElbowJnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_AutoBlnd.outputR\") ($modCore + \"_ElbowJnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_ElbowJntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ElbowJntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntFK.rotate\") ($modCore + \"_ElbowJntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIK.rotate\") ($modCore + \"_ElbowJntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ElbowJntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_BlndScale.outputR\") ($modCore + \"_ElbowJnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_ElbowJntIKFK_BlndRotate.output\") ($modCore + \"_ElbowJnt.rotate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow1JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntFK.scale\") ($modCore + \"_Elbow1JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIK.scale\") ($modCore + \"_Elbow1JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow1JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Elbow1Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Elbow1Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Elbow1Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow1Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow1JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Elbow1JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1Volume_MD.outputX\") ($modCore + \"_Elbow1JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow1Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow1Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Elbow1JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow1JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntFK.rotate\") ($modCore + \"_Elbow1JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIK.rotate\") ($modCore + \"_Elbow1JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow1JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow1Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow1JntIKFK_BlndRotate.output\") ($modCore + \"_Elbow1Jnt.rotate\");\n\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow2JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntFK.scale\") ($modCore + \"_Elbow2JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIK.scale\") ($modCore + \"_Elbow2JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow2JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Elbow2Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Elbow2Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Elbow2Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow2Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow2JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Elbow2JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2Volume_MD.outputX\") ($modCore + \"_Elbow2JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow2Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Elbow2Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Elbow2JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Elbow2JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntFK.rotate\") ($modCore + \"_Elbow2JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIK.rotate\") ($modCore + \"_Elbow2JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Elbow2JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_BlndScale.outputR\") ($modCore + \"_Elbow2Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Elbow2JntIKFK_BlndRotate.output\") ($modCore + \"_Elbow2Jnt.rotate\");\n\t\t}\n\t\n\t\t//WRIST\n\t\torientConstraint -mo ($modCore + \"_WristJntFK\") ($modCore + \"_WristJntIKDummy\") ($modCore + \"_WristJntGrp1\");\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.interpType\") 2;\n\t\tsetAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 0;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\") 0;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\") 0;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\");\n\t\tsetAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 1;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\") 1;\n\t\tsetAttr ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntFKW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntGrp1_orientConstraint1.\" + $modCore + \"_WristJntIKDummyW1\");\n\t\t\n\t\t//scaleConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristJnt\");\n\t\t//selectKey -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") ;\n\t\t//selectKey -add -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") ;\n\t\t//keyTangent -itt spline -ott spline ;\n\t\t//setAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 0;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") 0;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 1;\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\");\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\t//setAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 1;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") 1;\n\t\t//setAttr ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\");\n\t\t//setDrivenKeyframe -currentDriver ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\t\n\t\t//selectKey -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristIKCtrlW1\") ;\n\t\t//selectKey -add -k -f 0 -f 1 ($modCore + \"_WristJnt_scaleConstraint1.\" + $modCore + \"_WristFKCtrlW0\") ;\n\t\t//keyTangent -itt spline -ott spline ;\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_WristJntIKFK_BlndScale\");\n\t\tconnectAttr -f ($modCore + \"_WristJntFK.scale\") ($modCore + \"_WristJntIKFK_BlndScale.color1\");\n\t\tconnectAttr -f ($modCore + \"_WristJntIK.scale\") ($modCore + \"_WristJntIKFK_BlndScale.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_WristJntIKFK_BlndScale.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_WristJntIKFK_BlndScale.output\") ($modCore + \"_WristJnt.scale\");\n\t\t\n\n\t\t//ELBOWIKCtrl FOLLOW\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_WristIKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\taddAttr -ln \"follow\"  -at \"enum\" -en \"Main:Wrist:Shoulder:Wrist and Shoulder:\" ($modCore + \"_ElbowIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_ElbowIKCtrl.follow\");\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 1;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\") 0;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 2;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\") 1;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 3;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\") 1;\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_WristIKCtrlW1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_ElbowIKCtrl.follow\") ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.\" + $modCore + \"_ShoulderFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl.follow\") 0;\n\t\t\n\t\t\n\t\t//CONNECTOR LINE\n\t\tcurve -n ($modCore + \"_ElbowIKConnectorCtrl\") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ElbowIKConnectorCtrlShape\");\n\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKConnectorCtrl\") `;\n\t\tparent ($modCore + \"_ElbowIKConnectorCtrl\") ($modCore + \"_ElbowIKCtrl\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\tspaceLocator -n ($modCore + \"_ElbowIKTargetConnectorLctr\");\n\t\tparent ($modCore + \"_ElbowIKTargetConnectorLctr\") ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKAimConnectorLctr\")`;\n\t\tparent ($modCore + \"_ElbowIKAimConnectorLctr\") ($modCore + \"_ElbowIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_ElbowJnt\") ($modCore + \"_ElbowIKConnectorCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint  ($modCore + \"_Elbow1Jnt\") ($modCore + \"_ElbowIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Elbow1Jnt\") ($modCore + \"_ElbowIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Elbow1Jnt\") ($modCore + \"_ElbowIKConnectorCtrl\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_ElbowIKTargetConnectorLctr.tz\") ($modCore + \"_ElbowIKConnectorCtrl.sz\");\n\t\tsetAttr ($modCore + \"_ElbowIKAimConnectorLctr.v\") 0;\n\t\t\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_ElbowIKConnectorCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_ElbowIKConnectorCtrl.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_ElbowIKConnectorCtrl.nonControl\");\n\t\t\n\t\t//VISIBILITY TOGGLES////////////////////////////////////////////////////////////////////\n\t\t\n\t\n\t\t//ARM\n\t\tshadingNode -asUtility condition -n ($modCore + \"_ArmIKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ArmIKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_ArmIKViz.secondTerm\") 0.7;\n\t\tsetAttr ($modCore + \"_ArmIKViz.operation\") 3;\n\t\t\t\n\t\tconnectAttr -f ($modCore + \"_ArmIKViz.outColorR\") ($modCore + \"_ElbowIKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_ArmIKViz.outColorR\") ($modCore + \"_WristIKCtrl.v\");\n\t\tif (`objExists ($modCore + \"_LowerArmIKCtrl\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ArmIKViz.outColorR\") ($modCore + \"_LowerArmIKCtrl.v\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_LowerArmIKCtrl.v\");\n\t\t}\n\t\tshadingNode -asUtility condition -n ($modCore + \"_ArmFKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ArmFKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_ArmFKViz.secondTerm\") 0.3;\n\t\tsetAttr ($modCore + \"_ArmFKViz.operation\") 5;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_ElbowFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_Elbow1FKCtrl.v\");\n\t\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_Elbow2FKCtrl.v\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_ArmFKViz.outColorR\") ($modCore + \"_WristFKCtrl.v\");\n\t\t\n\t\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\t\n\t\t//JOINTS\n\t\tsetAttr ($modCore + \"_ShoulderJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_ShoulderJntFK.v\") 0;\n\t\tsetAttr ($modCore + \"_WristJntFK.v\") 0;\n\t\n\t\n\t\tsetAttr ($modCore + \"_ArmLengthOriginLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_WristJntIKDummyGrp2.v\") 0;\n\t\tsetAttr ($modCore + \"_WristJntFKGrp2.v\") 0;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_ElbowJntFKGrp2.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Elbow1JntFKGrp2.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Elbow2JntFKGrp2.v\") 0;\n\t\t}\n\t\t\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrl_TargetLctr.v\") 0;\n\t\t\n\t\t//CONTROLS\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ClavicleCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ShoulderFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ShoulderFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ShoulderFKCtrl.v\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow1FKCtrl.v\");\n\t\t\t\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Elbow2FKCtrl.v\");\n\t\t\t\n\t\t\t\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerArmIKCtrl.v\");\n\t\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_LowerArmIKCtrl\");\n\t\t}\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_WristIKCtrl.v\");\n\t\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.v\");\n\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ElbowIKConnectorCtrl.v\");\n\t\tsetAttr ($modCore + \"_ElbowIKConnectorCtrl.template\") 1;\n\t\t\n\t\tsetAttr ($modCore + \"_ArmIKHandle.v\") 0;\n\t\t\n\t\t\n\t\t//LOCK GROUPS\n\t\t\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\tselect -cl;\n\t\t//WRIST FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_WristFKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_WristFKLctr\")`;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_WristFKLctr\");\n\t\tparent ($modCore + \"_WristFKLctr\") ($modCore + \"_WristIKCtrlGrp\");\n\t\tparentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristFKLctr\");\n\t\t\n\t\t//WRIST IK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_WristIKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_WristIKLctr\")`;\n\t\tparent ($modCore + \"_WristIKLctr\") ($modCore + \"_WristFKCtrlGrp\");\n\t\torientConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristIKLctr\");\n\t\tsetAttr ($modCore + \"_WristIKLctr_orientConstraint1.interpType\") 2;\n\t\t\n\t\t//ELBOW FK LOCATOR\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Elbow_FKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_Elbow_FKAimLctr\")`;\n\t\t\tparent ($modCore + \"_Elbow_FKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Elbow_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow_FKAimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Elbow1_FKAimLctr\") ($modCore + \"_Elbow1FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_Elbow1_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Elbow1_FKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow1FKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow1_FKAimLctr\");\n\t\t\t\n\t\t\tspaceLocator -n ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Elbow2_FKAimLctr\") ($modCore + \"_Elbow2FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_Elbow2_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Elbow2_FKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Elbow2FKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_Elbow2_FKAimLctr\");\n\t\t}\t\t\n\t\t\n\t\t//SHOULDER FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_ShoulderFKOrientLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_ShoulderJnt\") ($modCore + \"_ShoulderFKOrientLctr\")`;\n\t\tparent ($modCore + \"_ShoulderFKOrientLctr\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\torientConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderFKOrientLctr\");\n\t\t\n\t\t//HIDE SNAP LOCATORS\n\t\tsetAttr ($modCore + \"_ShoulderFKOrientLctr.v\") 0;\n\t\tif (`objExists ($modCore + \"_Elbow_FKAimLctr.v\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Elbow_FKAimLctr.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Elbow1_FKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Elbow2_FKAimLctr.v\") 0;\n\t\t}\t\t\n\t\tsetAttr ($modCore + \"_WristIKLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_WristFKLctr.v\") 0;\n\t\t\n\t\tsetAttr ($modCore + \"_ShoulderIKLockLctr.v\") 0;\n\t\t\n\t\t\n\t\t//PARENT TO MAIN CONTROL\n\t\t\n\t\t//SET ALL CONSTRAINTS TO SHORTEST INTERPOLATION\n\t\tselect ;\n\t\t\n\t\tstring $selectedParentConstraints[] = `ls ($modCore + \"*_parentConstraint1\")`;\n\t\tfor ($crntParentConstraint in $selectedParentConstraints)\n\t\t{setAttr ($crntParentConstraint + \".interpType\") 2;}\n\t\t\n\t\tsetAttr ($modCore + \"_ElbowIKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\t\n\t\tif (`objExists ($modCore + \"_Shoulder_CurveJnt\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_LowerTwist75Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwist25Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwistHalfLctr_parentConstraint1.interpType\") 2;\n\t\t}\n\t\t\n\t\t//HIERARCHY CLEAN-UP\n\t\tparent ($modCore + \"_ClavicleCtrlGrp\") ($modCore + \"_ClavicleJnt\")\n\t\t($modCore + \"_WristJntFKGrp2\") ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_ElbowIKCtrlGrp\")\n\t\t($modCore + \"_ElbowIKCtrl_TargetLctr\") ($modCore + \"_WristJntIKDummyGrp2\")\n\t\t($modCore + \"_ArmLengthOriginLctr\") ($modCore + \"_ShoulderIKLockLctr\")\n\t\t($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_ShoulderFKCtrlGrp2\")\n\t\t($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_WristJntGrp2\")\n\t\t($modCore + \"_WristJntFK\")\n\t\t($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\tparent ($modCore + \"_LowerArmIKHandle\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\n\t\t//CREATE CONSTRAINT FOR WRIST IKCtrlGrp\n\t\t//CHECK IF ATTACHED TO ROOT\n\t\tif ($modAttachNode == \"ROOT\")\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modCore + \"_WristIKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_WristIKCtrlGrp\");\n\t\t}\n\n\t\t//ADD DYNAMICtrl PARENTING CHANNELS\n\t\taddAttr -ln \"follow\" -at double  -min 1 -max 1 -dv 1 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e -keyable true ($modCore + \"_WristIKCtrl.follow\");\n\t\tsetAttr -lock true ($modCore + \"_WristIKCtrl.follow\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\taddAttr -ln \"parent\" -at double -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_WristIKCtrl.parent\");\n\t\t}\n\t\taddAttr -ln \"ROOT\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_WristIKCtrl.ROOT\");\n\n\t\taddAttr -ln \"ROOTType\" -at \"enum\" -en \"ROOTC:ROOTsecondaryC:\" ($modCore + \"_WristIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_WristIKCtrl.ROOTType\");\n\n\n\t\t//IK WRIST DYNAMICtrl CONSTRAINTS\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.parent\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW3\");\n\t\t}\n\t\t\n\t\t//ROOT CONNECTIONS\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_WristIKROOTInf_MD\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOT\") ($modCore + \"_WristIKROOTInf_MD.input1X\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOT\") ($modCore + \"_WristIKROOTInf_MD.input1Y\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOTType\") ($modCore + \"_WristIKROOTInf_MD.input2Y\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_WristIKROOTInf_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOTType\") ($modCore + \"_WristIKROOTInf_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_WristIKROOTInf_Reverse.outputX\") ($modCore + \"_WristIKROOTInf_MD.input2X\");\n\n\t\tconnectAttr -f ($modCore + \"_WristIKROOTInf_MD.outputX\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -f ($modCore + \"_WristIKROOTInf_MD.outputY\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTSecondaryCtrlW2\");\n\t\t\n\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + \"_WristIKParent_PMA\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.parent\") ($modCore + \"_WristIKParent_PMA.input1D[0]\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_WristIKCtrl.ROOT\") ($modCore + \"_WristIKParent_PMA.input1D[1]\");\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_WristIKParent_Condition\");\n\t\tsetAttr ($modCore + \"_WristIKParent_Condition.operation\") 4;\n\t\tsetAttr ($modCore + \"_WristIKParent_Condition.secondTerm\") 1;\n\t\tconnectAttr -f ($modCore + \"_WristIKParent_PMA.output1D\") ($modCore + \"_WristIKParent_Condition.firstTerm\");\n\t\tconnectAttr -force ($modCore + \"_WristIKParent_PMA.output1D\") ($modCore + \"_WristIKParent_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_WristIKParent_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_WristIKParent_Condition.outColorR\") ($modCore + \"_WristIKParent_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_WristIKParent_Reverse.outputX\") ($modCore + \"_WristIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\t\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\t\n\t\t//SINGLE ELBOW\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Elbow1\")`)\n\t\t{\n\t\t\t//WRIST IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_WristIKtoFKLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_WristIKCtrlGrp\") ($modCore + \"_WristIKtoFKLctr\")`;\n\t\t\tparent ($modCore + \"_WristIKtoFKLctr\") ($modCore + \"_WristIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_WristIKtoFKLctr\");\n\t\t\tparentConstraint ($modCore + \"_WristFKCtrl\") ($modCore + \"_WristIKtoFKLctr\");\n\t\t\t\n\t\t\t//WRIST FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_WristFKtoIKLctr\");\n\t\t\tsetAttr ($modCore + \"_WristFKtoIKLctr.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_WristFKCtrlGrp\") ($modCore + \"_WristFKtoIKLctr\")`;\n\t\t\tparent ($modCore + \"_WristFKtoIKLctr\") ($modCore + \"_WristFKCtrlGrp\");\n\t\t\torientConstraint -mo ($modCore + \"_WristIKCtrl\") ($modCore + \"_WristFKtoIKLctr\");\n\t\t\tsetAttr ($modCore + \"_WristFKtoIKLctr_orientConstraint1.interpType\") 2;\n\t\t\t\n\t\t\t//ELBOW IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_ElbowIKtoFKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_ElbowIKCtrl\") ($modCore + \"_ElbowIKtoFKAimLctr\")`;\n\t\t\tparent ($modCore + \"_ElbowIKtoFKAimLctr\") ($modCore + \"_ElbowIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ElbowIKtoFKAimLctr\");\n\t\t\tparentConstraint -mo ($modCore + \"_ElbowFKCtrl\") ($modCore + \"_ShoulderFKCtrl\") ($modCore + \"_ElbowIKtoFKAimLctr\");\n\t\t\t\n\t\t\t//SHOULDER FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_ShoulderFKtoIKOrientLctr\");\n\t\t\tsetAttr ($modCore + \"_ShoulderFKtoIKOrientLctr.rotateOrder\") 1;\n\t\t\tdelete `parentConstraint ($modCore + \"_ShoulderJnt\") ($modCore + \"_ShoulderFKtoIKOrientLctr\")`;\n\t\t\tparent ($modCore + \"_ShoulderFKtoIKOrientLctr\") ($modCore + \"_ShoulderFKCtrlGrp\");\n\t\t\torientConstraint ($modCore + \"_ShoulderJntIK\") ($modCore + \"_ShoulderFKtoIKOrientLctr\");\n\t\t\t\n\t\t\t//TURN OFF VISIBILITY\n\t\t\tsetAttr ($modCore + \"_WristIKtoFKLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_WristFKtoIKLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_ElbowIKtoFKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_ShoulderFKtoIKOrientLctr.v\") 0;\n\t\t}\n\t\t\n\t\t//ELBOW HIERARCHY CLEANUP////////////////////////////////////////////////////////\n\t\tif (`objExists ($modCore + \"_ElbowJntFKGrp2\")`)\n\t\t{\n\t\t\tparent ($modCore + \"_ElbowJntFKGrp2\")  ($modCore + \"_ElbowFKCtrlGrp\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_Elbow1FKCtrlGrp\") ($modCore + \"_Elbow2FKCtrlGrp\")\n\t\t\t($modCore + \"_Elbow1JntFKGrp2\") ($modCore + \"_Elbow2JntFKGrp2\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\t\n\t\tselect $topNode;\n\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Lower1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Middle1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Upper1\")`)\n\t\t{\n\t\t\tRRM_ToonLimbs(\"arm\", $prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, $modAttachNode, $topNode);\n\t\t}\n\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tstring $crntModControl;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"arm\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t}\n\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t\t$inverseFront = 1;\n\t\n\t\tif (!`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\t$i = 2;\n\t\t}\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE LEG MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_GenerateRigLeg(string $moduleName, string $topNode)\n{\n\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\t$core = `getAttr ($topNode + \".core\")`;\n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 1;\n\t\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\tint $inverseFront = 0;\n\t$i = 2;\n\tif (!`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$mirrorInt = 2;\n\t}\n\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\n\twhile ($mirrorInt <=2)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"leg\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\n\t\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t//UPPER ROLL JOINTS\n\t\tint $sizeUpperCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$UpperCJnt = `ls ($modCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperCJnt = `size $UpperCJnt`;\n\t\t}\n\t\taddAttr -ln \"upperRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.upperRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.upperRoll\") $sizeUpperCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.upperRoll\");\n\t\t\n\t\tint $sizeLowerCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$LowerCJnt = `ls ($modCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeLowerCJnt = `size $LowerCJnt`;\n\t\t}\n\t\taddAttr -ln \"lowerRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.lowerRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.lowerRoll\") $sizeLowerCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.lowerRoll\");\n\t\n\t\taddAttr -ln \"kneeNum\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.kneeNum\") ;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.kneeNum\") \"1\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.kneeNum\") \"2\";\n\t\t}\t\t\n\t\tsetAttr -l true ($modCore + \"Grp.kneeNum\");\n\t\t\n\t\n\t\tint $sizeMiddleCJnt = 0;\n\t\tif (`objExists ($modCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$MiddleCJnt = `ls ($modCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCJnt = `size $MiddleCJnt`;\n\t\t}\n\t\taddAttr -ln \"midRoll\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.midRoll\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.midRoll\") $sizeMiddleCJnt;\n\t\tsetAttr -l true ($modCore + \"Grp.midRoll\");\n\t\t\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\")  ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\n\t\t//HIP FK CONTROL\n\t\tcircle -n ($modCore + \"_HipFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tdelete -ch ($modCore + \"_HipFKCtrl\");\n\t\tgroup -n ($modCore + \"_HipFKCtrlGrp\") ($modCore + \"_HipFKCtrl\");\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp.rotateOrder\") 1;\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_HipFKCtrlGrp\")`;\n\t\tfloat $upVector = 1;\n\t\tfloat $kneeLocCheck;\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\t$kneeLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Knee.translateZ\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$kneeLocCheck = `getAttr (\"RRM_\" + $prfx + $core + \"_Knee1.translateZ\")`;\n\t\t}\n\t\tif ($kneeLocCheck < -0.0001)\n\t\t{\n\t\t\t$upVector = -1;\n\t\t}\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_HipFKCtrlGrp\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\" -worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_HipFKCtrlGrp\")`;\n\t\t}\n\t\t\n\t\tfloat $lLegLength;\n\t\tfloat $lKneeLength[];\n\t\tfloat $lKnee1Length[];\n\t\tfloat $lKnee2Length[];\n\t\tfloat $lAnkleLength[];\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lKneeLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lAnkleLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t$lLegLength = (($lKneeLength[0] + $lAnkleLength[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lKnee1Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lKnee2Length = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\t\t\n\t\t\t$lKneeLength[0] = ($lKnee1Length[0] + $lKnee2Length[0]);\n\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_StartLctr\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_EndLctr\")`;\n\t\t\t$lAnkleLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\n\t\t\t$lLegLength = (($lKnee1Length[0] + $lKnee2Length[0]) /2);\n\t\t\tdelete ($modCore + \"_StartLctr\");\n\t\t}\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_HipFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_HipFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_HipFKCtrl\");\n\t\t\n\t\tsetAttr (($modCore + \"_HipFKCtrl.scale\"), ($lLegLength/2), ($lLegLength/2), ($lLegLength/2));\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_HipFKCtrlGrp\");\n\t\t\t\n\t\t//KNEE FK CONTROL\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_KneeFKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_KneeFKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_KneeFKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_KneeFKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_KneeFKCtrlGrp\")`;\n\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_KneeFKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_KneeFKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tduplicate -n ($modCore + \"_Knee1FKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee1FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_Knee1FKCtrlGrp\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType \"objectrotation\"\n\t\t\t-worldUpVector 0 0 $upVector -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee1\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_Knee1FKCtrlGrp\")`;\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\t\n\t\t\tduplicate -n ($modCore + \"_Knee2FKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tselect ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee2FKCtrl\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_Knee2FKCtrlGrp\")`;\n\t\t\trotate -r -os 0 0 -90 ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_Knee2FKCtrlGrp\");\n\t\t}\n\t\t\n\t\t\n\t\t//ANKLE FK CONTROL\n\t\tduplicate -n ($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\");\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_AnkleFKCtrlGrp\")`;\n\t\tdelete `orientConstraint -offset 0 0 -90 (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_AnkleFKCtrlGrp\")`;\n\t\tscale -r 0.8 0.8 0.8 ($modCore + \"_AnkleFKCtrlGrp\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_AnkleFKCtrlGrp\");\n\t\tselect ($modCore + \"_AnkleFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_AnkleFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_AnkleFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_AnkleFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_AnkleFKCtrl\");\n\t\n\t\t//BALL CONTROL LOCATORS\n\t\tspaceLocator -n ($modCore + \"_StartLctr\") -p 0 0 0;\n\t\tspaceLocator -n ($modCore + \"_EndLctr\") -p 0 0 0;\n\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\n\t\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_HeelPivot\") ($modCore + \"_StartLctr\")`;\n\t\tdelete `pointConstraint -skip x -skip z (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_StartLctr\")`;\n\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t(\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_StartLctr\")`;\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_EndLctr\")`;\n\t\t$lFootLength = `xform -q -t ($modCore + \"_EndLctr\")`;\n\t\tdelete ($modCore + \"_StartLctr\");\n\t\n\t\t//BALL FK CONTROL\n\t\tcircle -n ($modCore + \"_BallFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmove -r 0 0 0.5 ($modCore + \"_BallFKCtrl.cv[0:7]\");\n\t\n\t\tdelete -ch ($modCore + \"_BallFKCtrl\");\n\t\tgroup -n ($modCore + \"_BallFKCtrlGrp\") ($modCore + \"_BallFKCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_BallFKCtrlGrp.rotateOrder\") 1;\n\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ball\") ($modCore + \"_BallFKCtrlGrp\")`;\n\t\tdelete `orientConstraint -offset 0 -90 -90 (\"RRM_\" + $prfx + $core + \"_Ball\") ($modCore + \"_BallFKCtrlGrp\")`;\n\t\tscale -r ($lFootLength[0]/5) ($lFootLength[0]/5) ($lFootLength[0]/4) ($modCore + \"_BallFKCtrlGrp\");\n\t\tmakeIdentity -apply true -s 1 ($modCore + \"_BallFKCtrlGrp\");\n\t\tselect ($modCore + \"_BallFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_BallFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_BallFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_BallFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_BallFKCtrl\");\n\t\t\n\t\t//TOE FK CONTROL\n\t\tcircle -n ($modCore + \"_ToeFKCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmove -r 0 0 0.5 ($modCore + \"_ToeFKCtrl.cv[0:7]\");\n\t\n\t\tdelete -ch ($modCore + \"_ToeFKCtrl\");\n\t\tgroup -n ($modCore + \"_ToeFKCtrlGrp\") ($modCore + \"_ToeFKCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_ToeFKCtrlGrp.rotateOrder\") 1;\n\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_ToeFKCtrlGrp\")`;\n\t\tdelete `orientConstraint -offset 0 -90 -90 (\"RRM_\" + $prfx + $core + \"_Toe\") ($modCore + \"_ToeFKCtrlGrp\")`;\n\t\tscale -r ($lFootLength[0]/5) ($lFootLength[0]/5) ($lFootLength[0]/4) ($modCore + \"_ToeFKCtrlGrp\");\n\t\tselect ($modCore + \"_ToeFKCtrlGrp\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ToeFKCtrl\");\n\t\ttransformLimits -sx 0.01 1 -esx 1 0 ($modCore + \"_ToeFKCtrl\");\n\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_ToeFKCtrl\");\n\t\ttransformLimits -sz 0.01 1 -esz 1 0 ($modCore + \"_ToeFKCtrl\");\n\t\t\n\t\t//////////////////////JOINTS//////////////////////\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_HipJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJnt\")`;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_KneeJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_KneeFKCtrl\") ($modCore + \"_KneeJnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_AnkleJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJnt\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_HipJnt\")\n\t\t\t($modCore + \"_KneeJnt\") ($modCore + \"_AnkleJnt\");\n\t\t\t\n\t\t\tparent ($modCore + \"_KneeJnt\")  ($modCore + \"_HipJnt\");\n\t\t\tparent ($modCore + \"_AnkleJnt\") ($modCore + \"_KneeJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Knee1Jnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee1Jnt\")`;\n\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_Knee2Jnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_Knee2Jnt\")`;\n\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_AnkleJnt\");\n\t\t\tdelete `parentConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJnt\")`;\n\t\t\t\n\t\t\tmakeIdentity -apply true -r 1  ($modCore + \"_HipJnt\")\n\t\t\t($modCore + \"_Knee1Jnt\") ($modCore + \"_Knee2Jnt\") ($modCore + \"_AnkleJnt\");\n\t\n\t\t\tparent ($modCore + \"_Knee1Jnt\")  ($modCore + \"_HipJnt\");\n\t\t\tparent ($modCore + \"_Knee2Jnt\") ($modCore + \"_Knee1Jnt\"); \n\t\t\tparent ($modCore + \"_AnkleJnt\") ($modCore + \"_Knee2Jnt\");\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_BallJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_BallFKCtrl\") ($modCore + \"_BallJnt\")`;\t\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_ToeJnt\");\n\t\tdelete `parentConstraint ($modCore + \"_ToeFKCtrl\") ($modCore + \"_ToeJnt\")`;\n\t\t\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_BallJnt\") ($modCore + \"_ToeJnt\");\n\t\t\n\t\tparent ($modCore + \"_BallJnt\") ($modCore + \"_AnkleJnt\");\n\t\tparent ($modCore + \"_ToeJnt\") ($modCore + \"_BallJnt\");\n\t\n\t\t//KNEE ORIENTATION\n\t\tif (`objExists ($modCore + \"_KneeJnt\")`)\n\t\t{\n\t\t\tif ($kneeLocCheck < -0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_KneeJnt.preferredAngleY\") -60;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_KneeJnt.preferredAngleY\") 60;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($kneeLocCheck < -0.0001)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Knee1Jnt.preferredAngleY\") -30;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_Knee1Jnt.preferredAngleY\") 30;\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t////////////////////IK/FK JOINTS////////////////////////////////////\t\n\t\t//LEGrp FK\n\t\tduplicate -n ($modCore + \"_HipJntFK\") ($modCore + \"_HipJnt\");\n\t\tselect ($modCore + \"_HipJntFK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_KneeJntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntFK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Knee1JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee2JntFK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntFK\");\n\t\t}\n\t\tselect ($modCore + \"_AnkleJntFK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_BallJntFK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ToeJntFK\");\n\t\t\n\t\t//LEGrp IK\n\t\tduplicate -n ($modCore + \"_HipJntIK\") ($modCore + \"_HipJnt\");\n\t\tselect ($modCore + \"_HipJntIK\");\n\t\tpickWalk -d down;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\trename ($modCore + \"_KneeJntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntIK\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trename ($modCore + \"_Knee1JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_Knee2JntIK\");\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_AnkleJntIK\");\n\t\t}\t\n\t\tselect ($modCore + \"_AnkleJntIK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_BallJntIK\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_ToeJntIK\");\n\t\t\n\t\t//DETACH FK LEGrp JOINTS FOR SCALE COMPENSATION\n\t\n\t\tparent -w ($modCore + \"_AnkleJntFK\");\n\t\tgroup -n ($modCore + \"_AnkleJntFKGrp1\") ($modCore + \"_AnkleJntFK\");\n\t\tgroup -n ($modCore + \"_AnkleJntFKGrp2\") ($modCore + \"_AnkleJntFKGrp1\");\n\t\t$lAnkleLocation = `xform -q -ws -t ($modCore + \"_AnkleJnt\")`;\n\t\tmove $lAnkleLocation[0] $lAnkleLocation[1] $lAnkleLocation[2] ($modCore + \"_AnkleJntFKGrp1.scalePivot\") ($modCore + \"_AnkleJntFKGrp1.rotatePivot\") ;\n\t\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_KneeJntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2JntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\t}\n\t\t\t\n\t\t$lKneeLocation = `xform -q -ws -t ($modCore + \"_HipJnt\")`;\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\t$lKneeLocation = `xform -q -ws -t ($modCore + \"_KneeJnt\")`;\n\t\t\tmove $lKneeLocation[0] $lKneeLocation[1] $lKneeLocation[2] ($modCore + \"_AnkleJntFKGrp2.scalePivot\") ($modCore + \"_AnkleJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_KneeJntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\t\n\t\t\tparent -w ($modCore + \"_KneeJntFK\");\n\t\t\tgroup -n ($modCore + \"_KneeJntFKGrp1\") ($modCore + \"_KneeJntFK\");\n\t\t\tgroup -n ($modCore + \"_KneeJntFKGrp2\") ($modCore + \"_KneeJntFKGrp1\");\n\t\t\t$lHipLocation = `xform -q -ws -t ($modCore + \"_HipJnt\")`;\n\t\t\tmove $lKneeLocation[0] $lKneeLocation[1] $lKneeLocation[2] ($modCore + \"_KneeJntFKGrp1.scalePivot\") ($modCore + \"_KneeJntFKGrp1.rotatePivot\") ;\n\t\t\tmove $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($modCore + \"_KneeJntFKGrp2.scalePivot\") ($modCore + \"_KneeJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_KneeFKCtrl\") ($modCore + \"_KneeJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_HipJntFK\") ($modCore + \"_KneeJntFKGrp2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$lKnee2Location = `xform -q -ws -t ($modCore + \"_Knee2Jnt\")`;\n\t\t\tmove $lKnee2Location[0] $lKnee2Location[1] $lKnee2Location[2] ($modCore + \"_AnkleJntFKGrp2.scalePivot\") ($modCore + \"_AnkleJntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2JntFK\") ($modCore + \"_AnkleJntFKGrp2\");\n\t\n\t\t\tparent -w ($modCore + \"_Knee1JntFK\") ($modCore + \"_Knee2JntFK\");\n\t\t\t\n\t\t\tgroup -n ($modCore + \"_Knee1JntFKGrp1\") ($modCore + \"_Knee1JntFK\");\n\t\t\tgroup -n ($modCore + \"_Knee1JntFKGrp2\") ($modCore + \"_Knee1JntFKGrp1\");\n\t\t\t$lHipLocation = `xform -q -ws -t ($modCore + \"_HipJnt\")`;\n\t\t\t$lKnee1Location = `xform -q -ws -t ($modCore + \"_Knee1Jnt\")`;\n\t\t\t$lKnee2Location = `xform -q -ws -t ($modCore + \"_Knee2Jnt\")`;\n\t\t\tmove $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($modCore + \"_Knee1JntFKGrp1.scalePivot\") ($modCore + \"_Knee1JntFKGrp1.rotatePivot\") ;\n\t\t\tmove $lKnee1Location[0] $lKnee1Location[1] $lKnee1Location[2] ($modCore + \"_Knee1JntFKGrp2.scalePivot\") ($modCore + \"_Knee1JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee1JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_HipJntFK\") ($modCore + \"_Knee1JntFKGrp2\");\n\t\n\t\t\tgroup -n ($modCore + \"_Knee2JntFKGrp1\") ($modCore + \"_Knee2JntFK\");\n\t\t\tgroup -n ($modCore + \"_Knee2JntFKGrp2\") ($modCore + \"_Knee2JntFKGrp1\");\n\t\t\tmove $lKnee1Location[0] $lKnee1Location[1] $lKnee1Location[2] ($modCore + \"_Knee2JntFKGrp1.scalePivot\") ($modCore + \"_Knee2JntFKGrp1.rotatePivot\") ;\n\t\t\tmove $lKnee2Location[0] $lKnee2Location[1] $lKnee2Location[2] ($modCore + \"_Knee2JntFKGrp2.scalePivot\") ($modCore + \"_Knee2JntFKGrp2.rotatePivot\") ;\n\t\t\tpointConstraint ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_Knee2JntFKGrp1\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1JntFK\") ($modCore + \"_Knee2JntFKGrp2\");\n\t\t}\n\t\t\n\t\t//CONSTRAIN HIP JOINTS TO ATTACH NODE\n\t\tpointConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJnt\");\n\t\tpointConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJntFK\");\n\t\tpointConstraint ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJntIK\");\n\t\t//select pCube1;\n\t\n\t\t//FOOT IK CONTROL\n\t\tcircle -n ($modCore + \"_FootIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 2.5 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1;\n\t\n\t\tscale -r 0.4 1 1 ($modCore + \"_FootIKCtrl.cv[13]\") ($modCore + \"_FootIKCtrl.cv[5]\");\n\t\tscale -r 0.6 1 1 ($modCore + \"_FootIKCtrl.cv[14]\") ($modCore + \"_FootIKCtrl.cv[4]\");\n\t\tscale -r 0.78 1 1 ($modCore + \"_FootIKCtrl.cv[3]\") ($modCore + \"_FootIKCtrl.cv[15]\"); \n\t\tscale -r 0.78 1 1 ($modCore + \"_FootIKCtrl.cv[12]\") ($modCore + \"_FootIKCtrl.cv[6]\");\n\t\tscale -r 0.89 1 1 ($modCore + \"_FootIKCtrl.cv[7]\") ($modCore + \"_FootIKCtrl.cv[11]\");\n\t\tmove -r -os -wd 0 0.565 0 ($modCore + \"_FootIKCtrl.cv[5]\") ($modCore + \"_FootIKCtrl.cv[13]\");\n\t\tmove -r -os -wd 0 0.1 0 ($modCore + \"_FootIKCtrl.cv[4]\") ($modCore + \"_FootIKCtrl.cv[14]\") ($modCore + \"_FootIKCtrl.cv[6]\") ($modCore + \"_FootIKCtrl.cv[12]\");\n\t\tmove -r 0 0 1.5 ($modCore + \"_FootIKCtrl.cv[0:15]\");\n\t\tscale -r ($lFootLength[0]/4.2) ($lFootLength[0]/4.2) ($lFootLength[0]/3.4) ($modCore + \"_FootIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_FootIKCtrl\");\n\t\tdelete -ch ($modCore + \"_FootIKCtrl\");\n\t\tgroup -n ($modCore + \"_FootIKCtrlGrp\") ($modCore + \"_FootIKCtrl\"); xform -os -piv 0 0 0;\n\t\tsetAttr ($modCore + \"_FootIKCtrl.rotateOrder\") 1;\n\t\t\n\t\t//TOE IK CONTROL\n\t\tcircle -n ($modCore + \"_ToeIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\t\tdelete -ch;\n\t\tmove -r ($multiplier * -0.251) 1.330 2.207($modCore + \"_ToeIKCtrl.cv[1]\") ;\n\t\tmove -r 0.254 1.085 1.162($modCore + \"_ToeIKCtrl.cv[0]\") ;\n\t\tmove -r 0.051 0.451 -0.205 ($modCore + \"_ToeIKCtrl.cv[7]\") ;\n\t\tmove -r 0.188 0.259 -0.109 ($modCore + \"_ToeIKCtrl.cv[6]\") ;\n\t\tmove -r -0.277 0.154 0.308 ($modCore + \"_ToeIKCtrl.cv[5]\") ;\n\t\tmove -r -0.395 0.259 -0.033 ($modCore + \"_ToeIKCtrl.cv[4]\") ;\n\t\tmove -r 0.003 0.474 -0.205 ($modCore + \"_ToeIKCtrl.cv[3]\") ;\n\t\tmove -r -0.369 1.190 1.331 ($modCore + \"_ToeIKCtrl.cv[2]\") ;\n\t\tmove -r -os -wd 0 0 0.9 ($modCore + \"_ToeIKCtrl.cv[0:7]\") ;\n\t\tscale -r -p 0cm 0cm 0cm $multiplier 1 1 ($modCore + \"_ToeIKCtrl.cv[0:7]\");\n\t\t\n\t\tmove -r -.001 0 1.85 ($modCore + \"_ToeIKCtrl\");\n\t\tscale -r ($lFootLength[0]/4) ($lFootLength[0]/4) ($lFootLength[0]/4.4) ($modCore + \"_ToeIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_ToeIKCtrl\");\n\t\tgroup -n ($modCore + \"_ToeIKCtrlGrp\") ($modCore + \"_ToeIKCtrl\");\n\t\tparent ($modCore + \"_ToeIKCtrlGrp\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t\n\t\t//HEEL IK CONTROL\n\t\tcircle -n ($modCore + \"_HeelIKCtrl\") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1;\n\t\tdelete -ch;\n\t\tmove -r -0.25107 1.330277 2.206782 ($modCore + \"_HeelIKCtrl.cv[1]\") ;\n\t\tmove -r 0.254402 1.084741 1.162191 ($modCore + \"_HeelIKCtrl.cv[0]\") ;\n\t\tmove -r 0.0513063 0.450871 -0.204969 ($modCore + \"_HeelIKCtrl.cv[7]\") ;\n\t\tmove -r 0.187803 0.259426 -0.108661 ($modCore + \"_HeelIKCtrl.cv[6]\") ;\n\t\tmove -r -0.276837 0.154413 0.307813 ($modCore + \"_HeelIKCtrl.cv[5]\") ;\n\t\tmove -r -0.395115 0.259426 -0.0326967 ($modCore + \"_HeelIKCtrl.cv[4]\") ;\n\t\tmove -r 0.00260226 0.47359 -0.204969 ($modCore + \"_HeelIKCtrl.cv[3]\") ;\n\t\tmove -r -0.369241 1.189888 1.331089 ($modCore + \"_HeelIKCtrl.cv[2]\") ;\n\t\tmove -r -os -wd 0 0 0.8 ($modCore + \"_HeelIKCtrl.cv[0:7]\") ;\n\t\tscale -r -p 0cm 0cm 0cm $multiplier 1 -1 ($modCore + \"_HeelIKCtrl.cv[0:7]\");\n\t\tscale -r ($lFootLength[0]/3.7) ($lFootLength[0]/3.7) ($lFootLength[0]/5.5) ($modCore + \"_HeelIKCtrl\");\n\t\tmove -r -.001 0 1.85 ($modCore + \"_HeelIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_HeelIKCtrl\");\n\t\tgroup -n ($modCore + \"_HeelIKCtrlGrp\") ($modCore + \"_HeelIKCtrl\");\n\t\tparent ($modCore + \"_HeelIKCtrlGrp\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Ground\") ($modCore + \"_FootIKCtrlGrp\")`;\n\t\t$lAnklePosition = `xform -ws -q -rp ($modCore + \"_AnkleJnt\")`;\n\t\t$lBallLocation = `xform  -q -t ($modCore + \"_BallJnt\")`;\n\t\t$lToeLocation = `xform -q -t ($modCore + \"_ToeJnt\")`;\n\t\tmakeIdentity -apply true -t 0 -s 1 ($modCore + \"_FootIKCtrlGrp\");\n\t\t\n\t\t\n\t\t//MOVE TOE CTRL PIVOT\n\t\t$limbJointLoc = `xform -ws -q -t ($modCore + \"_ToeJnt\")`;\n\t\t$heelLoc = `xform -ws -q -rp (\"RRM_\" + $prfx + $core + \"_HeelPivot\")`;\n\t\tdelete `pointConstraint ($modCore + \"_ToeJnt\") ($modCore + \"_ToeIKCtrl\")`;\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_HeelPivot\") ($modCore + \"_HeelIKCtrl\")`;\n\t\tmove $heelLoc[0]  $heelLoc[1] $heelLoc[2] ($modCore + \"_HeelIKCtrlGrp.scalePivot\") ($modCore + \"_HeelIKCtrlGrp.rotatePivot\") ;\n\t\tmove $limbJointLoc[0]  $limbJointLoc[1] $limbJointLoc[2] ($modCore + \"_ToeIKCtrlGrp.scalePivot\") ($modCore + \"_ToeIKCtrlGrp.rotatePivot\") ;\n\t\tmove $lAnklePosition[0] $lAnklePosition[1] $lAnklePosition[2] ($modCore + \"_FootIKCtrl.scalePivot\") ($modCore + \"_FootIKCtrl.rotatePivot\") ;\n\t\n\t\t\n\t\t//FOOT IK LOCATORS\n\t\tspaceLocator -n ($modCore + \"_FootBallPivotLctr\");\n\t\tdelete `pointConstraint ($modCore + \"_BallJnt\") ($modCore + \"_FootBallPivotLctr\")`;\n\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t($modCore + \"_ToeJnt\") ($modCore + \"_FootBallPivotLctr\")`;\n\t\t\n\t\tduplicate -rr -n ($modCore + \"_FootToePivotLctr\") ($modCore + \"_FootBallPivotLctr\");\n\t\t\n\t\tduplicate -n ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_FootBallPivotLctr\");\n\t\tparent ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_FootBallPivotLctr\");\n\t\n\t\tselect ($modCore + \"_AnkleJntIK.rotatePivot\") ($modCore + \"_BallJntIK.rotatePivot\") ; \n\t\tikHandle -n ($modCore + \"_BallIKHandle\") -sol ikSCsolver;\n\t\tparent ($modCore + \"_BallIKHandle\") ($modCore + \"_FootBallPivotLctr2\");\n\t\tselect ($modCore + \"_BallJntIK.rotatePivot\") ($modCore + \"_ToeJntIK.rotatePivot\") ; \n\t\tikHandle -n ($modCore + \"_ToeIKHandle\") -sol ikSCsolver;\n\t\tparent ($modCore + \"_ToeIKHandle\") ($modCore + \"_FootToePivotLctr\");\n\t\n\t\tspaceLocator -n ($modCore + \"_BallSwivelLctr\");\n\t\tdelete `pointConstraint ($modCore + \"_BallJnt\") ($modCore + \"_BallSwivelLctr\")`;\n\t\tparent ($modCore + \"_BallSwivelLctr\") ($modCore + \"_ToeIKCtrl\");\n\t\tmakeIdentity -apply false -r 1 ($modCore + \"_BallSwivelLctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_FootRightTiltLctr\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_FootRightTilt\") ($modCore + \"_FootRightTiltLctr\")`;\n\t\tspaceLocator -n ($modCore + \"_FootLeftTiltLctr\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_FootLeftTilt\") ($modCore + \"_FootLeftTiltLctr\")`;\n\t\t\n\t\tspaceLocator -n ($modCore + \"_HeelLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_HeelIKCtrl\") ($modCore + \"_HeelLctr\")`;\n\t\tparent ($modCore + \"_HeelLctr\") ($modCore + \"_HeelIKCtrl\");\n\t\tsetAttr ($modCore + \"_HeelLctr.v\") 0;\n\t\t\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_HeelPivot\") ($modCore + \"_HeelIKCtrlGrp\")`;\n\t\n\t\tparent ($modCore + \"_HeelIKCtrlGrp\") ($modCore + \"_ToeIKCtrl\");\n\t\tparent ($modCore + \"_BallSwivelLctr\") ($modCore + \"_HeelLctr\");\n\t\tparent ($modCore + \"_FootRightTiltLctr\") ($modCore + \"_BallSwivelLctr\");\n\t\tparent ($modCore + \"_FootLeftTiltLctr\")  ($modCore + \"_FootRightTiltLctr\");\n\t\tparent ($modCore + \"_FootBallPivotLctr\") ($modCore + \"_FootToePivotLctr\") ($modCore + \"_FootLeftTiltLctr\");\n\t\t\n\t\tmakeIdentity -apply true -t 1 -r 0 -s 1 ($modCore + \"_ToeIKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + \"_FootIKCtrl\") ($modCore + \"_ToeIKCtrlGrp\");\n\t\t\n\t\t//select pCube1;\n\t\tsetAttr -l 0 -k 1 ($modCore + \"_HipJntIK.rx\");\n\t\tsetAttr -l 0 -k 1 ($modCore + \"_HipJntIK.ry\");\n\t\tsetAttr -l 0 -k 1 ($modCore + \"_HipJntIK.rz\");\n\t\tif (`objExists ($modCore + \"_KneeJntIK\")`)\n\t\t{\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_KneeJntIK.rx\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_KneeJntIK.ry\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_KneeJntIK.rz\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee1JntIK.rx\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee1JntIK.ry\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee1JntIK.rz\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee2JntIK.rx\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee2JntIK.ry\");\n\t\t\tsetAttr -l 0 -k 1 ($modCore + \"_Knee2JntIK.rz\");\n\t\t}\n\t\n\t\t//KNEE IK CONTROL\n\t\tcurve -n ($modCore + \"_KneeIKCtrl\") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0\n\t\t-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0\n\t\t-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0\t\n\t\t-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9\n\t\t-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22\n\t\t-k 23 -k 24 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_KneeIKCtrlShape\");\n\t\t\n\t\tmove -r 0 0 0.95 ($modCore + \"_KneeIKCtrl.cv[12]\")  ($modCore + \"_KneeIKCtrl.cv[0]\") ($modCore + \"_KneeIKCtrl.cv[24]\") ($modCore + \"_KneeIKCtrl.cv[18]\") ($modCore + \"_KneeIKCtrl.cv[6]\") ;\n\t\tmove -r 0 0 -0.65 ($modCore + \"_KneeIKCtrl.cv[3]\") ($modCore + \"_KneeIKCtrl.cv[9]\") ($modCore + \"_KneeIKCtrl.cv[15]\") ($modCore + \"_KneeIKCtrl.cv[21]\") ;\n\t\tgroup -n ($modCore + \"_KneeIKCtrlGrp\") ($modCore + \"_KneeIKCtrl\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee\") ($modCore + \"_KneeIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_KneeIKCtrl.scale\"), ($lLegLength / 16), ($lLegLength / 16), ($lLegLength / 16));\n\t\t\tsetAttr ($modCore + \"_KneeIKCtrl.tz\") ($lLegLength * 1.8);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Knee1\") ($modCore + \"_KneeIKCtrlGrp\")`;\n\t\t\tsetAttr (($modCore + \"_KneeIKCtrl.scale\"), ($lLegLength / 16), ($lLegLength / 16), ($lLegLength / 16));\n\t\t\tsetAttr ($modCore + \"_KneeIKCtrl.tz\") ($lLegLength * 1.8);\n\t\t\t\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\t\n\t\t//LOWER LEGrp CONTROL\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tcurve -n ($modCore + \"_LowerLegIKCtrl\") -d 1 -p -1 0 4 -p -4 0 4 -p -3 0 5 -p -2 0 6 -p -1 0 7 -p 0 0 8 -p 1 0 7 -p 2 0 6 -p 3 0 5 -p 4 0 4 -p 1 0 4 -p 1 0 3 -p 1 0 2 -p 1 0 1 -p 1 0 0 -p 1 0 -1 -p 1 0 -2 -p 1 0 -3 -p 1 0 -4 -p 4 0 -4 -p 3 0 -5 -p 2 0 -6 -p 1 0 -7 -p 0 0 -8 -p -1 0 -7 -p -2 0 -6 -p -3 0 -5 -p -4 0 -4 -p -1 0 -4 -p -1 0 -3 -p -1 0 -2 -p -1 0 -1 -p -1 0 0 -p -1 0 1 -p -1 0 2 -p -1 0 3 -p -1 0 4 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_LowerLegIKCtrlShape\");\n\t\t\tnonLinear -type bend -lowBound -1 -highBound 1 -curvature 0.6;\n\t\t\t$bend = `ls -sl`;\n\t\t\trename $bend ($modCore + \"_LowerLegIKCBend\");\n\t\t\trotate -a -os -90 0 -90 ($modCore + \"_LowerLegIKCBend\");\n\t\n\t\t\tdelete -ch ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tsetAttr (($modCore + \"_LowerLegIKCtrl.scale\"), ($lLegLength/14), ($lLegLength/14), ($lLegLength/14));\n\t\t\tmakeIdentity -apply true -r 1 -s 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\t\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrlGrp\") ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrlGrp2\") ($modCore + \"_LowerLegIKCtrlGrp\");\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrlGrp3\") ($modCore + \"_LowerLegIKCtrlGrp2\");\t\t\t\n\t\t\tparent ($modCore + \"_LowerLegIKCtrlGrp3\") ($modCore + \"_ScaleGrp\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp.rotateOrder\") 1;\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp2.rotateOrder\") 1;\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp3.rotateOrder\") 1;\n\t\n\t\t\tspaceLocator -n ($modCore + \"_lowerLegIKLctr\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_lowerLegIKLctr\")`;\n\t\t\tparent ($modCore + \"_lowerLegIKLctr\") ($modCore + \"_HipFKCtrl\");\n\t\t\tsetAttr ($modCore + \"_lowerLegIKLctr.v\") 0;\n\t\t\t\n\t\n\n\t\t\t\n\t\t\t//MOVE GROUP 3 TO BALL LOCATION AND ORIENT IT SO IT IS AIMING AT LOWER IK CONTROL\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrlGrp3\")`;\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee2\")\n\t\t\t(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrlGrp3\")`;\n\t\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_LowerLegIKCtrlGrp3\");\n\t\t\t\n\t\t\t//LOCATOR FOR UP AXIS ON LOWER FOOT CONTROL USING ROTATE Y ONLY FORM FOOTIKC\n\t\t\tspaceLocator -n ($modCore + \"_LowerLegIKCtrl_UpLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrl_UpLctr.rotateOrder\") 1;\n\t\t\tgroup -n ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\") ($modCore + \"_LowerLegIKCtrl_UpLctr\");\n\t\t\t//delete `orientConstraint -skip x -skip z ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\")`;\n\t\t\tdelete `orientConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\")`;\n\t\t\tpointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\");\n\t\t\tparent ($modCore + \"_LowerLegIKCtrl_UpLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrl_UpLctrGrp.v\") 0;\n\t\t\torientConstraint -mo -skip x -skip z ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrl_UpLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrl_UpLctr_orientConstraint1.interpType\") 2;\n\t\t\t\n\t\t\taimConstraint -mo -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject ($modCore + \"_LowerLegIKCtrl_UpLctr\")\n\t\t\t($modCore + \"_lowerLegIKLctr\") ($modCore + \"_LowerLegIKCtrlGrp2\");\n\t\t\t//select pCube1;\n\t\t\tspaceLocator -n ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\");\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\")`;\n\t\t\tparent ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\") ($modCore + \"_FootBallPivotLctr\");\n\t\t\t//delete `aimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"objectRotation\" -worldUpVector 0 0 1 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Knee2\")\n\t\t\t//(\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\")`;\n\t\t\tdelete `orientConstraint ($modCore + \"_LowerLegIKCtrlGrp2\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\");\n\n\t\t\torientConstraint -mo ($modCore + \"_LowerLegIKCtrlGrp2\") ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\") ($modCore + \"_LowerLegIKCtrlGrp\");\n\t\t\t\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Knee2\") ($modCore + \"_LowerLegIKCtrl\")`;\n\t\t\t$AnklePos = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Ankle\")`;\n\t\t\tmove -a $AnklePos[0] $AnklePos[1] $AnklePos[2] ($modCore + \"_LowerLegIKCtrl.scalePivot\") ($modCore + \"_LowerLegIKCtrl.rotatePivot\") ;\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\t\n\t\t\t//ADD ORIENTATION ATTRIBUTE FOR LOWER LEGrp IKCtrl ORIENTATION\n\t\t\taddAttr -ln \"autoOrient\" -at double -min 0 -max 1 -dv 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerLegIKCtrl.autoOrient\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerLegIKCtrl.autoOrient\") ($modCore + \"_LowerLegIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerLegIKCtrlGrp2W0\");\n\t\t\t\n\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_LowerLegIKCtrl_Reverse\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerLegIKCtrl.autoOrient\") ($modCore + \"_LowerLegIKCtrl_Reverse.inputX\");\n\t\t\tconnectAttr -f ($modCore + \"_LowerLegIKCtrl_Reverse.outputX\") ($modCore + \"_LowerLegIKCtrlGrp_orientConstraint1.\" + $modCore + \"_LowerLegIKCtrlGrp2_LctrOffsetW1\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset.v\") 0;\n\n\t\t\tspaceLocator -n ($modCore + \"_LowerKneeIKOffsetLctr\");\n\t\t\tdelete `pointConstraint ($modCore + \"_Knee2Jnt\") ($modCore + \"_LowerKneeIKOffsetLctr\")`;\n\t\t\t//*/\n\t\t}\n\n\t\t//select pCube1;\n\t\t\n\t\t//KNEE AIM LOCATORS\n\t\tspaceLocator -n ($modCore + \"_KneeIKCtrl_TargetLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKCtrl_HipLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKCtrl_AnkleLctr\");\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Hip\") ($modCore + \"_KneeIKCtrl_HipLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_ScaleGrp\") ($modCore + \"_KneeIKCtrl_HipLctr\");\n\t\t\n\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_Ankle\") ($modCore + \"_KneeIKCtrl_AnkleLctr\")`;\n\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\")  ($modCore + \"_KneeIKCtrl_AnkleLctr\");\n\t\t\n\t\tparent ($modCore + \"_KneeIKCtrl_HipLctr\") ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_ScaleGrp\");\n\t\tsetAttr ($modCore + \"_KneeIKCtrl_HipLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrl_AnkleLctr.v\") 0;\n\t\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\t\n\t\t\tdelete `pointConstraint ($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKCtrl_TargetLctr\")`;\n\t\t\tpointConstraint -mo ($modCore + \"_KneeIKCtrl_HipLctr\") ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_KneeIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_KneeIKCtrl_TargetLctr\") ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_KneeIKCtrl_HipLctr\") ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_KneeIKCtrl_TargetLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modName + \"_MAINCtrl\")\n\t\t\t($modCore + \"_KneeIKCtrl_TargetLctr\") ($modCore + \"_KneeIKCtrl\");\n\t\t}\n\t\t\t\n\n\t\t//IK SCALE\n\t\t\n\t\t//NODES\n\t\tspaceLocator -n ($modCore + \"_LegLengthOriginLctr\");\n\t\tpointConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t\n\t\tspaceLocator -n ($modCore + \"_LegLengthEndLctr\");\n\t\tparent ($modCore + \"_LegLengthEndLctr\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t\n\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_LegLengthEndLctr\")`;\n\t\t\tparentConstraint ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_LegLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_KneeIKCtrl_AnkleLctr\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_LowerLegIKCLctr\");\n\t\t\tsetAttr ($modCore + \"_LowerLegIKCLctr.v\") 0;\n\t\t\tdelete `parentConstraint ($modCore + \"_Knee2Jnt\") ($modCore + \"_LowerLegIKCLctr\")`;\n\t\t\tparent  ($modCore + \"_LowerLegIKCLctr\") ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tpointConstraint ($modCore + \"_LowerLegIKCLctr\") ($modCore + \"_LegLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_LegLengthOriginLctr\");\n\t\t}\n\n\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_LegLength_MD\");\n\t\tsetAttr ($modCore + \"_LegLength_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_LegLengthEndLctr.translateX\") ($modCore + \"_LegLength_MD.input1X\");\n\t\tsetAttr ($modCore + \"_LegLength_MD.input2X\") ($lLegLength*2);\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_LegLength_Condition\");\n\t\tconnectAttr -f ($modCore + \"_LegLength_MD.outputX\") ($modCore + \"_LegLength_Condition.firstTerm\");\n\t\tsetAttr ($modCore + \"_LegLength_Condition.secondTerm\") 1;\n\t\tsetAttr ($modCore + \"_LegLength_Condition.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_LegLength_MD.outputX\") ($modCore + \"_LegLength_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_LegLength_Blnd\");\n\t\tconnectAttr -f ($modCore + \"_LegLength_Condition.outColorR\") ($modCore + \"_LegLength_Blnd.color1R\");\n\t\tsetAttr ($modCore + \"_LegLength_Blnd.color2\") -type double3 1 0 1 ;\n\t\t\n\t\t//ADD STRETCH TO IK ANKLE CONTROL\n\t\taddAttr -ln \"stretch\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\n\t\t//LEGrp IK LOCK\n\t\t\n\t\t//LEGrp IK LOCK LOCATORS\n\t\tspaceLocator -n ($modCore + \"_HipIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKLockLctr\");\n\t\tspaceLocator -n ($modCore + \"_AnkleIKLockLctr\");\n\t\tparent ($modCore + \"_KneeIKLockLctr\") ($modCore + \"_HipIKLockLctr\");\n\t\tparent ($modCore + \"_AnkleIKLockLctr\") ($modCore + \"_KneeIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_HipIKLockLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_KneeIKCtrl\") ($modCore + \"_HipIKLockLctr\");\n\t\tpointConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKLockLctr\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_FootIKCtrl\") ($modCore + \"_KneeIKLockLctr\");\n\t\t\tdelete `pointConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleIKLockLctr\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_AnkleIKLockLctr\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_KneeIKLockLctr.translateX\") ($modCore + \"_HipLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.input2X\") $lKneeLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_kneeLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_AnkleIKLockLctr.translateX\") ($modCore + \"_kneeLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.input2X\") $lAnkleLength[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_HipLockLength_MD.outputX\") ($modCore + \"_HipLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_HipLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_kneeLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_kneeLockLength_MD.outputX\") ($modCore + \"_kneeLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_kneeLock_Blnd.color2R\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_HipIKLockLctr\");\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_LowerLegIKCtrl\") ($modCore + \"_LowerKneeIKOffsetLctr\");\n\t\t\t\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_KneeIKLockLctr\");\n\t\t\tpointConstraint ($modCore + \"_LowerKneeIKOffsetLctr\") ($modCore + \"_AnkleIKLockLctr\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_KneeIKLockLctr.translateX\") ($modCore + \"_HipLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_HipLockLength_MD.input2X\") $lKnee1Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_kneeLockLength_MD\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_AnkleIKLockLctr.translateX\") ($modCore + \"_kneeLockLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_kneeLockLength_MD.input2X\") $lKnee2Length[0];\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_HipLockLength_MD.outputX\") ($modCore + \"_HipLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_HipLock_Blnd.color2R\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_kneeLock_Blnd\");\n\t\t\tconnectAttr -f ($modCore + \"_kneeLockLength_MD.outputX\") ($modCore + \"_kneeLock_Blnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_LegLength_Blnd.outputR\") ($modCore + \"_kneeLock_Blnd.color2R\");\n\n\t\t\t//AUTO STRETCH ON LOWER LEGrp IK CONTROL\n\t\t\taddAttr -ln \"lowerScale\" -at double -min 0.01 -dv 1 ($modCore + \"_LowerLegIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_LowerLegIKCtrl.lowerScale\");\n\t\t\t\n\t\t\t//GET LEGrp LENGTH\n\t\t\t\n\t\t\t$Knee1Length2 = `getAttr ($modCore + \"_Knee1Jnt.tx\")`;\n\t\t\t$Knee2Length2 = `getAttr ($modCore + \"_Knee2Jnt.tx\")`;\n\t\t\t$AnkleLength2 = `getAttr ($modCore + \"_AnkleJnt.tx\")`;\n\t\t\t$FullLegLength = ($Knee1Length2 + $Knee2Length2 + $AnkleLength2);\n\t\t\t\n\t\t\t//LEGrp LENGTH LOCATORS\n\t\t\tspaceLocator -n ($modCore + \"_FullLegLengthAimLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_FullLegLengthEndLctr\");\n\t\t\tparent ($modCore + \"_FullLegLengthEndLctr\") ($modCore + \"_FullLegLengthAimLctr\");\n\t\t\tparent ($modCore + \"_FullLegLengthAimLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\tpointConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_FullLegLengthAimLctr\");\n\t\t\tpointConstraint ($modCore + \"_LowerLegIKCtrlGrp2_LctrOffset\") ($modCore + \"_FullLegLengthEndLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" ($modCore + \"_FootIKCtrl\") ($modCore + \"_FullLegLengthAimLctr\");\n\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullLegLength_MD\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_MD.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLengthEndLctr.translateX\") ($modCore + \"_FullLegLength_MD.input1X\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_MD.input2X\") $FullLegLength;\n\t\t\t\n\t\t\tshadingNode -asUtility condition -n ($modCore + \"_FullLegLength_Condition\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_MD.outputX\") ($modCore + \"_FullLegLength_Condition.firstTerm\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_Condition.secondTerm\") 1;\n\t\t\tsetAttr ($modCore + \"_FullLegLength_Condition.operation\") 2;\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_MD.outputX\") ($modCore + \"_FullLegLength_Condition.colorIfTrueR\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_FullLegLength_Blnd\");\n\t\t\tconnectAttr -force ($modCore + \"_FootIKCtrl.stretch\") ($modCore + \"_FullLegLength_Blnd.blender\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_Condition.outColorR\") ($modCore + \"_FullLegLength_Blnd.color1R\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength_Blnd.color2R\") 1;\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_FullLegLengthAimLctr.v\") 0;\n\t\t\t\n\t\t\t//MULTIPLY STRETCH WITH LOWER SCALE\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullLegLength2_MD\");\n\t\t\tconnectAttr -force ($modCore + \"_LowerLegIKCtrl.lowerScale\") ($modCore + \"_FullLegLength2_MD.input1X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength_Blnd.outputR\") ($modCore + \"_FullLegLength2_MD.input2X\");\n\t\t\tconnectAttr -force ($modCore + \"_FullLegLength2_MD.outputX\") ($modCore + \"_LowerLegIKCtrl.scaleY\");\n\t\t\t\n\t\t\t//CREATE MULTIPLY/DIVIDE TO CONNECT TO THE KNEE2JntIK\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FullLegLength2_Inv_MD\");\n\t\t\tsetAttr ($modCore + \"_FullLegLength2_Inv_MD.operation\") 2;\n\t\t\tsetAttr ($modCore + \"_FullLegLength2_Inv_MD.input1X\")  1;\n\t\t\tconnectAttr ($modCore + \"_FullLegLength2_MD.outputX\") ($modCore + \"_Knee2JntIK.scaleX\");\n\t\t\tconnectAttr ($modCore + \"_FullLegLength2_MD.outputX\") ($modCore + \"_FullLegLength2_Inv_MD.input2X\");\n\t\t}\n\t\t\n\t\t//select pCube1;\n\t\t\t\n\t\t//ADD STRETCH TO IK ANKLE CONTROL\n\t\tsetAttr -e-k true ($modCore + \"_FootIKCtrl.stretch\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.stretch\") ($modCore + \"_LegLength_Blnd.blender\");\n\t\t\n\t\t//ADD KNEE LOCK TO IK ANKLE CONTROL\n\t\taddAttr -ln \"kneeLock\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_FootIKCtrl.kneeLock\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.kneeLock\") ($modCore + \"_HipLock_Blnd.blender\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.kneeLock\") ($modCore + \"_kneeLock_Blnd.blender\");\n\t\t\n\t\t//ADD LEGrp SCALE\n\t\taddAttr -ln \"legScale\"  -at double  -min 0.01 -dv 1 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_FootIKCtrl.legScale\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_HipLock_Blnd.outputR\") ($modCore + \"_HipScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_FootIKCtrl.legScale\") ($modCore + \"_HipScale_MD.input2X\");\n\t\tconnectAttr -force ($modCore + \"_HipScale_MD.outputX\") ($modCore + \"_HipJntIK.scaleX\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_KneeScale_MD\");\n\t\tconnectAttr -force ($modCore + \"_kneeLock_Blnd.outputR\") ($modCore + \"_KneeScale_MD.input1X\");\n\t\tconnectAttr -force ($modCore + \"_FootIKCtrl.legScale\") ($modCore + \"_KneeScale_MD.input2X\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_KneeScale_MD.outputX\") ($modCore + \"_KneeJntIK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -force ($modCore + \"_KneeScale_MD.outputX\") ($modCore + \"_Knee1JntIK.scaleX\");\n\t\t}\n\t\n\t\t\n\t\n\t\t//////////////////////////////////FOOT IKFK SWITCH CONTROL///////////////////////////////////////////\n\t\tcurve -n ($modCore + \"_SwitchCtrl\") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2\n\t\t-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2\n\t\t-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10\n\t\t-k 11 -k 12 -k 13 -k 14 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_SwitchCtrlShape\");\n\t\tpickWalk -d up;\n\t\t\n\t\tmove -r -os -wd 0 0 -8 ($modCore + \"_SwitchCtrl\");\n\t\tgroup -n ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_SwitchCtrl\"); xform -os -piv 0 0 0;\n\t\tscale -r 0.2 0.2 0.2 ($modCore + \"_SwitchCtrlGrp\");\n\t\tmakeIdentity -apply true -t 0 -r 1 -s 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tdelete `pointConstraint ($modCore + \"_AnkleJnt\") ($modCore + \"_SwitchCtrlGrp\")`;\n\t\tparent ($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_FootIKCtrlGrp\");\n\t\tmakeIdentity -apply false -r 1 ($modCore + \"_SwitchCtrlGrp\");\n\t\tparent -w ($modCore + \"_SwitchCtrlGrp\");\n\t\t\n\t\tsetAttr (($modCore + \"_SwitchCtrlGrp.scale\"), ($lLegLength / 3.5), ($lLegLength / 3.5), ($lLegLength / 3.5));\n\t\t\n\t\taddAttr -ln \"switchIkFk\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.switchIkFk\");\n\t\taddAttr -ln \"autoVolume\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_SwitchCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_SwitchCtrl.autoVolume\");\n\t\tsetAttr ($modCore + \"_SwitchCtrl.autoVolume\") 1;\n\t\t\n\t\txform -cp ($modCore + \"_SwitchCtrl\");\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_AnkleJnt\") ($modCore + \"_SwitchCtrlGrp\");\n\t\n\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_SwitchCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//select pCube1;\n\t\t\n\t\t//LEG\n\t\t\n\t\t//FK\n\t\t$lHipLocation = `xform -q -ws -t ($modCore + \"_HipFKCtrlGrp\")`;\n\t\tmove $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($modCore + \"_HipFKCtrlGrp.scalePivot\") ($modCore + \"_HipFKCtrlGrp.rotatePivot\") ;\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z\n\t\t($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_MAINCtrl\") ($modCore + \"_HipFKCtrlGrp\");\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//HIP ORIENT\n\t\taddAttr -ln \"hipOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"_HipFKCtrl\");\n\t\tsetAttr -e-k true ($modCore + \"_HipFKCtrl.hipOrient\");\n\t\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\");\n\t\tsetAttr ($modCore + \"_HipFKCtrl.hipOrient\") 0;\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\") 0;\n\t\tsetAttr ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_HipFKCtrl.hipOrient\") ($modCore + \"_HipFKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\");\n\t\tsetAttr ($modCore + \"_HipFKCtrl.hipOrient\") 1;\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_HipFKCtrl\") ($modCore + \"_HipJntFK\");\n\t\n\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_HipJntFK.scaleX\");\n\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_HipFKCtrl\") ($modCore + \"_KneeFKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_KneeJntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_AnkleFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_KneeFKCtrl.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee1FKCtrlGrp\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee1JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_Knee2FKCtrlGrp\");\n\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_Knee2JntFK\");\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_AnkleFKCtrlGrp\");\n\t\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee1FKCtrl.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee2FKCtrl.scaleX\");\n\t\t}\n\t\t\t\n\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleJntFK\");\n\t\tsetAttr ($modCore + \"_AnkleJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_BallFKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + \"_BallFKCtrl\") ($modCore + \"_BallJntFK\");\n\t\tsetAttr ($modCore + \"_BallFKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\tsetAttr ($modCore + \"_BallJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\tparentConstraint -mo ($modCore + \"_BallFKCtrl\") ($modCore + \"_ToeFKCtrlGrp\");\n\t\tparentConstraint -mo ($modCore + \"_ToeFKCtrl\")  ($modCore + \"_ToeJntFK\");\n\t\tsetAttr ($modCore + \"_ToeFKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\tsetAttr ($modCore + \"_ToeJntFK_parentConstraint1.interpType\") 2;\n\t\t\n\t\t//CONNECT SCALE TO FK CONTROLS\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_KneeJntFK.scaleX\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee1JntFK.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_HipFKCtrl.scaleX\") ($modCore + \"_Knee2JntFK.scaleX\");\n\t\t}\n\t\n\t\t//select pCube1;\n\t\t\n\t\t//IK\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tselect ($modCore + \"_HipJntIK.rotatePivot\") ($modCore + \"_AnkleJntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_LegIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_LegIKHandle\") ($modCore + \"_FootBallPivotLctr2\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect ($modCore + \"_Knee2JntIK.rotatePivot\") ($modCore + \"_AnkleJntIK.rotatePivot\");\n\t\t\tikHandle -n ($modCore + \"_LowerLegIKHandle\") -sol ikSCsolver;\n\t\t\tparent ($modCore + \"_LowerLegIKHandle\") ($modCore + \"_FootBallPivotLctr2\");\n\t\t\tparentConstraint -mo ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_LowerLegIKHandle\");\n\t\n\t\t\tselect ($modCore + \"_HipJntIK.rotatePivot\") ($modCore + \"_Knee2JntIK.rotatePivot\") ;\n\t\t\tikHandle -n ($modCore + \"_LegIKHandle\") -sol ikRPsolver;\n\t\t\tparent ($modCore + \"_LegIKHandle\") ($modCore + \"_LowerLegIKCtrl\");\n\t\t\t\n\t\t}\n\t\t//select pCube1;\n\t\tpoleVectorConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_LegIKHandle\") ;\n\n\t\t//select pCube1;\n\t\t\t\n\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleJntIK\");\n\t\tsetAttr ($modCore + \"_AnkleJntIK_parentConstraint1.interpType\") 2;\t\n\t\t\n\t\t//CONNECT IK AND FK JOINTS TO ORIGINALS\n\t\t//HIP\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipJntIKFK_BlndScale\");\n\t\tconnectAttr -f ($modCore + \"_HipJntFK.scale\") ($modCore + \"_HipJntIKFK_BlndScale.color1\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIK.scale\") ($modCore + \"_HipJntIKFK_BlndScale.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_HipJntIKFK_BlndScale.blender\");\n\t\t\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_HipVolume_MD\");\n\t\tsetAttr ($modCore + \"_HipVolume_MD.input1X\") 1;\n\t\tsetAttr ($modCore + \"_HipVolume_MD.operation\") 2;\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_BlndScale.outputR\") ($modCore + \"_HipVolume_MD.input2X\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_HipJntIKFK_AutoBlnd\");\n\t\tsetAttr ($modCore + \"_HipJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\tconnectAttr -f ($modCore + \"_HipVolume_MD.outputX\") ($modCore + \"_HipJntIKFK_AutoBlnd.color1R\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_AutoBlnd.outputR\") ($modCore + \"_HipJnt.scaleY\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_AutoBlnd.outputR\") ($modCore + \"_HipJnt.scaleZ\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_HipJntIKFK_AutoBlnd.blender\");\n\t\t\n\t\tshadingNode -asUtility blendColors -n  ($modCore + \"_HipJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_HipJntFK.rotate\") ($modCore + \"_HipJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIK.rotate\") ($modCore + \"_HipJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_HipJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_BlndScale.outputR\") ($modCore + \"_HipJnt.scaleX\");\n\t\tconnectAttr -f ($modCore + \"_HipJntIKFK_BlndRotate.output\") ($modCore + \"_HipJnt.rotate\");\n\t\t\n\t\t\n\t\t//KNEE\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_KneeJntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntFK.scale\") ($modCore + \"_KneeJntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIK.scale\") ($modCore + \"_KneeJntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_KneeJntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_KneeVolume_MD\");\n\t\t\tsetAttr ($modCore + \"_KneeVolume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_KneeVolume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_BlndScale.outputR\") ($modCore + \"_KneeVolume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_KneeJntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_KneeJntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_KneeVolume_MD.outputX\") ($modCore + \"_KneeJntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_AutoBlnd.outputR\") ($modCore + \"_KneeJnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_AutoBlnd.outputR\") ($modCore + \"_KneeJnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_KneeJntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_KneeJntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntFK.rotate\") ($modCore + \"_KneeJntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIK.rotate\") ($modCore + \"_KneeJntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_KneeJntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_BlndScale.outputR\") ($modCore + \"_KneeJnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_KneeJntIKFK_BlndRotate.output\") ($modCore + \"_KneeJnt.rotate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee1JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntFK.scale\") ($modCore + \"_Knee1JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIK.scale\") ($modCore + \"_Knee1JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee1JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Knee1Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Knee1Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Knee1Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee1Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee1JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Knee1JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Knee1Volume_MD.outputX\") ($modCore + \"_Knee1JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee1Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee1Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Knee1JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee1JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntFK.rotate\") ($modCore + \"_Knee1JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIK.rotate\") ($modCore + \"_Knee1JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee1JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee1Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee1JntIKFK_BlndRotate.output\") ($modCore + \"_Knee1Jnt.rotate\");\n\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee2JntIKFK_BlndScale\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntFK.scale\") ($modCore + \"_Knee2JntIKFK_BlndScale.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIK.scale\") ($modCore + \"_Knee2JntIKFK_BlndScale.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee2JntIKFK_BlndScale.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_Knee2Volume_MD\");\n\t\t\tsetAttr ($modCore + \"_Knee2Volume_MD.input1X\") 1;\n\t\t\tsetAttr ($modCore + \"_Knee2Volume_MD.operation\") 2;\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee2Volume_MD.input2X\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee2JntIKFK_AutoBlnd\");\n\t\t\tsetAttr ($modCore + \"_Knee2JntIKFK_AutoBlnd.color2\") -type double3 1 1 1 ;\n\t\t\tconnectAttr -f ($modCore + \"_Knee2Volume_MD.outputX\") ($modCore + \"_Knee2JntIKFK_AutoBlnd.color1R\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee2Jnt.scaleY\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_AutoBlnd.outputR\") ($modCore + \"_Knee2Jnt.scaleZ\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.autoVolume\") ($modCore + \"_Knee2JntIKFK_AutoBlnd.blender\");\n\t\t\t\n\t\t\tshadingNode -asUtility blendColors -n ($modCore + \"_Knee2JntIKFK_BlndRotate\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntFK.rotate\") ($modCore + \"_Knee2JntIKFK_BlndRotate.color1\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIK.rotate\") ($modCore + \"_Knee2JntIKFK_BlndRotate.color2\");\n\t\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_Knee2JntIKFK_BlndRotate.blender\");\n\t\t\t\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_BlndScale.outputR\") ($modCore + \"_Knee2Jnt.scaleX\");\n\t\t\tconnectAttr -f ($modCore + \"_Knee2JntIKFK_BlndRotate.output\") ($modCore + \"_Knee2Jnt.rotate\");\n\t\t}\t\t\n\t\n\t\t//ANKLE\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_AnkleJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_AnkleJntFK.rotate\") ($modCore + \"_AnkleJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_AnkleJntIK.rotate\") ($modCore + \"_AnkleJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_AnkleJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_AnkleJntIKFK_BlndRotate.output\") ($modCore + \"_AnkleJnt.rotate\");\n\t\t\n\t\t//BALL\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_BallJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_BallJntFK.rotate\") ($modCore + \"_BallJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_BallJntIK.rotate\") ($modCore + \"_BallJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_BallJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_BallJntIKFK_BlndRotate.output\") ($modCore + \"_BallJnt.rotate\");\n\t\t\n\t\t//TOE\n\t\tshadingNode -asUtility blendColors -n ($modCore + \"_ToeJntIKFK_BlndRotate\");\n\t\tconnectAttr -f ($modCore + \"_ToeJntFK.rotate\") ($modCore + \"_ToeJntIKFK_BlndRotate.color1\");\n\t\tconnectAttr -f ($modCore + \"_ToeJntIK.rotate\") ($modCore + \"_ToeJntIKFK_BlndRotate.color2\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_ToeJntIKFK_BlndRotate.blender\");\n\t\t\n\t\tconnectAttr -f ($modCore + \"_ToeJntIKFK_BlndRotate.output\") ($modCore + \"_ToeJnt.rotate\");\n\t\t\n\t\t//KNEE IKCtrl FOLLOW\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_FootBallPivotLctr2\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\taddAttr -ln \"follow\"  -at \"enum\" -en \"Main:Ankle:Hip:Ankle and Hip:\" ($modCore + \"_KneeIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_KneeIKCtrl.follow\");\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 1;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\") 0;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 2;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\") 1;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 3;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\") 1;\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\") 1;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_FootBallPivotLctr2W1\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_KneeIKCtrl.follow\") ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.\" + $modCore + \"_HipFKCtrlW2\");\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl.follow\") 0;\n\t\t\n\t\t//FOOT\n\t\taddAttr -ln \"footTilt\"  -at double  -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.footTilt\");\n\t\taddAttr -ln \"ballUpDn\"  -at double  -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.ballUpDn\");\n\t\taddAttr -ln \"toeUpDn\"  -at double  -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.toeUpDn\");\n\t\taddAttr -ln \"ballSwivel\"  -at double -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.ballSwivel\");\n\t\taddAttr -ln \"heelBall\"  -at double -min -10 -max 10 -dv 0 ($modCore+ \"_FootIKCtrl\");\n\t\tsetAttr -e-k true ($modCore+ \"_FootIKCtrl.heelBall\");\n\t\t//SDK TILT\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootRightTiltLctr.rotateZ\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootLeftTiltLctr.rotateZ\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.footTilt\") -10;\n\t\trotate -r 0 0 90 ($modCore + \"_FootRightTiltLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootRightTiltLctr.rotateZ\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.footTilt\") 10;\n\t\trotate -r 0 0 -90 ($modCore + \"_FootLeftTiltLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.footTilt\") ($modCore + \"_FootLeftTiltLctr.rotateZ\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.footTilt\") 0;\n\t\t//SDK HEEL UP DN\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballUpDn\") ($modCore + \"_FootBallPivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballUpDn\") -10;\n\t\trotate -r -90 0 0 ($modCore + \"_FootBallPivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballUpDn\") ($modCore + \"_FootBallPivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballUpDn\") 10;\n\t\trotate -r 90 0 0 ($modCore + \"_FootBallPivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballUpDn\") ($modCore + \"_FootBallPivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballUpDn\") 0;\n\t\t//SDK TOE UP DN\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.toeUpDn\") ($modCore + \"_FootToePivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.toeUpDn\") -10;\n\t\trotate -r 90 0 0 ($modCore + \"_FootToePivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.toeUpDn\") ($modCore + \"_FootToePivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.toeUpDn\") 10;\n\t\trotate -r -90 0 0 ($modCore + \"_FootToePivotLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.toeUpDn\") ($modCore + \"_FootToePivotLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.toeUpDn\") 0;\n\t\t//SDK BALL SWIVEL\t\t\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballSwivel\") ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballSwivel\") -10;\n\t\trotate -r 0 90 0 ($modCore + \"_BallSwivelLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballSwivel\") ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballSwivel\") 10;\n\t\trotate -r 0 -90 0 ($modCore + \"_BallSwivelLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.ballSwivel\") ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.ballSwivel\") 0;\n\t\t//SDK HEEL BALL (LEGACY)\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_HeelLctr.rotateX\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_FootBallPivotLctr2.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.heelBall\") -10;\n\t\trotate -r -90 0 0 ($modCore + \"_HeelLctr\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_HeelLctr.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.heelBall\") 10;\n\t\trotate -r 90 0 0 ($modCore + \"_FootBallPivotLctr2\");\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"_FootIKCtrl.heelBall\") ($modCore + \"_FootBallPivotLctr2.rotateX\");\n\t\tsetAttr ($modCore + \"_FootIKCtrl.heelBall\") 0;\n\t\t\n\t\tselectKey -add -k ($modCore + \"_FootRightTiltLctr_rotateZ\") ;\n\t\tselectKey -add -k ($modCore + \"_FootLeftTiltLctr_rotateZ\") ;\n\t\tselectKey -add -k ($modCore + \"_FootToePivotLctr_rotateX\") ;\n\t\tselectKey -add -k ($modCore + \"_FootBallPivotLctr_rotateX\") ;\n\t\tselectKey -add -k ($modCore + \"_FootBallPivotLctr2_rotateX\") ;\n\t\tselectKey -add -k ($modCore + \"_BallSwivelLctr.rotateY\");\n\t\tkeyTangent -itt spline -ott spline ;\n\t\n\t\tsetInfinity -pri linear graphEditor1FromOutliner ($modCore + \"_BallSwivelLctr.ry\");\n\t\tsetInfinity -poi linear graphEditor1FromOutliner ($modCore + \"_BallSwivelLctr.ry\");\n\t\t\n\t\n\t\t//CONNECTOR LINE\n\t\tcurve -n ($modCore + \"_KneeIKConnectorCtrl\") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_KneeIKConnectorCtrlShape\");\n\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKConnectorCtrl\") `;\n\t\tparent ($modCore + \"_KneeIKConnectorCtrl\") ($modCore + \"_KneeIKCtrl\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\tspaceLocator -n ($modCore + \"_KneeIKTargetConnectorLctr\");\n\t\tparent ($modCore + \"_KneeIKTargetConnectorLctr\") ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKAimConnectorLctr\")`;\n\t\tparent ($modCore + \"_KneeIKAimConnectorLctr\") ($modCore + \"_KneeIKCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tpointConstraint ($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_KneeJnt\") ($modCore + \"_KneeIKConnectorCtrl\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint  ($modCore + \"_Knee1Jnt\") ($modCore + \"_KneeIKTargetConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Knee1Jnt\") ($modCore + \"_KneeIKAimConnectorLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t($modCore + \"_Knee1Jnt\") ($modCore + \"_KneeIKConnectorCtrl\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_KneeIKTargetConnectorLctr.tz\") ($modCore + \"_KneeIKConnectorCtrl.sz\");\n\t\tsetAttr ($modCore + \"_KneeIKAimConnectorLctr.v\") 0;\n\n\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_KneeIKConnectorCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_KneeIKConnectorCtrl.nonControl\");\n\t\tsetAttr -lock true ($modCore + \"_KneeIKConnectorCtrl.nonControl\");\n\n\n\t\t//VISIBILITY TOGGLES////////////////////////////////////////////////////////////////////\n\t\t\n\t\n\t\t//LEG\n\t\tshadingNode -asUtility condition -n ($modCore + \"_LegIKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_LegIKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_LegIKViz.secondTerm\") 0.7;\n\t\tsetAttr ($modCore + \"_LegIKViz.operation\") 3;\n\t\t\t\n\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_KneeIKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_FootIKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_ToeIKCtrl.v\");\n\t\tif (`objExists ($modCore + \"_LowerLegIKCtrl\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_LegIKViz.outColorR\") ($modCore + \"_LowerLegIKCtrl.v\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_LowerLegIKCtrl.v\");\n\t\t}\n\t\tshadingNode -asUtility condition -n ($modCore + \"_LegFKViz\");\n\t\tconnectAttr -f ($modCore + \"_SwitchCtrl.switchIkFk\") ($modCore + \"_LegFKViz.firstTerm\");\n\t\tsetAttr ($modCore + \"_LegFKViz.secondTerm\") 0.3;\n\t\tsetAttr ($modCore + \"_LegFKViz.operation\") 5;\n\t\tsetAttr ($modCore + \"_SwitchCtrl.switchIkFk\") 0;\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_KneeFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_Knee1FKCtrl.v\");\n\t\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_Knee2FKCtrl.v\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_AnkleFKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_BallFKCtrl.v\");\n\t\tconnectAttr -f ($modCore + \"_LegFKViz.outColorR\") ($modCore + \"_ToeFKCtrl.v\");\n\t\t\n\t\t//////////////////////////////////LOCK & HIDE//////////////////////////////////\n\t\t//MAKE FEET JOINTS VISIBLE\n\t\tsetAttr ($modCore + \"_AnkleJnt.overrideEnabled\") 1;\n\t\n\t\t\n\t\t//JOINTS\n\t\tsetAttr ($modCore + \"_HipJntIK.v\") 0;\n\t\tsetAttr ($modCore + \"_HipJntFK.v\") 0;\n\t\tsetAttr ($modCore + \"_AnkleJntFK.v\") 0;\n\t\n\t\n\t\tsetAttr ($modCore + \"_LegLengthOriginLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_AnkleJntFKGrp2.v\") 0;\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_KneeJntFKGrp2.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Knee1JntFKGrp2.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Knee2JntFKGrp2.v\") 0;\n\t\t}\n\t\t\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrl_TargetLctr.v\") 0;\n\t\t\n\t\t//CONTROLS\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HipFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HipFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HipFKCtrl.v\");\n\t\t\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeFKCtrl.v\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee1FKCtrl.v\");\n\t\t\t\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.rx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.rz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_Knee2FKCtrl.v\");\n\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.tx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.ty\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.tz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.sx\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.sy\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.sz\");\n\t\t\tsetAttr -l 1 -k 0 ($modCore + \"_LowerLegIKCtrl.v\");\n\t\t\ttransformLimits -sy 0.01 1 -esy 1 0 ($modCore + \"_LowerLegIKCtrl\");\n\t\t}\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_AnkleFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_BallFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeFKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_FootIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_FootIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_FootIKCtrl.v\");\n\t\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_ToeIKCtrl.v\");\n\t\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_HeelIKCtrl.v\");\n\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_SwitchCtrl.v\");\n\t\t\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.tx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.ty\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.tz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.rx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.ry\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.rz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.sx\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.sy\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.sz\");\n\t\tsetAttr -l 1 -k 0 ($modCore + \"_KneeIKConnectorCtrl.v\");\n\t\tsetAttr ($modCore + \"_KneeIKConnectorCtrl.template\") 1;\n\n\t\tsetAttr ($modCore + \"_LegIKHandle.v\") 0;\n\t\t\n\t\tsetAttr ($modCore + \"_BallSwivelLctr.v\") 0;\t\n\t\t\n\t\t\n\t\t//LOCK GROUPS\n\t\t\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\tselect -cl;\n\t\t//ANKLE FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_AnkleFKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_FootIKCtrlGrp\") ($modCore + \"_AnkleFKLctr\")`;\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_AnkleFKLctr\");\n\t\tparent ($modCore + \"_AnkleFKLctr\") ($modCore + \"_FootIKCtrlGrp\");\n\t\tparentConstraint ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleFKLctr\");\n\t\t\n\t\t//ANKLE IK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_AnkleIKLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_AnkleIKLctr\")`;\n\t\tparent ($modCore + \"_AnkleIKLctr\") ($modCore + \"_AnkleFKCtrlGrp\");\n\t\torientConstraint -mo ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleIKLctr\");\n\t\tsetAttr ($modCore + \"_AnkleIKLctr_orientConstraint1.interpType\") 2;\n\t\t\n\t\t//KNEE FK LOCATOR\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Knee_FKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_Knee_FKAimLctr\")`;\n\t\t\tparent ($modCore + \"_Knee_FKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Knee_FKAimLctr\");\n\t\t\t\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee_FKAimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Knee1_FKAimLctr\") ($modCore + \"_Knee1FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_KneeIKCtrl\") ($modCore + \"_Knee1_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Knee1_FKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee1FKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee1_FKAimLctr\");\n\t\t\t\n\t\t\tspaceLocator -n ($modCore + \"_Knee2_FKAimLctr\");\n\t\t\tparent ($modCore + \"_Knee2_FKAimLctr\") ($modCore + \"_Knee2FKCtrl\");\n\t\t\tmakeIdentity -apply false -t 1 -r 1 ($modCore + \"_Knee2_FKAimLctr\");\n\t\t\tdelete `pointConstraint -offset 0 0 0 -skip x -skip y -weight 1 ($modCore + \"_KneeIKCtrl\") ($modCore + \"_Knee2_FKAimLctr\")`;\n\t\n\t\t\tparent ($modCore + \"_Knee2_FKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_Knee2_FKAimLctr\");\n\t\t\n\t\t\tparentConstraint -mo ($modCore + \"_Knee2FKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_Knee2_FKAimLctr\");\n\t\t}\t\t\n\t\t\n\t\t//HIP FK LOCATOR\n\t\tspaceLocator -n ($modCore + \"_HipFKOrientLctr\");\n\t\tdelete `parentConstraint ($modCore + \"_HipJnt\") ($modCore + \"_HipFKOrientLctr\")`;\n\t\tparent ($modCore + \"_HipFKOrientLctr\") ($modCore + \"_HipFKCtrlGrp\");\n\t\torientConstraint ($modCore + \"_HipJntIK\") ($modCore + \"_HipFKOrientLctr\");\n\t\t\n\t\t//HIDE SNAP LOCATORS\n\t\tsetAttr ($modCore + \"_HipFKOrientLctr.v\") 0;\n\t\tif (`objExists ($modCore + \"_Knee_FKAimLctr.v\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Knee_FKAimLctr.v\") 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAttr ($modCore + \"_Knee1_FKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_Knee2_FKAimLctr.v\") 0;\n\t\t}\t\t\n\t\tsetAttr ($modCore + \"_AnkleIKLctr.v\") 0;\n\t\tsetAttr ($modCore + \"_AnkleFKLctr.v\") 0;\n\t\t\n\t\tsetAttr ($modCore + \"_HipIKLockLctr.v\") 0;\n\t\t\n\t\t\n\t\t//PARENT TO MAIN CONTROL\n\t\t\n\t\t//SET ALL CONSTRAINTS TO SHORTEST INTERPOLATION\n\t\tstring $selectedParentConstraints[] = `ls ($modCore + \"*_parentConstraint1\")`;\n\t\tfor ($crntParentConstraint in $selectedParentConstraints)\n\t\t{setAttr ($crntParentConstraint + \".interpType\") 2;}\n\t\t\n\t\tsetAttr ($modCore + \"_KneeIKCtrlGrp_parentConstraint1.interpType\") 2;\n\t\t\n\t\tif (`objExists ($modCore + \"_HipCurveJnt\")`)\n\t\t{\n\t\t\tsetAttr ($modCore + \"_LowerTwist75Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwist25Lctr_parentConstraint1.interpType\") 2;\n\t\t\tsetAttr ($modCore + \"_LowerTwistHalfLctr_parentConstraint1.interpType\") 2;\n\t\t}\n\t\t\n\t\t//HIERARCHY CLEAN-UP\n\t\tparent \n\t\t($modCore + \"_AnkleJntFKGrp2\") \n\t\t($modCore + \"_FootIKCtrlGrp\") ($modCore + \"_KneeIKCtrlGrp\") ($modCore + \"_KneeIKCtrl_TargetLctr\")\n\t\t($modCore + \"_LegLengthOriginLctr\") ($modCore + \"_HipIKLockLctr\")\n\t\t($modCore + \"_SwitchCtrlGrp\") ($modCore + \"_HipFKCtrlGrp\")\n\t\t\n\t\t($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_BallFKCtrlGrp\") ($modCore + \"_ToeFKCtrlGrp\")\n\t\t($modCore + \"_HipJnt\") ($modCore + \"_HipJntFK\") ($modCore + \"_HipJntIK\")\n\t\t($modCore + \"_ScaleGrp\");\n\t\t//select pCube1;\n\t\t//CREATE CONSTRAINT FOR WRIST IKCtrlGrp\n\t\t//CHECK IF ATTACHED TO ROOT\n\t\tif ($modAttachNode == \"ROOT\")\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTSecondaryCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_FootIKCtrlGrp\");\n\t\t}\n\n\t\t//ADD DYNAMICtrl PARENTING CHANNELS\n\t\taddAttr -ln \"follow\" -at double  -min 1 -max 1 -dv 1 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e -keyable true ($modCore + \"_FootIKCtrl.follow\");\n\t\tsetAttr -lock true ($modCore + \"_FootIKCtrl.follow\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\taddAttr -ln \"parent\" -at double -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_FootIKCtrl.parent\");\n\t\t}\n\t\taddAttr -ln \"ROOT\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_FootIKCtrl.ROOT\");\n\n\t\taddAttr -ln \"ROOTType\" -at \"enum\" -en \"ROOTC:ROOTsecondaryC:\" ($modCore + \"_FootIKCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_FootIKCtrl.ROOTType\");\n\n\n\t\t//IK WRIST DYNAMICtrl CONSTRAINTS\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.parent\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW3\");\n\t\t}\n\t\t\n\t\t//ROOT CONNECTIONS\n\t\tshadingNode -asUtility multiplyDivide -n ($modCore + \"_FootIKROOTInf_MD\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOT\") ($modCore + \"_FootIKROOTInf_MD.input1X\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOT\") ($modCore + \"_FootIKROOTInf_MD.input1Y\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOTType\") ($modCore + \"_FootIKROOTInf_MD.input2Y\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_FootIKROOTInf_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOTType\") ($modCore + \"_FootIKROOTInf_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_FootIKROOTInf_Reverse.outputX\") ($modCore + \"_FootIKROOTInf_MD.input2X\");\n\n\t\tconnectAttr -f ($modCore + \"_FootIKROOTInf_MD.outputX\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTCtrlW1\");\n\t\tconnectAttr -f ($modCore + \"_FootIKROOTInf_MD.outputY\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_ROOTSecondaryCtrlW2\");\n\t\t\n\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + \"_FootIKParent_PMA\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.parent\") ($modCore + \"_FootIKParent_PMA.input1D[0]\");\n\t\t}\n\t\tconnectAttr -f ($modCore + \"_FootIKCtrl.ROOT\") ($modCore + \"_FootIKParent_PMA.input1D[1]\");\n\t\t\n\t\tshadingNode -asUtility condition -n ($modCore + \"_FootIKParent_Condition\");\n\t\tsetAttr ($modCore + \"_FootIKParent_Condition.operation\") 4;\n\t\tsetAttr ($modCore + \"_FootIKParent_Condition.secondTerm\") 1;\n\t\tconnectAttr -f ($modCore + \"_FootIKParent_PMA.output1D\") ($modCore + \"_FootIKParent_Condition.firstTerm\");\n\t\tconnectAttr -force ($modCore + \"_FootIKParent_PMA.output1D\") ($modCore + \"_FootIKParent_Condition.colorIfTrueR\");\n\t\t\n\t\tshadingNode -asUtility reverse -n ($modCore + \"_FootIKParent_Reverse\");\n\t\tconnectAttr -f ($modCore + \"_FootIKParent_Condition.outColorR\") ($modCore + \"_FootIKParent_Reverse.inputX\");\n\t\tconnectAttr -f ($modCore + \"_FootIKParent_Reverse.outputX\") ($modCore + \"_FootIKCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\n\n\t\t/////////////////////////////////SNAP ASSETS/////////////////////////////////\n\t\t\n\t\t//SINGLE KNEE\n\t\tif (!`objExists (\"RRM_\" + $prfx + $core + \"_Knee1\")`)\n\t\t{\n\t\t\t//ANKLE IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_AnkleIKtoFKLctr\");\n\t\t\tsetAttr ($modCore + \"_AnkleIKtoFKLctr.rotateOrder\") 1;\n\t\t\tgroup -n ($modCore + \"_AnkleIKtoFKLctrGrp\") ($modCore + \"_AnkleIKtoFKLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleIKtoFKLctrGrp\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrl\") ($modCore + \"_AnkleIKtoFKLctr\");\n\t\t\tparent ($modCore + \"_AnkleIKtoFKLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\t//ANKLE FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_AnkleFKtoIKLctr\");\n\t\t\tgroup -n ($modCore + \"_AnkleFKtoIKLctrGrp2\") ($modCore + \"_AnkleFKtoIKLctr\");\n\t\t\tgroup -n ($modCore + \"_AnkleFKtoIKLctrGrp\") ($modCore + \"_AnkleFKtoIKLctrGrp2\");\n\t\t\trotate 0 0 -90 ($modCore + \"_AnkleFKtoIKLctrGrp2\");\n\t\t\tdelete `pointConstraint ($modCore + \"_AnkleJnt\") ($modCore + \"_AnkleFKtoIKLctrGrp\")`;\n\t\t\taimConstraint -offset 0 0 0 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType \"scene\" -skip x -skip z ($modCore + \"_BallJnt\") ($modCore + \"_ToeJnt\") ($modCore + \"_AnkleFKtoIKLctrGrp\");\n\t\t\tdelete ($modCore + \"_AnkleFKtoIKLctrGrp_aimConstraint1\");\n\t\t\tparentConstraint -mo ($modCore + \"_AnkleFKCtrlGrp\") ($modCore + \"_AnkleFKtoIKLctrGrp\");\n\t\t\torientConstraint -mo ($modCore + \"_FootIKCtrl\") ($modCore + \"_AnkleFKtoIKLctr\");\n\t\t\tsetAttr ($modCore + \"_AnkleFKtoIKLctr_orientConstraint1.interpType\") 2;\n\t\t\tparent ($modCore + \"_AnkleFKtoIKLctrGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\t\n\t\t\t//KNEE IK TO FK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_KneeIKtoFKAimLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_KneeIKCtrl\") ($modCore + \"_KneeIKtoFKAimLctr\")`;\n\t\t\tparent ($modCore + \"_KneeIKtoFKAimLctr\") ($modCore + \"_KneeIKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_KneeIKtoFKAimLctr\");\n\t\t\tparentConstraint -mo ($modCore + \"_KneeFKCtrl\") ($modCore + \"_HipFKCtrl\") ($modCore + \"_KneeIKtoFKAimLctr\");\n\t\t\t\n\t\t\t//HIP FK TO IK LOCATOR\n\t\t\tspaceLocator -n ($modCore + \"_HipFKtoIKOrientLctr\");\n\t\t\tdelete `parentConstraint ($modCore + \"_HipFKCtrlGrp\") ($modCore + \"_HipFKtoIKOrientLctr\")`;\n\t\t\tparent ($modCore + \"_HipFKtoIKOrientLctr\") ($modCore + \"_HipFKCtrlGrp\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_HipFKtoIKOrientLctr\");\n\t\t\torientConstraint -mo ($modCore + \"_HipJntIK\") ($modCore + \"_HipFKtoIKOrientLctr\");\n\t\t\t\n\t\t\t\t\n\t\t\t//HIDE SNAP LOCATORS\n\t\t\tsetAttr ($modCore + \"_KneeIKtoFKAimLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_AnkleFKtoIKLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_AnkleIKtoFKLctr.v\") 0;\n\t\t\t\n\t\t\tsetAttr ($modCore + \"_HipIKLockLctr.v\") 0;\n\t\t\tsetAttr ($modCore + \"_HipFKtoIKOrientLctr.v\") 0;\n\t\t}\n\t\t//KNEE HIERARCHY CLEANUP\t\t\n\t\tif (`objExists ($modCore + \"_KneeJntFKGrp2\")`)\n\t\t{\n\t\t\tparent ($modCore + \"_KneeJntFKGrp2\")  ($modCore + \"_KneeFKCtrlGrp\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent ($modCore + \"_Knee1FKCtrlGrp\") ($modCore + \"_Knee2FKCtrlGrp\")\n\t\t\t($modCore + \"_Knee1JntFKGrp2\") ($modCore + \"_Knee2JntFKGrp2\")\n\t\t\t($modCore + \"_ScaleGrp\");\n\t\t}\n\t\n\t\t//CHECK POLE VECTOR\n\t\tif (`objExists ($modCore + \"_Knee1Jnt\")`)\n\t\t{\n\t\t\t$lhipOrient = `getAttr ($modCore + \"_HipJnt.rotate\")`;\n\t\t\tif ($lhipOrient[0] > 90 || $lhipOrient[0] < -90 || $lhipOrient[2] > 90 || $lhipOrient[2] < -90)\n\t\t\t{\n\t\t\t\tsetAttr ($modCore + \"_LegIKHandle.twist\") 180;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\n\t\tselect $topNode;\n\t\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Lower1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Middle1\")` || `objExists (\"RRM_\" + $prfx + $core + \"_Upper1\")`)\n\t\t{\n\t\t\t//RRM_ToonLimbs(\"leg\", $prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, $lLegLength, $lKneeLength, $lKnee1Length, $lKnee2Length, $lAnkleLength, $topNode);\n\t\t\tRRM_ToonLimbs(\"leg\", $prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, ($modName + \"_\" + $modAttachNode + \"Jnt\"), $topNode);\n\t\t\t///////RRM_ToonLegs($prfx, $oppPrfx, $crntSide, $oppSide, $modCore, $modOppCore, $multiplier, $inverseFront, $lLegLength, $lKneeLength, $lKnee1Length, $lKnee2Length, $lAnkleLength, $topNode);\n\t\t}\n\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\tif (!`objExists ($crntModControl + \".modCoreName\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\n\t\t\t\t//ADD MODULE TYPE\n\t\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"leg\";\n\t\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t\t}\n\t\t}\n\t\n\t\t//SET UP FOR RIGHT SIDE\n\t\t$mirrorInt++;\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$posOffset = -2;\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t\t$inverseFront = 1;\n\t\n\t\tif (!`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\t$i = 2;\n\t\t}\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE FK CHAIN MODULE/////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigFkChain(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 1;\n\t$multiplier = 1;\n\tfloat $rotOffset = 0;\n\n\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\n\t$crntSide = \"\";\n\t$oppSide = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 0;\n\t\t$crntSide = \"left\";\n\t\t$oppSide = \"right\";\n\t}\n\t\n\twhile ($mirrorInt <= 1)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\t\t\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"fkChain\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t$fkChains = `ls (\"RRM_\" + $prfx + $core + \"_??_01\")`;\n\t\t$fkChainsNum = `size $fkChains`;\n\t\n\t\taddAttr -ln \"fkChains\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.fkChains\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.fkChains\") $fkChainsNum;\n\t\tsetAttr -l true ($modCore + \"Grp.fkChains\");\n\t\t\n\t\tselect ;\n\t\t$fkjointsPerChain = `ls (\"RRM_\" + $prfx + $core + \"_01_??\")`;\n\t\t$fkjointsPerChainNum = `size $fkjointsPerChain`;\n\t\n\t\taddAttr -ln \"jointsPerChain\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.jointsPerChain\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.jointsPerChain\") $fkjointsPerChainNum;\n\t\tsetAttr -l true ($modCore + \"Grp.jointsPerChain\");\n\t\t\n\t\t//SCALE GROUP\n\t\tspaceLocator -n ($modCore + \"_AveragePosition_Lctr\");\n\t\tparentConstraint $fkChains ($modCore + \"_AveragePosition_Lctr\");\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\n\t\t//GROUP FOR NODES\n\t\tgroup -em -n ($modCore + \"_curveNodesGrp\");\n\t\tparent ($modCore + \"_curveNodesGrp\") ($modCore + \"_ScaleGrp\");\n\t\tgroup -em -n ($modCore + \"_extraCurveNodesGrp\");\n\t\tsetAttr ($modCore + \"_extraCurveNodesGrp.inheritsTransform\") 0; \n\t\tparent ($modCore + \"_extraCurveNodesGrp\") ($modName + \"_MAINCtrl\");\n\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modCore + \"_AveragePosition_Lctr\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modCore + \"_AveragePosition_Lctr\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tdelete ($modCore + \"_AveragePosition_Lctr\");\n\t\t\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\t\t\t\t\t\n\t\t$allJoints = `ls (\"RRM_\" + $prfx + $core + \"_??_??\")`;\n\t\t$sizeAllJoints = `size $allJoints`;\n\t\t$fKChain = `ls (\"RRM_\" + $prfx + $core + \"_??_01\")`;\n\t\t$fKChainSize = `size $fKChain`;\n\t\t$crntCh = 1;\n\t\t$crntJnt = 1;\n\t\t\n\t\t//MASTER CONTROLLER\n\t\tcircle -n ($modCore + \"_MasterCtrl\") -c 0 0 0 -nr 5 0 0 -sw 360 -r 1 -d 1 -ut 0 -tol 0 -s 4 -ch 0;\n\t\trotate -r 45 0 0 ($modCore + \"_MasterCtrl\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_MasterCtrl\");\n\t\tgroup -n ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_MasterCtrl\");\n\t\tspaceLocator -n ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\tspaceLocator -n ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector $multiplier 0 0 -upVector 0 1 0 -worldUpType \"objectRotation\" -worldUpObject (\"RRM_\" + $prfx + $core + \"_Parent\")\n\t\t$fKChain ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\tpointConstraint $fKChain ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_MasterCtrl_EndAttachLctr\") ($modCore + \"_MasterCtrlGrp\")`;\n\t\tdelete `orientConstraint ($modCore + \"_MasterCtrl_StartAttachLctr\") ($modCore + \"_MasterCtrlGrp\")`;\n\t\tparent ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\tdelete ($modCore + \"_MasterCtrl_StartAttachLctr\") ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t\n\t\tif ($fKChainSize > 1)\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tparent ($modCore + \"_MasterCtrl_SizeEndLctr\") ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint $fKChain[0] ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector $multiplier 0 0 -upVector 0 1 0 -worldUpType \"none\" $fKChain[($fKChainSize - 1)] ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint $fKChain[($fKChainSize - 1)] ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tfloat $chains = `getAttr ($modCore + \"_MasterCtrl_SizeEndLctr.tx\")`;\n\t\t\tscale -r 1 ($chains * .8) ($chains * .3) ($modCore + \"_MasterCtrl\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_MasterCtrl\");\n\t\t\tdelete ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tparent ($modCore + \"_MasterCtrl_SizeEndLctr\") ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $fKChain[0] ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t\tpointConstraint $fKChain[0] ($modCore + \"_MasterCtrl_SizeEndLctr\");\n\t\t\tfloat $chains = `getAttr ($modCore + \"_MasterCtrl_SizeEndLctr.tx\")`;\n\t\t\tscale -r 1 ($chains * .8) ($chains * .3) ($modCore + \"_MasterCtrl\");\n\t\t\tmakeIdentity -apply true -s 1 ($modCore + \"_MasterCtrl\");\n\t\t\tdelete ($modCore + \"_MasterCtrl_SizeStartLctr\");\n\t\t}\n\t\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_MasterCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\t\n\t\t//CONTROLLER SIZE\n\t\tfloat $controllerSize = 1;\n\t\tfloat $fKChainDistance = 1;\n\t\tspaceLocator -n ($modCore + \"_StartLctr\");\n\t\tspaceLocator -n ($modCore + \"_EndLctr\");\n\t\tparent ($modCore + \"_EndLctr\") ($modCore + \"_StartLctr\");\t\t\t\t\t\n\t\n\t\tif ($sizeAllJoints >1)\n\t\t{\n\t\t\tpointConstraint $allJoints[0] ($modCore + \"_StartLctr\");\n\t\t\taimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $allJoints[($sizeAllJoints - 1)] ($modCore + \"_StartLctr\");\n\t\t\tpointConstraint $allJoints[($sizeAllJoints - 1)] ($modCore + \"_EndLctr\");\n\t\t\t$fKChainDistance = `getAttr ($modCore + \"_EndLctr.tx\")`;\n\t\t\t$controllerSize = ($fKChainDistance/$sizeAllJoints * 2);\n\t\t}\n\t\telse \n\t\t{\t\t\t\t\n\t\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_StartLctr\");\n\t\t\taimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" $allJoints[0] ($modCore + \"_StartLctr\");\n\t\t\tpointConstraint $allJoints[0] ($modCore + \"_EndLctr\");\n\t\t\t$fKChainDistance = `getAttr ($modCore + \"_EndLctr.tx\")`;\n\t\t\t$controllerSize = ($fKChainDistance/$sizeAllJoints * 0.5);\n\t\t}\n\t\tdelete ($modCore + \"_StartLctr\");\n\t\t\n\t\t//MAIN GROUP TO ATTACH CHAINS TO PARENT CONTROL\n\t\tgroup -em -n ($modCore + \"_MainChainCtrlGrp\");\n\t\tparent ($modCore + \"_MainChainCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\n\t\tif ($fKChainSize > 2)\n\t\t{\n\t\t\t\taddAttr -ln \"FkAutoSpreadPos\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.FkAutoSpreadPos\");\n\t\t\t\taddAttr -ln \"FkAutoSpreadRot\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.FkAutoSpreadRot\");\n\t\t}\n\t\t\n\t\t//ADD SPLINE ATTRIBUTES\n\t\taddAttr -ln \"splineEffect\"  -at \"enum\" -en \"Settings:\"  ($modCore + \"_MasterCtrl\");\n\t\tsetAttr -e-keyable true -l true ($modCore + \"_MasterCtrl.splineEffect\");\n\n\t\taddAttr -ln \"blendedAdditive\"  -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MasterCtrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.blendedAdditive\");\n\n\t\tif ($fKChainSize > 2)\n\t\t{\n\t\t\taddAttr -ln \"splineAutoSpreadPos\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.splineAutoSpreadPos\");\n\n\t\t\taddAttr -ln \"splineAutoSpreadRot\"  -at double  -min 0 -max 1 -dv 0  ($modCore + \"_MasterCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.splineAutoSpreadRot\");\n\t\t}\n\t\t$doubleLoop = 0;\n\t\t$type = \"\";\n\t\twhile ($doubleLoop < 2)\n\t\t{\n\t\t\tif ($doubleLoop == 0)\n\t\t\t{\n\t\t\t}\n\t\t\tif ($fKChainSize > 2)\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\");\n\t\t\t\n\t\t\t\tstring $nPdCh = \"_\";\n\t\t\t\tif ($fKChainSize < 10)\n\t\t\t\t{\n\t\t\t\t\t$nPdCh = \"_0\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_01_01\") ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\")`;\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_01_01\") ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\")`;\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $fKChainSize + \"_01\")($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\")`;\n\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $fKChainSize + \"_01\")($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\")`;\n\t\n\t\t\t\tif ($doubleLoop == 0)\n\t\t\t\t{\n\t\t\t\t\t//CREATE REVERSE NODE TO TURN OFF INFLUENCE OF MASTER CONTROL\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SpreadPos_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.FkAutoSpreadPos\") ($modCore + \"_MasterCtrl_SpreadPos_Reverse.inputX\");\n\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SpreadRot_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.FkAutoSpreadRot\") ($modCore + \"_MasterCtrl_SpreadRot_Reverse.inputX\");\n\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SplineSpreadPos_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.splineAutoSpreadPos\") ($modCore + \"_MasterCtrl_SplineSpreadPos_Reverse.inputX\");\n\n\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + \"_MasterCtrl_SplineSpreadRot_Reverse\");\n\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl.splineAutoSpreadRot\") ($modCore + \"_MasterCtrl_SplineSpreadRot_Reverse.inputX\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tparent  ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\tparent  ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\tparent  ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\tparent  ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t\n\t\t\t\tsetAttr ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr.v\") 0;\n\t\t\t\tsetAttr ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr.v\") 0;\n\t\t\t\tsetAttr ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr.v\") 0;\n\t\t\t\tsetAttr ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr.v\") 0;\n\t\t\t}\n\t\t\t$type = \"Spline\";\n\t\t\t$doubleLoop++;\n\t\t}\n\t\t\n\t\n\t\tfor ($crntFKChain in $fKChain)                                    \n\t\t{\n\t\t\tstring $nPdCh = \"_\";\n\t\t\tif ($crntCh < 10)\n\t\t\t{\n\t\t\t\t$nPdCh = \"_0\";\n\t\t\t}\n\t\n\t\t\t$fKJoints = `ls (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + \"??\")`;\n\t\t\t$fKJointSize = `size $fKJoints`;\n\t\t\tstring $crntFKJoint;\n\t\t\tint $crntJnt = 1;\n\t\t\tfor ($crntFKJoint in $fKJoints)\n\t\t\t{\n\t\t\t\tstring $nPd = \"\";\n\t\t\t\tif ($crntJnt < 10)\n\t\t\t\t{\n\t\t\t\t\t$nPd = \"0\";\n\t\t\t\t}\n\t\t\t\t$nextJnt = ($crntJnt + 1);\n\t\t\t\t$nPdNext = \"\";\n\t\t\t\tif ($nextJnt <10)\n\t\t\t\t{\n\t\t\t\t\t$nPdNext = \"0\";\n\t\t\t\t}\n\t\t\t\t$previousJnt = ($crntJnt - 1);\n\t\t\t\t$nPdPrev = \"\";\n\t\t\t\tif ($previousJnt <10)\n\t\t\t\t{\n\t\t\t\t\t$nPdPrev = \"0\";\n\t\t\t\t}\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\");\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.v\") 0;\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.v\") 0;\n\t\t\t\t\n\t\t\t\tif ($crntJnt == 1)\n\t\t\t\t{\n\t\t\t\t\t//GET JOINT DIRECTION\n\t\t\t\t\t$upPos = `xform -q -ws -t  (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"DShape.cv[1]\")`;\n\t\t\t\t\t$aimPos = `xform -q -ws -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Shape.cv[1]\")`;\n\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\");\n\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\");\n\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr.translate\"), $upPos[0], $upPos[1], $upPos[2]);\n\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr.translate\"), $aimPos[0], $aimPos[1], $aimPos[2]);\n\n\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntGrp2\") ($modCore + $nPdCh + $crntCh + \"JntGrp\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntFKGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntIKGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"JntIKGrp2\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp\");\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"JntGrp2\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"JntIKGrp2\") ($modCore + \"_ScaleGrp\");\n\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")`;\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"JntGrp2\")`;\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"JntIKGrp2\")`;\n\n\t\t\t\t\tdelete `aimConstraint -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\") ($modCore + $nPdCh + $crntCh + \"JntGrp2\")`;\n\t\t\t\t\tdelete `aimConstraint -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")`;\n\t\t\t\t\tdelete `aimConstraint -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp2\")`;\n\t\t\t\t\tmakeIdentity -apply true -t 1 ($modCore + $nPdCh + $crntCh + \"JntGrp2\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp2\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"JntIKGrp2\");\n\t\t\t\t\t\n\t\t\t\t\tdelete ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"UpLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"AimLctr\");\n\t\t\t\t\n\t\t\t\t\t//CREATE BLEND\n\t\t\t\t\taddAttr -ln (\"splineIK\" + $nPdCh + $crntCh + \"Inf\") -at double  -min 0 -max 1 -dv 0 ($modCore + \"_MasterCtrl\");\n\t\t\t\t\tsetAttr -e-keyable true ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\")\n\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif ($crntSide == \"right\" && $fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\tselect -cl;\n\t\t\t\t\tjoint -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\");\n\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide.v\") 0;\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + \"_ScaleGrp\");\n\t\t\t\t}\n\n\t\t\t\t//MAIN CONTROL\n\t\t\t\tcircle -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1;\n\t\t\t\tscale -r 1 1 0.667 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.cv[3]\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.cv[7]\") ;\n\t\n\t\t\t\tscale -r 1 ($controllerSize * 2) ($controllerSize * 1) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\tdelete -ch ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\t\t\n\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp2\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp2\");\n\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\t\t\t\t\n\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\tif ($crntFKJoint == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($crntSide == \"left\" || $crntSide == \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t//SPLINE CONTROL\n\t\t\t\t\tcircle -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") -c 0 0 0 -nr 0 0 1 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1;\n\t\t\t\t\tscale -r 0.5 0.9 0.9 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.cv[3]\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.cv[7]\") ;\n\t\t\n\t\t\t\t\tscale -r ($controllerSize * $multiplier * 1) ($controllerSize * $multiplier * 0.5) 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\tdelete -ch ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\n\t\t\t\t\tmove -r -os -wd 0 ($controllerSize * $multiplier *2) 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.cv[0:7]\");\n\t\t\t\t\t\t\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp2\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\"); xform -os -piv 0 0 0;\n\t\t\t\t\tgroup -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp2\"); xform -os -piv 0 0 0;\n\t\t\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\")`;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//PARENT CONSTRAIN GROUPS FOR SPREADING\n\t\t\t\tif ($fKChainSize > 2 && $crntJnt == 1 && $crntCh != 1 && $crntCh != $fKChainSize)\n\t\t\t\t{\n\t\t\t\t\t//ONCE FOR FK AND ONCE FOR SPLINE\n\t\t\t\t\t$type = \"\";\n\t\t\t\t\t$spreadPos = \".FkAutoSpreadPos\";\n\t\t\t\t\t$spreadRot = \".FkAutoSpreadRot\";\n\t\t\t\t\tint $doubleLoop = 0;\n\t\t\t\t\twhile ($doubleLoop < 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t//print (\"$crntJnt is \" + $crntJnt + \"\\n\");\n\t\t\t\t\t\t//print (\"$type is \" + $type + \"\\n\");\n\t\t\t\t\t\t//CREATE GROUP AND CONSTRAINT\n\t\t\t\t\t\tgroup -em -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\") ($modCore + \"_MainChainCtrlGrp\");\n\t\t\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\")`;\n\t\t\t\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modCore + \"_MainChainCtrlGrp\") ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\") ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\tparentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($modCore + \"_MainChainCtrlGrp\") ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\") ($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//ADD ATTRIBUTES AND SET WEIGHTS\n\t\t\t\t\t\tfloat $crntChFloat = ($crntCh - 1);\n\t\t\t\t\t\tfloat $fKChainSizeFloat = ($fKChainSize - 1);\n\t\t\t\t\t\tfloat $spreadVal = ($crntChFloat/$fKChainSizeFloat);\n\t\n\t\t\t\t\t\taddAttr -ln \"translateSpreadVal\" -at double -min 0 -max 1 -dv $spreadVal ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl\");\n\t\t\t\t\t\tsetAttr -e -keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\");\n\t\t\t\t\t\taddAttr -ln \"rotateSpreadVal\" -at double -min 0 -max 1 -dv $spreadVal ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl\");\n\t\t\t\t\t\tsetAttr -e -keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.rotateSpreadVal\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE MD NODE FOR TRANSLATE START AND END LOCATOR WEIGHTS\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadPos) ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input1X\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadPos) ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input1Y\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadRot) ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input1X\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl\" + $spreadRot) ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input1Y\");\n\n\t\t\t\t\t\t//CONNECT REVERSE NODE TO TURN OFF INFLUENCE OF MASTER CONTROL\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl_\" + $type + \"SpreadPos_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint1.\" + $modCore + \"_MainChainCtrlGrpW0\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + \"_MasterCtrl_\" + $type + \"SpreadRot_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint2.\" + $modCore + \"_MainChainCtrlGrpW0\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CONNECT CONSTRAINT WEIGHTS TO MD NODE\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input2X\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.rotateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input2X\");\n\t\t\t\t\t\t//REVERSE NODE FOR INVERTED VALUE\n\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Translate\" + $type + \"Spread_Reverse\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Translate\" + $type + \"Spread_Reverse.inputX\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Translate\" + $type + \"Spread_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.input2Y\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Rotate\" + $type + \"Spread_Reverse\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"Ctrl.translateSpreadVal\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Rotate\" + $type + \"Spread_Reverse.inputX\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_Rotate\" + $type + \"Spread_Reverse.outputX\") ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.input2Y\");\n\t\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.outputY\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint1.\" + $modCore + \"_SpreadTranslate_\" + $type + \"StartLctrW1\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.outputY\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint2.\" + $modCore + \"_SpreadRotate_\" + $type + \"StartLctrW1\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Translate\" + $type + \"Spread_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint1.\" + $modCore + \"_SpreadTranslate_\" + $type + \"EndLctrW2\");\n\t\t\t\t\t\tconnectAttr -force ($modCore + $nPdCh + $crntCh + \"_Rotate\" + $type + \"Spread_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $type + \"_SpreadCtrlGrp_parentConstraint2.\" + $modCore + \"_SpreadRotate_\" + $type + \"EndLctrW2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ($fKJointSize == 1)\n\t\t\t\t\t\t{//DON'T LOOP IF THERE IS ONLY ONE JOINT PER CHAIN\n\t\t\t\t\t\t\t$doubleLoop = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$type = \"Spline\";\n\t\t\t\t\t\t$spreadPos = \".splineAutoSpreadPos\";\n\t\t\t\t\t\t$spreadRot = \".splineAutoSpreadRot\";\n\t\t\t\t\t\t$doubleLoop++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ($fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\") ($modCore + \"_MainChainCtrlGrp\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + \"_MainChainCtrlGrp\");\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t//ORIENT JOINT\n\t\t\t\tif (`objExists (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPdNext + $nextJnt)`)\n\t\t\t\t{\n\t\t\t\t\t//GET LOCATION OF TOP CV\n\t\t\t\t\t$proxyAim = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Shape.cv[1]\")`;\n\t\t\t\t\t$proxyUp = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"DShape.cv[1]\")`;\n\t\t\t\t\t//CREATE LOCATOR\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\tmove -r $proxyAim[0] $proxyAim[1] $proxyAim[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tmove -r $proxyUp[0] $proxyUp[1] $proxyUp[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\t\n\t\t\t\t\tdelete `aimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\")\n\t\t\t\t\t(\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\n\t\t\t\t\tscale -r 1 0.667 0.9 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\t\t\t\t\t//GET ORIENTATION USING THE END POINT OF THE END CONTROL\n\t\t\t\t\t$proxyAim = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"DShape.cv[1]\")`;\n\t\t\t\t\t$ProxyUp = `xform -ws -q -t (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Shape.cv[5]\")`;\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tspaceLocator -n (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\tmove -r $proxyAim[0] $proxyAim[1] $proxyAim[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tmove -r $ProxyUp[0] $ProxyUp[1] $ProxyUp[2] (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t\t\n\t\t\t\t\tdelete `aimConstraint -offset 0 $rotOffset 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\")\n\t\t\t\t\t(\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\")`;\n\n\t\t\t\t\tscale -r 1 0.667 0.9 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\t\t\t\t\tmakeIdentity -apply true -s 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\");\n\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_AimLctr\");\n\t\t\t\t\tdelete (\"RRM_\" + $prfx + $core + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_UpLctr\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t{\n\t\t\t\t\t//ORIENT SPLINE CONTROLS\n\t\t\t\t\tif ($crntJnt == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"JntFKGrp\");\n\t\n\t\t\t\t\t\t//CONNECT BLEND\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE ADD\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE BLENDS TO DISABLE ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntIK_Pos = `getAttr ($modCore + $nPdCh + $crntCh + \"JntIKGrp.translate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.color2\"), $JntIK_Pos[0], $JntIK_Pos[1], $JntIK_Pos[2]);\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntIKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntIK_Rot = `getAttr ($modCore + $nPdCh + $crntCh + \"JntIKGrp.rotate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.color2\"), $JntIK_Rot[0], $JntIK_Rot[1], $JntIK_Rot[2]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.translate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma.input3D[1]\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntFKGrp.rotate\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma.input3D[1]\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE MASTER BLEND FOR BLEND AND ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Pos_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp.translate\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"JntGrp_Rot_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"JntGrp.rotate\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\")`;\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\")`;\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\")`;\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\")\n\t\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\t\t\n\t\t\t\t\tif ($crntSide == \"right\" && $fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\")`;\n\t\t\t\t\t\trotate -r -os 0 180 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\");\n\t\t\t\t\t\tmakeIdentity -apply true -r 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//SCALE CONSTRAINT FK JOINTS TO CONTROLS\n\t\t\t\t\tif ($crntJnt == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//scaleConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.scale\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD.input1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD.input2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK_Scale_MD.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.scale\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tif ($crntJnt != 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\");\n\t\t\t\t\t\t//scaleConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Ctrl.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp.scale\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"Jnt\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntFK\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntIK\");\n\t\t\t\t\t\tif ($crntSide == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"JntIKGuide\");\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//ORIENT SPLINE CONTROLS\n\t\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\")`;\n\t\t\t\t\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_ScaleGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\");\n\t\n\t\t\t\t\t\t\tif ($crntJnt != 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//ADD ATTRIBUTES TO THE CONTROLS\n\t\t\t\t\t\t\t\taddAttr -ln \"followAmount\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\");\n\t\t\n\t\t\t\t\t\t\t\taddAttr -ln \"parentInfluence\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.parentInfluence\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//ATTRIBUTE CONNECTIONS\n\t\t\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.inputX\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\t\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD\");\n\t\t\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_ParentInf_Rev\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input1X\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input1Y\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.parentInfluence\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input2X\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.parentInfluence\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_ParentInf_Rev.inputX\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_ParentInf_Rev.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.input2Y\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modCore + $nPdCh + $crntCh + \"_\" + $nPdPrev + $previousJnt + \"SplineCtrlW2\");\n\t\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_MD.outputY\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modCore + \"_ScaleGrpW1\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if ($crntJnt == 1 && $fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//ORIENT SPLINE CONTROLS\n\t\t\t\t\t\tdelete `parentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"CtrlGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\")`;\n\t\t\t\t\t\tif ($crntCh == 1 || $crntCh == $fKChainSize)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_ScaleGrp\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//parentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp\");\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"JntIKGrp\");\n\t\n\t\t\t\t\t\t//ADD ATTRIBUTES TO THE FIRST CONTROL\n\t\t\t\t\t\taddAttr -ln \"followAmount\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\");\n\t\t\t\t\t\t\n\t\t\t\t\t\taddAttr -ln \"stretch\" -at double -min 0 -max 1 -dv 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.stretch\");\n\t\t\t\t\t\t\n\t\t\t\t\t\taddAttr -ln \"autoVolume\" -at double -min 0 -max 1 -dv 1 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.autoVolume\");\n\t\n\t\t\t\t\t\t//ATTRIBUTE CONNECTIONS\n\t\t\t\t\t\tif ($crntCh == 1 || $crntCh == $fKChainSize)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modCore + \"_ScaleGrpW1\");\n\t\t\t\t\t\t\tshadingNode -asUtility reverse -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.followAmount\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.inputX\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl_Follow_Rev.outputX\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW0\");\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t//CONNECT SPLINE ATTRIBUTE TO CONDITIONALS FOR THE VISIBILITY OF THE CONTROLS\n\t\t\t\t\t\tshadingNode -asUtility condition -n ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.firstTerm\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.secondTerm\") 0;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.operation\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility condition -n ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.firstTerm\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.secondTerm\") 1;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.operation\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE CONDITIONAL TO OVERRIDE VISIBILITY IF ADDITIVE IS ON.\n\t\t\t\t\t\tshadingNode -asUtility condition -n ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition.firstTerm\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_FKCtrl_Vis_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition.colorIfTrueR\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ($fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t//CREATE BLEND FOR THE STARTING GROUP IF IT DOESN'T ALREADY EXIST\n\t\t\t\t\t\t//CONNECT SPLINE ATTRIBUTE TO BLEND THE SKINNING JOINTS\n\t\t\t\t\t\t//BLENDS\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.color2\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Scale_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.scale\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//ADDS\n\t\t\t\t\t\t//CREATE BLENDS TO DISABLE ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntFK_Pos = `getAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.translate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.color2\"), $JntFK_Pos[0], $JntFK_Pos[1], $JntFK_Pos[2]);\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.splineIK\" + $nPdCh + $crntCh + \"Inf\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.color1\");\n\t\t\t\t\t\t$JntFK_Rot = `getAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.rotate\")`;\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.color2\"), $JntFK_Rot[0], $JntFK_Rot[1], $JntFK_Rot[2]);\n\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.translate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma.input3D[1]\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Add_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma.input3D[0]\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntFK.rotate\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma.input3D[1]\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE SUBTRACT TO ZERO OUT JOINTS\n\t\t\t\t\t\t$jointTranslate = `getAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.translate\")`;\n\t\t\t\t\t\tshadingNode -asUtility plusMinusAverage -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.operation\") 2;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.input3D[0]\");\n\t\t\t\t\t\tsetAttr (($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.input3D[1]\"), ($jointTranslate[0]*1), ($jointTranslate[1]*1), ($jointTranslate[2]*1));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CREATE MASTER BLEND FOR BLEND AND ADD\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_PosSubtract_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Blnd.output\")  ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Pos_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.translate\");\n\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + \"_MasterCtrl.blendedAdditive\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.blender\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Pma.output3D\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.color1\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Blnd.output\")  ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.color2\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"_SplineIK_Rot_Master_Blnd.output\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.rotate\");\n\t\t\t\t\n\t\t\t\t\t\t//CONNECT SPLINE ATTRIBUTE TO THE VISIBILITY OF THE CONTROLS\n\t\t\t\t\t\tconnectAttr -f  ($modCore + $nPdCh + $crntCh + \"_VisAdditiveOverride_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.v\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.v\");\n\t\t\t\t\t\tsetAttr -l 1 -k 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl.v\");\n\t\t\t\t\t\tsetAttr -l 1 -k 0 ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl.v\");\n\t\n\t\t\t\t\t}\n\t\t\t\t\t//ORIENT CONSTRAINT RIGHT IK JOINTS TO GUIDE JOINTS\n\t\t\t\t\tif ($crntSide == \"right\" && $fKJointSize > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIKGuide.scale\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"JntIK.scale\");\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t//CREATE SPLINE IK\n\t\t\t\t\tif (($crntJnt == $fKJointSize) && ($fKJointSize > 2))\n\t\t\t\t\t{\n\t\t\t\t\t\t$JntIK = \"JntIK\";\n\t\t\t\t\t\tif ($crntSide == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$JntIK = \"JntIKGuide\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK) ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK);\n\t\t\t\t\t\tikHandle -n ($modCore + $nPdCh + $crntCh + \"_IKHandle\") -sol ikSplineSolver -scv false;\n\t\t\t\t\t\t$SplineCurve = `listConnections -type \"nurbsCurve\" ($modCore + $nPdCh + $crntCh + \"_IKHandle\")`;\n\t\t\t\t\t\trename $SplineCurve ($modCore + $nPdCh + $crntCh + \"_SplineCurve\");\n\t\t\t\t\t\tarclen -ch 1 ($modCore + $nPdCh + $crntCh + \"_SplineCurve\");\n\t\t\t\t\t\t$curveInfoNode = `listConnections -t curveInfo -d 1 -s 0 ($modCore + $nPdCh + $crntCh + \"_SplineCurveShape\")`;\n\t\t\t\t\t\trename $curveInfoNode[0] ($modCore + $nPdCh + $crntCh + \"_SplineLengthInfo\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_SplineCtrl_Vis_Condition.outColorR\") ($modCore + $nPdCh + $crntCh + \"_SplineCurve.v\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurve.template\") 1;\n\n\t\t\t\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + $nPdCh + $crntCh + \"_SplineCurve\");\n\t\t\t\t\t\tsetAttr -e-keyable true ($modCore + $nPdCh + $crntCh + \"_SplineCurve.nonControl\");\n\t\t\t\t\t\tsetAttr -lock true ($modCore + $nPdCh + $crntCh + \"_SplineCurve.nonControl\");\n\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurve\") ($modCore + \"_extraCurveNodesGrp\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKHandle\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKHandle.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//CONNECT SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.operation\") 2;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_SplineLengthInfo.arcLength\") ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.input1X\");\n\t\t\t\t\t\tconnectAttr -f ($modName + \"_MAINCtrl.scaleY\") ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.input2X\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_HierarchyCompensate_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input1X\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.operation\") 2;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat $splineLengthValue = `getAttr ($modCore + $nPdCh + $crntCh + \"_SplineLengthInfo.arcLength\")`;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input2X\") $splineLengthValue;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//BLEND SCALE\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.stretch\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color1R\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleX\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK + \".scaleX\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//INVERSE SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input1X\") 1;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input2X\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.operation\") 2;\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.autoVolume\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color1R\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleZ\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + $JntIK + \".scaleZ\");\n\t\n\t\t\t\t\t\t//ADVANCED TWIST\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr\");\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr\");\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr\");\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr\");\n\t\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr\") ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr\") ($modCore + \"Grp\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr.v\") 0;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr.v\") 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKHandle.dTwistControlEnable\") 1;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKHandle.dWorldUpType\")  4;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_IKTwistStartLctr.xformMatrix\") ($modCore + $nPdCh + $crntCh + \"_IKHandle.dWorldUpMatrix\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_IKTwistEndLctr.xformMatrix\")   ($modCore + $nPdCh + $crntCh + \"_IKHandle.dWorldUpMatrixEnd\");\n\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t////////////CREATE CLUSTERS////////////\n\t\t\t\t\t\t//START CLUSTER\n\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_SplineCurve.cv[0:1]\");\n\t\t\t\t\t\tnewCluster \" -envelope 1\";\n\t\t\t\t\t\trename ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr\");\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr.v\") 0;\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurveStartClstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//MIDDLE CLUSTERS\n\t\t\t\t\t\tint $midClstrInt = 2;\n\t\t\t\t\t\tint $prevMidClstrInt = 1;\n\t\t\t\t\t\tstring $prevMidControlnPd;\n\t\t\t\t\t\twhile ($midClstrInt < $crntJnt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$midControlnPd = \"0\";\n\t\t\t\t\t\t\tif ($midClstrInt > 9)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$midControlnPd = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$prevMidControlnPd = \"0\";\n\t\t\t\t\t\t\tif ($midClstrInt > 9)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$prevMidControlnPd = \"\";\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_SplineCurve.cv[\" + $midClstrInt + \"]\");\n\t\t\t\t\t\t\tnewCluster \" -envelope 1\";\n\t\t\t\t\t\t\trename ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr\");\n\t\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr\");\n\t\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr.v\") 0;\n\t\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurve\" + $midClstrInt + \"Clstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//CONNECT STRETCH TO MIDDLE JOINTS\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + $JntIK + \".scaleX\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + $JntIK + \".scaleY\");\n\t\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_\" + $midControlnPd + $midClstrInt + $JntIK + \".scaleZ\");\n\t\t\t\t\t\t\t$midClstrInt++;\n\t\t\t\t\t\t\t$prevMidClstrInt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//END CLUSTER\n\t\t\t\t\t\tselect ($modCore + $nPdCh + $crntCh + \"_SplineCurve.cv[\" + $crntJnt + \":\" + ($crntJnt + 1) + \"]\");\n\t\t\t\t\t\tnewCluster \" -envelope 1\";\n\t\t\t\t\t\trename ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr\");\n\t\t\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr.v\") 0;\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_SplineCurveEndClstr\") ($modCore + \"_curveNodesGrp\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (($crntJnt == $fKJointSize) && ($fKJointSize == 2))\n\t\t\t\t\t{\n\t\t\t\t\t\t$JntIK = \"JntIK\";\n\t\t\t\t\t\tif ($crntSide == \"right\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$JntIK = \"JntIKGuide\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//USE AIM CONSTRAINTS IF ONLY TWO JOINTS PER CHAIN\n\t\t\t\t\t\t//delete `aimConstraint -mo -aimVector ($multiplier * 1) 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modCore + $nPdCh + $crntCh + \"_01\" + \"SplineCtrl\")\n\t\t\t\t\t\t//($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK)`;\n\t\t\t\t\t\t//makeIdentity -apply true -r 1 ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK);\n\t\t\t\t\t\taimConstraint -mo -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpVector 0 1 0 -worldUpObject ($modCore + $nPdCh + $crntCh + \"_01\" + \"SplineCtrl\")\n\t\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK);\n\t\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//STRETCH\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\tspaceLocator -n ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr\");\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr.v\") 0;\n\t\t\t\t\t\tparent ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\") ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SplineCtrlGrp\");\n\t\t\t\t\t\tpointConstraint ($modCore + $nPdCh + $crntCh + \"_01\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\taimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\"\n\t\t\t\t\t\t($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_AimLctr\");\n\t\t\t\t\t\tpointConstraint ($modCore + $nPdCh + $crntCh + \"_02\" + \"SplineCtrl\") ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr\");\n\t\t\t\t\t\t$targetLctrPos = `getAttr ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr.tx\")`;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.operation\") 2;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_IKStretch_TargetLctr.tx\") ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input1X\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.input2X\") $targetLctrPos;\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.stretch\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatio_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.color1R\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleX\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK + \".scaleX\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t//INVERSE SCALE\n\t\t\t\t\t\tshadingNode -asUtility multiplyDivide -n ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.operation\") 2;\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input1X\") 1;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_Stretch_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.input2X\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tshadingNode -asUtility blendColors -n ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd\");\n\t\t\t\t\t\tconnectAttr ($modCore + $nPdCh + $crntCh + \"_01SplineCtrl.autoVolume\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.blender\");\n\t\t\t\t\t\tsetAttr ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color2\") -type double3 1 1 1 ;\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_StretchInverse_MD.outputX\") ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.color1R\");\n\t\t\t\t\t\t                                                                                                                                         \n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_01\" + $JntIK + \".scaleZ\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK + \".scaleY\");\n\t\t\t\t\t\tconnectAttr -f ($modCore + $nPdCh + $crntCh + \"_LengthRatioInverse_Blnd.outputR\") ($modCore + $nPdCh + $crntCh + \"_02\" + $JntIK + \".scaleZ\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparentConstraint ($modCore + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Ctrl\") ($modCore + $nPdCh + $crntCh + \"JntGrp\");\n\t\t\t\t}\n\t\t\t\t$crntJnt++;\n\t\t\t}\n\t\t\t$crntCh++;\n\t\t}\n\t\t//ATTACH LOCATORS TO FIRST JOINT OF START AND END JOINT\n\t\tif ($fKChainSize > 2)\n\t\t{\n\t\t\tstring $nPdCh = \"_\";\n\t\t\tif ($fKChainSize < 10)\n\t\t\t{\n\t\t\t\t$nPdCh = \"_0\";\n\t\t\t}\n\t\t\t$doubleLoop = 0;\n\t\t\t$type = \"\";\n\t\t\t$jointType = \"FK\";\n\t\t\twhile ($doubleLoop < 2)\n\t\t\t{\n\t\t\t\tpointConstraint -mo  ($modCore + \"_01_01Jnt\" + $jointType) ($modCore + \"_SpreadTranslate_\" + $type + \"StartLctr\");\n\t\t\t\tpointConstraint -mo  ($modCore + $nPdCh + $fKChainSize + \"_01Jnt\" + $jointType) ($modCore + \"_SpreadTranslate_\" + $type + \"EndLctr\");\n\t\t\t\tparentConstraint -mo ($modCore + \"_01_01Jnt\" + $jointType) ($modCore + \"_SpreadRotate_\" + $type + \"StartLctr\");\n\t\t\t\tparentConstraint -mo ($modCore + $nPdCh + $fKChainSize + \"_01Jnt\" + $jointType)($modCore + \"_SpreadRotate_\" + $type + \"EndLctr\");\n\t\t\t\t$jointType = \"IK\";\n\t\t\t\t$type = \"Spline\";\n\t\t\t\t$doubleLoop++;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t//ADD CORE NAME\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t\t\t\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"fkChain\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t\t\n\t\t\t//ADD DIRECTION\n\t\t\t$direction = `getAttr ($topNode + \".direction\")`;\n\t\t\taddAttr -ln \"direction\"  -at long ($crntModControl);\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".direction\");\n\t\t\tsetAttr ($crntModControl + \".direction\") $direction;\n\t\t\tsetAttr -l true ($crntModControl + \".direction\");\n\t\t}\n\t\t\n\t\t//LOCK MAIN CONTROL ATTRIBUTES\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.tx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.ty\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.tz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.rx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.ry\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.rz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.sx\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.sy\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.sz\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"_MasterCtrl.v\");\n\n\t\tselect -cl;\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t\t$rotOffset = 180;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE HEAD MODULE////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigHead(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\n\t//INTEGER FOR LOOP\n\t$mirrorInt = 2;\n\t$multiplier = 1;\n\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 1;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 2)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"head\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFICtrl ATTRIBUTES\n\t\t//JAW\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Jaw\")`)\n\t\t{\n\t\t\taddAttr -ln \"jaw\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.jaw\");\n\t\t\tsetAttr -l true ($modCore + \"Grp.jaw\");\n\t\t}\n\t\n\t\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType \"objectrotation\" -worldUpVector 1 0 0 -worldUpObject (\"RRM_\" + $prfx + $core + \"_Parent\")\n\t\t(\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_ScaleGrp\")`;\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\t\n\t\t//MASTER SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_MasterCtrlScaleGrp\");\n\t\n\t\t//HEAD CONTROL\n\t\tcurve -n ($modCore + \"_MasterCtrl\") -d 1 -p -1 0 -1 -p 1 0 -1 -p 1 0 1 -p -1 0 1 -p -1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n\t\t//rotate -r 0 0 90 ($modCore + \"_MasterCtrl\");\n\t\t//makeIdentity -apply true -r 1 ($modCore + \"_MasterCtrl\");\n\t\tpickWalk -d down;\n\t\trename ($modCore + \"_MasterCtrlShape\");\n\t\t\n\t\t//GET SIZE\n\t\tspaceLocator -n ($modCore + \"_HeadStartLctr\");\n\t\tspaceLocator -n ($modCore + \"_HeadEndLctr\");\n\t\tparent ($modCore + \"_HeadEndLctr\") ($modCore + \"_HeadStartLctr\");\n\t\tpointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_HeadStartLctr\");\n\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"none\" (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_HeadStartLctr\");\n\t\tpointConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_HeadEndLctr\");\n\t\t$scale = `getAttr ($modCore + \"_HeadEndLctr.tx\")`;\n\t\tscale -r ($scale /5) ($scale /5) ($scale /5) ($modCore + \"_MasterCtrl\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_MasterCtrl\");\n\t\n\t\tgroup -n ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_MasterCtrl\");\n\t\tparent ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Parent\") ($modCore + \"_MasterCtrlGrp\")`;\n\t\t//makeIdentity -apply false -t 1 -r 1 ($modCore + \"_MasterCtrlGrp\");\n\t\tmove -r -os -wd 0 ($scale * 1.3) 0 ($modCore + \"_MasterCtrl.cv[0:24]\");\n\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_MasterCtrl\");\n\t\tparentConstraint -mo ($modCore) ($modCore + \"_MasterCtrlGrp\");\n\t\t \n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_MasterCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient);\n\t\t\n\t\n\t\tif (`objExists (\"RRM_\" + $prfx + $core + \"_Jaw\")`)\n\t\t{\n\t\t//JAW CONTROL\n\t\t\tcircle -n ($modCore + \"_JawCtrl\");\n\t\t\tscale -r 1 0.5 1 ($modCore + \"_JawCtrl\");\n\t\t\tmove -r -os -wd 0 0 1.2 ($modCore + \"_JawCtrl.cv[1]\") ($modCore + \"_JawCtrl.cv[5]\");\n\t\t\tmove -r -os -wd 0 0 0.58 ($modCore + \"_JawCtrl.cv[0]\") ($modCore + \"_JawCtrl.cv[2]\") ($modCore + \"_JawCtrl.cv[4]\") ($modCore + \"_JawCtrl.cv[6]\");\n\t\t\tselect ($modCore + \"_JawCtrl\") ;\n\t\t\trotate -r -os 35 0 0 ($modCore + \"_JawCtrl\");\n\t\t\tscale -r ($scale /3) ($scale /3) ($scale /3);\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 ($modCore + \"_JawCtrl\");\n\t\t\tdelete -ch ($modCore + \"_JawCtrl\");\n\t\t\tgroup -n ($modCore + \"_JawCtrlGrp\");\n\t\t\tparent ($modCore + \"_JawCtrlGrp\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t\t\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Jaw\") ($modCore + \"_JawCtrlGrp\")`;\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $core + \"_JawEnd\") ($modCore + \"_JawCtrl\")`;\n\t\t\t$jawCOffset = `getAttr ($modCore + \"_JawCtrl.translate\")`;\n\t\t\tmove -r ($jawCOffset[0] * 1.2) ($jawCOffset[1] * 1.2) ($jawCOffset[2] * 1.2) ($modCore + \"_JawCtrl.translate\");\n\t\t\tmakeIdentity -apply true ($modCore + \"_JawCtrl\");\n\t\t\t$jawPivot = `xform -q -ws -rp (\"RRM_\" + $prfx + $core + \"_Jaw\")`;\n\t\t\tmove -a $jawPivot[0] $jawPivot[1] $jawPivot[2] ($modCore + \"_JawCtrl.scalePivot\") ($modCore + \"_JawCtrl.rotatePivot\") ;\n\t\t\t\n\t\t\tparent ($modCore + \"_MasterCtrlScaleGrp\") ($modCore + \"_ScaleGrp\");\n\t\t\n\t\t\t//JOINTS\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_JawJnt\");\n\t\t\tjoint -n ($modCore + \"_JawEndJnt\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Jaw\") ($modCore + \"_JawJnt\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_JawCtrl\") ($modCore + \"_JawJnt\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_JawEnd\") ($modCore + \"_JawEndJnt\")`;\n\t\t\tparentConstraint -mo ($modCore + \"_MasterCtrl\") ($modCore + \"_JawCtrlGrp\");\n\t\t\t\n\t\t\tparent ($modCore + \"_JawJnt\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t}\n\t\t\t\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($modCore + \"_TopJnt\");\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Top\") ($modCore + \"_TopJnt\")`;\n\t\tparentConstraint -mo ($modCore + \"_MasterCtrl\") ($modCore + \"_TopJnt\");\n\t\t\n\t\tparent ($modCore + \"_TopJnt\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t\n\t\t//SET JAW AND END NODES TO SCALE WITH MASTER CTRL\n\t\tscaleConstraint ($modCore + \"_MasterCtrl\") ($modCore + \"_MasterCtrlScaleGrp\");\n\t\t\n\t\tdelete ($modCore + \"_HeadStartLctr\") ($modCore + \"_HeadEndLctr\");\n\t\n\t\t//ADD CORE NAME\n\t\tselect ($modCore + \"_MasterCtrl\");\n\t\tif (`objExists ($modCore + \"_JawCtrl\")`)\n\t\t{\n\t\t\tselect -add ($modCore + \"_JawCtrl\");\n\t\t}\n\t\t$modControls = `ls -sl`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"head\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\t\t}\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE LOOK AT MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EyeControl()\n{\n\tcircle -n \"RRM_EyeControl\" -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0 -s 8 -ch 1; objectMoveCommand;\n\tcurve -n \"RRM_EyeControl1\" -d 1 -p 0 0 -1 -p 0 0 1 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename \"RRM_EyeControl1Shape\";\n\tcurve -n \"RRM_EyeControl2\" -d 1 -p -1 0 0 -p 1 0 0 -k 0 -k 1 ;\n\tpickWalk -d down;\n\trename \"RRM_EyeControl2Shape\";\n\t\t\n\tparent -r -s \"RRM_EyeControl1Shape\" \"RRM_EyeControl2Shape\" \"RRM_EyeControl\";\n\tdelete \"RRM_EyeControl1\" \"RRM_EyeControl2\";\n\tdelete -ch \"RRM_EyeControl\";\n}\n\nglobal proc RRM_GenerateRigLookAt(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\t$mirrorInt = 1;\n\tfloat $rotOffset = 0;\n\tfloat $lookAtSize;\n\tstring $modAttachNode;\n\tstring $modCore;\n\t\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 0;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 1)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core);\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core);\n\t\t\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"lookAt\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\t\t\n\t\t//NODE-SPECIFIC ATTRIBUTES\n\t\t$lookAts = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\n\t\n\t\taddAttr -ln \"lookAts\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.lookAts\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.lookAts\") $lookAtNum;\n\t\tsetAttr -l true ($modCore + \"Grp.lookAts\");\n\t\n\t\t//SCALE GROUP\n\t\tspaceLocator -n ($modCore + \"_AveragePosition_Lctr\");\n\t\tparentConstraint $lookAts ($modCore + \"_AveragePosition_Lctr\");\n\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\tdelete ($modCore + \"_AveragePosition_Lctr\");\n\t\t\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\t\n\t\n\t\t//MASTER CONTROLLER\n\t\tcircle -n ($modCore + \"_MasterCtrl\") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 1 -ut 0 -tol 0 -s 4 -ch 1;\n\t\trotate -r 45 90 0 ($modCore + \"_MasterCtrl\");\n\t\tmakeIdentity -apply true -r 1 ($modCore + \"_MasterCtrl\");\n\t\tdelete -ch ($modCore + \"_MasterCtrl\");\n\t\tgroup -n ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_MasterCtrl\");\n\t\tparent ($modCore + \"_MasterCtrlGrp\") ($modCore + \"_ScaleGrp\");\n\t\n\t\t//SCALE MASTER CONTROLLER\n\t\t$lookAts = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\t\n\t\t\n\t\tif ($lookAtNum == 1)\n\t\t{\n\t\t\t$lookAtSize = `getAttr \"RRM_MAIN.scaleY\"`;\n\t\t\tscale -a ($lookAtSize * 1) ($lookAtSize * 1) $lookAtSize ($modCore + \"_MasterCtrlGrp\");\n\t\t\tdelete `parentConstraint $lookAts ($modCore + \"_MasterCtrlGrp\")`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t\tparent ($modCore + \"_MasterCtrl_EndAttachLctr\") ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\tpointConstraint $lookAts[0] ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + \"Grp\")\n\t\t\t$lookAts ($modCore + \"_MasterCtrl_StartAttachLctr\");\n\t\t\tpointConstraint $lookAts ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t\t$lookAtSize = `getAttr ($modCore + \"_MasterCtrl_EndAttachLctr.tx\")`;\n\t\t\tscale -a ($lookAtSize * 2.5) ($lookAtSize * 1.25) $lookAtSize ($modCore + \"_MasterCtrlGrp\");\n\t\t\t\n\t\t\t//POSITION\n\t\t\tdelete `parentConstraint $lookAts ($modCore + \"_MasterCtrlGrp\")`;\n\t\t\tdelete ($modCore + \"_MasterCtrl_StartAttachLctr\") ($modCore + \"_MasterCtrl_EndAttachLctr\");\n\t\t}\n\t\n\t\tparentConstraint -mo ($modCore) ($modCore + \"_MasterCtrlGrp\");\n\t\t\n\t\t//PARENT ORIENT\n\t\t$parentOrient = ($modCore + \"_MasterCtrl\");\n\t\tRRM_ParentOrient($modCore, $modName, $modAttachNode, $parentOrient); \n\t\t\n\t\t\n\t\t//EYE CONTROLS\n\t\t$lookAts = `ls (\"RRM_\" + $prfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\n\t\tstring $crntLookAt;\n\t\t$crntNum = 1;\n\t\tfor ($crntLookAt in $lookAts)\n\t\t{\n\t\t\tstring $nPd = \"\";\n\t\t\tif ($crntNum < 10)\n\t\t\t{\n\t\t\t\t$nPd = \"0\";\n\t\t\t}\n\t\t\tRRM_EyeControl;\n\t\t\trename \"RRM_EyeControl\" ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\trotate -r 90 90 0 ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\tmakeIdentity -apply true -r 1 ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\tgroup -n ($modCore + \"_\" + $nPd + $crntNum + \"Grp1\") ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\tgroup -n ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"Grp1\");\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_ScaleGrp\");\n\t\t\tdelete `pointConstraint $crntLookAt ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")`;\n\t\t\t\n\t\t\t//GET END LOCATION OF EYE CONTROL\n\t\t\t$lookAtUpLoc = `xform -q -ws -t ($crntLookAt + \"EShape.cv[0]\")`;\n\t\t\t$lookAtAimLoc = `xform -q -ws -t ($crntLookAt + \"DShape.cv[1]\")`;\n\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\");\n\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\");\n\t\t\tmove -a $lookAtAimLoc[0] $lookAtAimLoc[1] $lookAtAimLoc[2] ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\");\n\t\t\tmove -a $lookAtUpLoc[0] $lookAtUpLoc[1] $lookAtUpLoc[2] ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\");\n\t\t\t\n\t\t\tdelete `aimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\")\n\t\t\t($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")`;\n\t\t\t\n\t\t\tdelete `pointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"Grp1\")`;\n\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\");\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\") ($modCore + \"_ScaleGrp\");\t\t\n\t\t\tpointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\");\n\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")\n\t\t\t($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\") ($modCore + \"_\" + $nPd + $crntNum + \"Jnt\");\n\t\n\t\t\t//AIM EYE CONTROL AT JOINT\n\t\t\taimConstraint -offset 0 0 0 -aimVector -1 0 0 -upVector 0 1 0 -worldUpType \"objectrotation\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\")\n\t\t\t($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t\n\t\t\t//SCALE EACH CONTROLLER\n\t\t\tif ($lookAtNum == 1)\n\t\t\t{\n\t\t\t\t$lookAtSize = `getAttr \"RRM_MAIN.scaleY\"`;\n\t\t\t\tscale -a ($lookAtSize * .75) ($lookAtSize * .75) ($lookAtSize * .75) ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\tspaceLocator -n ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\");\n\t\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\tpointConstraint $lookAts[0] ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\taimConstraint -offset 0 0 0 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\")\n\t\t\t\t$lookAts ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\");\n\t\t\t\tpointConstraint $lookAts ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\");\n\t\t\t\t$lookAtSize = `getAttr ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr.tx\")`;\n\t\t\t\tscale -a ($lookAtSize * .75) ($lookAtSize * .75) ($lookAtSize * .75) ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t\tdelete ($modCore + \"_\" + $nPd + $crntNum + \"StartLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"EndLctr\");\n\t\t\t}\n\t\t\tmakeIdentity -apply true -t 1 -s 1 ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\");\n\t\t\t\n\t\t\t\n\t\t\t//CREATE CONNECTOR\n\t\t\tcurve -n ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\") -d 1 -p 0 0 0 -p 0 0 -1 -k 0 -k 1 ;\n\t\t\tpickWalk -d down;\n\t\t\trename ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrlShape\");\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\") ($modCore + \"Grp\");\n\t\t\n\t\t\tselect ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrlShape.cv[0]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1\");\n\t\t\tpointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"Ctrl\") ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1\");\n\t\t\t\n\t\t\tselect ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrlShape.cv[1]\");\n\t\t\tnewCluster \" -envelope 1\";\n\t\t\trename ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2\");\n\t\t\tpointConstraint ($modCore + \"_\" + $nPd + $crntNum + \"Grp2\") ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2\");\n\t\n\t\t\tparent ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1\")\t($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2\") ($modCore + \"Grp\");\n\t\t\tsetAttr ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster1.visibility\") 0;\n\t\t\tsetAttr ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl_Cluster2.visibility\") 0;\n\t\t\t\n\t\t\ttoggle -state on -template ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\");\n\t\t\t\n\t\t\tdelete ($modCore + \"_\" + $nPd + $crntNum + \"AimLctr\") ($modCore + \"_\" + $nPd + $crntNum + \"UpLctr\");\n\t\t\t\n\t\t\taddAttr -ln \"nonControl\"  -dt \"string\" ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl\");\n\t\t\tsetAttr -e-keyable true ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl.nonControl\");\n\t\t\tsetAttr -lock true ($modCore + \"_\" + $nPd + $crntNum + \"ConnectorCtrl.nonControl\");\n\n\t\t\t$crntNum++;\n\t\t}\n\t\n\t\t//ADD CORE NAME AND LOCK CHANNELS\n\t\t$modControls = `ls ($modCore + \"_*Ctrl\")`;\n\t\tfor ($crntModControl in $modControls)\n\t\t{\n\t\t\taddAttr -ln \"modCoreName\"  -dt \"string\" $crntModControl;\n\t\t\tsetAttr -e-keyable true ($crntModControl + \".modCoreName\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".modCoreName\") (\"_\" + $prfx + $core);\n\t\t\tsetAttr -e-lock true ($crntModControl + \".modCoreName\");\n\t\t\t\n\t\t\t//ADD MODULE TYPE\n\t\t\taddAttr -ln \"moduleType\"  -dt \"string\" ($crntModControl);\n\t\t\tsetAttr -e -keyable true ($crntModControl + \".moduleType\");\n\t\t\tsetAttr -type \"string\" ($crntModControl + \".moduleType\") \"lookAt\";\n\t\t\tsetAttr -l true ($crntModControl + \".moduleType\");\n\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".rx\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".ry\");\n\t\t\tsetAttr -lock true -keyable false -channelBox false ($crntModControl + \".rz\");\n\t\t}\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t\t$rotOffset = 180;\n\t}\n\t//ADD MASTER CONTROL FOR ALL EYES\n\t\n\t//CONTROL\n\tcircle -n ($modName + \"_\" + $core + \"_LookAtCtrl1\") -c 0 0 0 -nr 0 1 0 -sw 75 -r 1 -d 3 -ut 0 -tol 0 -s 3 -ch 0; objectMoveCommand;\n\trotate -r -os 0 7.5 0 ($modName + \"_\" + $core + \"_LookAtCtrl1\");\n\tmakeIdentity -apply  true -r 1 ($modName + \"_\" + $core + \"_LookAtCtrl1\");\n\t\n\tcurve -n ($modName + \"_\" + $core + \"_LookAtCtrl\") -d 1 -p -0.130526 0 -0.991445 -p -0.130526 0 -0.130526 -p -0.991445 0 -0.130526 -k 0 -k 1 -k 2 ;\n\tpickWalk -d down;\n\trename ($modName + \"_\" + $core + \"_LookAtCtrlShape\");\n\tparent -r -s ($modName + \"_\" + $core + \"_LookAtCtrl1Shape\") ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tdelete ($modName + \"_\" + $core + \"_LookAtCtrl1\");\n\tselect ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tduplicate -rr; rotate -r 0 90 0; for ($i=1; $i<3; ++$i) duplicate -rr -st; select ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tmakeIdentity -apply true -r 1 ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tselect -hi ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tselect -d ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tselect -add ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tparent -r -s;\n\tdelete ($modName + \"_\" + $core + \"_LookAtCtrl2\") ($modName + \"_\" + $core + \"_LookAtCtrl22\") ($modName + \"_\" + $core + \"_LookAtCtrl222\");\n\tgroup -n ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tparent ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ($modName + \"_MAINCtrl\");\n\trotate -r 90 0 0 ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ;\n\tscale -r ($lookAtSize/.75) ($lookAtSize/.75) ($lookAtSize/.75) ($modName + \"_\" + $core + \"_LookAtCtrlGrp\");\n\tmakeIdentity -apply true -r 1 -s 1 ($modName + \"_\" + $core + \"_LookAtCtrlGrp\") ;\n\t\n\t//MOVE INTO POSITION\n\tselect ($modName + \"*\" + $core + \"_??Ctrl\");\n\tselect -d ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\t$eyeControls = `ls -sl`;\n\tpickWalk -d up;\n\t$eyeControlsGrp = `ls -sl`;\n\tdelete `pointConstraint $eyeControls ($modName + \"_\" + $core + \"_LookAtCtrlGrp\")`;\n\tmakeIdentity -apply true -t 1 ($modName + \"_\" + $core + \"_LookAtCtrlGrp\");\n\t\n\t//AIM CONSTRAINT\n\t$eyeControlsGrp2 = `ls ($modName + \"*\" + $core + \"_??Grp2\")`;\n\t\n\taimConstraint -offset 0 0 0 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType \"none\"\n\t$eyeControlsGrp2 ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\t\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.rx\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.ry\");\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.rz\");\t\n\tsetAttr -lock true -keyable false -channelBox false ($modName + \"_\" + $core + \"_LookAtCtrl.v\");\t\n\t\n\tstring $each;\n\tfor ($each in $eyeControlsGrp)\n\t{\n\t\tparentConstraint -mo ($modName + \"_\" + $core + \"_LookAtCtrl\") $each;\n\t}\n\t\n\t//ADD ATTRIBUTE FOR PARENT ORIENT\n\taddAttr -ln \"localSpace\"  -at double  -min 0 -max 1 -dv 1 ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_\" + $core + \"_LookAtCtrl.localSpace\");\n\t\n\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_MAINCtrl\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp\");\n\tconnectAttr -f ($modName + \"_\" + $core + \"_LookAtCtrl.localSpace\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\n\tshadingNode -asUtility reverse -n ($modName + \"_\" + $core + \"_LookAtCtrlGrp_Rev\");\n\tconnectAttr -f ($modName + \"_\" + $core + \"_LookAtCtrl.localSpace\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp_Rev.inputX\");\n\tconnectAttr -f ($modName + \"_\" + $core + \"_LookAtCtrlGrp_Rev.outputX\") ($modName + \"_\" + $core + \"_LookAtCtrlGrp_parentConstraint1.\" + $modName + \"_MAINCtrlW1\");\n\n\t\n\taddAttr -ln \"modCoreName\"  -dt \"string\" ($modName + \"_\" + $core + \"_LookAtCtrl\");\n\tsetAttr -e-keyable true ($modName + \"_\" + $core + \"_LookAtCtrl.modCoreName\");\n\tsetAttr -type \"string\" ($modName + \"_\" + $core + \"_LookAtCtrl.modCoreName\") $modCore;\n\tsetAttr -e-lock true ($modName + \"_\" + $core + \"_LookAtCtrl.modCoreName\");\n\t\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Parent\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Parent\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Parent\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Parent\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Parent\");}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE AUXILIARY MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nglobal proc RRM_GenerateRigAuxiliary(string $moduleName, string $topNode)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\n\t//GET MOD TYPE\n\t//$modType = `getAttr ($topNode + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode + \".core\")`;\n\t$mirrorInt = 1;\n\t//float $rotOffset = 0;\n\t//float $lookAtSize;\n\tstring $modAttachNode;\n\tstring $modCore;\n\t\n\tstring $prfx = \"\";\n\tstring $oppPrfx = \"\";\n\tif (`objExists ($topNode + \".pair\")`)\n\t{\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\t\t$mirrorInt = 0;\n\t}\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t\n\twhile ($mirrorInt <= 1)\n\t{\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $prfx + $core + \"_Aux.attachNode\")`;\n\t\t\n\t\t$modCore = ($modName + \"_\" + $prfx + $core + \"_Aux\");\n\t\t$modOppCore = ($modName + \"_\" + $oppPrfx + $core + \"_Aux\");\n\t\t\n\t\n\t\t//MOD GROUP\n\t\tspaceLocator -n ($modCore + \"_OffsetLctr\");\n\t\tdelete `orientConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_OffsetLctr\")`;\n\t\tparentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"_OffsetLctr\");\n\t\t\n\t\tgroup -em -n ($modCore);\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore)`;\n\t\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpointConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTLocLctr\") ($modCore);\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_ROOTJnt\") ($modCore);\n\t\t}\n\t\tsetAttr ($modCore + \"_orientConstraint1.interpType\") 2;\n\t\t\n\t\t\n\t\tgroup -em -n ($modCore + \"Grp\");\n\t\tparent ($modCore + \"Grp\") ($modName + \"_MAINCtrl\");\n\t\tsetAttr ($modCore + \"Grp.inheritsTransform\") 0;\n\t\t\n\t\tparent ($modCore + \"_OffsetLctr\") ($modCore + \"Grp\");\n\t\tsetAttr ($modCore + \"_OffsetLctr.visibility\") 0;\n\t\t\n\t\t//ADD TOP GROUP NODE ATTRIBUTES\n\t\t//TOP NODE\n\t\taddAttr -ln \"topNode\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.topNode\");\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.topNode\") \"auxiliary\";\n\t\tsetAttr -l true ($modCore + \"Grp.topNode\");\t\n\t\t\n\t\t//CORE NAME\n\t\taddAttr -ln \"coreName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.coreName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.coreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -l true ($modCore + \"Grp.coreName\");\n\t\t\n\t\t//MODULE NAME\n\t\taddAttr -ln \"moduleName\"  -dt \"string\" ($modCore + \"Grp\");\n\t\tsetAttr -e -keyable true ($modCore + \"Grp.moduleName\") ;\n\t\tsetAttr -type \"string\" ($modCore + \"Grp.moduleName\") $moduleName;\n\t\tsetAttr -l true ($modCore + \"Grp.moduleName\");\n\t\t\n\t\t//PAIRED\n\t\tif (`objExists ($topNode + \".pair\")`)\n\t\t{\n\t\t\taddAttr -ln \"pair\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.pair\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.pair\") (\"_\" + $oppPrfx + $core);\n\t\t\tsetAttr -l true ($modCore + \"Grp.pair\");\n\t\n\t\t\taddAttr -ln \"side\"  -dt \"string\" ($modCore + \"Grp\");\n\t\t\tsetAttr -e -keyable true ($modCore + \"Grp.side\");\n\t\t\tsetAttr -type \"string\" ($modCore + \"Grp.side\") $crntSide;\n\t\t\tsetAttr -l true ($modCore + \"Grp.side\");\n\t\t}\n\n\t\t//SCALE GROUP\n\t\tgroup -em -n ($modCore + \"_ScaleGrp\");\n\t\tif ($modAttachNode != \"ROOT\")\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete `pointConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\")`;\n\t\t\tparentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modName + \"_ROOTCtrl\") ($modCore + \"_ScaleGrp\");\n\t\t\torientConstraint ($modCore + \"_OffsetLctr\") ($modName + \"_ROOTCtrl\") ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\t}\n\t\t\n\t\tparent ($modCore) ($modCore + \"_ScaleGrp\");\n\t\tparent ($modCore + \"_ScaleGrp\") ($modCore + \"Grp\");\n\t\tconnectAttr -f ($modName + \"_MAINCtrl.scale\") ($modCore + \"_ScaleGrp.scale\");\n\n\t\t//CONTROL\n\t\t//GET SCALE OF THE PROXY\n\t\t\n\t\t//LOCATOR FOR CONSTRAINTS\n\t\tspaceLocator -n ($modCore + \"CtrlGrp2Lctr\");\n\t\tparent ($modCore + \"CtrlGrp2Lctr\") ($modCore + \"Grp\");\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\")`;\n\t\t//parentConstraint -mo ($modName + \"_MAINCtrl\") ($modCore + \"CtrlGrp2Lctr\");\n\t\tdelete `scaleConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\")`;\n\t\t$auxScale = `getAttr (\"RRM_\" + $prfx + $core + \".scale\")`;\n\t\t$auxRadius = (($auxScale[0] + $auxScale[1] + $auxScale[2])/3)*.375 + 0.25;\n\n\t\tcircle -n ($modCore + \"Ctrl\")  -nr 0 1 0 -sw 360 -r $auxRadius -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\t\tcircle -n ($modCore + \"Ctrl2\") -nr 1 0 0 -sw 360 -r $auxRadius -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\t\tcircle -n ($modCore + \"Ctrl3\") -nr 0 0 1 -sw 360 -r $auxRadius -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;\n\t\tparent -r -s ($modCore + \"Ctrl2Shape\") ($modCore + \"Ctrl3Shape\") ($modCore + \"Ctrl\");\n\t\tdelete ($modCore + \"Ctrl2\") ($modCore + \"Ctrl3\");\n\t\tgroup -n ($modCore + \"CtrlGrp\") ($modCore + \"Ctrl\");\n\t\tgroup -n ($modCore + \"CtrlGrp2\") ($modCore + \"CtrlGrp\");\n\t\tparent ($modCore + \"CtrlGrp2\") ($modCore);\n\t\t\n\t\tsetAttr ($modCore + \"CtrlGrp2Lctr.v\") 0;\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"CtrlGrp2Lctr.v\");\n\t\tsetAttr -lock true -keyable false -channelBox false ($modCore + \"Ctrl.v\");\n\n\t\t\n\t\tdelete `parentConstraint ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2\")`;\n\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $core + \"_Aux\") ($modCore + \"CtrlGrp\")`;\n\t\tparentConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\") ($modCore + \"CtrlGrp2\");\n\t\torientConstraint -mo ($modName + \"_\" + $modAttachNode + \"Jnt\") ($modCore + \"CtrlGrp2Lctr\") ($modCore + \"CtrlGrp\");\n\t\t\n\t\taddAttr -ln \"followParentOrient\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"Ctrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"Ctrl.followParentOrient\");\n\t\taddAttr -ln \"followParentPosition\"  -at double  -min 0 -max 1 -dv 1 ($modCore + \"Ctrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"Ctrl.followParentPosition\");\n\t\tconnectAttr -f ($modCore + \"Ctrl.followParentOrient\") ($modCore + \"CtrlGrp_orientConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentOrient\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentOrient\") ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentOrient\") 0;\n\t\tsetAttr ($modCore + \"Ctrl.followParentOrient\") 1;\n\t\tsetAttr ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentOrient\") ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\n\t\tconnectAttr -f ($modCore + \"Ctrl.followParentPosition\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modName + \"_\" + $modAttachNode + \"JntW0\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentPosition\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentPosition\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\t\tsetAttr ($modCore + \"Ctrl.followParentPosition\") 0;\n\t\tsetAttr ($modCore + \"Ctrl.followParentPosition\") 1;\n\t\tsetAttr ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\") 0;\n\t\tsetDrivenKeyframe -currentDriver ($modCore + \"Ctrl.followParentPosition\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\n\t\tselectKey -k ($modCore + \"CtrlGrp_orientConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\") ($modCore + \"CtrlGrp2_parentConstraint1.\" + $modCore + \"CtrlGrp2LctrW1\");\n\t\tkeyTangent -itt spline -ott spline ;\n\t\t\n\n\t\t//ADD MODULE CORE NAME\n\t\taddAttr -ln \"modCoreName\"  -dt \"string\" ($modCore + \"Ctrl\");\n\t\tsetAttr -e-keyable true ($modCore + \"Ctrl.modCoreName\");\n\t\tsetAttr -type \"string\" ($modCore + \"Ctrl.modCoreName\") (\"_\" + $prfx + $core);\n\t\tsetAttr -e-lock true ($modCore + \"Ctrl.modCoreName\");\n\t\t\n\t\t//ADD MODULE TYPE\n\t\taddAttr -ln \"moduleType\"  -dt \"string\" (($modCore + \"Ctrl\"));\n\t\tsetAttr -e -keyable true ($modCore + \"Ctrl.moduleType\");\n\t\tsetAttr -type \"string\" ($modCore + \"Ctrl.moduleType\") \"auxiliary\";\n\t\tsetAttr -l true ($modCore + \"Ctrl.moduleType\");\n\t\t\t\t\n\t\t//JOINT\n\t\tjoint -n ($modCore + \"Jnt\");\n\t\tparent ($modCore + \"Jnt\") ($modCore + \"_ScaleGrp\");\n\t\tparentConstraint ($modCore + \"Ctrl\") ($modCore + \"Jnt\");\n\t\t//scaleConstraint ($modCore + \"Ctrl\")  ($modCore + \"Jnt\");\n\t\tconnectAttr ($modCore + \"Ctrl.scale\")  ($modCore + \"Jnt.scale\");\n\t\t\n\t\t//SETUP FOR RIGHT SIDE\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$mirrorInt++;\n\t\t$multiplier = -1;\n\t\t$rotOffset = 180;\n\t}\n\tif (`objExists (\"RRM_l_\" + $modName + \"_Aux\")`)\n\t\t{select (\"RRM_l_\" + $modName + \"_Aux\");}\n\tif (`objExists (\"RRM_r_\" + $modName + \"_Aux\")`)\n\t\t{select -add (\"RRM_r_\" + $modName + \"_Aux\");}\n\telse if (`objExists (\"RRM_\" + $modName + \"_Aux\")`)\n\t\t{select (\"RRM_\" + $modName + \"_Aux\");}\n}\n\t\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////TAB 2 FUNCTIONALITY///////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditLoadParent(string $parent)\n{\n\t$crnt = `ls -sl`;\n\t$crntSize = `size $crnt`;\n\tif ($crntSize == 1)\n\t{\n\t\t$each = $crnt[0];\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\tstring $modName = `getAttr ($each + \".modName\")`;\n\t\t\tstring $modType = `getAttr (\"RRM_\" + $modName + \".top\")`;\n\t\t\tif ($modType == $parent)\n\t\t\t{\n\t\t\t\ttextFieldButtonGrp -e -text $modName (\"RRM_EditLoad\" + $parent + \"TextField\");\n\t\t\t\tselect $crnt[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twarning (\"SELECTED PROXY NODE IS NOT A \\\"\" + $parent + \"\\\"\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"PLEASE SELECT A VALID PROXY NODE TO LOAD\";\n\t\t}\n\t}\n\telse if ($crntSize == 0)\n\t{\n\t\twarning \"PLEASE SELECT A PROXY NODE TO LOAD\";\n\t}\n\telse\n\t{\n\t\twarning \"PLEASE SELECT ONLY ONE NODE. MIRRORED PARENTS WILL AUTOMATICALLY BE CONNECTED PROPERLY\";\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY SPLINE MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditSpline()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\t$modName = `textFieldButtonGrp -q -text RRM_EditLoadsplineTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\t\t\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\tint $splineNum = `intSliderGrp -q -v RRM_SplineEditNum`;\n\t$mirrorMod = 0;\n\t$prfx = \"\";\n\t$oppPrfx = \"\";\n\t$i = 0;\n\t\n\t\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$mirrorMod = 1;\n\t\t$prfx = \"l_\";\n\t\t$oppPrfx = \"r_\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\t\t\n\t\tselect $connectors (\"RRM_?_\" + $modName + \"_??Grp\");\n\t}\n\telse\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\t\t\n\t\tselect $connectors (\"RRM_\" + $modName + \"_??Grp\");\n\t}\n\n\t//DELETE OLD SPLINE NODES\n\t$splineJointGrp = `ls -sl`;\n\tselect -hi $splineJointGrp;\n\t$allSplineJointGrp = `ls -sl`;\n\tlockNode -lock off $allSplineJointGrp;\n\tdelete $splineJointGrp;\n\t\n\t//REBUILD SPLINE NODES\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxySpline2($modName, $mirrorMod, $prfx, $oppPrfx, $splineNum, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY ARM MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditArm()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadarmTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $upperArmNum = `intSliderGrp -q -v upperArmModEditNum`;\n\tint $lowerArmNum = `intSliderGrp -q -v forearmModEditNum`;\n\tint $elbowNum = `intSliderGrp -q -v RRM_ElbowEditNum`;\n\tint $elbowJoints = `radioButtonGrp -q -select RRM_ElbowEditJoints`;\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t//CHANGE ATTRIBUTES\n\tlockNode -lock 0 (\"RRM_\" + $modName);\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".upperArmNum\");\n\tsetAttr (\"RRM_\" + $modName + \".upperArmNum\") $upperArmNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".upperArmNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".lowerArmNum\");\n\tsetAttr (\"RRM_\" + $modName + \".lowerArmNum\") $lowerArmNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".lowerArmNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".elbowNum\");\n\tsetAttr (\"RRM_\" + $modName + \".elbowNum\") $elbowNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".elbowNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".elbowJoints\");\n\tsetAttr (\"RRM_\" + $modName + \".elbowJoints\") $elbowJoints;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".elbowJoints\");\n\tlockNode -lock 1 (\"RRM_\" + $modName);\n\n\t$i = 1;\n\t\n\t$attachMod = `ls -sl`;\n\t$attachModCore = `getAttr ($attachMod[0] + \".core\")`;\n\t$attachModNum = `size $attachMod`;\n\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_ElbowGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_ElbowGrp\") (\"RRM_r_\" + $modName + \"_ElbowGrp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_Elbow1Grp\") (\"RRM_l_\" + $modName + \"_Elbow2Grp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_Elbow2AimLctr\") (\"RRM_l_\" + $modName + \"_AimLctr\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Elbow1Grp\") (\"RRM_r_\" + $modName + \"_Elbow2Grp\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Elbow2AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Upper*\") (\"RRM_r_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Middle*\") (\"RRM_r_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Lower*\") (\"RRM_r_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\t\t\n\t\t$mirrorMod = 2;\n\t}\n\telse\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_\" + $modName + \"_ElbowGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_ElbowGrp\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_Elbow1Grp\") (\"RRM_\" + $modName + \"_Elbow2Grp\")\n\t\t\t(\"RRM_\" + $modName + \"_Elbow2AimLctr\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\n\t}\n\n\t//DELETE OLD ARM NODES\n\t$elbowNodes = `ls -sl`;\n\tselect -hi $elbowNodes;\n\t$allElbowNodes = `ls -sl`;\n\tlockNode -lock off $allElbowNodes;\n\tdelete $allElbowNodes;\n\t\n\t//REBUILD ARM NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyArm2($modName, $upperArmNum, $lowerArmNum, $elbowNum, $elbowJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY LEG MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditLeg()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadlegTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $upperLegNum = `intSliderGrp -q -v upperLegModEditNum`;\n\tint $lowerLegNum = `intSliderGrp -q -v lowerLegModEditNum`;\n\tint $kneeNum = `intSliderGrp -q -v RRM_KneeEditNum`;\n\tint $kneeJoints = `radioButtonGrp -q -select RRM_KneeEditJoints`;\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$posOffset = 2;\n\t\n\t$i = 1;\n\t\n\t//CHANGE ATTRIBUTES\n\tlockNode -lock 0 (\"RRM_\" + $modName);\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".upperLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".upperLegNum\") $upperLegNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".upperLegNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".lowerLegNum\");\n\tsetAttr (\"RRM_\" + $modName + \".lowerLegNum\") $lowerLegNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".lowerLegNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".kneeNum\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeNum\") $kneeNum;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".kneeNum\");\n\t\n\tsetAttr -l 0 (\"RRM_\" + $modName + \".kneeJoints\");\n\tsetAttr (\"RRM_\" + $modName + \".kneeJoints\") $kneeJoints;\n\tsetAttr -l 1 (\"RRM_\" + $modName + \".kneeJoints\");\n\tlockNode -lock 1 (\"RRM_\" + $modName);\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_KneeGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_KneeGrp\") (\"RRM_r_\" + $modName + \"_KneeGrp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_l_\" + $modName + \"_Knee1Grp\") (\"RRM_l_\" + $modName + \"_Knee2Grp\")\n\t\t\t(\"RRM_l_\" + $modName + \"_Knee2AimLctr\") (\"RRM_l_\" + $modName + \"_AimLctr\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Knee1Grp\") (\"RRM_r_\" + $modName + \"_Knee2Grp\")\n\t\t\t(\"RRM_r_\" + $modName + \"_Knee2AimLctr\") (\"RRM_r_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Upper*\") (\"RRM_r_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Middle*\") (\"RRM_r_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_l_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_l_\" + $modName + \"_Lower*\") (\"RRM_r_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\n\t\t$mirrorMod = 2;\n\t}\n\telse\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tif (`objExists (\"RRM_\" + $modName + \"_KneeGrp\")`)\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_KneeGrp\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect (\"RRM_\" + $modName + \"_Knee1Grp\") (\"RRM_\" + $modName + \"_Knee2Grp\")\n\t\t\t(\"RRM_\" + $modName + \"_Knee2AimLctr\") (\"RRM_\" + $modName + \"_AimLctr\");\n\t\t}\n\t\t//ROLL JOINTS\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Upper1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Upper*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Middle1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Middle*\");\n\t\t}\n\t\tif (`objExists (\"RRM_\" + $modName + \"_Lower1\")`)\n\t\t{\n\t\t\tselect -add (\"RRM_\" + $modName + \"_Lower*\");\n\t\t}\n\t\tselect -add $connectors;\n\t}\n\t//DELETE OLD LEGrp NODES\n\t$kneeNodes = `ls -sl`;\n\tselect -hi $kneeNodes;\n\t$allKneeNodes = `ls -sl`;\n\tlockNode -lock off $allKneeNodes;\n\tdelete $kneeNodes;\n\t\t\n\t//REBUILD LEGrp NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyLeg2($modName, $upperLegNum, $lowerLegNum, $kneeNum, $kneeJoints, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $posOffset, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$posOffset = -2;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\tselect $finalSelect $each;\n\t\t\t\t$finalSelect = `ls -sl`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY FK CHAIN MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditFkChain()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadfkChainTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $chainsNum = `intSliderGrp -q -v fkChainModEditChains`;\n\tint $jointsNum = `intSliderGrp -q -v fkChainModEditJointsPerChain`;\n\tint $direction = `getAttr (\"RRM_\" + $modName + \".direction\")`;\n\tint $mirrorMod = 0;\n\n\t\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$rotOffset = 0;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t$i=0;\n\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tselect (\"RRM_l_\" + $modName + \"_Grp\") (\"RRM_r_\" + $modName + \"_Grp\")$connectors;\n\t\t$mirrorMod = 1;\n\t}\n\telse\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\t\tselect (\"RRM_\" + $modName + \"_Grp\") $connectors;\n\t}\n\n\t//DELETE OLD FK NODES\n\t$fkNodes = `ls -sl`;\n\tselect -hi $fkNodes;\n\t$allFkNodes = `ls -sl`;\n\tlockNode -lock off $allFkNodes;\n\tdelete $allFkNodes;\n\t\n\t//UNLOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock off $lockNodes;\n\n\t//REBUILD FK NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyFKChain2($modName, $chainsNum, $jointsNum, $direction, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY HEAD MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditHead()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadheadTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $mirrorMod = 1;\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\tint $i;\n\t\n\t//CHECK FOR PAIRING\n\tif (!`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\t\t$mirrorMod = 0;\n\t}\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tif (`objExists (\"RRM_\" + $prfx + $modName + \"_Jaw\")`)\n\t\t{\n\t\t\t//SET JAW ON IN PARENT NODE\n\t\t\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\") 0;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t\tlockNode -lock off (\"RRM_\" + $modName);\n\t\t\tsetAttr -l false (\"RRM_\" + $modName + \".jaw\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".jaw\") 0;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $modName);\n\t\t\n\n\t\t\tselect -hi (\"RRM_*_RRM_\" + $prfx + $modName + \"_JawCtrl\")  (\"RRM_*_RRM_\" + $prfx + $modName + \"_Jaw_AimLctr\")\n\t\t\t(\"RRM_*_RRM_\" + $prfx + $modName + \"_JawEndCtrl\")  (\"RRM_*_RRM_\" + $prfx + $modName + \"_JawEnd_AimLctr\");\n\t\t\t$connectors = `ls -sl`;\n\t\t\t\n\t\t\tselect -hi (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tselect -add $connectors;\n\t\t\t$jawHierarchy = `ls -sl`;\n\t\t\tlockNode -lock off $jawHierarchy;\n\t\t\tdelete $jawHierarchy;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//SET JAW ON IN PARENT NODE\n\t\t\tlockNode -lock off (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\n\t\t\tsetAttr -l false (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tsetAttr (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\") 1;\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Parent.jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\n\t\t\tlockNode -lock off (\"RRM_\" + $modName);\n\t\t\tsetAttr -l false (\"RRM_\" + $modName + \".jaw\");\n\t\t\tsetAttr (\"RRM_\" + $modName + \".jaw\") 1;\n\t\t\tsetAttr -l true (\"RRM_\" + $modName + \".jaw\");\n\t\t\tlockNode -lock on (\"RRM_\" + $modName);\n\n\t\t\tRRM_CreateProxyModuleProxy($crntUnit);\n\t\t\trename RRM_Base\t (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Jaw\")`;\n\t\t\tparent (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_Parent\");\n\t\t\tmakeIdentity -apply false -s 1 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tdelete `pointConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_Top\") (\"RRM_\" + $prfx + $modName + \"_Jaw\")`;\n\t\t\t$jawLoc = `getAttr  (\"RRM_\" + $prfx + $modName + \"_Jaw.ty\")`;\n\t\t\tmove -r -ls 0 0 ($jawLoc/6) (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_Jaw.core\") ($prfx + $modName + \"_Jaw\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_Jaw.core\");\n\t\t\n\t\t\tRRM_CreateProxyEndProxy($crntUnit);\n\t\t\trename RRM_End (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\trotate -r 90 0 0 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmakeIdentity -apply true -r 1 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tdelete `parentConstraint (\"RRM_\" + $prfx + $modName + \"_Parent\") (\"RRM_\" + $prfx + $modName + \"_JawEnd\")`;\n\t\t\tparent  (\"RRM_\" + $prfx + $modName + \"_JawEnd\")  (\"RRM_\" + $prfx + $modName + \"_Jaw\");\n\t\t\tmakeIdentity -apply false -s 1  (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmove -r -ls 0 (($jawLoc/3)*2) $jawLoc (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\tmakeIdentity -apply true -t 1 -r 1 -s 1 (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\n\t\t\tsetAttr -type \"string\" (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\") ($prfx + $modName + \"_JawEnd\");\n\t\t\tsetAttr -l true (\"RRM_\" + $prfx + $modName + \"_JawEnd.core\");\n        \n\t\t\tlockNode -lock on (\"RRM_\" + $prfx + $modName + \"_Jaw\") (\"RRM_\" + $prfx + $modName + \"_JawEnd\");\n\t\t\t\n\t\t\t//CONNECTORS\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Parent\"), (\"RRM_\" + $prfx + $modName + \"_Jaw\"));\n\t\t\tRRM_ProxyConnectors($modName, $prfx, (\"RRM_\" + $prfx + $modName + \"_Jaw\"), (\"RRM_\" + $prfx + $modName + \"_JawEnd\"));\n\t\t}\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t$finalSelect = `ls $finalSelect $each`;\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////MODIFY LOOK AT MODULE/////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_EditLookAt()\n{\n\tstring $crntUnit = `currentUnit -query -linear`;\n\n\t//VERIFY VALID PARENT NODE\n\tstring $modName = `textFieldButtonGrp -q -text RRM_EditLoadlookAtTextField`;\n\tif (!`objExists (\"RRM_\" + $modName + \".top\")`)\n\t{\n\t\terror \"INVALID MODULE NAME IN TEXT FIELD\";\n\t}\n\n\t//GET INFO ON SELECTION\n\t$crntSelection = `ls -sl`;\n\t$crntSize = `size $crntSelection`;\n\n\n\n\tint $jointsNum = `intSliderGrp -q -v lookAtModEditJoints`;\n\tint $mirrorMod = 0;\n\n\tstring $prfx = \"l_\";\n\tstring $oppPrfx = \"r_\";\n\t$posOffset = 2;\n\t$crntSide = \"left\";\n\t$oppSide = \"right\";\n\t$multiplier = 1;\n\t\n\t$i = 0;\n\t\n\t//CHECK FOR PAIRING\n\tif (`objExists (\"RRM_\" + $modName + \".pair\")`)\n\t{\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_l_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_l_\" + $modName + \"_Parent_AimLctr\")\n\t\t(\"RRM_*_RRM_r_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_r_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\t\t\n\t\tselect -hi (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tselect (\"RRM_l_\" + $modName + \"_Grp\") (\"RRM_r_\" + $modName + \"_Grp\") $connectors;\n\t\t//(\"RRM_l_\" + $modName + \"_ConnectorGrp\") (\"RRM_r_\" + $modName + \"_ConnectorGrp\");\t\t\n\t\t$mirrorMod = 1;\n\t}\n\telse\n\t{\n\t\t$prfx = \"\";\n\t\t$oppPrfx = \"\";\n\n\t\t//SELECT CONNECTORS\n\t\tselect -hi (\"RRM_*_RRM_\" + $modName + \"_ParentCtrl\")  (\"RRM_*_RRM_\" + $modName + \"_Parent_AimLctr\");\n\t\t$parentConnectorNodes = `ls -sl`;\n\n\t\tselect -hi (\"RRM_\" + $modName + \"_ConnectorGrp\");\n\t\tselect -d (\"RRM_\" + $modName + \"_ConnectorGrp\") $parentConnectorNodes;\n\t\t$connectors = `ls -sl -type \"transform\"`;\n\n\t\tselect (\"RRM_\" + $modName + \"_Grp\") $connectors;\n\t}\n\n\t//DELETE OLD LOOK AT NODES\n\t$fkNodes = `ls -sl`;\n\tselect -hi $fkNodes;\n\t$allFkNodes = `ls -sl`;\n\tlockNode -lock off $allFkNodes;\n\tdelete $allFkNodes;\n\t\n\t//UNLOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock off $lockNodes;\n\t\n\t//REBUILD LOOK AT NODES\t\n\twhile ($i <= $mirrorMod)\n\t{\n\t\tRRM_CreateProxyLookAt2($modName, $jointsNum, $mirrorMod, $prfx, $oppPrfx, $crntSide, $oppSide, $multiplier, $crntUnit);\n\t\t\n\t\t$i++;\n\t\t$prfx = \"r_\";\n\t\t$oppPrfx = \"l_\";\n\t\t$crntSide = \"right\";\n\t\t$oppSide = \"left\";\n\t\t$multiplier = -1;\n\t}\n\t\n\t//ADD MOD NAME ATTRIBUTE\n\tselect -hi (\"RRM_\" + $modName);\n\t$nodes = `ls -sl -type \"transform\"`;\n\tstring $each;\n\tfor ($each in $nodes)\n\t{\n\t\tif (`objExists ($each + \".modName\")`)\n\t\t{\n\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\tif ($modNameCheck == \"\")\n\t\t\t{\n\t\t\t\tlockNode -lock off $each;\n\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//LOCK NODES\n\tselect -hi (\"RRM_\" + $modName);\n\t$lockNodes = `ls -sl`;\n\tlockNode -lock on $lockNodes;\n\t\n\t//LOAD PRE-SELECTION\n\tint $i2 = 0;\n\tstring $finalSelect[];\n\tif ($crntSize > 0)\n\t{\n\t\tfor ($each in $crntSelection)\n\t\t{\n\t\t\tif (`objExists $crntSelection[$i2]`)\n\t\t\t{\n\t\t\t\t//MAKE SURE MOD NAME DOES NOT STOMP OVER EXISTING MOD NAMES\n\t\t\t\t$modNameCheck = `getAttr ($each + \".modName\")`;\n\t\t\t\tif ($modNameCheck == \"\")\n\t\t\t\t{\n\t\t\t\t\tlockNode -lock off $each;\n\t\t\t\t\tsetAttr -l false ($each + \".modName\");\n\t\t\t\t\tsetAttr -type \"string\" ($each + \".modName\") $modName;\n\t\t\t\t\tsetAttr -l true ($each + \".modName\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t$i2++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t}\n\tselect $finalSelect;\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//\tchangeLinearUnit $crntUnit;\n}\n\n//////////////////////////////////////SINGLE HIERARCHY////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE ROOT SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigRootSH()\n{\n\t//GET NAME\n\t $modName = `textField -q -text RRM_TextFieldCharName`;\n\t \n\t //CREATE LAYERS\n\t//LAYER\n\tcreateDisplayLayer -n ($modName + \"_SHJointsLayer\") -number 1 -empty;\n\tselect -cl;\t\n\tjoint -n ($modName + \"_ROOTSHJnt\");\n\tparentConstraint ($modName + \"_ROOTJnt\") ($modName + \"_ROOTSHJnt\");\n\tgroup -n ($modName + \"_SHJntGrp\") ($modName + \"_ROOTSHJnt\"); xform -os -piv 0 0 0;\n\tparent ($modName + \"_SHJntGrp\") ($modName);\n\t$JointOrient = `getAttr  ($modName + \"_ROOTJnt.jointOrient\")`;\n\tsetAttr (($modName + \"_ROOTSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\teditDisplayLayerMembers -noRecurse ($modName + \"_SHJointsLayer\") `ls ($modName + \"_SHJntGrp\")`;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////GENERATE ROOT AND MAIN SH MODULE/////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigRootMainSH()\n{\n\t//GET NAME\n\t $modName = `textField -q -text RRM_TextFieldCharName`;\n\t \n\t //CREATE LAYERS\n\t//LAYER\n\tcreateDisplayLayer -n ($modName + \"_SHJointsLayer\") -number 1 -empty;\n\n\tselect -cl;\t\n\tjoint -n ($modName + \"_MAINSHJnt\");\n\tparentConstraint ($modName + \"_MAINCtrl\") ($modName + \"_MAINSHJnt\");\n\tgroup -n ($modName + \"_SHJntGrp\") ($modName + \"_MAINSHJnt\"); xform -os -piv 0 0 0;\n\tparent ($modName + \"_SHJntGrp\") ($modName);\n\tselect -cl;\t\n\tjoint -n ($modName + \"_ROOTSHJnt\");\n\taddAttr -ln \"hips\"  -at bool ($modName + \"_ROOTSHJnt\");\n\tsetAttr -e-keyable true ($modName + \"_ROOTSHJnt.hips\");\n\n\tparentConstraint ($modName + \"_ROOTJnt\") ($modName + \"_ROOTSHJnt\");\n\tparent ($modName + \"_ROOTSHJnt\") ($modName + \"_MAINSHJnt\");\n\t$JointOrient = `getAttr  ($modName + \"_ROOTJnt.jointOrient\")`;\n\tsetAttr (($modName + \"_ROOTSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\teditDisplayLayerMembers -noRecurse ($modName + \"_SHJointsLayer\") `ls ($modName + \"_SHJntGrp\")`;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n//////////////////////////GENERATE SPLINE SH MODULE/////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigSplineSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t//GET ATTRIBUTES\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\t$modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t//GENERATE JOINTS\n\t$splineProxies = `ls (\"RRM_\" + $lPrfx + $core + \"_??\")`;\n\tint $crntNum = 0;\n\t$numPadding = \"_0\";\n\t$prevPadding = \"_0\";\n\tfloat $splineLoc[];\n\tfor ($crntProxy in $splineProxies)\n\t{\n\t\t$crntNum++;\n\t\tif ($crntNum >= 10)\n\t\t{$numPadding = \"_\";}\n\t\t\t\n\t\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\t\tparentConstraint ($mod_lCore + $numPadding + $crntNum + \"Jnt\") ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\n\t\tif ($crntNum == 1)\n\t\t{\n\t\t\tparent ($mod_lCore + $numPadding + $crntNum + \"SHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\taddAttr -ln \"splineStart\"  -at bool ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + $numPadding + $crntNum + \"SHJnt.splineStart\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint $previousNum = ($crntNum - 1);\n\t\t\tparent ($mod_lCore + $numPadding + $crntNum + \"SHJnt\")  ($mod_lCore + $prevPadding + $previousNum + \"SHJnt\");\n\t\t}\n\t\t$JointOrient = `getAttr  ($mod_lCore + $numPadding + $crntNum + \"Jnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + $numPadding + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_TopSHJnt\");\n\taddAttr -ln \"splineEnd\"  -at bool ($mod_lCore + \"_TopSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_TopSHJnt.splineEnd\");\n\n\tparentConstraint ($mod_lCore + \"_TopJnt\") ($mod_lCore + \"_TopSHJnt\");\n\tparent ($mod_lCore + \"_TopSHJnt\") ($mod_lCore + $numPadding + $crntNum + \"SHJnt\");\n\t$JointOrient = `getAttr  ($mod_lCore + \"_TopJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\tif (`objExists (\"RRM_\" + $lPrfx + $core + \"_Hip\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_HipSHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_HipJnt\") ($mod_lCore + \"_HipSHJnt\");\n\t\tparent ($mod_lCore + \"_HipSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_HipJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n\t\n\t//RIGHT SIDE/////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////\n\t\n\t\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\n\t\t//GENERATE JOINTS\n\t\t$splineProxies = `ls (\"RRM_\" + $rPrfx + $core + \"_??\")`;\n\t\tint $crntNum = 0;\n\t\t$numPadding = \"_0\";\n\t\tfloat $splineLoc[];\n\t\tfor ($crntProxy in $splineProxies)\n\t\t{\n\t\t\t$crntNum++;\n\t\t\tif ($crntNum >= 10)\n\t\t\t{$numPadding = \"_\";}\n\t\t\t\t\n\t\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_rCore + $numPadding + $crntNum + \"Jnt\") ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\n\t\t\tif ($crntNum == 1)\n\t\t\t{\n\t\t\t\tparent ($mod_rCore + $numPadding + $crntNum + \"SHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\t\taddAttr -ln \"splineStart\"  -at bool ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + $numPadding + $crntNum + \"SHJnt.splineStart\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint $previousNum = ($crntNum - 1);\n\t\t\t\tparent ($mod_rCore + $numPadding + $crntNum + \"SHJnt\")  ($mod_rCore + $prevPadding + $previousNum + \"SHJnt\");\n\t\t\t}\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + $numPadding + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + $numPadding + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_TopSHJnt\");\n\t\taddAttr -ln \"splineEnd\"  -at bool ($mod_rCore + \"_TopSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_TopSHJnt.splineEnd\");\n\t\n\t\tparentConstraint ($mod_rCore + \"_TopJnt\") ($mod_rCore + \"_TopSHJnt\");\n\t\tparent ($mod_rCore + \"_TopSHJnt\") ($mod_rCore + $numPadding + $crntNum + \"SHJnt\");\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_TopJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\tif (`objExists (\"RRM_\" + $lPrfx + $core + \"_Hip\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_HipSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_HipJnt\") ($mod_rCore + \"_HipSHJnt\");\n\t\t\tparent ($mod_rCore + \"_HipSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_HipJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t}\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE ARM SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigArmSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t//GENERATE JOINTS\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_ClavicleSHJnt\");\n\taddAttr -ln \"shoulder\"  -at bool ($mod_lCore + \"_ClavicleSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_ClavicleSHJnt.shoulder\");\n\n\tparentConstraint ($mod_lCore + \"_ClavicleJnt\") ($mod_lCore + \"_ClavicleSHJnt\");\n\tparent  ($mod_lCore + \"_ClavicleSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t$JointOrient = `getAttr  ($mod_lCore + \"_ClavicleJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_ClavicleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\t$parentJnt = ($mod_lCore + \"_ClavicleSHJnt\");\n\t\n\tif (!`objExists ($mod_rCore + \"_Shoulder_CurveJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_ShoulderSHJnt\");\n\t\taddAttr -ln \"arm\"  -at bool ($mod_lCore + \"_ShoulderSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_ShoulderSHJnt.arm\");\n\t\n\t\tparentConstraint ($mod_lCore + \"_ShoulderJnt\") ($mod_lCore + \"_ShoulderSHJnt\");\n\t\tparent ($mod_lCore + \"_ShoulderSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_ShoulderJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_ShoulderSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_ShoulderSHJnt\");\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t\taddAttr -ln \"arm\"  -at bool ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_Shoulder_CurveSHJnt.arm\");\n\n\t\tparentConstraint ($mod_lCore + \"_Shoulder_CurveJnt\") ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t\tparent ($mod_lCore + \"_Shoulder_CurveSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Shoulder_CurveJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_Shoulder_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_Shoulder_CurveSHJnt\");\n\t}\t\t\n\t\n\t//CHECK FOR TOON ARMS\n\tif (`objExists ($mod_lCore + \"_Upper_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Upper_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\tif (`objExists ($mod_lCore + \"_ElbowJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Elbow_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_ElbowSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_ElbowSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_ElbowSHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_ElbowJnt\")  ($mod_lCore + \"_ElbowSHJnt\");\n\t\t\tparent ($mod_lCore + \"_ElbowSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_ElbowJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_ElbowSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_ElbowSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow_CurveSHJnt.forearm\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Elbow_CurveJnt\") ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Elbow_CurveSHJnt\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Elbow1_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow1SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Elbow1Jnt\")  ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow1SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow1Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Elbow1SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow1_CurveSHJnt.forearm\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Elbow1_CurveJnt\") ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow1_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow1_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Elbow1_CurveSHJnt\");\n\t\t}\n\t\t\n\t\tif (`objExists ($mod_lCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$middleCurveJnt = `ls ($mod_lCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Elbow2_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow2SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Elbow2Jnt\")  ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow2SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow2Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Elbow2SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Elbow2_CurveSHJnt.forearm\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Elbow2_CurveJnt\") ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Elbow2_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Elbow2_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Elbow2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Elbow2_CurveSHJnt\");\n\t\t}\n\t}\n\n\tif (`objExists ($mod_lCore + \"_Lower_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Lower_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_WristSHJnt\");\n\taddAttr -ln \"hand\"  -at bool ($mod_lCore + \"_WristSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_WristSHJnt.hand\");\n\n\tparentConstraint ($mod_lCore + \"_WristJnt\") ($mod_lCore + \"_WristSHJnt\");\n\tparent  ($mod_lCore + \"_WristSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_WristJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_WristSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\t//RIGHT SIDE//////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$rPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\t//GENERATE JOINTS\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_ClavicleSHJnt\");\n\t\taddAttr -ln \"shoulder\"  -at bool ($mod_rCore + \"_ClavicleSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_ClavicleSHJnt.shoulder\");\n\t\n\t\tparentConstraint ($mod_rCore + \"_ClavicleJnt\") ($mod_rCore + \"_ClavicleSHJnt\");\n\t\tparent  ($mod_rCore + \"_ClavicleSHJnt\") ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ClavicleJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_ClavicleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\t$parentJnt = ($mod_rCore + \"_ClavicleSHJnt\");\n\t\t\n\t\tif (!`objExists ($mod_rCore + \"_Shoulder_CurveJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t\taddAttr -ln \"arm\"  -at bool ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_ShoulderSHJnt.arm\");\n\t\n\t\t\tparentConstraint ($mod_rCore + \"_ShoulderJnt\") ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t\tparent ($mod_rCore + \"_ShoulderSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ShoulderJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_ShoulderSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_ShoulderSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_Shoulder_CurveSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_Shoulder_CurveJnt\") ($mod_rCore + \"_Shoulder_CurveSHJnt\");\n\t\t\tparent ($mod_rCore + \"_Shoulder_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Shoulder_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_Shoulder_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_Shoulder_CurveSHJnt\");\n\t\t}\t\t\n\t\t\n\t\t//CHECK FOR TOON ARMS\n\t\tif (`objExists ($mod_rCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\tif (`objExists ($mod_rCore + \"_ElbowJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Elbow_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_ElbowSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_ElbowJnt\")  ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_ElbowSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ElbowJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_ElbowSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_ElbowSHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow_CurveSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Elbow_CurveJnt\") ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Elbow_CurveSHJnt\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Elbow1_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow1SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Elbow1Jnt\")  ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow1SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow1Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Elbow1SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow1_CurveSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Elbow1_CurveJnt\") ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow1_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow1_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Elbow1_CurveSHJnt\");\n\t\t\t}\n\t\t\t\t\n\t\t\tif (`objExists ($mod_rCore + \"_Middle_Curve1Jnt\")`)\n\t\t\t{\n\t\t\t\t$middleCurveJnt = `ls ($mod_rCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\t\tint $crntNum = 1;\n\t\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t\t{\n\t\t\t\t\tselect -cl;\n\t\t\t\t\tjoint -n ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparentConstraint ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparent ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\t\tsetAttr (($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\t\n\t\t\t\t\t//$parentJnt = ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\t$crntNum++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Elbow2_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow2SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Elbow2Jnt\")  ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow2SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow2Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Elbow2SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Elbow2_CurveSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Elbow2_CurveJnt\") ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Elbow2_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Elbow2_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Elbow2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Elbow2_CurveSHJnt\");\n\t\t\t}\n\t\t}\n    \t\n\t\tif (`objExists ($mod_rCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tstring $crntUpper;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_WristSHJnt\");\n\t\taddAttr -ln \"hand\"  -at bool ($mod_rCore + \"_WristSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_WristSHJnt.hand\");\n\n\t\tparentConstraint ($mod_rCore + \"_WristJnt\") ($mod_rCore + \"_WristSHJnt\");\n\t\tparent  ($mod_rCore + \"_WristSHJnt\") $parentJnt;\t\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_WristJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_WristSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////GENERATE LEG SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigLegSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t//GENERATE JOINTS\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\tif (!`objExists ($mod_rCore + \"_HipCurveJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_HipSHJnt\");\n\t\taddAttr -ln \"upLeg\"  -at bool ($mod_lCore + \"_HipSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_HipSHJnt.upLeg\");\n\t\n\t\tparentConstraint ($mod_lCore + \"_HipJnt\") ($mod_lCore + \"_HipSHJnt\");\n\t\tparent ($mod_lCore + \"_HipSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_HipJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_HipSHJnt\");\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_HipCurveSHJnt\");\n\t\taddAttr -ln \"upLeg\"  -at bool ($mod_lCore + \"_HipCurveSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_lCore + \"_HipCurveSHJnt.upLeg\");\n\t\n\t\tparentConstraint ($mod_lCore + \"_HipCurveJnt\") ($mod_lCore + \"_HipCurveSHJnt\");\n\t\tparent ($mod_lCore + \"_HipCurveSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_lCore + \"_HipCurveJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_HipCurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_lCore + \"_HipCurveSHJnt\");\n\t}\t\t\n\t\n\t//CHECK FOR TOON LEGS\n\tif (`objExists ($mod_lCore + \"_Upper_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Upper_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tstring $crntUpper;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\tif (`objExists ($mod_lCore + \"_KneeJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Knee_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_KneeSHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_KneeSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_KneeSHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_KneeJnt\")  ($mod_lCore + \"_KneeSHJnt\");\n\t\t\tparent ($mod_lCore + \"_KneeSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_KneeJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_KneeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_KneeSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t\taddAttr -ln \"leg\"  -at bool ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee_CurveSHJnt.leg\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Knee_CurveJnt\") ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Knee_CurveSHJnt\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Knee1_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Knee1SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Knee1SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee1SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Knee1Jnt\")  ($mod_lCore + \"_Knee1SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee1SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee1Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Knee1SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t\taddAttr -ln \"leg\"  -at bool ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee1_CurveSHJnt.leg\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Knee1_CurveJnt\") ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee1_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee1_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Knee1_CurveSHJnt\");\n\t\t}\n\t\t\n\t\tif (`objExists ($mod_lCore + \"_Middle_Curve1Jnt\")`)\n\t\t{\n\t\t\t$middleCurveJnt = `ls ($mod_lCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\tstring $crntMiddleCurve;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_lCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tif (!`objExists ($mod_lCore + \"_Knee2_CurveJnt\")`)\n\t\t{\n\t\t\tjoint -n  ($mod_lCore + \"_Knee2SHJnt\");\n\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_lCore + \"_Knee2SHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee2SHJnt.forearm\");\n\t\n\t\t\tparentConstraint  ($mod_lCore + \"_Knee2Jnt\")  ($mod_lCore + \"_Knee2SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee2SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee2Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt =  ($mod_lCore + \"_Knee2SHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoint -n ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t\taddAttr -ln \"leg\"  -at bool ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_lCore + \"_Knee2_CurveSHJnt.leg\");\n\t\n\t\t\tparentConstraint ($mod_lCore + \"_Knee2_CurveJnt\") ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t\tparent ($mod_lCore + \"_Knee2_CurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_lCore + \"_Knee2_CurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Knee2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_lCore + \"_Knee2_CurveSHJnt\");\n\t\t}\n\t}\n\n\tif (`objExists ($mod_lCore + \"_Lower_Curve1Jnt\")`)\n\t{\n\t\t$upperJnt = `ls ($mod_lCore + \"_Lower_Curve?Jnt\")`;\n\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\tstring $crntUpper;\n\t\tint $crntNum = 1;\n\t\tfor ($crntUpper in $upperJnt)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t//$parentJnt = ($mod_lCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t$crntNum++;\n\t\t}\n\t}\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_AnkleSHJnt\");\n\taddAttr -ln \"foot\"  -at bool ($mod_lCore + \"_AnkleSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_AnkleSHJnt.foot\");\n\n\tparentConstraint ($mod_lCore + \"_AnkleJnt\") ($mod_lCore + \"_AnkleSHJnt\");\n\tparent  ($mod_lCore + \"_AnkleSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_AnkleJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_AnkleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t$parentJnt = ($mod_lCore + \"_AnkleSHJnt\");\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_BallSHJnt\");\n\taddAttr -ln \"toeBase\"  -at bool ($mod_lCore + \"_BallSHJnt\");\n\tsetAttr -e-keyable true ($mod_lCore + \"_BallSHJnt.toeBase\");\n\n\tparentConstraint ($mod_lCore + \"_BallJnt\") ($mod_lCore + \"_BallSHJnt\");\n\tparent ($mod_lCore + \"_BallSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_BallJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_BallSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t$parentJnt = ($mod_lCore + \"_BallSHJnt\");\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_ToeSHJnt\");\n\tparentConstraint ($mod_lCore + \"_ToeJnt\") ($mod_lCore + \"_ToeSHJnt\");\n\tparent  ($mod_lCore + \"_ToeSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr  ($mod_lCore + \"_ToeJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_ToeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\n\t//RIGHT SIDE//////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////\n\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$rPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\t//GENERATE JOINTS\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\tif (!`objExists ($mod_rCore + \"_HipCurveJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_HipSHJnt\");\n\t\t\taddAttr -ln \"upLeg\"  -at bool ($mod_rCore + \"_HipSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_HipSHJnt.upLeg\");\n\n\t\t\tparentConstraint ($mod_rCore + \"_HipJnt\") ($mod_rCore + \"_HipSHJnt\");\n\t\t\tparent ($mod_rCore + \"_HipSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_HipJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_HipSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_HipSHJnt\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t\taddAttr -ln \"upLeg\"  -at bool ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_HipCurveSHJnt.upLeg\");\n\n\t\t\tparentConstraint ($mod_rCore + \"_HipCurveJnt\") ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t\tparent ($mod_rCore + \"_HipCurveSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_HipCurveJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_HipCurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t$parentJnt = ($mod_rCore + \"_HipCurveSHJnt\");\n\t\t}\t\t\n\t\t\n\t\t//CHECK FOR TOON LEGS\n\t\tif (`objExists ($mod_rCore + \"_Upper_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Upper_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tstring $crntUpper;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Upper_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\tif (`objExists ($mod_rCore + \"_KneeJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Knee_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_KneeSHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_KneeJnt\")  ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_KneeSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_KneeJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_KneeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_KneeSHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"leg\"  -at bool ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee_CurveSHJnt.leg\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Knee_CurveJnt\") ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Knee_CurveSHJnt\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Knee1_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee1SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Knee1Jnt\")  ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee1SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee1Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee1SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Knee1SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"leg\"  -at bool ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee1_CurveSHJnt.leg\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Knee1_CurveJnt\") ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee1_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee1_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee1_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Knee1_CurveSHJnt\");\n\t\t\t}\n\t\t\t\n\t\t\tif (`objExists ($mod_rCore + \"_Middle_Curve1Jnt\")`)\n\t\t\t{\n\t\t\t\t$middleCurveJnt = `ls ($mod_rCore + \"_Middle_Curve?Jnt\")`;\n\t\t\t\t$sizeMiddleCurveJnt = `size $middleCurveJnt`;\n\t\t\t\tstring $crntMiddleCurve;\n\t\t\t\tint $crntNum = 1;\n\t\t\t\tfor ($crntMiddleCurve in $middleCurveJnt)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tselect -cl;\n\t\t\t\t\tjoint -n ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparentConstraint ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\tparent ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\t\tsetAttr (($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\t\n\t\t\t\t\t//$parentJnt = ($mod_rCore + \"_Middle_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t\t$crntNum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tselect -cl;\n\t\t\tif (!`objExists ($mod_rCore + \"_Knee2_CurveJnt\")`)\n\t\t\t{\n\t\t\t\tjoint -n  ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t\taddAttr -ln \"forearm\"  -at bool ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee2SHJnt.forearm\");\n\t\t\n\t\t\t\tparentConstraint  ($mod_rCore + \"_Knee2Jnt\")  ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee2SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee2Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee2SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt =  ($mod_rCore + \"_Knee2SHJnt\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjoint -n ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t\taddAttr -ln \"leg\"  -at bool ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t\tsetAttr -e-keyable true ($mod_rCore + \"_Knee2_CurveSHJnt.leg\");\n\t\t\n\t\t\t\tparentConstraint ($mod_rCore + \"_Knee2_CurveJnt\") ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Knee2_CurveSHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Knee2_CurveJnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Knee2_CurveSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t$parentJnt = ($mod_rCore + \"_Knee2_CurveSHJnt\");\n\t\t\t}\n\t\t}\n    \t\n\t\tif (`objExists ($mod_rCore + \"_Lower_Curve1Jnt\")`)\n\t\t{\n\t\t\t$upperJnt = `ls ($mod_rCore + \"_Lower_Curve?Jnt\")`;\n\t\t\t$sizeUpperJnt = `size $upperJnt`;\n\t\t\tstring $crntUpper;\n\t\t\tint $crntNum = 1;\n\t\t\tfor ($crntUpper in $upperJnt)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt\") ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr  ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t//$parentJnt = ($mod_rCore + \"_Lower_Curve\" + $crntNum + \"SHJnt\");\n\t\t\t\t$crntNum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_AnkleSHJnt\");\n\t\taddAttr -ln \"foot\"  -at bool ($mod_rCore + \"_AnkleSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_AnkleSHJnt.foot\");\n\n\t\tparentConstraint ($mod_rCore + \"_AnkleJnt\") ($mod_rCore + \"_AnkleSHJnt\");\n\t\tparent  ($mod_rCore + \"_AnkleSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_AnkleJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_AnkleSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_rCore + \"_AnkleSHJnt\");\n\t\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_BallSHJnt\");\n\t\taddAttr -ln \"toeBase\"  -at bool ($mod_rCore + \"_BallSHJnt\");\n\t\tsetAttr -e-keyable true ($mod_rCore + \"_BallSHJnt.toeBase\");\n\n\t\tparentConstraint ($mod_rCore + \"_BallJnt\") ($mod_rCore + \"_BallSHJnt\");\n\t\tparent  ($mod_rCore + \"_BallSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_BallJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_BallSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t$parentJnt = ($mod_rCore + \"_BallSHJnt\");\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_ToeSHJnt\");\n\t\tparentConstraint ($mod_rCore + \"_ToeJnt\") ($mod_rCore + \"_ToeSHJnt\");\n\t\tparent  ($mod_rCore + \"_ToeSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr  ($mod_rCore + \"_ToeJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_ToeSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////////////////////////GENERATE FK CHAIN SH MODULE////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigFkChainSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\t$allJoints = `ls (\"RRM_\" + $lPrfx + $core + \"_??_??\")`;\n\t$sizeAllJoints = `size $allJoints`;\n\t$fKChain = `ls (\"RRM_\" + $lPrfx + $core + \"_??_01\")`;\n\t$fKChainSize = `size $fKChain`;\n\tstring $crntFKChain;\n\t$crntCh = 1;\n\t$crntJnt = 1;\n\t\t\n\tfor ($crntFKChain in $fKChain)                                    \n\t{\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\tstring $nPdCh = \"\";\n\t\tif ($crntCh < 10)\n\t\t{\n\t\t\t$nPdCh = \"0\";\n\t\t}\n\t\t\n\t\t$fKJoints = `ls (\"RRM_\" + $lPrfx + $core + \"_\" + $nPdCh + $crntCh + \"_\" + \"??\")`;\n\t\tstring $crntFKJoint;\n\t\t$crntJnt = 1;\n\t\tfor ($crntFKJoint in $fKJoints)\n\t\t{\n\t\t\tstring $nPd = \"\";\n\t\t\tif ($crntJnt < 10)\n\t\t\t{\n\t\t\t\t$nPd = \"0\";\n\t\t\t}\n\t\t\t$nextJnt = ($crntJnt + 1);\n\t\t\t$nPdNext = \"\";\n\t\t\tif ($nextJnt <10)\n\t\t\t{\n\t\t\t\t$nPdNext = \"0\";\n\t\t\t}\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\tparentConstraint ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\tparent ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t$parentJnt = ($mod_lCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\n\t\t\t$crntJnt++;\n\t\t}\n\t\t$crntCh++;\n\t}\n\t\n\t//RIGHT SIDE////////////////////////////////////////////////////////\n\t///////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////////////////////////\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n\t\t\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\t$allJoints = `ls (\"RRM_\" + $lPrfx + $core + \"_??_??\")`;\n\t\t$sizeAllJoints = `size $allJoints`;\n\t\t$fKChain = `ls (\"RRM_\" + $lPrfx + $core + \"_??_01\")`;\n\t\t$fKChainSize = `size $fKChain`;\n\t\t$crntCh = 1;\n\t\t$crntJnt = 1;\n\t\t\t\n\t\tfor ($crntFKChain in $fKChain)                                    \n\t\t{\n\t\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\tstring $nPdCh = \"\";\n\t\t\tif ($crntCh < 10)\n\t\t\t{\n\t\t\t\t$nPdCh = \"0\";\n\t\t\t}\n\t\t\t\n\t\t\tselect ;\n\t\t\t$fKProxies = `ls (\"RRM_\" + $lPrfx + $core + \"_\" + $nPdCh + $crntCh + \"_\" + \"??\")`;\n\t\t\t$crntJnt = 1;\n\t\t\tfor ($crntFKJoint in $fKProxies)\n\t\t\t{\n\t\t\t\tstring $nPd = \"\";\n\t\t\t\tif ($crntJnt < 10)\n\t\t\t\t{\n\t\t\t\t\t$nPd = \"0\";\n\t\t\t\t}\n\t\t\t\t$nextJnt = ($crntJnt + 1);\n\t\t\t\t$nPdNext = \"\";\n\t\t\t\tif ($nextJnt <10)\n\t\t\t\t{\n\t\t\t\t\t$nPdNext = \"0\";\n\t\t\t\t}\n\t\t\t\tselect -cl;\n\t\t\t\tjoint -n ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\tparentConstraint ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt\") ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\tparent ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\") $parentJnt;\n\t\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"Jnt.jointOrient\")`;\n\t\t\t\tsetAttr (($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\t\n\t\t\t\t$parentJnt = ($mod_rCore + \"_\" + $nPdCh + $crntCh + \"_\" + $nPd + $crntJnt + \"SHJnt\");\n\t\t\t\t\n\t\t\t\t$crntJnt++;\n\t\t\t}\n\t\t\t$crntCh++;\n\t\t}\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////////////////////////GENERATE HEAD SH MODULE////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigHeadSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\n\tif (`objExists ($mod_lCore + \"_JawJnt\")`)\n\t{\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_JawSHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_JawJnt\") ($mod_lCore + \"_JawSHJnt\");\n\t\tparent ($mod_lCore + \"_JawSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_lCore + \"_JawJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_JawSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_JawEndSHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_JawEndJnt\") ($mod_lCore + \"_JawEndSHJnt\");\n\t\tparent ($mod_lCore + \"_JawEndSHJnt\") ($mod_lCore + \"_JawSHJnt\");\n\t\t$JointOrient = `getAttr ($mod_lCore + \"_JawEndJnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_JawEndSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"_TopSHJnt\");\n\tparentConstraint ($mod_lCore + \"_TopJnt\") ($mod_lCore + \"_TopSHJnt\");\n\tparent ($mod_lCore + \"_TopSHJnt\") $parentJnt;\n\t$JointOrient = `getAttr ($mod_lCore + \"_TopJnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\n\t//RIGHT SIDE\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n    \t\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\tif (`objExists ($mod_rCore + \"_JawJnt\")`)\n\t\t{\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_JawSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_JawJnt\") ($mod_rCore + \"_JawSHJnt\");\n\t\t\tparent ($mod_rCore + \"_JawSHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_JawJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_JawSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_JawEndSHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_JawEndJnt\") ($mod_rCore + \"_JawEndSHJnt\");\n\t\t\tparent ($mod_rCore + \"_JawEndSHJnt\") ($mod_rCore + \"_JawSHJnt\");\n\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_JawEndJnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_JawEndSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t}\n    \t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"_TopSHJnt\");\n\t\tparentConstraint ($mod_rCore + \"_TopJnt\") ($mod_rCore + \"_TopSHJnt\");\n\t\tparent ($mod_rCore + \"_TopSHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_rCore + \"_TopJnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"_TopSHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\n\t}\n}\n\t\t\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE LOOK AT SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigLookAtSH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\t//EYE JOINTS\n\t$lookAts = `ls (\"RRM_\" + $lPrfx + $core + \"_??\")`;\n\t$lookAtNum = `size $lookAts`;\n\tstring $crntLookAt;\n\t$crntNum = 1;\n\tfor ($crntLookAt in $lookAts)\n\t{\n\t\tstring $nPd = \"\";\n\t\tif ($crntNum < 10)\n\t\t{\n\t\t\t$nPd = \"0\";\n\t\t}\n\t\tselect -cl;\n\t\tjoint -n ($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\tparentConstraint ($mod_lCore + \"_\" + $nPd + $crntNum + \"Jnt\") ($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\tparent ($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_lCore + \"_\" + $nPd + $crntNum + \"Jnt.jointOrient\")`;\n\t\tsetAttr (($mod_lCore + \"_\" + $nPd + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\n\t\t$crntNum++;\n\t}\n\t\n\t//RIGHT SIDE\t\t\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$rPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Parent.attachNode\")`;\n    \t\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core);\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core);\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\t\n\t\t//EYE JOINTS\n\t\t$lookAts = `ls (\"RRM_\" + $lPrfx + $core + \"_??\")`;\n\t\t$lookAtNum = `size $lookAts`;\n\t\tstring $crntLookAt;\n\t\t$crntNum = 1;\n\t\tfor ($crntLookAt in $lookAts)\n\t\t{\n\t\t\tstring $nPd = \"\";\n\t\t\tif ($crntNum < 10)\n\t\t\t{\n\t\t\t\t$nPd = \"0\";\n\t\t\t}\n\t\t\tselect -cl;\n\t\t\tjoint -n ($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\t\tparentConstraint ($mod_rCore + \"_\" + $nPd + $crntNum + \"Jnt\") ($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt\");\n\t\t\tparent ($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt\") $parentJnt;\n\t\t\t$JointOrient = `getAttr ($mod_rCore + \"_\" + $nPd + $crntNum + \"Jnt.jointOrient\")`;\n\t\t\tsetAttr (($mod_rCore + \"_\" + $nPd + $crntNum + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t\t\t\n\t\t\t$crntNum++;\n\t\t}\n\t}\n}\n\n\t\t\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////GENERATE AUX AT SH MODULE//////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRigAuxiliarySH()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t$topNode = `ls -sl`;\n\t\n\t//GET MOD TYPE\n\tstring $modType = `getAttr ($topNode[0] + \".parent\")`;     \n\t\t\n\t$core = `getAttr ($topNode[0] + \".core\")`;\n\tstring $lPrfx = \"\";\n\tstring $rPrfx = \"\";\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t}\n\t\n\t//GET ATTACH NODE\n\t//string $modAttachNode;\n\t\n\t//if (`objExists (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`)\n\t//{\n\t//\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Parent.attachNode\")`;\n\t//}\n\t//else if (`objExists (\"RRM_\" + $lPrfx + $core + \"_Aux.attachNode\")`)\n\t//{\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $lPrfx + $core + \"_Aux.attachNode\")`;\n\t//}\n\n\t\n\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core + \"_Aux\");\n\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core + \"_Aux\");\n\t\n\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n\t\n\tselect -cl;\n\tjoint -n ($mod_lCore + \"SHJnt\");\n\tparentConstraint ($mod_lCore + \"Jnt\") ($mod_lCore + \"SHJnt\");\n\tparent ($mod_lCore + \"SHJnt\") $parentJnt;\n\t$JointOrient = `getAttr ($mod_lCore + \"Jnt.jointOrient\")`;\n\tsetAttr (($mod_lCore + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\n\t//RIGHT SIDE\n\tif (`objExists ($topNode[0] + \".pair\")`)\n\t{\n\t\t$lPrfx = \"l_\";\n\t\t$rPrfx = \"r_\";\n\t\t\n\t\t//GET ATTACH NODE\n\t\t$modAttachNode = `getAttr (\"RRM_\" + $rPrfx + $core + \"_Aux.attachNode\")`;\n    \t\n\t\t$mod_lCore = ($modName + \"_\" + $lPrfx + $core + \"_Aux\");\n\t\t$mod_rCore = ($modName + \"_\" + $rPrfx + $core + \"_Aux\");\n\t\t\n\t\t$parentJnt = ($modName + \"_\" + $modAttachNode + \"SHJnt\");\n    \t\n\t\tselect -cl;\n\t\tjoint -n ($mod_rCore + \"SHJnt\");\n\t\tparentConstraint ($mod_rCore + \"Jnt\") ($mod_rCore + \"SHJnt\");\n\t\tparent ($mod_rCore + \"SHJnt\") $parentJnt;\n\t\t$JointOrient = `getAttr ($mod_rCore + \"Jnt.jointOrient\")`;\n\t\tsetAttr (($mod_rCore + \"SHJnt.jointOrient\"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);\n\t}\n}\n\n\nglobal proc RRM_MirrorAttributes(string $moduleName)\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\n\tif (`objExists ($modName + \"_l_\" + $moduleName + \"*Ctrl\")`)\n\t{\n\t\tselect ;\n\t\t$lControls = `ls -type \"transform\" ($modName + \"_l_\" + $moduleName + \"*Ctrl\")`;\n\t\t\n\t\tfor ($lCurrentControl in $lControls)\n\t\t{\n\t\t\tif (!`objExists ($lCurrentControl + \".rightControl\")`)\n\t\t\t{\n\t\t\t\taddAttr -ln \"rightControl\"  -dt \"string\" $lCurrentControl;\n\t\t\t\tsetAttr -e-keyable true ($lCurrentControl + \".rightControl\");\n\t\t\t\t$name = substituteAllString ($lCurrentControl, ($modName + \"_l_\"), (\"_r_\"));\n\t\t\t\tsetAttr -type \"string\" ($lCurrentControl + \".rightControl\") $name;\n\t\t\t\tsetAttr -l true ($lCurrentControl + \".rightControl\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (`objExists ($modName + \"_r_\" + $moduleName + \"*Ctrl\")`)  \n\t\t{\n\t\t\t$rControls = `ls -type \"transform\" ($modName + \"_r_\" + $moduleName + \"*Ctrl\")`;\n\t\t\t\n\t\t\tfor ($rCurrentControl in $rControls)\n\t\t\t{\n\t\t\t\tif (!`objExists ($rCurrentControl + \".leftControl\")`)\n\t\t\t\t{\n\t\t\t\t\taddAttr -ln \"leftControl\"  -dt \"string\" $rCurrentControl;\n\t\t\t\t\tsetAttr -e-keyable true ($rCurrentControl + \".leftControl\");\n\t\t\t\t\t$name = substituteAllString ($rCurrentControl, ($modName + \"_r_\"), (\"_l_\"));\n\t\t\t\t\tsetAttr -type \"string\" ($rCurrentControl + \".leftControl\") $name;\n\t\t\t\t\tsetAttr -l true ($rCurrentControl + \".leftControl\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nglobal proc RRM_AddRigName(string $modControls[], string $modName)\n{\n\tfor ($crntControl in $modControls)\n\t{\n\t\taddAttr -ln \"modRigName\"  -dt \"string\" $crntControl;\n\t\tsetAttr -e-keyable true ($crntControl + \".modRigName\");\n\t\tsetAttr -type \"string\" ($crntControl + \".modRigName\") $modName;\n\t\tsetAttr -l true ($crntControl + \".modRigName\");\n\t}\n\t\n\taddAttr -ln \"modRigConnection\"  -dt \"string\" $modName;\n\tsetAttr -e-keyable true ($modName + \".modRigConnection\");\n\tsetAttr -type \"string\" ($modName + \".modRigConnection\") $modName;\n\tsetAttr -l true ($modName + \".modRigConnection\");\n\t\n\tfor ($crntControl in $modControls)\n\t{\n\t\taddAttr -ln \"modRigConnection\"  -dt \"string\" $crntControl;\n\t\tsetAttr -e-keyable true ($crntControl + \".modRigConnection\");\n\t\tconnectAttr -f ($modName + \".modRigConnection\") ($crntControl + \".modRigConnection\");\n\t\tsetAttr -l true ($crntControl + \".modRigConnection\");\n\t}\n}\n\nglobal proc RRM_AddControlsSize(string $modControls[])\n{\n\tfor ($each in $modControls)\n\t{\n\t\tif (!`objExists ($each + \".nonControl\")`)\n\t\t{\n\t\t\taddAttr -ln \"controlSizeX\"  -at double  -dv 1 $each;\n\t\t\tsetAttr -e -keyable true ($each + \".controlSizeX\");\n\t\t\tsetAttr -lock true ($each + \".controlSizeX\");\n\n\t\t\taddAttr -ln \"controlSizeY\"  -at double  -dv 1 $each;\n\t\t\tsetAttr -e -keyable true ($each + \".controlSizeY\");\n\t\t\tsetAttr -lock true ($each + \".controlSizeY\");\n\n\t\t\taddAttr -ln \"controlSizeZ\"  -at double  -dv 1 $each;\n\t\t\tsetAttr -e -keyable true ($each + \".controlSizeZ\");\n\t\t\tsetAttr -lock true ($each + \".controlSizeZ\");\n\t\t}\n\t}\n}\n\nglobal proc RRM_LockAndHideNonModNodes()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\tselect -hi ($modName + \"_MAINCtrl\");\n\t$allNodes = `ls -sl`;\n\t$nurbsCurveShapes = `ls -sl -type \"nurbsCurve\"`;\n\tselect $nurbsCurveShapes;\n\tpickWalk -d up;\n\t$nurbsCurves = `ls -sl`;\n\t$joints = `ls -type \"joint\" $allNodes`;\n\t$constraints = `ls -type \"constraint\" $allNodes`;\n\t\n\tselect $allNodes;\n\tselect -d $nurbsCurves $nurbsCurveShapes $joints $constraints;\n\t$nonKeyableNodes = `ls -sl`;\n\t$sizeNonKeyableNodes = `size $nonKeyableNodes`;\n\t\n\tglobal string $gMainProgressBar;\n\tprogressBar -edit\n    \t-beginProgress\n    \t-isInterruptable true\n    \t-status \"Finishing up...\"\n    \t-maxValue ($sizeNonKeyableNodes)\n    \t$gMainProgressBar;\n    \t\n    $crntNum = 1;\n    \t\n\tstring $crntNode;\n\tfor ($crntNode in $nonKeyableNodes)\n\t{\n\t\t$keyableAttributes = `listAttr -lf -k -v $crntNode`;\n\t\tstring $crntAttribute;\n\t\tfor ($crntAttribute in $keyableAttributes)\n\t\t{\n\t\t\tif(`attributeExists $crntAttribute $crntNode`)\n\t\t\t{\n\t\t\t\tsetAttr -k 0 -l 1 ($crntNode + \".\" + $crntAttribute);\n\t\t\t}\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\t\t\n\t\t$crntNum++;\n\t}\n\tfor ($crntNode in $constraints)\n\t{\n\t\t$keyableAttributes = `listAttr -lf -k -v $crntNode`;\n\t\tfor ($crntAttribute in $keyableAttributes)\n\t\t{\n\t\t\tif(`attributeExists $crntAttribute $crntNode`)\n\t\t\t{\n\t\t\t\tsetAttr -l 1 ($crntNode + \".\" + $crntAttribute);\n\t\t\t}\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\t\t\n\t\t$crntNum++;\n\t}\t\t\n\t$nonKeyableJoints = `ls $joints`;\n\tstring $crntJoint;\n\tfor ($crntJoint in $nonKeyableJoints)\n\t{\n\t\t$keyableAttributes = `listAttr -lf -k -v $crntJoint`;\n\t\tstring $crntAttribute;\n\t\tfor ($crntAttribute in $keyableAttributes)\n\t\t{\n\t\t\tif(`attributeExists $crntAttribute $crntJoint`)\n\t\t\t{\n\t\t\t\tsetAttr -k 0 ($crntJoint + \".\" + $crntAttribute);\n\t\t\t}\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\t\t\n\t\t$crntNum++;\n\t}\n\tprogressBar -edit -endProgress $gMainProgressBar;\n\n}\n\n\nglobal proc RRM_SingleHierarchyInterface()\n{\n\t//CHARACTER NAME\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\n\n\tstring $returnVal_SH_Generate = `confirmDialog\n\t-title \"Do you wish to Generate a Single Hierarchy Joint Set?\"\n\t\t-message \"A single hierarchy is only recommended for use in a game environment.\\n-Some features may not work properly.\\n-Joints do not stretch, but will maintain volume.\"\n\t\t-button \"No\"\n\t\t-button \"Yes\"\n\t\t-button \"Yes, and Create Joint at Origin\"\n\t\t-defaultButton \"No\"`;\n\t\t\n\t\n\tif ($returnVal_SH_Generate == \"Yes\"||$returnVal_SH_Generate == \"Yes, and Create Joint at Origin\") \n\t{\n\t\tprint {\"\\nBUILDING \\\"\" + $modName + \"\\\" SINGLE HIERARCHY...\\n\"};\n\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\tstring $topNodes[];\n\t\tstring $crntNode;\n           \n\t\t//SELECT TOP NODES\t\t\t\n\t\tfor ($crntNode in $hierarchy)\n\t\t{\n\t\t    if (`objExists ($crntNode + \".top\")`)\n\t\t    {\n\t\t    $topNodes = `ls $crntNode $topNodes`;\n\t\t    }\n\t\t}\n\t\t//REORDER\n\t\tint $topNodesSize = `size $topNodes`;\n\t\tint $crntNum = $topNodesSize;\n\t\t\n\t\tstring $reOrder[];\n\t\twhile ($topNodesSize > 0)\n\t\t{\n\t\t$topNodesSize--;\n\t\t$reOrder = `ls $reOrder $topNodes[$topNodesSize]`;\n\t\t}\n\t\t\n\t\t//GENERATE RIG\n\t\tif ($returnVal_SH_Generate == \"Yes\")\n\t\t{\n\t\t\tRRM_GenerateRigRootSH;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tRRM_GenerateRigRootMainSH;\n\t\t}\n\t\tstring $topNode;\n\t\tfor ($topNode in $reOrder)\n\t\t{\n\t\t\t$modType = `getAttr ($topNode + \".top\")`;\n\t\t\tif ($modType == \"spline\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigSplineSH;\n\t\t\t}\n\t\t\telse if ($modType == \"arm\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigArmSH;\n\t\t\t}\n\t\t\telse if ($modType == \"leg\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigLegSH;\n\t\t\t}\n\t\t\telse if ($modType == \"fkChain\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigFkChainSH;\n\t\t\t}\n\t\t\telse if ($modType == \"head\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigHeadSH;\n\t\t\t}\n\t\t\telse if ($modType == \"lookAt\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigLookAtSH;\n\t\t\t}\n\t\t\telse if ($modType == \"auxiliary\")\n\t\t\t{\n\t\t\t\tselect $topNode;\n\t\t\t\tRRM_GenerateRigAuxiliarySH;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\tprint \"\\nSINGLE HIERARCHY COMPLETED!\\n\";\n\t}\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n//BUTTON PROC\n////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_GenerateRig()\n{\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\n\n\tif (`objExists RRM_MAIN`)\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t$size = `size $hierarchy`;\n\t\tif ($size > 2)\n\t\t{\n\t\t\tstring $topNodes[];\n\t\t\tstring $crntNode;\n\n\t\t\t//SELECT TOP NODES\t\t\t\n\t\t\tfor ($crntNode in $hierarchy)\n\t\t\t{\n\t\t\t    if (`objExists ($crntNode + \".top\")`)\n\t\t\t    {\n\t\t\t    $topNodes = `ls $crntNode $topNodes`;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tint $nodeNum = `size $topNodes`;\n\t\t\tif ($nodeNum > 0)\n\t\t\t{\n\t\t\t\tselect $topNodes;\n\n\t\t\t\tglobal string $gMainProgressBar;\n\t\t\t\tprogressBar -edit\n    \t\t\t\t-beginProgress\n    \t\t\t\t-isInterruptable true\n    \t\t\t\t-status \"Generating Rig\"\n    \t\t\t\t-maxValue ($nodeNum + 2)\n    \t\t\t\t$gMainProgressBar;\n    \t\t\t\n\t\t\t\t//REORDER\n\t\t\t\t$topNodesSize = `size $topNodes`;\n\t\t\t\t$crntNum = $topNodesSize;\n\t\t\t\t\n\t\t\t\tstring $reOrder[];\n\t\t\t\twhile ($topNodesSize > 0)\n\t\t\t\t{\n\t\t\t\t\t$topNodesSize--;\n\t\t\t\t\t$reOrder = `ls $reOrder $topNodes[$topNodesSize]`;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//GENERATE RIG\n\t\t\t\tRRM_GenerateRigRoot;\n\t\t\t\tstring $topNode;\n\t\t\t\tint $shoulderCheck = 0;\n\t\t\t\tint $hipCheck = 0;\n\t\t\t\tfor ($topNode in $reOrder)\n\t\t\t\t{\n\t\t\t\t\t$modType = `getAttr ($topNode + \".top\")`;\n\t\t\t\t\t$moduleName = `getAttr ($topNode + \".core\")`;\n\t\t\t\t\tif ($modType == \"spline\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Spline\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigSpline($moduleName, $topNode);\n\t\t\t\t\t}    \n\t\t\t\t\telse if ($modType == \"arm\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Arm\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigArm($moduleName, $topNode);\n\t\t\t\t\t\t$shoulderCheck = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"leg\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Leg\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigLeg($moduleName, $topNode);\n\t\t\t\t\t\t$hipCheck = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"fkChain\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building FK Chain\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigFkChain($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"head\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Head\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigHead($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"lookAt\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Look-At\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigLookAt($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if ($modType == \"auxiliary\")\n\t\t\t\t\t{\n\t\t\t\t\t\tprogressBar -edit -step 1 -status \"Building Auxiliary\" $gMainProgressBar;\n\t\t\t\t\t\tRRM_GenerateRigAuxiliary($moduleName, $topNode);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t//ADD MIRROR OBJECT ATTRIBUTE\n\t\t\t\t\tRRM_MirrorAttributes($moduleName);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$modControls = `ls -type \"transform\" ($modName + \"_*Ctrl\")`;\n\t\t\t\t\n\t\t\t\t//ADD RIG NAME TO CONTROLS\n\t\t\t\tRRM_AddRigName($modControls, $modName);\n\t\t\t\t\n\t\t\t\t//ADD CORE CONTROL NAME\n\t\t\t\tRRM_ControlName($modControls);\n\t\t\t\t\n\t\t\t\t//ADD CONTROL SIZE TO CONTROLS\n\t\t\t\tRRM_AddControlsSize($modControls);\n\t\t\t\t\n\t\t\t\t//CREATE LAYERS\n\t\t\t\t//LAYER\n\t\t\t\tprogressBar -edit -step 1 -status \"Building Layers\" $gMainProgressBar;\n\t\t\t\t\n\t\t\t\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\t\t\t\tcreateDisplayLayer -n ($modName + \"_JointsLayer\") -number 1 -empty;\t\n\t\t\t\tcreateDisplayLayer -n ($modName + \"_ControlsLayer\") -number 1 -empty;\n\t\t\t\t\n\t\t\t\tselect ($modName + \"_*Ctrl\");\n\t\t\t\tselect -d ($modName + \"_MAINCtrl\");\n\t\t\t\teditDisplayLayerMembers -noRecurse ($modName + \"_ControlsLayer\") `ls -sl`;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tprogressBar -edit -step 1 -status \"Building Layers\" $gMainProgressBar;\n\t\t\t\tselect ($modName + \"_*Jnt\");\n\t\t\t\tif ($shoulderCheck == 1)\n\t\t\t\t{\n\t\t\t\t\tselect -d -hierarchy ($modName + \"*ShoulderJnt\");\n\t\t\t\t}\n\t\t\t\tif ($hipCheck == 1)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($modName + \"*KneeJnt\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\tselect -d -hierarchy ($modName + \"*KneeJnt\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tselect -d -hierarchy ($modName + \"*Knee1Jnt\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$joints = `ls -sl`;\n\t\t\t\t\n\t\t\t\teditDisplayLayerMembers -noRecurse ($modName + \"_JointsLayer\") `ls -sl`;\n\t\t\t\t\n\t\t\t\tprogressBar -edit -endProgress $gMainProgressBar;\n\t\t\t\t//MAKE ALL NODES UNKEYABLE\n\t\t\t\tRRM_LockAndHideNonModNodes;\n\n\t\t\t\tRRM_SingleHierarchyInterface;\n\t\t\t\t\n\t\t\t\tselect ($modName + \"_MAINCtrl\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Your Rig Has No Modules\"\n\t\t\t-message \"You must create modules and attach them to your rig.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Your Rig Has No Modules\"\n\t\t\t-message \"You must create modules and attach them to your rig.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t}\n\t}\n\telse\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t-title \"No Rig Exists\"\n\t\t-message \"You must first create a Proxy rig to RRM_Generate a final rig from.\\n\"\n\t\t-button \"OK\"\n\t\t-defaultButton \"OK\"\n\t\t-cancelButton \"OK\"\n\t\t-icon \"critical\"`;\n\t}\n\t$modName = `textField -q -text RRM_TextFieldCharName`;\n\tif (`objExists ($modName + \"_MAINCtrl\")`)\n\t{\n\t\tselect ($modName + \"_MAINCtrl\");\n\t}\n\t\n\t////SET UNITS BACK\n\t//if ($crntUnit != \"cm\")\n\t//{\n\t//\t//changeLinearUnit \"centimeter\"\n\t//}\n\t//changeLinearUnit $crntUnit;\n}\n\n///PROMPTS\nglobal proc RRM_GenerateRigPrompts()\n{\n\tstring $modName = `textField -q -text RRM_TextFieldCharName`;\n\tint $modNameSize = `size $modName`;\n\n\tif ($modNameSize == \"0\")\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"Module Needs a Name\"\n\t\t\t-message \"You must enter a name for the rig in character Name text field.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\t\n\telse if (! RRM_CheckName($modName))\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Rig's Name is Invalid\"\n\t\t\t-message \"A valid name must begin with a letter.\\n    The rest of the name may only contain\\nletters and/or numbers.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse if (`objExists ($modName)`)\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"The Rig's Name is not Unique\"\n\t\t\t-message \"A rig already exists with that name.\\nYou must create a unique name.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t}\n\telse\n\t{\n\t\t//CHECK IF NODE EDITOR IS OPEN\n\t\tstring $nodeEditor[] = `getPanel -scriptType nodeEditorPanel `;\n\t\t\n\t\tfor ($editor in $nodeEditor )\n\t\t{\n\t\t\tstring $tokens[];\n\t\t\tstring $control = `scriptedPanel -q -ctl $editor`;\n\t\t\n\t\t\tif ( $control != \"\" )\n\t\t\t{\n\t\t\t\tif ( 0 < `tokenize $control \"|\" $tokens` )\n\t\t\t\t{\n\t\t\t\t\tprint ( \"Window for Node Editor: \" + $tokens[0] + \"\\n\" );\n\t\t\t\t  \n\t\t\t\t\tstring $NodeEditorUI = `confirmDialog\n\t\t\t\t\t\t-title \"Close Node Editor Before Proceeding?\"\n\t\t\t\t\t\t-message \"The Node Editor is open.\\nGenerating a rig with the node editor opened will cause the rig to take much longer to RRM_Generate \\n\"\n\t\t\t\t\t\t-button \"Close Node Editor\"\n\t\t\t\t\t\t-button \"Ignore\"\n\t\t\t\t\t\t-button \"Cancel\"\n\t\t\t\t\t\t-defaultButton \"Close Node Editor\"\n\t\t\t\t\t\t-dismissString \"Ignore\"\n\t\t\t\t\t\t-cancelButton \"Ignore\"`;\n\t\t\t\t\t\t//-icon \"critical\"`;\n\t\t\t\t\t\t\n\t\t\t\t\tif ($NodeEditorUI == \"Close Node Editor\")\n\t\t\t\t\t{\n\t\t\t\t\t\tdeleteUI -window nodeEditorPanel2Window;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t  \t}\n\t\t}\n\t\t\n\t\tRRM_GenerateRig;\n\t\tif (`objExists ($modName + \"_MAINCtrl\")`)\n\t\t{\n\t\t\tRRM_ColorControls;\n\t\t\tif (`objExists RRM_ProxiesLayer`)\n\t\t\t{\n\t\t\t\tsetAttr RRM_ProxiesLayer.visibility 0;\n\t\t\t}\n\t\t}\n\t}\n\t//LOAD RIG NAME INTO TEXT FIELD\n\ttextFieldButtonGrp -e -tx $modName RRM_LoadRigTextFieldButtonGrp;\n\t\n\tselect -cl;\n}\n\n///////DEPENDENCIES\nglobal proc RRM_ElbowNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_ElbowJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_ElbowNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_ElbowNum;\n\t}\n}\n\nglobal proc RRM_KneeNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_KneeJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_KneeNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_KneeNum;\n\t}\n}\n\nglobal proc RRM_ElbowEditNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_ElbowEditJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_ElbowEditNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_ElbowEditNum;\n\t}\n}\n\nglobal proc RRM_KneeEditNumLock()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_KneeEditJoints`;\n\tif ($crntSetting == 1)\n\t{\n\t\tintSliderGrp -e -enable 0 RRM_KneeEditNum;\n\t}\n\telse\n\t{\n\t\tintSliderGrp -e -enable 1 RRM_KneeEditNum;\n\t}\n}\n\nglobal proc RRM_ToggleTemplate()\n{\n\t$crntSetting = `checkBox -q -v RRM_TemplateCheckBox`;\n\tif ($crntSetting == 1)\n\t{\n\t\toptionMenu -e -enable 1 RRM_TemplateType;\n\t}\n\telse\n\t{\n\t\toptionMenu -e -enable 0 RRM_TemplateType;\n\t}\n}\n\nglobal proc RRM_ToggleTransferParent()\n{\n\t$crntSetting = `radioButtonGrp -q -select RRM_TransferSelectionButton`;\n\tif ($crntSetting == 1)\n\t{\n\t\tcheckBox -e -enable 0 RRM_TransferParent;\n\t}\n\telse\n\t{\n\t\tcheckBox -e -enable 1 RRM_TransferParent;\n\t}\n}\n\n//DELETE PROXY RIG\nglobal proc RRM_DeleteProxyRig()\n{\n\tstring $confirmDeleteProxies = `confirmDialog\n\t\t-title \"Delete Proxies\"\n\t\t-message \"Are you sure you want to delete your proxy rig?\\n\"\n\t\t-button \"Delete Proxies\"\n\t\t-button \"Cancel\"\n\t\t-defaultButton \"Cancel\"\n\t\t-dismissString \"Cancel\"\n\t\t-cancelButton \"Cancel\"`;\n\t\t//-icon \"critical\"`;\n\t\t\n\tif ($confirmDeleteProxies == \"Delete Proxies\")\n\t{\n\t\tselect -hi RRM_MAIN;\n\t\t$rigHierarchy = `ls -sl`;\n\t\tlockNode -lock off $rigHierarchy;\n\t\tdelete RRM_MAIN;\n\t\t\n\t\tif (`objExists RRM_ProxiesLayer`)\n\t\t{\n\t\t\tdelete RRM_ProxiesLayer;\n\t\t}\n\t}\n}\n\n\n//STANDARD JOINT SELECTION\nglobal proc RRM_SelectStandardJoints(string $modName)\n{\n\tselect ($modName + \"_*Jnt\");\n\tif (`objExists ($modName + \"_ROOTSHJnt\")`)\n\t{\n\t\tselect -d ($modName + \"_*SHJnt\");\n\t}\n\t$allStandardJoints = `ls -sl`;\n\tstring $skinningJoints[];\n\tfor ($each in $allStandardJoints)\n\t{\n\t\t$drawStyle = `getAttr ($each + \".drawStyle\")`;\n\t\t$visibility = `getAttr ($each + \".visibility\")`;\n\n\t\tif ($drawStyle == 0 && $visibility == 1)\n\t\t{\n\t\t\t$skinningJoints = `ls $skinningJoints $each`;\n\t\t}\n\t}\n\tselect $skinningJoints;\n}\n\n//SINGLE HIERARCHY JOINT SELECTION\nglobal proc RRM_SelectSingleHierarchyJoints(string $modName)\n{\n\tselect ($modName + \"_*SHJnt\");\n}\n\n\n///SELECT JOINTS\nglobal proc RRM_LoadRig()\n{\n\t$selection = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tif ($selectionSize > 0)\n\t{\n\t\tif (`objExists ($selection[0] + \".modRigConnection\")`)\n\t\t{\n\t\t\t$rigName = `getAttr ($selection[0] + \".modRigConnection\")`;\n\t\t\ttextFieldButtonGrp -e -tx $rigName RRM_LoadRigTextFieldButtonGrp;\n\t\t}\n\t\telse\n\t\t{warning \"Selected Object is not a Rapid Rig Modular Control\";}\n\t}\n\telse\n\t{warning \"Nothing Selected. Please Select a Rapid Rig Modular Control\";}\n}\n\nglobal proc RRM_SelectJoints(string $modName)\n{\n\tif (`objExists ($modName + \"_ROOTSHJnt\")`)\n\t{\n\t\tstring $returnVal_Skin = `confirmDialog\n\t\t-title \"Select Skinning Joints\"\n\t\t-message \"Which joints do you wish to select?\"\n\t\t-button \"Standard\"\n\t\t-button \"Single Hierarchy\"\n\t\t-button \"Cancel\"\n\t\t-defaultButton \"Cancel\"\n\t\t-cancelButton \"Cancel\"`;\n\t\n\t\tif ($returnVal_Skin == \"Standard\")\n\t\t{\n\t\t\tRRM_SelectStandardJoints($modName);\n\t\t\tprint \"STANDARD JOINTS SELECTED! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIGrp.\\n\";\n\t\t}\n\t\n\t\tif ($returnVal_Skin == \"Single Hierarchy\")\n\t\t{\n\t\t\tRRM_SelectSingleHierarchyJoints($modName);\n\t\t\tprint \"SINGLE HIERARCHY JOINTS SELECTED! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIGrp.\\n\";\n\t\t}\n\t}\n\telse if (`objExists ($modName + \"_ROOTJnt\")`)\n\t{\n\t\tRRM_SelectStandardJoints($modName);\n\t\tprint \"SUCCESS! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIGrp.\\n\";\t\t\n\t}\n\telse\n\t{\n\t\terror \"NO JOINTS HAVE BEEN CREATED YET!\\n\";\n\t}\n}\n\nglobal proc RRM_CreateCharacterSet(int $subCharSet)\n{\n\t$selection = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\tif ($selectionSize == 1)\n\t{\n\t\t//CHECK IF MAINC IS SELECTED\n\t\tif (`objExists ($selection[0] + \".isMain\")`)\n\t\t{\n\t\t\t//CREATE CHARACTER SET\n\t\t\t$rigName = `getAttr ($selection[0] + \".modRigName\")`;\n\t\t\tif (!`objExists ($rigName + \"_CharSet\")`)\n\t\t\t{\n\t\t\t\tcharacter -em -name ($rigName + \"_CharSet\") -excludeVisibility;\n\t\t\t\tif ($subCharSet == 0)\n\t\t\t\t{\n\t\t\t\t\tselect -hi $selection[0];\n\t\t\t\t\t$curveHierarchy = `ls -sl -type \"nurbsCurve\"`;\n\t\t\t\t\tselect $curveHierarchy;\n\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t$hierarchy = `ls -sl`;\n\t\t\t\t\tfor ($each in $hierarchy)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".modControlName\")` && !`objExists ($each + \".nonControl\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcharacter -add ($rigName + \"_CharSet\") $each;\n\t\t\t\t\t\t\tprint (\"Adding \\\"\" + $each + \"\\\" to \" + ($rigName + \"_CharSet\") + \".\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//CREATE SUB CHARACTER SETS\n\t\t\t\t\tselect -hi $selection[0];\n\t\t\t\t\t$hierarchy = `ls -sl -type \"transform\"`;\n\t\t\t\t\t\n\t\t\t\t\t//FIND MODULE TOP GROUPS\n\t\t\t\t\tselect $selection[0]; \n\t\t\t\t\tpickWalk -d down;\n\t\t\t\t\t$firstChild = `ls -sl`;\n\t\t\t\t\tstring $nextChild[];\n\t\t\t\t\tstring $modules[];\n\t\t\t\t\twhile ($firstChild[0] != $nextChild[0])\n\t\t\t\t\t{\n\t\t\t\t\t\t$selectedChild = `ls -sl`;\n\t\t\t\t\t\tif (`objExists ($selectedChild[0] + \".topNode\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tselect $modules $selectedChild;\n\t\t\t\t\t\t\t$modules = `ls -sl`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselect $selectedChild;\n\t\t\t\t\t\tpickWalk -d right;\n\t\t\t\t\t\t$nextChild = `ls -sl`;\n\t\t\t\t\t}\n\t\t\t\t\t//print $modules;\n\t\t\t\t\tfor ($each in $modules)\n\t\t\t\t\t{\n\t\t\t\t\t\tint $i;\n\t\t\t\t\t\tcharacter -em -name ($each + \"_CharSet\") -excludeVisibility;\n\t\t\t\t\t\tcharacter -add ($rigName + \"_CharSet\") ($each + \"_CharSet\");\n\t\t\t\t\t\tselect -hi $each;\n\t\t\t\t\t\t$curveHierarchy = `ls -sl -type \"nurbsCurve\"`;\n\t\t\t\t\t\tselect $curveHierarchy;\n\t\t\t\t\t\tpickWalk -d up;\n\t\t\t\t\t\t$hierarchy = `ls -sl`;\n\t\t\t\t\t\tfor ($eachControl in $hierarchy)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (`objExists ($eachControl + \".modControlName\")` && !`objExists ($eachControl + \".nonControl\")`)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$existingChar = `listConnections -d 0 -t \"character\" $eachControl`;\n\t\t\t\t\t\t\t\t$charSize = `size $existingChar`;\n\t\t\t\t\t\t\t\tif ($charSize == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcharacter -add ($each + \"_CharSet\") $eachControl;\n\t\t\t\t\t\t\t\t\tprint (\"Adding \\\"\" + $eachControl + \"\\\" to \" + ($each + \"_CharSet\") + \".\\n\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twarning (\"A character set already exists for \\\"\" + $rigName + \"\\\".\");\n\t\t\t}\n\t\t}\n\t}\n\telse if ($selectionSize > 1)\n\t{\n\t\twarning \"Please select only the MAINC of your rig\";\n\t}\n\telse\n\t{\n\t\twarning \"You must select the MAINC of your rig\";\n\t}\n\tselect $selection;\n}\n\n//////////////////////////CONTROLLER RESIZING////////////////////////////////////////\nglobal proc RRM_ControlEnableDisableMirror()\n{\n    $checkVal = `radioButtonGrp -q -select RRM_ControlScaleSelection`;\n    if ($checkVal == 3)\n    {\n        checkBox -edit -en 0  RRM_ControlMirror;\n    }\n    else\n    {\n        checkBox -edit -en 1  RRM_ControlMirror;\n    }\n}\nglobal proc RRM_ControlEnableDisableUniformScales()\n{\n    $checkVal = `checkBox -q -value RRM_ControlUniformScale`;\n    if ($checkVal == 0)\n    {\n        checkBoxGrp -edit -en1 1 -en2 1 -en3 1 RRM_ControlScaleAxes;\n    }\n    else if ($checkVal == 1)\n    {\n        checkBoxGrp -edit -en1 0 -en2 0 -en3 0 RRM_ControlScaleAxes;\n    }\n}\n\n\n\nglobal proc RRM_ControlScale(float $RRM_ControlScaleChange, int $selectionType, int $modScaleMirror, int $modUniformScaleAxes, int $RRM_ControlScaleAxis1, int $RRM_ControlScaleAxis2, int $RRM_ControlScaleAxis3)\n{\n\t//GO THROUGH CURVES\n\t$selection = `ls -sl`;\n\t$selectionSize = `size $selection`;\n\t$controls = `ls -sl`;\n\t//string $controls[];\n\tstring $tempControls[];\n\tstring $modRigName;\n\tstring $each;\n\t\n\t\n\tif ($selectionSize > 0)\n\t{\n\t\tfor ($each in $selection)\n\t\t{\n\t\t\tif (`objExists ($selection[0] + \".modRigName\")`)\n\t\t\t{\n\t\t\t\t$modRigName = `getAttr ($each + \".modRigName\")`; \n\t\t\t\tif ($selectionType == 1 && $modScaleMirror == 1)\n\t\t\t\t{\n\t\t\t\t\tif ($modScaleMirror == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".rightControl\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".rightControl\")`;\n\t\t\t\t\t\t\t$oppControl = ($modRigName + $oppControl);\n\t\t\t\t\t\t\t$controls = `ls $controls $oppControl`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (`objExists ($each + \".leftControl\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".leftControl\")`;\n\t\t\t\t\t\t\t$oppControl = ($modRigName + $oppControl);\n\t\t\t\t\t\t\t$controls = `ls $controls $oppControl`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ($selectionType == 2)\n\t\t\t\t{\n\t\t\t\t\tfor ($each in $selection)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$modRigName = `getAttr ($each + \".modRigName\")`; \n\t\t\t\t\t\t\t//GET BRANCHES\n\t\t\t\t\t\t\t$coreName = `getAttr ($each + \".modCoreName\")`;\n\t\t\t\t\t\t\t$crntBranch = ($modRigName + $coreName + \"Grp\");\n\t\t\t\t\t\t\t$controls = `ls $controls $crntBranch`;\n\t\t\t\t\t\t\t//GET MIRRORED BRANCHES\n\t\t\t\t\t\t\tif ($modScaleMirror == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (`objExists ($each + \".rightControl\")`)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".rightControl\")`;\n\t\t\t\t\t\t\t\t\t$oppCoreName = `getAttr ($modRigName + $oppControl + \".modCoreName\")`;\n\t\t\t\t\t\t\t\t\t$oppBranch = ($modRigName + $oppCoreName + \"Grp\");\n\t\t\t\t\t\t\t\t\t$controls = `ls $controls $oppBranch`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (`objExists ($each + \".leftControl\")`)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$oppControl = `getAttr ($each + \".leftControl\")`;\n\t\t\t\t\t\t\t\t\t$oppCoreName = `getAttr ($modRigName + $oppControl + \".modCoreName\")`;\n\t\t\t\t\t\t\t\t\t$oppBranch = ($modRigName + $oppCoreName + \"Grp\");\n\t\t\t\t\t\t\t\t\t$controls = `ls $controls $oppBranch`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ($selectionType == 3)\n\t\t\t\t{\n\t\t\t\t\tfor ($each in $selection)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$modRigName = `getAttr ($each + \".modRigName\")`; \n\t\t\t\t\t\t\t//GET RIGrp NAMES\n\t\t\t\t\t\t\t$controls = `ls $controls $modRigName`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\t{warning ($each + \" IS NOT A VALID CONTROL. SKIPPING.\");}\n\t\t}\n\t}\n\telse\n\t\t{warning \"NOTHING SELECTED. PLEASE SELECT A VALID RRM CONTROL\";}\n\n\t\t\t\t\n\tif ($selectionType == 2||$selectionType == 3)\n\t{\n\t\tselect -hi $controls;\n\t\t$controlsHierarchy = `ls -sl -type \"nurbsCurve\"`;\n\t\tselect $controlsHierarchy;\n\t\tpickWalk -d up;\n\t\t$controls = `ls -sl`;\n\t\tfor ($each in $controls)\n\t\t{\n\t\t\tif (!`objExists ($each + \".nonControl\")`)\n\t\t\t{\n\t\t\t\t$tempControls = `ls $tempControls $each`;\n\t\t\t}\n\t\t}\n\t\t$controls = `ls $tempControls`;\n\t}\n\t\t\t\t\n\tfor ($each in $controls)\n\t{\n\t\t//CHECK NODE TYPE\n\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t{\n\t\t\t//SCALE\n\t\t\tfloat $controlScaleX = 1;\n\t\t\tfloat $controlScaleY = 1;\n\t\t\tfloat $controlScaleZ = 1;\n\t\t\tif ($modUniformScaleAxes == 1)\n\t\t\t{\n\t\t\t\t$controlScaleX = $RRM_ControlScaleChange;\n\t\t\t\t$controlScaleY = $RRM_ControlScaleChange;\n\t\t\t\t$controlScaleZ = $RRM_ControlScaleChange;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($RRM_ControlScaleAxis1 == 1)\n\t\t\t\t{\n\t\t\t\t\t$controlScaleX = $RRM_ControlScaleChange;\n\t\t\t\t}\n\t\t\t\tif ($RRM_ControlScaleAxis2 == 1)\n\t\t\t\t{\n\t\t\t\t\t$controlScaleY = $RRM_ControlScaleChange;\n\t\t\t\t}\n\t\t\t\tif ($RRM_ControlScaleAxis3 == 1)\n\t\t\t\t{\n\t\t\t\t\t$controlScaleZ = $RRM_ControlScaleChange;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//GET SHAPES\n\t\t\t$worldSpace = `xform -q -ws -rp $each`;\n\t\t\t$curveShapes = `listRelatives -shapes $each`;\n\t\t\tstring $eachShape;\n\t\t\tfor ($eachShape in $curveShapes)\n\t\t\t{\n\t\t\t\t$cvs = `ls ($eachShape + \".cv[*]\")`;\n\t\t\t\tif (!`objExists ($each + \".kneeLock\")`)\n\t\t\t\t{\n\t\t\t\t\tscale -r -p $worldSpace[0] $worldSpace[1] $worldSpace[2] $controlScaleX $controlScaleY $controlScaleZ $cvs;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tscale -r -p $worldSpace[0] 0 $worldSpace[2] $controlScaleX $controlScaleY $controlScaleZ $cvs;\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t}\n\t\t\t//UPDATE SIZE ATTRIBUTE\n\t\t\tsetAttr -l false ($each + \".controlSizeX\");\n\t\t\tsetAttr -l false ($each + \".controlSizeY\");\n\t\t\tsetAttr -l false ($each + \".controlSizeZ\");\n\t\t\tfloat $valX = `getAttr ($each + \".controlSizeX\")`;\n\t\t\tfloat $valY = `getAttr ($each + \".controlSizeY\")`;\n\t\t\tfloat $valZ = `getAttr ($each + \".controlSizeZ\")`;\n\t\t\tsetAttr ($each + \".controlSizeX\") ($valX * $controlScaleX);\n\t\t\tsetAttr ($each + \".controlSizeY\") ($valY * $controlScaleY);\n\t\t\tsetAttr ($each + \".controlSizeZ\") ($valZ * $controlScaleZ);\n\t\t\tsetAttr -l true ($each + \".controlSizeX\");\n\t\t\tsetAttr -l true ($each + \".controlSizeY\");\n\t\t\tsetAttr -l true ($each + \".controlSizeZ\");\n\t\t}\n\t}\n\tselect $selection;\n}\n\n\n//////////////////////////SAVE CONTROL SHAPES////////////////////////////////////////\nglobal proc RRM_WriteControlShapes()\n{\n\t$initialSelection = `ls -sl`;\n\t$controls = `ls -sl -type \"transform\"`;\n\t$controlsSize = `size $controls`;\n\tif ($controlsSize > 0)\n\t{\n\t\t//GET ALL CONTROLS\n\t\tif (`objExists ($controls[0] + \".modRigName\")`)\n\t\t{\n\t\t\tstring $mayaFolder;\n\t\t\n\t\t\tfileBrowserDialog -mode 1\n\t\t\t-fileCommand ( \"RRM_SaveControlShapes \\\"\" + $mayaFolder + \"\\\"\" )\n\t\t\t-actionName \"Save\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstring $returnVal_Generate = `confirmDialog\n\t\t\t-title \"No RRM Control Selected\"\n\t\t\t-message \"You must first select a control from your modular rig that you wish to save the transforms from.\\n\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"\n\t\t\t-icon \"critical\"`;\n\t\t}\n\t}\n\telse\n\t{\n\t\tstring $returnVal_Generate = `confirmDialog\n\t\t-title \"Nothing Selected\"\n\t\t-message \"You must first select a control from your modular rig that you wish to load the transforms to.\\n\"\n\t\t-button \"OK\"\n\t\t-defaultButton \"OK\"\n\t\t-cancelButton \"OK\"\n\t\t-icon \"critical\"`;\n\t}\n\tselect $initialSelection;\n}\n\nglobal proc RRM_SaveControlShapes(string $mayaFolder, string $result, string $type)\n{\n\tprint (\"\\nSAVING TO: \"+ $result + \"\\n\");\n\t$fileID = `fopen $result \"w\"`;\n\n\t$selection = `ls -sl`;\n\t$modRigName = `getAttr ($selection[0] + \".modRigName\")`;\n\tselect -hi ($modRigName + \"_MAINCtrl\");\n\t\n\t$controls = `ls -sl -type \"transform\"`;\n\tfor ($each in $controls)\n\t{\n\t\tif (`objExists ($each + \".controlSizeX\")` && `objExists ($each + \".modRigName\")`)\n\t\t{\n\t\t\t//GET NAME OF CONTROL WITHOUT RIGrp NAME\n\t\t\t$shapes = `listRelatives -shapes $each`;\n\t\t\t\n\t\t\tfor ($eachShape in $shapes)\n\t\t\t{\n\t\t\t\tif (`objExists ($eachShape + \".cv[0]\")`)\n\t\t\t\t{\n\t\t\t\t\tfprint $fileID (\"if (`objExists \" + $eachShape + \"`) {\");\n\t\t\t\t\tint $numSpans = `getAttr ($eachShape + \".spans\")`;\n\t\t\t\t\tint $degree   = `getAttr ($eachShape + \".degree\")`;\n\t\t\t\t\tint $form     = `getAttr ($eachShape + \".form\")`;\n\t\t\t\t\n\t\t\t\t\tint $numCVs   = $numSpans + $degree;\n\t\t\t\t\n\t\t\t\t\t// Adjust for periodic curve:\n\t\t\t\t\tif ( $form == 2 ) $numCVs -= $degree;\n\t\t\t\t\t\n\t\t\t\t\tint $i = 0;\n\t\t\t\t\twhile ($i <= $numCVs)\n\t\t\t\t\t{\n\t\t\t\t\t\t$pos = `xform -q -os -t ($eachShape + \".cv[\" + $i + \"]\")`;\n\t\t\t\t\t\tfprint $fileID (\"move -os \" + $pos[0] + \" \" + $pos[1] + \" \" + $pos[2] + \" \" + ($eachShape + \".cv[\" + $i + \"]; \"));\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t\t$overrideColor = `getAttr ($eachShape + \".overrideColor\")`;\n\t\t\t\t\tfprint $fileID (\"setAttr \" + $eachShape + \".overrideColor \" + $overrideColor + \"; \");\n\t\t\t\t\tfprint $fileID (\"} else {warning (\\\"\" + $eachShape + \" does not exist. Skipping\\\");}\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfclose $fileID;\n\t\n\tprint (\"\\nFILE SUCCESSFULLY SAVED TO: \"+ $result + \"\\n\");\n}\n\nglobal proc RRM_ReadControlShapes()\n{\n \tstring $mayaFolder2;\n\tfileBrowserDialog -mode 0\n\t-fileCommand ( \"RRM_LoadControlShapes \\\"\" + $mayaFolder2 + \"\\\"\" )\n\t-actionName \"Load\";\n}\n\nglobal proc RRM_LoadControlShapes(string $mayaFolder2, string $result2, string $type2)\n{\n\t//FILE PATH\n\tprint (\"LOADING SHAPES FROM \"+$result2+\"\\n\");\n\t//OPEN FILE FOR READING\n\t$fileID = `fopen $result2 \"r\"`;\n\t//GET FIRST LINE\n\tstring $nextLine = `fgetline $fileID`;\n\t//LOOP\n\twhile (size($nextLine) > 0)\n\t{\n\t\teval ($nextLine);\n\t\tprint ($nextLine);\n\t\t$nextLine = `fgetline $fileID`;\n\t}\n\t//RETURN ARRAY\n\tfclose $fileID;\n}\n\n\n//////////////////////////OVERRIDE COLOR////////////////////////////////////////\n\nglobal proc RRM_ControlOverrideColor(int $colorVal)\n{\n\t$selection = `ls -sl -type \"transform\"`;\n\tfor ($each in $selection)\n\t{\n\t\tif (`objExists ($each + \".modRigName\")`)\n\t\t{\n\t\t\t$shapes = `listRelatives -fullPath -shapes $each`;\n\t\t\tfor ($eachShape in $shapes)\n\t\t\t{\n\t\t\t\tsetAttr ($eachShape + \".overrideColor\") $colorVal;\n\t\t\t}\n\t\t}\n\t}\n\tselect $selection;\n}\n\n//DELETE RIG\nglobal proc RRM_DeleteRig(string $rigName, int $keep)\n{\n\tif ($keep == 1)\n\t{\n\t\tparent -w ($rigName + \"_SHJntGrp\");\n\t\tselect -hi ($rigName + \"_SHJntGrp\");\n\t\t$SHJoints = `ls -sl -type \"joint\"`;\n\t\tstring $each;\n\t\tfor ($each in $SHJoints)\n\t\t{\n\t\t\tdelete -constraints $each;\n\t\t}\n\t}\n\t\n\tselect -cl;\n\tselect -hi $rigName;\n\t$dagNodes = `ls -sl`;\n\tselect -d $dagNodes;\n\t$nonDagNodes = `ls -sl`;\n\n\t\t\n\t//DELETE NODES\n\tdelete $rigName;\n\tfor ($each in $nonDagNodes)\n\t{\n\t\tif (`objExists $each`)\n\t\t{\n\t\t\tdelete $each;\n\t\t}\n\t}\n\n\t//EXTRA UTILITY NODES\n\t$MD_Nodes = `ls -type \"multiplyDivide\" ($rigName + \"_*\")`;\n\t$Blend_Nodes = `ls -type \"blendColors\" ($rigName + \"_*\")`;\n\t$Condition_Nodes = `ls -type \"condition\" ($rigName + \"_*\")`;\n\t$Additive_Nodes = `ls -sl -type \"plusMinusAverage\" ($rigName + \"_*\")`;\n\t\n\t$Util_Nodes = `ls $MD_Nodes $Blend_Nodes $Condition_Nodes $Additive_Nodes`;\n\t//int $i = 0;\n\t//while ($i < 30)\n\t//{\n\t//\tfor ($each in $Util_Nodes)\n\t//\t{\n\t//\t\t$connections = `listConnections -s off $each`;\n\t//\t\t$numConnections = `size $connections`;\n\t//\t\tif ($numConnections <= 1)\n\t//\t\t{\n\t//\t\t\tselect $Util_Nodes;\n\t//\t\t\tselect -d $each;\n\t//\t\t\t$Util_Nodes = `ls -sl`;\n\t//\t\t\tdelete $each;\n\t//\t\t\t$Util_NodesSize = `size $Util_Nodes`;\n\t//\t\t\tif ($Util_NodesSize == 0)\n\t//\t\t\t{\n\t//\t\t\t\t$i = 30;\n\t//\t\t\t}\n\t//\t\t}\n\t//\t}\n\t//\t$i++;\n\t//}\n\tdelete $Util_Nodes;\n\t\n\t//LAYERS\n\tif (`objExists ($rigName + \"_SHJointsLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_SHJointsLayer\");\n\t}\n\tif (`objExists ($rigName + \"_GeoLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_GeoLayer\");\n\t}\n\tif (`objExists ($rigName + \"_ControlsLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_ControlsLayer\");\n\t}\n\tif (`objExists ($rigName + \"_JointsLayer\")`)\n\t{\n\t\tdelete ($rigName + \"_JointsLayer\");\n\t}\n\t\n\t//MATERIALS\n\tif (`objExists ($rigName + \"_geoColor01\")`)\n\t{\n\t\tdelete ($rigName + \"_geoColor01\");\n\t}\n\tif (`objExists ($rigName + \"_geoColor02\")`)\n\t{\n\t\tdelete ($rigName + \"_geoColor02\");\n\t}\n\tif (`objExists ($rigName + \"_EyeWhites\")`)\n\t{\n\t\tdelete ($rigName + \"_EyeWhites\");\n\t}\n\tif (`objExists ($rigName + \"_Pupils\")`)\n\t{\n\t\tdelete ($rigName + \"_Pupils\");\n\t}\n}\n\n\nglobal proc RRM_DeleteRigUI()\n{\n\t$selection = `ls -sl`;\n\t$selectSize = `size $selection`;\n\t\n\tif ($selectSize == 1)\n\t{\n\t\tif (`objExists ($selection[0] + \".modRigName\")`)\n\t\t{\n\t\t\t$modRigName = `getAttr ($selection[0] + \".modRigName\")`;\n\t\t\t\n\t\t\tif (!`objExists ($modRigName + \"_ROOTSHJnt\")`)\n\t\t\t{\n\t\t\t\tstring $returnVal_DeleteRig = `confirmDialog\n\t\t\t\t-title (\"Are you sure you want to delete \\\"\" + ($modRigName) + \"\\\" rig?\")\n\t\t\t\t-message (\"This will delete the entire rig and anything you may have added to the \\\"\" + ($modRigName) + \"\\\" hierarchy. You may not be able to undo.\")\n\t\t\t\t-button \"Proceed\"\n\t\t\t\t-button \"Cancel\"\n\t\t\t\t-defaultButton \"Cancel\"\n\t\t\t\t-cancelButton \"Cancel\"`;\n\t\t\t\t\n\t\t\t\tif ($returnVal_DeleteRig == \"Proceed\") \n\t\t\t\t{\n\t\t\t\t\tprint (\"DELETING \\\"\" + ($modRigName) + \"\\\"...\\n\");\n\t\t\t\t\tRRM_DeleteRig($modRigName, 0);\n\t\t\t\t\tprint (\"\\\"\" + ($modRigName) + \"\\\" DELETED\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstring $returnVal_DeleteRig = `confirmDialog\n\t\t\t\t-title (\"Are you sure you want to delete \\\"\" + ($modRigName) + \"\\\" rig?\")\n\t\t\t\t-message (\"This will delete the entire rig and anything you may have added to the \\\"\" + ($modRigName) + \"\\\" hierarchy. You may not be able to undo.\")\n\t\t\t\t-button \"Proceed\"\n\t\t\t\t-button \"Proceed, Keep SH Joints\"\n\t\t\t\t-button \"Cancel\"\n\t\t\t\t-defaultButton \"Cancel\"\n\t\t\t\t-cancelButton \"Cancel\"`;\n\t\t\t\t\n\t\t\t\tif ($returnVal_DeleteRig == \"Proceed\") \n\t\t\t\t{\n\t\t\t\t\tprint (\"DELETING \\\"\" + ($modRigName) + \"\\\"...\\n\");\n\t\t\t\t\tRRM_DeleteRig($modRigName, 0);\n\t\t\t\t\tprint (\"\\\"\" + ($modRigName) + \"\\\" DELETED\\n\");\n\t\t\t\t}\n\t\t\t\tif ($returnVal_DeleteRig == \"Proceed, Keep SH Joints\") \n\t\t\t\t{\n\t\t\t\t\tprint (\"DELETING \\\"\" + ($modRigName) + \"\\\"...\\n\");\n\t\t\t\t\tRRM_DeleteRig($modRigName, 1);\n\t\t\t\t\tprint (\"\\\"\" + ($modRigName) + \"\\\" DELETED. SINGLE HIERARCHY JOINTS PRESERVED\\n\");\n\t\t\t\t}\n\t\t\t}\t\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Select \\\"MAINC\\\"\"\n\t\t\t-message \"You need to select a control of the rig you wish to delete\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t\t}\n\t}\n\telse if ($selectSize == 0)\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Nothing Selected\"\n\t\t\t-message \"You need to select a control of the rig you wish to delete\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n\telse\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: More Than One Object Selected\"\n\t\t\t-message \"Please select only one control of the rig you wish to delete\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RRM_SH_RenameHead()\n{\n\t$headJoint = `ls -sl`;\n\t$headJointCheck = `nodeType $headJoint[0]`;\n\t\n\tif ($headJointCheck == \"joint\")\n\t{\n\t\trename $headJoint[0] \"Head\";\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t}\n\tselect $headJoint;\n}\n\nglobal proc RRM_SH_RenameHips()\n{\n\t$ROOTJoint = `ls -sl`;\n\t$ROOTJointCheck = `nodeType $ROOTJoint[0]`;\n\t\n\tif ($ROOTJointCheck == \"joint\")\n\t{\n\t\trename $ROOTJoint[0] \"Hips\";\n\t\tselect \"Hips\";\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $ROOTJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameSpline()\n{\n\t$splineJoint = `ls -sl`;\n\t$splineJointCheck = `nodeType $splineJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($splineJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($splineJoint[0] + \".splineStart\")`)\n\t\t{\n\t\t\tselect -hi $splineJoint;\n\t\t\t$splineHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $splineHierarchy`;\n\t\t\tint $splineEnd;\n\t\t\tint $i;\n\t\t\tstring $splineJoints[];// = $splineJoint[0];\n\t\t\tstring $iString;\n\t\t\t\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (!`objExists ($splineHierarchy[$i] + \".splineEnd\")`)\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\tif ($i == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Spine\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Spine\" + $iString);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\trename $splineHierarchy[$i] (\"Spine\" + $iString);\n\t\t\t\t\t$i=100;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"Spine\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected object is not the first joint of a spline\";\n\t\t\tselect $splineJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $splineJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameNeck()\n{\n\t$splineJoint = `ls -sl`;\n\t$splineJointCheck = `nodeType $splineJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($splineJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($splineJoint[0] + \".splineStart\")`)\n\t\t{\n\t\t\tselect -hi $splineJoint;\n\t\t\t$splineHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $splineHierarchy`;\n\t\t\tint $splineEnd;\n\t\t\tint $i;\n\t\t\tstring $splineJoints[];// = $splineJoint[0];\n\t\t\tstring $iString;\n\t\t\t\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (!`objExists ($splineHierarchy[$i] + \".splineEnd\")`)\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\tif ($i == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Neck\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trename $splineHierarchy[$i] (\"Neck\" + $iString);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$iString = $i;\n\t\t\t\t\trename $splineHierarchy[$i] (\"Neck\" + $iString);\n\t\t\t\t\t$i=100;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"Neck\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected object is not the first joint of a spline\";\n\t\t\tselect $splineJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $splineJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameLeftArm()\n{\n\t$clavicleJoint = `ls -sl`;\n\t$clavicleJointCheck = `nodeType $clavicleJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($clavicleJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($clavicleJoint[0] + \".shoulder\")`)\n\t\t{\n\t\t\tselect -hi $clavicleJoint;\n\t\t\t$armHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $armHierarchy`;\n\t\t\tint $i = 1;\n\t\t\t\n\t\t\trename $clavicleJoint[0] \"LeftShoulder\";\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($armHierarchy[$i])`)\n\t\t\t\t\t{\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".arm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"LeftArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".forearm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"LeftForeArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".hand\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"LeftHand\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"LeftShoulder\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a arm\";\n\t\t\tselect $clavicleJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $clavicleJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameRightArm()\n{\n\t$clavicleJoint = `ls -sl`;\n\t$clavicleJointCheck = `nodeType $clavicleJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($clavicleJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($clavicleJoint[0] + \".shoulder\")`)\n\t\t{\n\t\t\tselect -hi $clavicleJoint;\n\t\t\t$armHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $armHierarchy`;\n\t\t\tint $i = 1;\n\t\t\t\n\t\t\trename $clavicleJoint[0] \"RightShoulder\";\n\t\t\twhile ($i < $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($armHierarchy[$i])`)\n\t\t\t\t\t{\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".arm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"RightArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".forearm\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"RightForeArm\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($armHierarchy[$i] + \".hand\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $armHierarchy[$i] \"RightHand\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"RightShoulder\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a arm\";\n\t\t\tselect $clavicleJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $clavicleJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameLeftLeg()\n{\n\t$hipJoint = `ls -sl`;\n\t$hipJointCheck = `nodeType $hipJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($hipJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($hipJoint[0] + \".upLeg\")`)\n\t\t{\n\t\t\tselect -hi $hipJoint;\n\t\t\t$legHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $legHierarchy`;\n\t\t\tint $i = 1;\n\t\t\tstring $legJoints[];\n\t\t\t\n\t\t\trename $hipJoint[0] \"LeftUpLeg\";\n\t\t\twhile ($i <= $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($legHierarchy[$i])`)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".leg\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"LeftLeg\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".foot\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"LeftFoot\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".toeBase\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"LeftToeBase\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"LeftUpLeg\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a leg\";\n\t\t\tselect $hipJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $hipJoint;\n\t}\n}\n\nglobal proc RRM_SH_RenameRightLeg()\n{\n\t$hipJoint = `ls -sl`;\n\t$hipJointCheck = `nodeType $hipJoint[0]`;\n\tint $hierarchySize;\n\t\n\tif ($hipJointCheck == \"joint\")\n\t{\n\t\tif (`objExists ($hipJoint[0] + \".upLeg\")`)\n\t\t{\n\t\t\tselect -hi $hipJoint;\n\t\t\t$legHierarchy = `ls -sl -type \"joint\"`;\n\t\t\t$hierarchySize = `size $legHierarchy`;\n\t\t\tint $i = 1;\n\t\t\tstring $legJoints[];\n\t\t\t\n\t\t\trename $hipJoint[0] \"RightUpLeg\";\n\t\t\twhile ($i <= $hierarchySize)\n\t\t\t{\n\t\t\t\tif (`objExists ($legHierarchy[$i])`)\n\t\t\t\t{\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".leg\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"RightLeg\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".foot\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"RightFoot\";\n\t\t\t\t\t}\n\t\t\t\t\tif (`objExists ($legHierarchy[$i] + \".toeBase\")`)\n\t\t\t\t\t{\n\t\t\t\t\t\trename $legHierarchy[$i] \"RightToeBase\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tselect \"RightUpLeg\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\twarning \"Selected joint is not the first joint of a leg\";\n\t\t\tselect $hipJoint;\n\t\t}\n\t}\n\telse\n\t{\n\t\twarning \"Selected object is not a joint\";\n\t\tselect $hipJoint;\n\t}\n}\n\nglobal proc RRM_GetVersionNumber()\n{\n\t$selection = `ls -sl`;\n\t$selectSize = `size $selection`;\n\t\n\tif ($selectSize == 1)\n\t{\n\t\tif (`objExists ($selection[0] + \".versionNumber\")`)\n\t\t{\n\t\t\t$rigName = `getAttr ($selection[0] + \".modRigName\")`;\n\t\t\t$rigVersionNumber = `getAttr ($selection[0] + \".versionNumber\")`;\n\t\t\t\n\t\t\tstring $returnVal_DeleteRig = `confirmDialog\n\t\t\t-title (\"The rig \\\"\" + ($rigName) + \"\\\" is version: \" + $rigVersionNumber)\n\t\t\t-message (\"Click the \\\"Go To Rapid Rig Web Page\\\" button to see if you have the latest version.\")\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\"`;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Select \\\"MAINC\\\"\"\n\t\t\t-message \"You need to select the Main Controller to check your rig's version\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t\t}\n\t}\n\telse if ($selectSize == 0)\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: Nothing Selected\"\n\t\t\t-message \"You need to select the Main Controller to check your rig's version\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n\telse\n\t{\n\t\t\tconfirmDialog\n\t\t\t-title \"Warning: More Than One Object Selected\"\n\t\t\t-message \"You need to select the Main Controller to check your rig's version\"\n\t\t\t-button \"OK\"\n\t\t\t-defaultButton \"OK\"\n\t\t\t-cancelButton \"OK\";\n\t}\n}\n\nglobal proc RRM_GoToCreativeCrash()\n{\n\tlaunch -web \"http://www.creativecrash.com/maya/script/-rapid-rig-modular-procedural-auto-rig-for-maya\";\n}\n//////////////////////////////////////////////////////////////////\n////////////////////////Main Window///////////////////////////////\n//////////////////////////////////////////////////////////////////\n\nglobal proc RRM_CreateProxyMainGUI()\n{\n\tstring $form = `formLayout`;\n\tstring $tabs = `tabLayout -cr false RRM_RigTab`;\n\t\n\t//TAB 1////////////////////////////////////////////////////////////////////////\n\trowColumnLayout -nc 2 -cw 1 385 -cw 2 385 RRM_ProxySteps;\n\t//STEP 1.1: Name\n\t\tframeLayout -label \"Step 1.1: Create Proxy Module Base\"\n\t\t\t-width 375\n\t\t\tRRM_ProxyCreateProxyBaseFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_ProxyCreateProxyBaseColumnLayout;\n\t\t\t\n\t\trowColumnLayout -nc 2 -columnWidth 1 110 -columnWidth 2 180;\n\t\t\tcheckBox -label \"Use Template:\"\n\t\t\t-v 0 -cc RRM_ToggleTemplate\n\t\t\tRRM_TemplateCheckBox;\n\t\t\toptionMenu -w 120\n\t\t\t-en 0\n\t\t\tRRM_TemplateType;\n\t\t\tmenuItem -label \"Bi-Ped (human)\";\n\t\t\tmenuItem -label \"Quadruped\";\n\t\t\tmenuItem -label \"Arachnid\";\n\t\t\tmenuItem -label \"Bird\";\n\t\t\tsetParent RRM_ProxyCreateProxyBaseColumnLayout;\n\n\t\tcolumnLayout;\n\t\t\tbutton -label \"Create\" -w 378 -bgc 0.7 0.7 0.7\n\t\t\t-command \"RRM_CreateProxyMainProxy(`checkBox -q -v RRM_TemplateCheckBox`)\";\n\n\t\t\tsetParent RRM_ProxyCreateProxyBaseColumnLayout;\n\t\t\n\tstring $RRM_ProxyTabs = `tabLayout -cr false -h 545 RRM_ProxyTabs`;\n\t//STEP 1.2\n\tcolumnLayout RRM_AddModules;\n\t\tframeLayout -label \"Step 1.2: Add Modules\"\n\t\tRRM_AddModulesFrameLayout;\n\t\t\tscrollLayout\n\t\t\t\t-w 376\n\t\t\t\t-h 499\n        \t\t-horizontalScrollBarThickness 16\n        \t\t-verticalScrollBarThickness   16\n        \t\taddModScrollLayout;\n        \t\t\n        columnLayout RRM_AddModulesColumnLayout;\n\n\t\t\n\t//RIBBON SPLINE\n\t\tframeLayout -label \"Ribbon Spline Options (Spine, Neck)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0.114 0.356 0.451\n\t\t\tRRM_SplineOptionsFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_SplineOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_SplineButton\" -aie 1 RRM_TextFieldSplineName;\n        \n        setParent..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 2\n\t\t\t-max 100\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4\n\t\t\tRRM_SplineNum;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 0\n\t\t\tRRM_SplineMirror;\n\t\t\t\n\t\tbutton -w 325 -label \"Create Spline\" -bgc 0.114 0.356 0.451\n\t\t\n\t\t-command \"RRM_SplinePrompts(\\\n\t\t`textField -q -text RRM_TextFieldSplineName`,\\\n\t\t`intSliderGrp -q -v RRM_SplineNum`,\\\n\t\t`checkBox -q -v RRM_SplineMirror`);\"\n\t\tRRM_SplineButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\t\n\t//ARM\n\t\tframeLayout -label \"Arm Options\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0 .275 .098\n\t\t\tRRM_ArmOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_ArmOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_ArmButton\" -aie 1 RRM_TextFieldArmName;\n        \n        setParent RRM_ArmOptionsColumnLayout;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_UpperArmNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_ForearmNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t/*-label \"Three Buttons\"*/ -labelArray2 \"One Elbow Joint\" \"Two Elbow Joints\"\n\t\t-sl 1 -cc RRM_ElbowNumLock RRM_ElbowJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_ElbowNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t/*-label \"Three Buttons\"*/ -labelArray3 \"Left\" \"Pair\" \"Right\"\n\t\t-sl 2 RRM_ArmMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Arm\" -bgc 0 .275 .098\n\t\t\n\t\t-command \"RRM_ArmPrompts(\\\n\t\t`textField -q -text RRM_TextFieldArmName`,\\\n\t\t`intSliderGrp -q -v RRM_UpperArmNum`,\\\n\t\t`intSliderGrp -q -v RRM_ForearmNum`,\\\n\t\t`intSliderGrp -q -v RRM_ElbowNum`,\\\n\t\t`radioButtonGrp -q -select RRM_ElbowJoints`,\\\n\t\t`radioButtonGrp -q -select RRM_ArmMirror`);\"\t\t\n\t\tRRM_ArmButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\t\t\n\t\t\n\t//LEG\n\t\tframeLayout -label \"Leg Options\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .631 .188 .412\n\t\t\tRRM_LegOptionsFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_LegOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_LegButton\" -aie 1 RRM_TextFieldLegName;\n        \n        setParent..;\n\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\t$RRM_UpperLegNum = `intSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_UpperLegNum`;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 RRM_LowerLegNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t/*-label \"Three Buttons\"*/ -labelArray2 \"One Knee Joint\" \"Two Knee Joints\"\n\t\t-sl 1 -cc RRM_KneeNumLock RRM_KneeJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_KneeNum;\n\t\t\t\n\t\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t/*-label \"Three Buttons\"*/ -labelArray2 \"Single\" \"Pair\"\n\t\t-sl 2 RRM_LegMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Leg\" -bgc .631 .188 .412\n\t\t\n\t\t-command \"RRM_LegPrompts(\\\n\t\t`textField -q -text RRM_TextFieldLegName`,\\\n\t\t`intSliderGrp -q -v RRM_UpperLegNum`,\\\n\t\t`intSliderGrp -q -v RRM_LowerLegNum`,\\\n\t\t`intSliderGrp -q -v RRM_KneeNum`,\\\n\t\t`radioButtonGrp -q -select RRM_KneeJoints`,\\\n\t\t`radioButtonGrp -q -select RRM_LegMirror`);\"\n\t\tRRM_LegButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\n\t\t\n\t//FK CHAINS\n\t\tframeLayout -label \"FK Chain Options (Fingers, Toes, Tail, Tentacle, Antenna)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .784 0 .784\n\t\t\tRRM_FKChainOptionsFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_FKChainOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_FKChainButton\" -aie 1 RRM_TextFieldFKChainName;\n        \n        setParent..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Chains\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 5 RRM_FkChain_Chains;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints per Chain\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4 RRM_FkChain_JointsPerChain;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-labelArray3 \"X Outward\" \"+Y\" \"+Z\" -sl 1 RRM_FkChainDirection;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-shareCollection RRM_FkChainDirection\n\t\t-labelArray3 \"X Inward\" \"-Y\" \"-Z\" RRM_FkChainDirection2;\n\t\t\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 1\n\t\t\tRRM_FkMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create FK Chain\" -bgc .784 0 .784\n\t\t\n\t\t-command \"RRM_FKChainPrompts(\\\n\t\t`textField -q -text RRM_TextFieldFKChainName`,\\\n\t\t`intSliderGrp -q -v RRM_FkChain_Chains`,\\\n\t\t`intSliderGrp -q -v RRM_FkChain_JointsPerChain`,\\\n\t\t`checkBox -q -v RRM_FkMirror`,\\\n\t\t`radioButtonGrp -q -select RRM_FkChainDirection`,\\\n\t\t`radioButtonGrp -q -select RRM_FkChainDirection2`);\"\n\t\tRRM_FKChainButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\n\t\n\t//HEAD\n\t\tframeLayout -label \"Head\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .608 0 .157\n\t\t\tRRM_HeadOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_HeadOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_HeadButton\" -aie 1 RRM_TextFieldHeadName;\n        \n        setParent..;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 10;\n\t    checkBox\n\t\t\t-label \"Jaw\"\n\t\t\t-value 1\n\t\t\tRRM_Jaw;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" -1;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 0\n\t\t\tRRM_HeadMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Head\" -bgc .608 0 .157\n\t\t\n\t\t-command \"RRM_HeadPrompts(\\\n\t\t`textField -q -text RRM_TextFieldHeadName`,\\\n\t\t`checkBox -q -v RRM_Jaw`,\\\n\t\t`checkBox -q -v RRM_HeadMirror`);\"\n\t\tRRM_HeadButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\t\t\n\t//LOOK-AT\n\t\tframeLayout -label \"Look-At Joints (Eyes, etc)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .435 .188 .631\n\t\t\tRRM_LookAtOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_LookAtOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_LookAtButton\" -aie 1 textFieldLookAtModName;\n        \n        setParent RRM_LookAtOptionsColumnLayout;\n                \n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 1 lookAtModJoints;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-labelArray3 \"X Outward\" \"+Y\" \"+Z\" -sl 3 RRM_LookAtDirection;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-shareCollection RRM_LookAtDirection\n\t\t-labelArray3 \"X Inward\" \"-Y\" \"-Z\" RRM_LookAtDirection2;\n\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 1\n\t\t\tlookAtModMirror;\n    \n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Look-At\" -bgc .435 .188 .631\n\t\t\n\t\t-command \"RRM_LookAtPrompts(\\\n\t\t`textField -q -text textFieldLookAtModName`,\\\n\t\t`intSliderGrp -q -v lookAtModJoints`,\\\n\t\t`checkBox -q -v lookAtModMirror`,\\\n\t\t`radioButtonGrp -q -select RRM_LookAtDirection`,\\\n\t\t`radioButtonGrp -q -select RRM_LookAtDirection2`);\"\n\t\tRRM_LookAtButton;\n\t\t\n\t\tsetParent RRM_AddModulesColumnLayout;\n\n\t//AUXILIARY\n\t\tframeLayout -label \"Auxiliary Joints (Single Joint)\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .639 .416 .169\n\t\t\tRRM_AuxiliaryOptionsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_AuxiliaryOptionsColumnLayout;\n\t\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 68 -columnWidth 2 276;\n\n\n        text -label \"Name\";\n        textField -enterCommand \"setFocus RRM_AuxiliaryButton\" -aie 1 textFieldAuxiliaryModName;\n        \n\t\tsetParent RRM_AuxiliaryOptionsColumnLayout;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t    checkBox\n\t\t\t-label \"Mirror Module\"\n\t\t\t-value 1\n\t\t\tAuxiliaryModMirror;\n\t\t\t\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 325 -label \"Create Auxiliary\" -bgc .639 .416 .169\n\n\t\t-command \"RRM_AuxiliaryPrompts(\\\n\t\t`textField -q -text textFieldAuxiliaryModName`,\\\n\t\t`checkBox -q -v AuxiliaryModMirror`);\"\n\t\tRRM_AuxiliaryButton;\n\n\t\tsetParent RRM_AuxiliaryOptionsColumnLayout;\n\n        setParent RRM_ProxyTabs;\n\n\t\n\t//STEP 1.3\n\tcolumnLayout RRM_EditModules;\n\t\tframeLayout -label \"Step 1.3: Edit Modules\" RRM_EditModuleFrameLayout;\n\t\t\tscrollLayout\n\t\t\t\t-w 376\n\t\t\t\t-h 499\n        \t\t-horizontalScrollBarThickness 16\n        \t\t-verticalScrollBarThickness   16\n        \t\t-bgc .45 .45 .45\n        \t\tRRM_EditScrollFrameLayout;\n        \t\t\n        \tcolumnLayout RRM_EditScrollColumnLayout;\n\t\t\n\t//EDIT SPLINE\n\t\tframeLayout -label \"Edit Ribbon Splines\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0.114 0.356 0.451\n\t\t\tRRM_EditSplineFrameLayout;\n\t\t\t\n\t\t\tcolumnLayout RRM_EditSplineColumnLayout;\n\t\n\t    columnLayout;\n        textFieldButtonGrp -label \" Spline Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"spline\\\" )\" RRM_EditLoadsplineTextField;\n\n\n\t\tsetParent ..;\n\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 2\n\t\t\t-max 99\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4\n\t\t\tRRM_SplineEditNum;\n\t\t\t\n\t\tsetParent ..;\n\t\tcolumnLayout;\n\t\tbutton -label \"Apply Edits to Loaded Spline\" -w 340 -bgc 0.114 0.356 0.451 -command RRM_EditSpline;\n\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\n\t//EDIT ARM\n\t\tframeLayout -label \"Edit Arms\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0 .275 .098\n\t\t\tRRM_EditArmsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_EditArmsColumnLayout;\n\t\n\n\t    columnLayout;\n        textFieldButtonGrp -label \" Arm Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"arm\\\" )\" RRM_EditLoadarmTextField;\n\n\n\t\tsetParent ..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 upperArmModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 forearmModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t-labelArray2 \"One Elbow Joint\" \"Two Elbow Joints\"\n\t\t-sl 1 -cc RRM_ElbowEditNumLock RRM_ElbowEditJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_ElbowEditNum;\n\t\t\n\t\tsetParent ..;\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -label \"Apply Edits to Loaded Arm\" -w 340 -bgc 0 .275 .098 -command RRM_EditArm;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\t\n\t//EDIT LEGS\n\t\tframeLayout -label \"Edit Legs\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .631 .188 .412\n\t\t\tRRM_EditLegsFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_EditLegsColumnLayout;\n\t\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n        textFieldButtonGrp -label \" Leg Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"leg\\\" )\" RRM_EditLoadlegTextField;\n\n\n\t\tsetParent ..;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Upper Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 upperLegModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Lower Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0 lowerLegModEditNum;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tradioButtonGrp -numberOfRadioButtons 2\n\t\t-labelArray2 \"One Knee Joint\" \"Two Knee Joints\"\n\t\t-sl 1 -cc RRM_KneeEditNumLock RRM_KneeEditJoints;\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 0\n\t\t\t-max 4\n\t\t\t-label \"Mid Roll Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 0\n\t\t\t-en 0 RRM_KneeEditNum;\n\t\t\n\t\tsetParent ..;\n\t\tcolumnLayout;\n\t\tbutton -label \"Apply Edits to Loaded Leg\" -w 340 -bgc .631 .188 .412 -command RRM_EditLeg;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\t\n\t\t\n\t//EDIT FK CHAINS\n\t\tframeLayout -label \"Edit FK Chains\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .784 0 .784\n\t\t\tRRM_EditFKChainFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_EditFKChainColumnLayout;\n\t\n\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n        textFieldButtonGrp -label \" Fk Chain Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"fkChain\\\" )\" RRM_EditLoadfkChainTextField;\n        \n        setParent..;\n\n\n\t\tcolumnLayout -cw 200 -cat \"left\" 5;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Chains\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 5 fkChainModEditChains;\n\t\t\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0;\n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints per Chain\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 4 fkChainModEditJointsPerChain;\n\t\t\t\n\t\tcolumnLayout -cw 350 -cat \"left\" 0;\n\t\tbutton -w 340 -label \"Apply Edits to Loaded FK Chain\" -bgc .784 0 .784 -command RRM_EditFkChain;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\n\t\n\t//EDIT HEAD\n\t\tframeLayout -label \"Edit Head\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc 0.529 0.162 0.199\n\t\t\tRRM_EditHeadFrameLayout;\n\t\n\t    columnLayout;\n        textFieldButtonGrp -label \" Head Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"head\\\" )\" RRM_EditLoadheadTextField;\n\n\t\tbutton -label \"Toggle Jaw\" -w 340 -bgc 0.529 0.162 0.199 -command RRM_EditHead;\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\n\t\t\n\t//EDIT LOOK-AT\n\t\tframeLayout -label \"Edit Look-Ats\"\n\t\t\t-width 350\n\t\t\t-collapsable 1\n\t\t\t-bgc .435 .188 .631\n\t\t\tRRM_EditLookAtFrameLayout;\n\t\n\t    columnLayout;\n        textFieldButtonGrp -label \" Look-At Name:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 95 205 50 -bc \"RRM_EditLoadParent(\\\"lookAt\\\" )\" RRM_EditLoadlookAtTextField;\n\n        \n\t\tintSliderGrp\n\t\t\t-min 1\n\t\t\t-label \"Joints\"\n\t\t\t-field true\n\t\t\t-cal 1 center\n\t\t\t-cw 1 90\n\t\t\t-value 1 lookAtModEditJoints;\n\t\t\t\n\t\tbutton -label \"Apply Edits to Loaded Look-At\" -w 340 -bgc .435 .188 .631 -command RRM_EditLookAt;\n\n\t\t\n\t\tsetParent RRM_EditScrollColumnLayout;\n\t\tsetParent..;\n\n\t\t\n        \n        tabLayout -edit -h 545 -tabLabel RRM_AddModules \"Create Modules\" -tabLabel RRM_EditModules \"Edit Modules\" $RRM_ProxyTabs;\n        \n        setParent RRM_ProxySteps;\n\n    \n    //STEP 2.1 CHANGE PROXY COLOURS\n    columnLayout RRM_ModifyProxies;\n\t\tframeLayout -label \"Step 2.1 Override Selected Proxy Branch Color\" -bgc .25 .25 .25 RRM_ControlColorOverrides;\n\t\trowColumnLayout -nc 16 -bgc .25 .25 .25 -w 384;\n\t\tbutton -bgc  .471 .471 .471\t\t-label \"D\" -w 24 -ann \"0\"  -c \"RRM_ProxyOverrideColor(00)\";\n\t\tbutton -bgc  0 0 0\t\t\t\t-label \"\"  -w 24 -ann \"1\"  -c \"RRM_ProxyOverrideColor(01)\";\n\t\tbutton -bgc  .251 .251 .251\t\t-label \"\"  -w 24 -ann \"2\"  -c \"RRM_ProxyOverrideColor(02)\";\n\t\tbutton -bgc  .502 .502 .502\t\t-label \"\"  -w 24 -ann \"3\"  -c \"RRM_ProxyOverrideColor(03)\";\n\t\tbutton -bgc  .608 0 .157\t\t-label \"\"  -w 24 -ann \"4\"  -c \"RRM_ProxyOverrideColor(04)\";\n\t\tbutton -bgc  0 .016 .376\t\t-label \"\"  -w 23 -ann \"5\"  -c \"RRM_ProxyOverrideColor(05)\";\n\t\tbutton -bgc  0 0 1\t\t\t\t-label \"\"  -w 23 -ann \"6\"  -c \"RRM_ProxyOverrideColor(06)\";\n\t\tbutton -bgc  0 .275 .098\t\t-label \"\"  -w 23 -ann \"7\"  -c \"RRM_ProxyOverrideColor(07)\";\n\t\tbutton -bgc  .149 0 .263\t\t-label \"\"  -w 23 -ann \"8\"  -c \"RRM_ProxyOverrideColor(08)\";\n\t\tbutton -bgc  .784 0 .784\t\t-label \"\"  -w 23 -ann \"9\"  -c \"RRM_ProxyOverrideColor(09)\";\n\t\tbutton -bgc  .541 .282 .2\t\t-label \"\"  -w 24 -ann \"10\" -c \"RRM_ProxyOverrideColor(10)\";\n\t\tbutton -bgc  .247 .137 .122\t\t-label \"\"  -w 24 -ann \"11\" -c \"RRM_ProxyOverrideColor(11)\";\n\t\tbutton -bgc  .6 .149 0\t\t\t-label \"\"  -w 24 -ann \"12\" -c \"RRM_ProxyOverrideColor(12)\";\n\t\tbutton -bgc  1 0 0\t\t\t\t-label \"\"  -w 24 -ann \"13\" -c \"RRM_ProxyOverrideColor(13)\";\n\t\tbutton -bgc  0 1 0\t\t\t\t-label \"\"  -w 24 -ann \"14\" -c \"RRM_ProxyOverrideColor(14)\";\n\t\t\n\t\tbutton -bgc  0 .255 .6\t\t\t-label \"\"  -w 24 -ann \"15\" -c \"RRM_ProxyOverrideColor(15)\";\n\t\tbutton -bgc  1 1 1\t\t\t\t-label \"\"  -w 24 -ann \"16\" -c \"RRM_ProxyOverrideColor(16)\";\n\t\tbutton -bgc  1 1 0\t\t\t\t-label \"\"  -w 24 -ann \"17\" -c \"RRM_ProxyOverrideColor(17)\";\n\t\tbutton -bgc  .392 .863 1\t\t-label \"\"  -w 24 -ann \"18\" -c \"RRM_ProxyOverrideColor(18)\";\n\t\tbutton -bgc  .263 1 .639\t\t-label \"\"  -w 24 -ann \"23\" -c \"RRM_ProxyOverrideColor(23)\";\n\t\tbutton -bgc  1 .69 .69\t\t\t-label \"\"  -w 23 -ann \"20\" -c \"RRM_ProxyOverrideColor(20)\";\n\t\tbutton -bgc  .967 .675 .475\t\t-label \"\"  -w 23 -ann \"21\" -c \"RRM_ProxyOverrideColor(21)\";\n\t\tbutton -bgc  1 1 .388\t\t\t-label \"\"  -w 23 -ann \"22\" -c \"RRM_ProxyOverrideColor(22)\";\n\t\tbutton -bgc  0 .6 .329\t\t\t-label \"\"  -w 23 -ann \"23\" -c \"RRM_ProxyOverrideColor(23)\";\n\t\tbutton -bgc  .631 .412 .188\t\t-label \"\"  -w 23 -ann \"24\" -c \"RRM_ProxyOverrideColor(24)\";\n\t\tbutton -bgc  .624 .631 .188\t\t-label \"\"  -w 23 -ann \"25\" -c \"RRM_ProxyOverrideColor(25)\";\n\t\tbutton -bgc  .408 .631 .188\t\t-label \"\"  -w 23 -ann \"26\" -c \"RRM_ProxyOverrideColor(26)\";\n\t\tbutton -bgc  .188 .631 .365\t\t-label \"\"  -w 24 -ann \"27\" -c \"RRM_ProxyOverrideColor(27)\";\n\t\tbutton -bgc  .188 .631 .631\t\t-label \"\"  -w 24 -ann \"28\" -c \"RRM_ProxyOverrideColor(28)\";\n\t\tbutton -bgc  .188 .404 .631\t\t-label \"\"  -w 24 -ann \"29\" -c \"RRM_ProxyOverrideColor(29)\";\n\t\tbutton -bgc  .435 .188 .631\t\t-label \"\"  -w 24 -ann \"30\" -c \"RRM_ProxyOverrideColor(30)\";\n\t\tbutton -bgc  .631 .188 .412\t\t-label \"\"  -w 24 -ann \"31\" -c \"RRM_ProxyOverrideColor(31)\";\n\n\t\tsetParent RRM_ModifyProxies;\n\t\n\n\t//STEP 2.2 RENAME MODULE\n\t\tframeLayout -label \"Step 2.2: Rename Selected Module\"\n\t\t\t-width 384\n\t\t\t-bgc -.35 .35 .35\n\t\t\tRRM_RenameModFrameLayout;\n\t\n\t    columnLayout \n\t    -bgc .35 .35 .35\n\t    RRM_RenameModColumnLayout;\n    \n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 120 -columnWidth 2 258;\n    \n\t    text -label \"Module's New Name: \";\n\t\ttextField -enterCommand \"setFocus RRM_RenameButton\" -aie 1 textFieldRenameName;\n\t\t\n\t    setParent RRM_RenameModColumnLayout;\n\t    \n\t    columnLayout;\n\t    \t\t\t\t\n\t\tbutton -label \"Rename Selected Module\" -w 368 -command \"RRM_ClonePrompts(\\\n\t\t`textField -q -text textFieldRenameName`,\\\n\t\t0, 0);\"\n\t\tRRM_RenameButton;\n\t\t\n\t\tsetParent RRM_ModifyProxies;\n  \n\t\t\n\t//STEP 2.3 CLONE MODULE\n\t\tframeLayout -label \"Step 2.3: Clone Selected Module\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_CloneModFrameLayout;\n\t\n\t    columnLayout\n\t    -bgc .25 .25 .25 RRM_CloneModColumnLayout;\n\n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 132 -columnWidth 2 246;\n\n\t    text -label \"Cloned Module's Name: \";\n\t\ttextField -enterCommand \"setFocus RRM_CloneButton\" -aie 1 textFieldCloneName;\n\t\t\n\t    setParent RRM_CloneModColumnLayout;\n\t    \n\t    rowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n\t    \t-columnWidth 1 128 -columnWidth 2 248;\n\t    \t\n\t    checkBox\n\t\t\t-label \"Include branches\"\n\t\t\t-value 1\n\t\t\tRRM_CloneBranchCheckBox;\n\t\t\t\n\t\tbutton -label \"Clone Selected Module\" -w 185 -command \"RRM_ClonePrompts(\\\n\t\t`textField -q -text textFieldCloneName`,\\\n\t\t`checkBox -q -v RRM_CloneBranchCheckBox`,1);\"\n\t\tRRM_CloneButton;\n\t\t\n\t\tsetParent RRM_ModifyProxies;\n      \n\n\t\t//STEP 2.4 RE-TARGET\n\t\tframeLayout -label \"Step 2.4: Attach Module to New Node\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_RetargetModFrameLayout;\n\t\t\n\t\tcolumnLayout -bgc .35 .35 .35;\n        textFieldButtonGrp -label \" New Attach Module:\" -buttonLabel \"Load\" -cal 1 \"left\" -columnWidth3 114 220 80 -bc RRM_LoadNewModuleAttachNode RRM_LoadNewModuleAttachNodeTextField;\n        button -label \"Attach Selected Modules to New Module\" -w 376\n        -command \"RRM_AttachToNewModule (`textFieldButtonGrp -q -text RRM_LoadNewModuleAttachNodeTextField`)\";\n      \n\t\t\tsetParent RRM_ModifyProxies;\n\t\t\t\n\t\t//STEP 2.5 DELETE MODULE\n\t\tframeLayout -label \"Step 2.5: Delete Module\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_DeleteModFrameLayout;\n\t\n\t\t//DELETE\n\t\tcolumnLayout -bgc .25 .25 .25;\n\t\tbutton -label \"Delete Selected Module and Branches\" -w 379 -bgc .5 0.0 0.0 -command RRM_DeleteBranchPrompts;\n\t\tsetParent RRM_ModifyProxies;\n\t\t\n\t\t//STEP 2.6 POSE\n\t\tframeLayout -label \"Step 2.6: Pose Proxy Rig (Does not affect ROOT or Parent nodes)\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_PoseProxyFrameLayout;\n\t\n\t\tcolumnLayout -cw 200 -cat \"left\" 0 -bgc .35 .35 .35;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t/*-label \"Three Buttons\"*/ -labelArray3 \"Selected\" \"Branch\" \"All\"\n\t\t-sl 1 RRM_ResetSelection;\n\t\t\n\t\trowColumnLayout -nc 3 -cw 1 126 -cw 2 127 -cw 3 126;\n\t\t\tbutton -label \"Right to Left\"\n\t\t\t-command \"RRM_RightToLeftProxies (`radioButtonGrp -q -select RRM_ResetSelection`)\"\n\t\t\tRRM_RightToLeftProxies;\n\t\t\tbutton -label \"Reset\"\n\t\t\t-command \"RRM_ResetProxies (`radioButtonGrp -q -select RRM_ResetSelection`)\"\n\t\t\tRRM_ResetProxies;\t\t\n\t\t\tbutton -label \"Left to Right\"\n\t\t\t-command \"RRM_LeftToRightProxies (`radioButtonGrp -q -select RRM_ResetSelection`)\"\n\t\t\tRRM_LeftToRightProxies;\n\t\n\t\t\tsetParent RRM_ModifyProxies;\n\n\t\t\t\n\t//STEP 2.7 PINNING\n\t\tframeLayout -label \"Step 2.7: Pinning (pinned modules are not influenced by parent)\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_PinProxyFrameLayout;\n\t\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 189 -cw 2 189 -bgc .25 .25 .25;\n\t\t\tbutton -label \"Pin Module\" -bgc 0.780 0.330 0.330\n\t\t\t-command \"RRM_PinProxies(1, 0)\";\n\t\t\tbutton -label \"Unpin Module\" -bgc 0.330 0.420 0.780\n\t\t\t-command \"RRM_PinProxies(0, 1)\";\t\t\n\t\n\t\t\tsetParent RRM_ModifyProxies;\n\t\n\t\n\t//STEP 2.8 TRANSFER\n\t\tframeLayout -label \"Step 2.8: Transfer Transforms  *Select Target Then Destination*\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_TransferProxyTransformsFrameLayout;\n\t\t\t\n\t\tcolumnLayout \n\t\t-bgc .35 .35 .35 RRM_TransferProxyTransformsColumnLayout;\n\t\n\t\trowColumnLayout -nc 2 -cw 1 220 -cw 2 150\n\t\t-bgc .35 .35 .35;\n\t\t\t$selectedOrBranch = `radioButtonGrp -numberOfRadioButtons 2\n\t\t\t-labelArray2 \"Selected\" \"Branch\"\n\t\t\t-sl 1\n\t\t\t-cc RRM_ToggleTransferParent\n\t\t\tRRM_TransferSelectionButton`;\n\t\t\t\n\t\t\t$transferParentCheck = `checkBox -v 0 -label \"Include Parent\" -ed 0 RRM_TransferParent`;\n\t\t\n\t\t\tsetParent RRM_TransferProxyTransformsColumnLayout;\n\t\tcolumnLayout ;//-cw 370 -cat \"left\" 5;\n\t\t\tbutton -label \"Transfer\"\n\t\t\t-width 378\n\t\t\t-bgc .35 .35 .35\n\t\t\t-command \"RRM_TransferModTransforms\"\n\t\t\tRRM_TransferModTransformsButton;\n\n\t\tsetParent RRM_ModifyProxies;\n\n\t\t\t\n\t\t//STEP 2.9 SAVE LOAD\n\t\tframeLayout -label \"Step 2.9: Save/Load Proxy Transforms\"\n\t\t\t-width 384\n\t\t\t-bgc .25 .25 .25\n\t\t\tRRM_SaveLoadProxyTransformsFrameLayout;\n\t\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 189 -cw 2 189\n\t\t\t-bgc .25 .25 .25;\n\t\t\tbutton -label \"Save Transforms\"       \n\t\t\t-command \"RRM_WritePathProxyTransforms\";\n\t\t\tbutton -label \"Load Transforms\"\n\t\t\t-command \"RRM_ReadPathProxyTransform\";\t\t\n\t\n\t\t\tsetParent RRM_ModifyProxies;\n\t\t\t\n\t\t\t\n\t\t//STEP 2.10 SAVE LOAD\n\t\tframeLayout -label \"Step 2.10: Save/Load Proxy Setup\"\n\t\t\t-width 384\n\t\t\t-bgc .35 .35 .35\n\t\t\tRRM_SaveLoadProxySetupFrameLayout;\n\t\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 189 -cw 2 189\n\t\t\t-bgc .35 .35 .35;\n\t\t\tbutton -label \"Save Setup\"       \n\t\t\t-command \"RRM_WritePathProxySetup\";\n\t\t\tbutton -label \"Load Setup\"\n\t\t\t-command \"RRM_ReadPathProxySetup\";\t\t\n\t\n\t\t\t\n\t\t\tsetParent RRM_RigTab;\n\t\n\t\n\t//TAB 2////////////////////////////////////////////////////////////////////////\n\trowColumnLayout -nc 2 -cw 1 355 -cw 2 415 RRM_RigSteps;\n\t//STEP 3.1\n\t\tframeLayout -label \"Step 3.1: Character Name\"\n\t\t\t-width 355 RRM_GenerateRigFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_GenerateRigColumnLayout;\n\t\t\n\t\tcolumnLayout -cw 355 -cat \"left\" 1;\n\t\t$charModName = `textField\n\t\t\t-width 345 RRM_TextFieldCharName`;\n\t\t\t\n\t\t\tsetParent RRM_GenerateRigColumnLayout;\n\n\t\t\n\t//STEP 3.2\n\t\tframeLayout -label \"Step 3.2: Create Character Rig\"\n\t\t\t-width 355\n\t\t\tRRM_CreateRigFrameLayout;\n\t\n\t\t\tbutton -bgc .30 .65 .30 -label \"Generate Modular Rig\"\n\t\t\t-command \"RRM_GenerateRigPrompts\"\n\t\t\tRRM_GenerateRigPromptsButton;\n\t\n\t\t\tsetParent RRM_GenerateRigColumnLayout;\n\t\n\t//STEP 3.3\n\t\tframeLayout -label \"Step 3.3: Skin Geometry to Rig\"\n\t\t\t-width 355\n\t\t\tRRM_SelectSkinningJointsFrameLayout;\n\t\t\n\t\t\tcolumnLayout RRM_SelectSkinningJointsColumnLayout;\n\t\n\t\t\ttextFieldButtonGrp -buttonLabel \"Load Rig\"\n\t\t\t-cal 1 \"left\"\n\t\t\t-columnWidth2 290 70\n\t\t\t-ann \"Select a control of the Rapid Rig you want to load\"\n\t\t\t-buttonCommand \"RRM_LoadRig\"\n\t\t\tRRM_LoadRigTextFieldButtonGrp;\n\t\t\t\n\t\t\tcolumnLayout -cw 355 -cat \"left\" 5;\n\t\t\t\n\t\t\tsetParent..;\n\n\t\t\tbutton -w 350 -label \"Select Skinning Joints\"\n\t\t\t-command \"RRM_SelectJoints(`textFieldButtonGrp -q -tx RRM_LoadRigTextFieldButtonGrp`)\"\n\t\t\tRRM_SelectJointsButton;\n\t\n\t\tsetParent RRM_GenerateRigColumnLayout;\n\t\t\n\t//STEP 3.4\n\tframeLayout -label \"Step 3.4: Character Set Creation\"\n\t\t-width 355\n\t\tRRM_CreateCharacterSetFrameLayout;\n\t\t\n\t\tcolumnLayout RRM_CreateCharacterSetColumnLayout;\n\t\tcheckBox -label \"Create Subcharacter Set for Each Module\" RRM_SubCharacterCheckBox;\n\t\t\n\t\tbutton -w 350 -label \"Create Character Set\"\n\t\t\t-ann \"Select MAINC of the Rig you want to create the character set for.\"\n\t\t\t-command \"RRM_CreateCharacterSet(`checkBox -q -v RRM_SubCharacterCheckBox`)\"\n\t\t\tRRM_CreateCharacterSetButton;\t\t\n\t\n\t\tsetParent RRM_RigSteps;\n\n\t//STEP 4.1\n\t\tcolumnLayout \"RRM_Tab2_RightColumn\";\n\t\tframeLayout -label \"Step 4.1: Resize Controllers\"\n\t\t\t-width 415\n\t\t\tRRM_ResizeControllersFrameLayout;\n\t\t\t\n\t\tcolumnLayout -cw 415 -cat \"left\" 0;\n\n        rowColumnLayout -nc 2 -cw 1 340 -cw 2 75;\n\t\tradioButtonGrp -numberOfRadioButtons 3\n\t\t-labelArray3 \"Selected\" \"Branch\" \"All\"\n\t\t-sl 1\n\t\t-cc RRM_ControlEnableDisableMirror\n\t\tRRM_ControlScaleSelection;\n\t\t\n\t\tcheckBox -label \"Mirror\"\n\t\t-v 1 -enable 1 RRM_ControlMirror;\n\t\tsetParent..;\t\t\n\n\t\tcolumnLayout -cal \"left\";\n\t\tcheckBox -label \"Uniform Scale\"\n\t\t-v 1 -enable 1\n\t\t-cc RRM_ControlEnableDisableUniformScales\n\t\tRRM_ControlUniformScale;\n\t\t\n\t\tcheckBoxGrp -numberOfCheckBoxes 3\n\t\t-label \"Local Axes:\"\n\t\t-labelArray3 \"X\" \"Y\" \"Z\"\n\t\t-valueArray3 1 1 1\n\t\t-en1 0 -en2 0 -en3 0\n\t\tRRM_ControlScaleAxes;\n\t\t\n\t\t\n\t\tfloatSliderGrp -label \"Scale Factor:\" -field true\n\t\t-min 0.1 -max 2 -fieldMaxValue 10 -value 1\n\t\t-precision 3\n\t\tRRM_ControlScaleChange;\n\t\tsetParent..;\n\t\tcolumnLayout;\n\t\tbutton -label \"Scale Control(s)\"\n\t\t-width 410\n\t\t-command \"RRM_ControlScale(`floatSliderGrp -query -value RRM_ControlScaleChange`,\\\n\t\t`radioButtonGrp -q -select RRM_ControlScaleSelection`,\\\n\t\t`checkBox -q -v RRM_ControlMirror`,\\\n\t\t`checkBox -q -v RRM_ControlUniformScale`,\\\n\t\t`checkBoxGrp -q -value1 RRM_ControlScaleAxes`,\\\n\t\t`checkBoxGrp -q -value2 RRM_ControlScaleAxes`,\\\n\t\t`checkBoxGrp -q -value3 RRM_ControlScaleAxes`);\"\n\t\tRRM_ControlScaleButton;\n\t\t\n\t\tsetParent RRM_Tab2_RightColumn;\n\t\t\n\t//STEP 4.2: SAVE CONTROLS\n\t\tframeLayout -label \"Step 3.5: Save & Load Control Shapes and Colors\" -width 415 RRA_SaveLoadControlShapes;\n\t\trowColumnLayout -nc 2;\n\t\tbutton -label \"Save Shapes and Colors\" -w 206 -c \"RRM_WriteControlShapes\";\n\t\tbutton -label \"Load Shapes and Colors\" -w 206 -c \"RRM_ReadControlShapes\";\n\t\t\n\t\tsetParent RRM_Tab2_RightColumn;\n\t\t\n\t//STEP 4.3\n\t\tframeLayout -label \"Step 3.6: Override Control Color\" RRM_ControlColorOverrides;\n\t\trowColumnLayout -nc 16;\n\t\tbutton -bgc  .471 .471 .471\t\t-label \"D\" -w 25 -ann \"0\"  -c \"RRM_ControlOverrideColor(00)\";\n\t\tbutton -bgc  0 0 0\t\t\t\t-label \"\"  -w 25 -ann \"1\"  -c \"RRM_ControlOverrideColor(01)\";\n\t\tbutton -bgc  .251 .251 .251\t\t-label \"\"  -w 25 -ann \"2\"  -c \"RRM_ControlOverrideColor(02)\";\n\t\tbutton -bgc  .502 .502 .502\t\t-label \"\"  -w 25 -ann \"3\"  -c \"RRM_ControlOverrideColor(03)\";\n\t\tbutton -bgc  .608 0 .157\t\t-label \"\"  -w 25 -ann \"4\"  -c \"RRM_ControlOverrideColor(04)\";\n\t\tbutton -bgc  0 .016 .376\t\t-label \"\"  -w 25 -ann \"5\"  -c \"RRM_ControlOverrideColor(05)\";\n\t\tbutton -bgc  0 0 1\t\t\t\t-label \"\"  -w 25 -ann \"6\"  -c \"RRM_ControlOverrideColor(06)\";\n\t\tbutton -bgc  0 .275 .098\t\t-label \"\"  -w 25 -ann \"7\"  -c \"RRM_ControlOverrideColor(07)\";\n\t\tbutton -bgc  .149 0 .263\t\t-label \"\"  -w 25 -ann \"8\"  -c \"RRM_ControlOverrideColor(08)\";\n\t\tbutton -bgc  .784 0 .784\t\t-label \"\"  -w 25 -ann \"9\"  -c \"RRM_ControlOverrideColor(09)\";\n\t\tbutton -bgc  .541 .282 .2\t\t-label \"\"  -w 25 -ann \"10\" -c \"RRM_ControlOverrideColor(10)\";\n\t\tbutton -bgc  .247 .137 .122\t\t-label \"\"  -w 25 -ann \"11\" -c \"RRM_ControlOverrideColor(11)\";\n\t\tbutton -bgc  .6 .149 0\t\t\t-label \"\"  -w 25 -ann \"12\" -c \"RRM_ControlOverrideColor(12)\";\n\t\tbutton -bgc  1 0 0\t\t\t\t-label \"\"  -w 25 -ann \"13\" -c \"RRM_ControlOverrideColor(13)\";\n\t\tbutton -bgc  0 1 0\t\t\t\t-label \"\"  -w 25 -ann \"14\" -c \"RRM_ControlOverrideColor(14)\";\n\t\tbutton -bgc  0 .255 .6\t\t\t-label \"\"  -w 25 -ann \"15\" -c \"RRM_ControlOverrideColor(15)\";\n\t\tbutton -bgc  1 1 1\t\t\t\t-label \"\"  -w 25 -ann \"16\" -c \"RRM_ControlOverrideColor(16)\";\n\t\tbutton -bgc  1 1 0\t\t\t\t-label \"\"  -w 25 -ann \"17\" -c \"RRM_ControlOverrideColor(17)\";\n\t\tbutton -bgc  .392 .863 1\t\t-label \"\"  -w 25 -ann \"18\" -c \"RRM_ControlOverrideColor(18)\";\n\t\tbutton -bgc  .263 1 .639\t\t-label \"\"  -w 25 -ann \"19\" -c \"RRM_ControlOverrideColor(19)\";\n\t\tbutton -bgc  1 .69 .69\t\t\t-label \"\"  -w 25 -ann \"20\" -c \"RRM_ControlOverrideColor(20)\";\n\t\tbutton -bgc  .967 .675 .475\t\t-label \"\"  -w 25 -ann \"21\" -c \"RRM_ControlOverrideColor(21)\";\n\t\tbutton -bgc  1 1 .388\t\t\t-label \"\"  -w 25 -ann \"22\" -c \"RRM_ControlOverrideColor(22)\";\n\t\tbutton -bgc  0 .6 .329\t\t\t-label \"\"  -w 25 -ann \"23\" -c \"RRM_ControlOverrideColor(23)\";\n\t\tbutton -bgc  .631 .412 .188\t\t-label \"\"  -w 25 -ann \"24\" -c \"RRM_ControlOverrideColor(24)\";\n\t\tbutton -bgc  .624 .631 .188\t\t-label \"\"  -w 25 -ann \"25\" -c \"RRM_ControlOverrideColor(25)\";\n\t\tbutton -bgc  .408 .631 .188\t\t-label \"\"  -w 25 -ann \"26\" -c \"RRM_ControlOverrideColor(26)\";\n\t\tbutton -bgc  .188 .631 .365\t\t-label \"\"  -w 25 -ann \"27\" -c \"RRM_ControlOverrideColor(27)\";\n\t\tbutton -bgc  .188 .631 .631\t\t-label \"\"  -w 25 -ann \"28\" -c \"RRM_ControlOverrideColor(28)\";\n\t\tbutton -bgc  .188 .404 .631\t\t-label \"\"  -w 25 -ann \"29\" -c \"RRM_ControlOverrideColor(29)\";\n\t\tbutton -bgc  .435 .188 .631\t\t-label \"\"  -w 25 -ann \"30\" -c \"RRM_ControlOverrideColor(30)\";\n\t\tbutton -bgc  .631 .188 .412\t\t-label \"\"  -w 25 -ann \"31\" -c \"RRM_ControlOverrideColor(31)\";\n\t\t\n\t\t\t\n\t\t\tsetParent RRM_RigSteps;\n\t\t\tsetParent ..;\n\t//TAB 3////////////////////////////////////////////////////////////////////////\t\n\trowColumnLayout -nc 2 -cw 1 355 -cw 2 415 RRM_RigExtras;\n\t\n\t\tframeLayout -label \"Step 5.1: Delete the Proxy Rig\"\n\t\t\t-width 355\n\t\t\tRRM_DeleteProxyRigFrameLayout;\n\t\t\t\n\t\tcolumnLayout RRM_DeleteProxyRigColumnLayout;\n\n\t\t\t\n\t\t\t//STEP 5.1\n\t\t\tbutton -label \"Delete Proxies\" -w 354\n\t\t\t-bgc .8 0.25 0.25\n\t\t\t-ann \"This will delete your proxy rig once you have no further use for it.\"\n\t\t\t-command \"RRM_DeleteProxyRig\"\n\t\t\tRRM_DeleteProxyRigButton;\n\t\t\t\n\t\t\t\n\t\t\tsetParent RRM_DeleteProxyRigColumnLayout;\n\t\t\t\n\t\t\t//STEP 5.2\n\t\tframeLayout -label \"Step 5.2: Select Any Control to Delete the Entire Rig\"\n\t\t\t-width 355\n\t\t\tRRM_DeleteModularRigFrameLayout;\n\t\t\t\n\t\tbutton -label \"Delete Rig\"\n\t\t-bgc .8 0.25 0.25\n\t\t-annotation \"Select a control of your rig and click this button to delete that rig.\"\n\t\t-command \"RRM_DeleteRigUI\"\n\t\tRRM_DeleteRigUIButton;\n\t\t\n\t\tsetParent RRM_DeleteProxyRigColumnLayout;\n\n\t\t//STEP 5.3\n\t\tframeLayout -label \"Rapid Rig Info\"\n\t\t\t-width 355\n\t\t\tRRM_RapidRigInfoFrameLayout;\n\t\t\t\n\t\tcolumnLayout -cw 355;\n\n\t\tcolumnLayout -cw 50 -cat \"left\" 5;\n\t\tbutton -w 355 -label \"RRM Version Number\"\n\t\t-annotation \"Select the Main Control and click this button to see what version your rig is.\"\n\t\t-command \"RRM_GetVersionNumber\"\n\t\tRRM_GetVersionNumberButton;\n\t\t\n\t\tbutton -w 355 -label \"Go To \\\"Rapid Rig: Modular\\\" Web Page\"\n\t\t-annotation \"Go to the CreativecCrash webpage for Rapid Rig: Modular.\"\n\t\t-command \"RRM_GoToCreativeCrash\"\n\t\tRRM_GoToCreativeCrashButton;\n\t\t\n\t\t\n\t\ttext -label \"\\n\\n\\n\\n                email me with questions and feedback:\\n\\n                             dustin@rapidrig.com\\n\\n\\n\" -align \"left\";\n\t\n\t\n\t\t//STEP 6\n\t\t\tsetParent RRM_DeleteProxyRigColumnLayout;\n\t\t\tsetParent RRM_RigExtras;\n\t\t\tframeLayout -label \"Rename Single Hierarchy to Match Motionbuilder Naming\"\n\t\t\t-w 415 RRM_RenameSHJointsFrameLayout;\n\t\t\t\n\t\t\trowColumnLayout -nc 2 -cw 1 205 -cw 2 205;\n\t\t\tbutton -label \"Rename Head\" -ann \"Select a joint to rename to Head\" -c RRM_SH_RenameHead;\n\t\t\tbutton -label \"Rename Neck\" -ann \"Select the first joint of a chain to rename to Neck\" -c RRM_SH_RenameNeck;\n\t\t\tbutton -label \"Rename Spine\" -ann \"Select the first joint of a chain to rename to Spine\" -c RRM_SH_RenameSpline;\n\t\t\tbutton -label \"Rename Hips\"  -ann \"Select a joint to rename to Hips\" -c RRM_SH_RenameHips;\n\t\t\tbutton -label \"Rename Left Arm\"  -ann \"Select clavicle joint of an Arm\" -c RRM_SH_RenameLeftArm;\n\t\t\tbutton -label \"Rename Right Arm\" -ann \"Select clavicle joint of an Arm\" -c RRM_SH_RenameRightArm;\n\t\t\tbutton -label \"Rename Left Leg\"  -ann \"Select hip joint of a Leg\" -c RRM_SH_RenameLeftLeg;\n\t\t\tbutton -label \"Rename Right Leg\" -ann \"Select hip joint of a Leg\" -c RRM_SH_RenameRightLeg;\n\t\t\t\n\t\t\tsetParent ..;\n\t\t\t\n\t\n\ttabLayout -edit -tabLabel RRM_ProxySteps \"Setup Proxies\" /*-tabLabel RRM_EditProxy \"Modify Proxies\"*/ -tabLabel RRM_RigSteps \"Generate Rig\" -tabLabel RRM_RigExtras \"Extras\" $tabs;\n\n\t\tint $top, $left, $value[2];\n\t\t$value = `scrollLayout -query -scrollAreaValue addModScrollLayout`;\n\t\t$top = $value[0];\n\t\t$left = $value[1];\n}\n\n\n//MAIN PROCEDURE FOR WINDOW\nglobal proc RapidRig_Modular()                                        \n{\n\tif (`window -exists RRM_Window`) \n\t{\n\t\tdeleteUI RRM_Window; \n\t}\n\twindow -title \"Rapid Rig: Modular 1.4.4\"\n\t\t-wh 375 212\n\t\t-rtf on\n\t\t-mnb false\n\t\t-mxb false\n\t\t-s 1\n\t\tRRM_Window;\n\t\n\tRRM_CreateProxyMainGUI();\n\t\n\tshowWindow RRM_Window;\n\twindow -e -w 375 -h 212 RRM_Window;\n}\n\nRapidRig_Modular();\n" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "//This is where the new code starts\n\n//Duplicagtes Pelvis\n\nselect -r Spine_Pelvis_FK ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nDuplicate;\n\n//Scales Curves\n\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nscale -r 1.1679 1.1679 1.1679 ;\n\n//\nFreezeTransformations;\n\n//Delete extra curves\nselect -r Spine_Pelvis_FK1|Spine_middlenullFK|Spine_Middle_FK ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nselect -tgl Spine_Pelvis_FK1|Spine_middlenullFK|Spine_Middle_FK|Spine_torsonullIFK|Spine_Torso_FK ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\ndoDelete;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\n\n// Renames Pelvis to base\n\nselect -r Spine_Pelvis_FK1 ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nrename \"Spine_Pelvis_FK1\" \"Spine_Base_FK\";\n// Result: Spine_Base_FK // \nstatusLineUpdateInputField;\n\n//Parenting controls\n//Pelvis to Base\n\nselect -r Spine_Pelvis_FK ;\nselectKey -clear ;\n// Result: 0 // \nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nparent Spine_Pelvis_FK Spine_Base_FK ;\n\n//Middle to base\n\nselect -r Spine_Pelvis_FK|Spine_middlenullFK ;\nselectKey -clear ;\n// Result: 0 // \nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nparent Spine_Pelvis_FK|Spine_middlenullFK Spine_Base_FK ;\n// This is where the new code ends\n\n" 
        -enableBackground 0
        -align "center" 
        -label "//This is where the new code starts\n\n//Duplicagtes Pelvis\n\nselec..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "FKHips" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//This is where the new code starts\n\n//Duplicagtes Pelvis\n\nselect -r Spine_Pelvis_FK ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nDuplicate;\n\n//Scales Curves\n\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nscale -r 1.1679 1.1679 1.1679 ;\n\n//\nFreezeTransformations;\n\n//Delete extra curves\nselect -r Spine_Pelvis_FK1|Spine_middlenullFK|Spine_Middle_FK ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nselect -tgl Spine_Pelvis_FK1|Spine_middlenullFK|Spine_Middle_FK|Spine_torsonullIFK|Spine_Torso_FK ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\ndoDelete;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\n\n// Renames Pelvis to base\n\nselect -r Spine_Pelvis_FK1 ;\nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nrename \"Spine_Pelvis_FK1\" \"Spine_Base_FK\";\n// Result: Spine_Base_FK // \nstatusLineUpdateInputField;\n\n//Parenting controls\n//Pelvis to Base\n\nselect -r Spine_Pelvis_FK ;\nselectKey -clear ;\n// Result: 0 // \nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nparent Spine_Pelvis_FK Spine_Base_FK ;\n\n//Middle to base\n\nselect -r Spine_Pelvis_FK|Spine_middlenullFK ;\nselectKey -clear ;\n// Result: 0 // \nautoUpdateAttrEd;\nupdateAnimLayerEditor(\"AnimLayerTab\");\nstatusLineUpdateInputField;\nparent Spine_Pelvis_FK|Spine_middlenullFK Spine_Base_FK ;\n// This is where the new code ends\n\n" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "// ik constraint script v1.3\n\n//group left ik control, group right ik control\n    group -n LeftArm_Arm_IK_CONSTRAINT LeftArm_Arm_IK;\n\n    group -n RightArm_Arm_IK_CONSTRAINT RightArm_Arm_IK;\n\n//snap new group pivots to head control pivot\n\n    float $headPivot[] = `xform -q -ws -sp Head_FK`;\n\n    xform -ws -piv $headPivot[0] $headPivot[1] $headPivot[2] LeftArm_Arm_IK_CONSTRAINT;\n    xform -ws -piv $headPivot[0] $headPivot[1] $headPivot[2] RightArm_Arm_IK_CONSTRAINT;\n\n//contraints\n    select -cl  ;\n    select -r Character ;\n    select -add  Head_joint3 ;\n    select -add Spine_joint7 ; //chest\n    select -add Spine_joint2 ; //hip\n    select -add LeftArm_Arm_IK_CONSTRAINT ;\n    doCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n    parentConstraint -mo -weight 1;\n\n    select -cl  ;\n    select -r Character ;\n    select -add  Head_joint3 ;\n    select -add Spine_joint7 ;\n    select -add Spine_joint2 ;\n    select -add RightArm_Arm_IK_CONSTRAINT ;\n    doCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n    parentConstraint -mo -weight 1;\n\n//add contraint options to controls\n    addAttr -ln \"ikConstraint\"  -at \"enum\" -en \"World:Hips:Head:Chest:\"  LeftArm_Arm_IK;\n    setAttr -e-keyable true LeftArm_Arm_IK.ikConstraint;\n\n    addAttr -ln \"ikConstraint\"  -at \"enum\" -en \"World:Hips:Head:Chest:\"  RightArm_Arm_IK;\n    setAttr -e-keyable true RightArm_Arm_IK.ikConstraint;\n\n//set driven keys\n    // left world\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n    //left head\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 2;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n     //left hips\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n    \n     //left chest\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 3;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n    \n    \n\n    // right world\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n    //right head\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 2;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n     //right hips\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n    \n     //right chest\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 3;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n//set back to world\nsetAttr \"LeftArm_Arm_IK.ikConstraint\" 0;\nsetAttr \"RightArm_Arm_IK.ikConstraint\" 0;\nselect -cl  ;\n" 
        -enableBackground 0
        -align "center" 
        -label "// ik constraint script v1.3\n\n//group left ik control, group rig..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "HandPar" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// ik constraint script v1.3\n\n//group left ik control, group right ik control\n    group -n LeftArm_Arm_IK_CONSTRAINT LeftArm_Arm_IK;\n\n    group -n RightArm_Arm_IK_CONSTRAINT RightArm_Arm_IK;\n\n//snap new group pivots to head control pivot\n\n    float $headPivot[] = `xform -q -ws -sp Head_FK`;\n\n    xform -ws -piv $headPivot[0] $headPivot[1] $headPivot[2] LeftArm_Arm_IK_CONSTRAINT;\n    xform -ws -piv $headPivot[0] $headPivot[1] $headPivot[2] RightArm_Arm_IK_CONSTRAINT;\n\n//contraints\n    select -cl  ;\n    select -r Character ;\n    select -add  Head_joint3 ;\n    select -add Spine_joint7 ; //chest\n    select -add Spine_joint2 ; //hip\n    select -add LeftArm_Arm_IK_CONSTRAINT ;\n    doCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n    parentConstraint -mo -weight 1;\n\n    select -cl  ;\n    select -r Character ;\n    select -add  Head_joint3 ;\n    select -add Spine_joint7 ;\n    select -add Spine_joint2 ;\n    select -add RightArm_Arm_IK_CONSTRAINT ;\n    doCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n    parentConstraint -mo -weight 1;\n\n//add contraint options to controls\n    addAttr -ln \"ikConstraint\"  -at \"enum\" -en \"World:Hips:Head:Chest:\"  LeftArm_Arm_IK;\n    setAttr -e-keyable true LeftArm_Arm_IK.ikConstraint;\n\n    addAttr -ln \"ikConstraint\"  -at \"enum\" -en \"World:Hips:Head:Chest:\"  RightArm_Arm_IK;\n    setAttr -e-keyable true RightArm_Arm_IK.ikConstraint;\n\n//set driven keys\n    // left world\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n    //left head\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 2;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n     //left hips\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n    \n     //left chest\n    setAttr \"LeftArm_Arm_IK.ikConstraint\" 3;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 1;\n    setAttr \"LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver LeftArm_Arm_IK.ikConstraint LeftArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n    \n    \n\n    // right world\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n    //right head\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 2;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n     //right hips\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n    \n     //right chest\n    setAttr \"RightArm_Arm_IK.ikConstraint\" 3;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1\" 0;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2\" 1;\n    setAttr \"RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3\" 0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.CharacterW0;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Head_joint3W1;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint7W2;\n    setDrivenKeyframe -currentDriver RightArm_Arm_IK.ikConstraint RightArm_Arm_IK_CONSTRAINT_parentConstraint1.Spine_joint2W3;\n\n//set back to world\nsetAttr \"LeftArm_Arm_IK.ikConstraint\" 0;\nsetAttr \"RightArm_Arm_IK.ikConstraint\" 0;\nselect -cl  ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\n// Code start\n\n//Center Pivot on recompensate\nmove 0.952149 -0.0719001 -0.24603 LeftLeg_recompensate.scalePivot LeftLeg_recompensate.rotatePivot ;\nmove -0.952149 -0.0719001 -0.24603 RightLeg_recompensate.scalePivot RightLeg_recompensate.rotatePivot ;\n\n//Center Pivot on Leg IK\nmove -0.952149 -0.0719001 -0.24603 RightLeg_IK.scalePivot RightLeg_IK.rotatePivot ;\nmove 0.952149 -0.0719001 -0.24603 LeftLeg_IK.scalePivot LeftLeg_IK.rotatePivot ;\n\n//Scale recomp to float\nsetAttr \"RightLeg_recompensate.scaleZ\" 1.128;\nsetAttr \"RightLeg_recompensate.scaleX\" 1.128;\nsetAttr \"RightLeg_recompensate.scaleY\" 1.128;\n\nsetAttr \"LeftLeg_recompensate.scaleZ\" 1.128;\nsetAttr \"LeftLeg_recompensate.scaleX\" 1.128;\nsetAttr \"LeftLeg_recompensate.scaleY\" 1.128;\n\n//Scale Leg IK to 1\n\nsetAttr \"RightLeg_IK.scaleZ\" 1;\nsetAttr \"RightLeg_IK.scaleX\" 1;\nsetAttr \"RightLeg_IK.scaleY\" 1;\n\nsetAttr \"LeftLeg_IK.scaleZ\" 1;\nsetAttr \"LeftLeg_IK.scaleX\" 1;\nsetAttr \"LeftLeg_IK.scaleY\" 1;\n\n// Code end\n\n" 
        -enableBackground 0
        -align "center" 
        -label "\n// Code start\n\n//Center Pivot on recompensate\nmove 0.952149 -0...." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Feet" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\n// Code start\n\n//Center Pivot on recompensate\nmove 0.952149 -0.0719001 -0.24603 LeftLeg_recompensate.scalePivot LeftLeg_recompensate.rotatePivot ;\nmove -0.952149 -0.0719001 -0.24603 RightLeg_recompensate.scalePivot RightLeg_recompensate.rotatePivot ;\n\n//Center Pivot on Leg IK\nmove -0.952149 -0.0719001 -0.24603 RightLeg_IK.scalePivot RightLeg_IK.rotatePivot ;\nmove 0.952149 -0.0719001 -0.24603 LeftLeg_IK.scalePivot LeftLeg_IK.rotatePivot ;\n\n//Scale recomp to float\nsetAttr \"RightLeg_recompensate.scaleZ\" .716;\nsetAttr \"RightLeg_recompensate.scaleX\" .716;\nsetAttr \"RightLeg_recompensate.scaleY\" .716;\n\nsetAttr \"LeftLeg_recompensate.scaleZ\" .716;\nsetAttr \"LeftLeg_recompensate.scaleX\" .716;\nsetAttr \"LeftLeg_recompensate.scaleY\" .716;\n\n//Scale Leg IK to 1\n\nsetAttr \"RightLeg_IK.scaleZ\" 1;\nsetAttr \"RightLeg_IK.scaleX\" 1;\nsetAttr \"RightLeg_IK.scaleY\" 1;\n\nsetAttr \"LeftLeg_IK.scaleZ\" 1;\nsetAttr \"LeftLeg_IK.scaleX\" 1;\nsetAttr \"LeftLeg_IK.scaleY\" 1;\n\n// Code end\n\n" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "group; xform -os -piv 0 0 0;\nCenterPivot;" 
        -enableBackground 0
        -align "center" 
        -label "group; xform -os -piv 0 0 0;\nCenterPivot;" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "GrpPiv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "group; xform -os -piv 0 0 0;\nCenterPivot;" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "djRivet" 
        -enableBackground 0
        -align "center" 
        -label "djRivet" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Rivot" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source djRivet.mel; djRivet;" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "string $selSet[] = `ls -sl`;\nstring $lattice = $selSet[0];\nstring $object = $selSet[1];\nlattice -e -g $object $lattice;" 
        -enableBackground 0
        -align "center" 
        -label "string $selSet[] = `ls -sl`;\nstring $lattice = $selSet[0];\nstrin..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Latt" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $selSet[] = `ls -sl`;\nstring $lattice = $selSet[0];\nstring $object = $selSet[1];\nlattice -e -g $object $lattice;" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\nimport sk_attrShift as skattr\nskattr.sk_attrShiftUI()" 
        -enableBackground 0
        -align "center" 
        -label "\nimport sk_attrShift as skattr\nskattr.sk_attrShiftUI()" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Attr" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\nimport sk_attrShift as skattr\nskattr.sk_attrShiftUI()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "czDisplayColorOverrideUI" 
        -enableBackground 0
        -align "center" 
        -label "czDisplayColorOverrideUI" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "Color" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "czDisplayColorOverrideUI" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 32
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import studioLibrary\nstudioLibrary.main()" 
        -enableBackground 0
        -align "center" 
        -label "import studioLibrary\nstudioLibrary.main()" 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel "StuLib" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -image1 "G:/1_Long Winter Studios/Media/LWS Logo/Logo_Shelf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import studioLibrary\nstudioLibrary.main()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "SculptInbetweenEditor" 
        -enableBackground 0
        -align "center" 
        -label "SculptInbetweenEditor" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "dslSieIcon.xpm" 
        -image1 "dslSieIcon.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import dslSculptInbetweenEditor as dslSie\ncreate = dslSie.SculptInbetweenEditor()\ncreate.ui()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Start ngSkinTools" 
        -enableBackground 0
        -align "center" 
        -label "start ngSkinTools" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "skin.png" 
        -image1 "skin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from ngSkinTools.ui.mainwindow import MainWindow\nMainWindow.open()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "GoZ" 
        -enableBackground 0
        -align "center" 
        -label "GoZ" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/Users/Public/Pixologic/GoZApps/Maya/GoZBrush.xpm" 
        -image1 "C:/Users/Public/Pixologic/GoZApps/Maya/GoZBrush.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"C:/Users/Public/Pixologic/GoZApps/Maya/GoZBrushFromMaya.mel\"\n" 
        -sourceType "mel" 
        -commandRepeatable 1
    ;

} 
